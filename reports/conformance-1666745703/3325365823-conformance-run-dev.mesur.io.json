{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "b310f4b7-a6a2-4985-a88c-b00008c68ce0",
        "name": "Clear Cache",
        "item": [
          {
            "id": "75cb51de-4803-46ed-b3b3-e8bbd1ec9f1f",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b80312bd-e133-450d-a667-ae62945ef4a8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "9e51fb60-e34e-4614-b7d8-872284f5946c"
                }
              }
            ]
          },
          {
            "id": "6e77662b-cfb8-452d-a205-0b57a00f4379",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8843c390-1c35-4502-b32d-20f416e1d6da",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "03910ba1-2f27-4d6f-8590-ef75c301dde4"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "772a577d-6364-4c20-83c2-71e107eeae65",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "6cdfe101-34dc-4b37-94a3-820d42708c5e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "04a2e98c-514d-4d4d-9189-670b3dbb4fe2",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "53ff189f-b279-4f0b-84f6-37eb9bd849a9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a894b5d7-b753-4606-a3e2-d295996de887"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7001d665-aa21-431a-a178-bbf297cc8e35",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "04d99d41-0b57-410e-bd06-70db7599513c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c012b121-b086-45db-8f7b-3160d245305a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b8605edd-db8f-47d3-acad-80a54baac7d2"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a84fc4ad-a1b2-42f4-9167-32a2199833c6",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "f8200bd7-8c4b-4a20-b43a-3f1ca93122d9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1285641f-1f33-4c12-ae4b-5b946658b99e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2b5301ea-62f3-4ae8-8108-32e8b2f256a2"
            }
          }
        ]
      },
      {
        "id": "11741a0a-6f42-4a5e-8e71-4cc504c64877",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "cd47cfa3-9af4-43ca-ae8a-dd320d7ae782",
            "name": "Negative Testing",
            "item": [
              {
                "id": "387ba556-a788-4091-8698-4ca8c97d9839",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "631cb981-8b6d-4d90-ad05-e5ee071fa30a",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "272ad03e-9716-490f-b072-9073e05f86a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6616f882-90d1-41b0-932f-9082003b1504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50ef2a9b-e15c-482f-8118-e8089c8282f5",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "424ebf6b-b338-492b-9725-edd54ab130ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "91485ab5-2e83-480f-9863-8a3f1faba24e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34975eeb-35df-4655-9fe7-12be10a32ce2",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a705695-8b74-40dd-af4d-b70bb95f0537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "56ce8580-8ba8-4915-9f80-d245691c06b0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "46651b53-126c-4cd0-9ef0-1c8c4045488d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f25565ee-cdb8-4d13-a09d-b22f8561f0ef",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c3eaeca-fd51-4d43-a3b3-b9e75a83eb08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b0fe7511-c1fd-4848-af39-69e173276ad4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7373197b-1354-488c-ba1e-e0950d392fc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82b37926-5fd5-4a25-a1f9-b29e200c60c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b49f7804-9cc7-47bf-aa72-d27e26fd8bb4",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c19a4604-0f54-4cf1-8774-d9114f7b2239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ef2abe7e-db9d-4c7f-aca0-a0e2463d0544"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c7e251d-44e0-48dd-bc47-f29cddd4ffe6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "376d4238-64b2-4d4e-a654-2ef33c4cb5d0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "36bcae7e-91a6-45e5-82ae-2e5395d12981",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4dbc266f-d638-429b-aec9-f291833080f9",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "49c40ccd-e866-4d39-88f6-d24a7073aa7d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "e4692d3d-6c86-452d-a1bd-d11fc767412e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d1e719a5-b918-4b1d-a8e7-5d7072d09e60",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "7152ed4c-02b4-420f-a754-fc3c5297e38f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6b40dc6a-6f77-4507-9dd2-c242406b17b0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6acebca8-7069-4b85-ad76-0f0762bfc30d"
            }
          }
        ]
      },
      {
        "id": "80a3595f-4ab9-4007-b63d-5791ba3adcfb",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "edcf1713-b992-4308-8bff-3e94ee8193ea",
            "name": "Negative Testing",
            "item": [
              {
                "id": "da56e9ed-e143-4aef-83a4-200359709587",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "f26533be-c924-4699-a83a-d4cadd497b27",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91758dc4-27d7-4219-90dc-e4147411482c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1135b700-bebb-48e0-aa97-448a9e528d9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae65e1ea-122d-4e60-ab12-72b41b31d337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bafa16b1-cc50-445b-bf2e-1c1ebd93e0ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04493f12-be88-4e1a-b88a-e398801503f5",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3bb764d-342a-4365-8bbd-424b96a8fc3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5be4522a-befb-4d03-bccc-42a1986b3310"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a7fed82-a801-4b82-8beb-7a9a9b65d72e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4d2fb198-0e25-41f5-958e-1b7f98b2eeb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5d91237-d6e9-49df-a74d-d322c7c0df52",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99da96c7-e1c2-48c5-bbc4-2608fe420770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc5258b2-f015-42ca-a35e-fcba7b316f21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e373ed98-fb51-4a86-a2cd-83d96b892ad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eaf67365-6630-45fd-9cf2-00df9d4fb494"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de5b9b88-c931-4542-8821-015a62a3e86a",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95ef5d2a-050e-4c7c-a7e4-1f391a319c3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af0c15e3-26f9-4dbc-b6df-9f6e9e6694b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00593482-d215-489c-8fa2-099cfb281274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3427f583-253c-453d-9f6e-c0f05404e6ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fbed2e7-a556-45d4-8310-65476bde498a",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad4020fb-fb95-4c77-ab00-519b05af29f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00e6bbc5-24ef-42cf-ab85-7b8c24b065a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8f8f91b-19d9-44f9-80a7-b1ae9ac6587a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d1edea33-05a7-46b7-bbd5-16c8349b0de3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ff8d59a-fa50-42af-9441-ce05e5c95f51",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1221fca4-ad13-4ecc-99c0-ffffa5d24521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a60d69b-8f8b-4ac2-9ce3-456dac655568"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "128762bc-f62b-438f-bf28-f04d3c20ed60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a164b768-64a9-412c-9a4b-354366d142da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c161cc2-72da-4e91-a29f-c7ac1d89fe4e",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84ba3959-feb9-46ad-94c5-662f464d87b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85ba1dd0-6a70-43cc-9b24-37f8fa8e903f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "739dc488-54f5-4ee9-b550-c29a23ed32fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "76fe802f-a36a-4bc9-8cc2-7c4dcac34605"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4c42c99-d36e-4f9b-8e3c-a0664174c71f",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8447837b-b613-4860-a08d-27ba05c4c8cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8583dee-e9bc-41ad-98fa-82f4b2dfdb20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a7f03d3-0c5f-4042-b3d0-42dc53d323b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c9c959de-986e-434a-9ad8-d200a3cf9acd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49bf71b9-b982-4202-b44b-3d51dc8b5dc6",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4812449-bc3c-47b7-87d1-9b7eb352a1c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ecc0159-433b-44c6-bfa0-1d07ec0fe606"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c0b3b10-941e-41db-b263-5420ed739bc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5b94f1f8-a2c2-4b9d-90e0-6bc1ea682701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fadcd323-cec0-4edd-84cb-fa31c465a49d",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f01f2c93-6296-4b98-9c9f-7990c02f52b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "854f57a5-30d8-4777-a0c8-df3fabb02d07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ed313d7-c700-4321-84c7-9372a9b1c3a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9b525e00-5ccf-4856-8299-bd26a3aec5eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35679fb6-8aba-4f39-bd5f-260a76c249c2",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e073dad2-1355-4bc9-a15d-ce224c408411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0f433a4-2a55-48b4-9506-2dd692a74329"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cf4a6d2-d7f7-45cf-aaa7-973fb1dd8674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3b847bd8-4bb4-4a1c-a49d-145e4474a158"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fca45a4-cb59-4d61-84a5-345e17f9c1b0",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d69bc67-f528-49a2-8855-9919873d540f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc1ae903-ced2-477f-8d67-ceefd685f912"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40648f76-d963-41d2-816a-a2c19351d146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e5fee3e5-c661-4053-a0ab-cbaf8949a7e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d120e60e-a8f6-441f-b725-b2c8f55f495e",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ff8c359-1f7e-4ae2-873c-2621072c2199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cf3afa3-bc22-42ba-b203-4f0c4a60a4c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a779487-5453-4b29-9543-bcb6dd7e8592",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5ddf65b7-954e-4a8f-a05d-ccd99a6d9740"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9ff50b3-e6d2-4881-a77c-360b41848eff",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1db6f99a-e8f6-4d84-95f3-8a605ef124ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfb2ed07-debc-4416-a594-b8ef6842f2e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9d2c8c9-b9a6-4512-b4d2-cc20660c36cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c72bb610-ed08-4fb7-b6ab-ca897373549f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9333c44-94b5-491f-b4a5-1cd1e26efbcd",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5ca1aca-2931-446b-8f0b-a6d0e457583c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1d53cd3-ef82-4630-bbb2-13ae2e517498"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "886b878d-7545-4337-b6c1-8570f4d54ffd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "53d2490a-4125-4aa9-b0f1-5a318df74bdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64800618-6fcb-4d75-9653-1c1f598d09b3",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c39a642-1fc9-45fc-bf71-9972b27f5c4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b675b23e-421e-4ea0-88bd-93a9dbf1e5d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f39131b-21ea-4e2f-b729-16b3b9b8117a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "094f4f2c-b46b-4cdb-9108-fc194c75a608"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8305f93c-be98-45fe-8c19-4f65810e1a72",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50fb876f-1e1c-4714-b5e9-724565a28687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b37c254c-7ca5-408a-823e-b6bcb7aa9963"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a52fbe71-0218-4d67-b488-3863b28e4713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e3e4a8d6-1973-4da6-b0e2-19ada39c5633"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ba4084b-2111-4f64-8e3d-2c642e7a454a",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5da24c93-2634-49f3-bbf4-615388763ca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb59271f-6796-485f-8229-95c900e136cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d235caf-2df6-45f5-b1a6-c3cc4d94173d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "86516efe-588c-4dfc-9e9d-1bbf138afc3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51ae11fd-4298-40b9-8256-9cc10c0613cc",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28420f5a-afb5-4cac-8354-1bf1ca6e6df0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6bf1577-438d-43a9-a141-36ff70908faf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8a6e574-790e-4184-bc74-2d1a63ebb608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0c1e19c-a7a6-48ec-93bb-4fc759fcdbdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dd1a1e3-ff48-4cce-b26d-b6e59df17729",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f57d83de-9817-408c-b154-7fb7eef41871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b5c1ce6-e0db-4044-ab1c-95ac0ea69362"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0606ea51-8f56-4107-8ecd-6afb546dda45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a863bbea-e9a8-4082-a3ac-edfcdb10837f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0989776-ed7d-4d34-bd99-64bc980fca6e",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3808171b-d1cb-4c8e-afb8-f2c555e02d12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b233caf-e09f-422b-a204-a3a148d7acc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fc40085-7d7f-473b-adc3-8e3b8111de9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "34645a00-b70e-42d9-bc77-57ad8f8294f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e20f9287-1e37-4788-86df-ada704534d65",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "253744e2-5aec-4241-a272-fa3ea6bc79d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bf50371-6420-429f-b383-c892b665bde0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6eb2c49-1709-439b-9291-81c8033db6ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "601dae20-35ed-4635-bde1-d0342bc2ae26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8124e731-bf78-4d90-9916-876a473844a4",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1baf3919-ba7c-4935-8302-1a9320424faf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f13af969-30ce-4bc7-8753-f7f89e85aaef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a48ae81e-fae1-4ede-a43f-f54d623d8614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5443ebc7-5b44-4b47-b0f3-4827a6b78c92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "623db153-d17c-479f-903b-5af840b26683",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae9e7693-8aab-4913-a859-52529b5c4466",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc512fa1-5482-423e-b71b-26a7fe76adef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad033279-da8c-40a1-b45e-1afcd9e8a4e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e040404-38e1-40e4-91ec-b17af3bb04f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42edf743-38d4-4186-bd6b-6c1371d357c8",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe42bcf2-f070-46e5-ade0-c4f12cddb813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5358618f-23f8-4a87-8e34-759b9e443977"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca9969ba-8406-4e56-ae50-215413440b6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8de05c63-4523-488d-9add-318936b4081b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89a92be5-7f2c-4a7c-a960-a2088b6a4138",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c82c235f-d920-447d-8115-79b8f2a97e67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07647058-b4ed-4bcd-9602-587d98d55b4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f7c6bad-168e-4f7d-ba8c-5029178271d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7ba2810-8b3d-4a30-894e-7c9658e8c6ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76ce62a6-2871-4b2b-be69-514b21772077",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8b613fb-585a-4575-950d-09fa6a169394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8957909b-48b7-495c-b66a-ed89c2ca6000"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a80d97c3-4fda-487a-b582-cf7cacd7d7a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9aba6497-3088-4b25-9a42-919962937121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84d25f7c-41aa-42c2-bb30-5cf915959938",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c1bc5b0-ffd3-4a92-b476-3e6c339fcafd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "799ca84a-c6ba-4df1-976f-97c1e5297a50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a18af4f-555f-4bf5-af61-4b7c9b9c20d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9618555f-1bb7-4eeb-8d6a-9fb45be3474d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "739bda29-59ed-47bd-a721-74199405f154",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce5daa24-8bf8-4403-be5c-9d73358981ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39f95680-8ec4-4964-b2b4-100e3bbc1211"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5df23cec-915b-4844-87e8-7d9cc5bf195d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "67a52428-47e9-42bb-95ab-f208f81eface"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8023387b-499c-486d-87cc-d639b04d56b4",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68709d93-8b92-4742-a5f2-1abb08f8d389",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb10b1d5-7726-4484-9ee4-a8790366d292"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55a20848-9d6a-4d37-adc0-a5f5fc3e8b15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "c68c40ca-6786-41e8-b774-abcd73b06d3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b03bb9b3-37de-4da2-ba7c-ecc4edf14e10",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f1988e8-8dc0-4375-ad48-3a57c248f071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d298587a-c02a-47a3-91ff-da25ef1b52d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ab7bc8a-7608-405b-bfef-aa4bc9f81702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d683a888-ab6f-4e40-8cf5-6cdc144b9b58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1486cd6a-d7d0-4324-9096-3210f09aa858",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d079d1f0-f1d6-4fdb-95fc-d7bd08b0d746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "891edbc0-a1c9-4b35-8fd9-b464d9de634d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61146f5b-90a2-4bb7-80c8-c9a87a3489ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0262e095-7d23-4dae-8201-c742f22bd921"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e0a5612-c3e6-406b-9af6-7d5d0081c20d",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40e3c09a-385e-4d53-a87c-4a20fc8f32ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0fcbe0b-5fef-4b5d-a0f2-74a59e0a5e4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df849d9d-0f86-4289-8a17-ca3375a1dc52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb33f8fa-efca-412d-885c-0b15b83bda7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9566ccc7-20a5-4e29-9f56-6993575db856",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2635801b-bba5-4284-9937-64be3f129f05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86e8ae72-050d-48c8-808c-a64a3c5efe21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69119b0c-91d0-401e-9a49-e276f5512344",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac6a896a-6317-4dc9-a665-aac70d20fd1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3fba540-1b5e-4de7-81b9-4ccd398330df",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49b2d70d-f4e0-44ac-8177-8e4ee717a52c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07310381-47aa-411b-b1ef-e6c61e6fe247"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd8bc673-10f8-4692-b533-6210fc6eed4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "5c3a4703-f8e1-42a7-851d-2c24c54e1d22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8f416c6-18e9-44ea-923c-a32872d0227a",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdd0f594-ee72-4aa1-901d-1e1aa21bb6fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "edd691ce-8d03-48f5-8c02-6dda348ddee1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c2dc007-6051-47e9-a0c6-02e6c4a55743",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0f346986-a873-477a-b98a-3206c160b557"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b271b46-74d5-4c73-a06c-7a109635a28c",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd02534d-d795-4405-a365-fb584fffe097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a912b02-dddc-43d9-86ed-969fc503c949"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98778e85-5d96-4e60-8094-00fa481b2f29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "45a7119c-c051-499d-91cc-ec30ebd705d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14c61287-2e2a-4f9e-aea3-725bc3dfcfb6",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "552f8127-c653-458f-8363-7bce3d98e6f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad3544f7-ae83-4dfa-ab55-0c5d8b6362b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "474d81d0-1d29-4cda-b5f7-995448b2fdc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d771c45d-1613-457e-b61d-01c05f937903"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3299914-ebcc-4170-9cb2-a6ac0887081b",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e76feb86-7418-4b91-b3b1-feb1f34285d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14dd9a74-e182-422a-985e-eebf08842ff9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee3932f6-723b-4593-99c2-222ef7a67b19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a234e99-1e7e-4baf-88c1-30e8388b1082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2751acab-8065-4617-bb3a-83daf64157f4",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "351b1bd4-aa8d-4bc8-b0cc-b54256e1c1ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "589da9d1-6776-49e9-9757-3e17cfee679b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c42044c5-e490-4502-a0dd-78cab54be951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c80c5578-2575-4f93-9932-67600b693040"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76622443-d0ac-4f74-a34d-7b43c6992154",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff9ad90f-b834-436c-a7de-a53eb9454a9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edb67ace-237d-401b-9c33-28b23242f458"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3331b65d-4fb3-4fea-86b3-bceba9c1567f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6f68bd0a-4533-4f72-adec-c114b0884106"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec932c9c-7ae4-4f93-841f-353a41027212",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef4c92eb-ca95-4f40-8988-d657f7b9d0a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53c908a4-e455-4da3-ab0a-2eb2a9f85290"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de8c6f0f-4728-4967-a4a1-9bf7dd28ef33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "81602b12-6bec-45e4-9b23-35ca57cd3b48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fcdfcb1-7894-4c43-8b56-ba0efeeef718",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c933383-d4c6-4c4d-8fa1-be8a50a74677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b4db42f-6c93-4677-a32b-4da68c1a638c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8d0dc9a-5cc3-4494-809b-c19f4e6d39ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b0b0520-fb60-4385-94e4-9f94693359d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f31129f-973e-48c3-a13b-f2b369187e49",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "024dca61-4897-4989-aec0-2659bfcd3824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6d0d06c-767c-4df3-b49b-a93d1209e926"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5024123-36bf-4d25-8295-171735dd4df6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "6961507e-6d96-4014-9b37-f20ac025fdff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d85f643-5eb5-43c8-8632-3ce165e5f590",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "deb85ed8-2d19-4e63-9d4a-cc95e19236ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c618cf9-fd51-4d24-b6cf-1432bdb80dfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9118614-911c-4ad1-9936-3c60e820ac49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2fb183d2-2d15-40f6-8866-127b8852a262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36cb25c5-5f19-4596-894d-b6e5840574b2",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5706f831-24d0-451d-a970-9a7dd614a13b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "536b7f4f-84aa-4beb-b5c9-4e2e661c4d8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f98d180a-61fe-4c09-969c-1e08aaa1273e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "04d896bb-66b1-4e57-912a-6c4765fb823e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46d72688-08eb-4de1-9abd-9b4286984b14",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fcbe127-c1be-41a4-9102-d58b7d79308f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad2cbd50-2202-4688-886a-2696b8c6215f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e668850f-69f3-4c2b-a746-fc0f243df2f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d82138dd-91ae-4ba8-99f5-6593f8b54765"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e731330b-20ce-4e09-b455-108b4a598cb9",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15dc7364-97cd-4146-b238-9de0baabd201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23a33834-211f-4666-83a9-5e5588b703c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a47cb725-a789-41d2-9db9-f60f5952ca51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "758cc8fc-004d-436e-ba44-d107cd611808"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aee0e08-393c-40bf-8fce-f439cc88aee1",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7933482c-3759-4ac9-951b-de1922695be4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d69ce4ae-1dd4-45ee-afe7-5b9573141be7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87094c75-015d-4a00-b170-c561e882597f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc1a6c4f-04a9-4a3c-ae96-6786b8139d06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f53296d0-7c3a-4d5e-ad78-c8b953bf8bfa",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86ca3467-c96d-4166-bf2e-5957a3121b6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cf016c9-f4dc-448a-b830-46b80d10a24e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdec27fb-6207-4953-aa6b-b74b4130dadf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2c3abeec-893f-4127-8c2f-bee38b64cfc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8403477-2d04-4d72-a91a-660a183bb5a7",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3626a402-7966-45a4-acd6-8dd9eb1f2c8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6290db64-3267-46e8-92b8-3fd700aa8cbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c825d6f-267b-42c0-ad86-dd7d7a3bed35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "86bc7d04-4f3a-4779-8881-7ee0ca167bc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e11f0198-928d-407a-8e7f-ad53d06a27a8",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a936ccd-c875-46d1-8f8f-587a90f20860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7472afe-d887-4d5a-8af5-ca7d8ae2d398"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "862b2206-c3e7-4753-b9fc-7ccc4365b7b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "52134fb6-a191-490a-9ae4-21fa7313fe10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a94ea1b-8f1f-48a2-b839-62b8b03e2dac",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff0f15b1-91eb-42b5-9f1d-3e7333121556",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb1f129c-7bcb-48b0-be05-d4f3f93bab1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "223d77a6-7024-4af2-b3f5-9e98e62c1308",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5861d462-fbfe-4efd-a710-1634f3eb2a33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "353eca2c-42b1-480d-aa0c-832efe42390d",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a639ca8c-ecf2-4fcf-ad5b-4a93bf1e0fc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b41ccb9-50e8-4958-ad55-356f3b1007b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf760fd9-0371-4377-8b75-f3083bd9e824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "90d5ff2b-cc2d-419f-be43-50f4893f01f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc85e230-b287-450b-987a-3a2436febdfc",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e21c1c5a-e6da-4da7-af95-df06cb9f4a3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4336568-4de5-4af9-b4d2-a71e2ef42329"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81d8a1bf-36bf-40be-b96c-92f65e88b547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "de143fed-067e-4d1a-8caa-322b3a5c7831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f25ef1f-742a-4340-b9d5-02820426027c",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82ae394d-2f61-442b-946c-91a000ecb179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e42d2aa3-3a4a-41bc-aa04-cd3afb72adcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17b2dba1-13bb-4433-a1ca-d5bfe1a0eed2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "3c6d3e82-0b31-42c7-8e28-85e6729c713b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e46fe62-9c43-4e7d-8fc2-62ed6a849a4c",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0dc1974-0e03-40a8-998e-f484b66b3e8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb9a3a26-1e5f-425c-91a0-9887cd14aaef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21b55b12-3167-4abe-8914-28dd64f8931e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "af33662b-cffc-40b9-a8f9-2bb14afc2410"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f92ab574-adc3-4e6f-b644-5474e073b665",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8e38755-c609-4dd8-9087-e3bfc597fb0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e129cb2c-6c10-4a6f-8713-0bb1c0001783"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73cf175c-6838-4a6b-9d21-be377fc7eada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6f9b13a0-f71e-4ab1-a675-8ecd8506add8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4ae6d3b-7551-4229-b851-cf3362da750d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93eae8e7-2be4-4a4b-a1db-f96fa383376b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77180c2f-3c35-41e2-95fd-0a537c188c19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "967345ef-8918-4ddc-a990-747072996060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "20330cf5-df46-4081-a968-1ab2aeeeb480"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acedb7a7-ab41-4a1d-9e0c-cda92654578b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27cc1c48-be34-416b-b94e-c9df45f57e17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bca42043-c89b-4d59-a330-55aa1c99fabc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb2bd287-f26a-4ff7-a720-a91762baeadf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8a3bbcf6-0f95-4415-a8ee-80205582b355"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1785d151-b79c-45a0-8d4e-88d507d9ca56",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d31a063-54e7-404b-8a8c-eabc4ec9da42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8490d08c-c1ea-4030-b3d0-d68a3fdbf7a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94cf020f-9834-4e92-8578-710f40d3661d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "db589f83-1dbf-4851-9920-9f8c067f58eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce7fa545-f88e-4c3c-969d-b74df1bf8ff9",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "184dcfc9-abf1-4550-b457-23ce4c758cfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03aaa565-d750-40cb-9a78-ee7dbaf71455"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c141f79f-0ca0-40fe-a19c-372affd673fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "50dd31cf-34d0-4078-9a1d-429a1e190f68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "515ccd9f-7e63-4cd0-a08f-affbf0d01ab6",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17580bc8-6f5c-4c2d-892b-5edf85715c4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4666af31-e67f-422c-bd9b-6ed086445d57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf8bddae-4b9c-476d-a8a6-3c3c60420287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6ba206a-e70a-4a78-a83c-f13cf455a1b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebf0d8c9-0d35-4360-8a38-34af6169761c",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40fe6245-9689-41db-bbf8-951d02be3b71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f2c0dda-4d16-4d7f-a78c-4d762bc5cfa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ca31edd-dd2f-4b61-9078-fd8b5e44e159",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc888d45-b532-4289-bad2-52f5807d4704"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad949fac-706a-4dde-85a5-8481658ca613",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6c17b3a-2832-41f1-94d4-b047c40e6011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31f36e9a-acd5-4749-b711-769d7f1faeb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbba0a2d-a76d-40bb-b4a8-033fa4eafb3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ae1d594-fdaa-4642-9522-0af37081cf06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "436aaeed-779c-451b-9ce9-cab08e515b80",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e01a4f96-fa46-4e3a-aed4-c9b883d3291e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85635602-fd4f-4ff1-a33f-24fc216f1432"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ec543b7-ddec-4767-b90f-aa2274941e2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8f0044b-68c1-4d2b-a89f-2dffa331ad18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27a70921-278a-4030-a17d-a87d3b36fe0e",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3400aca1-9c4a-4f84-9ef4-27d4359cc5d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a65695d-6538-4fea-b47d-b44ef2fa0c5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a91751d-9af7-493e-8334-66b9cc368579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ad8d7e1e-eacb-40db-9fd2-23769f396f88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a48d11e-6bd0-4eeb-908e-0abba9870cc1",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9f6d6d6-d2bc-4ac5-99f0-086dea6c22a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4157312f-2ab4-48a8-aaaf-c8abdb57377d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6af9324b-9276-41b1-a232-c195d22e67e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "4dbe519d-7011-431a-b590-083c64b9934d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bdab428-d851-4a5b-ad34-a7731cdd1472",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9caadce-ede3-4318-ac33-6e054dfe5f41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a59a862b-6ae1-4017-bfb4-01a81a4593db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b62637d4-67ed-4cc7-b44e-4ab05f7867f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2737182-d8a5-41c0-9503-b0aacc85a919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6720277-ee95-40aa-8a47-26cb267a58f8",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6793c967-653a-4009-8865-779c5e51b24a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf04fd88-fb74-40f5-a76d-82ede1912576"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecbf3676-7984-479a-8aea-6c379b0b30cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "52d75639-6f72-46a0-af2f-af7524d7db9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51c638b0-9992-4270-920e-6551f3d235a6",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d60ef5ac-02a5-450b-8410-d98793582216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c5aeeac-5faf-4c71-b63a-29bd3f1268b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e11891df-6449-4922-a621-0ad682550e0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d8ecfae-56a1-4c12-bf9c-0b2bfdb770c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8c0b628-8987-448a-a7c1-74e23de6c276",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccde6390-55d6-4a6b-8d85-0402d3eb45d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1e633ec-c2af-41d2-bd45-fb3e5687b7e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "431b0dae-0213-4fc7-945d-0c915e43e8e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8317b94-8208-478f-a166-55b42b596756"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59617123-beb4-45f7-aefb-2aa08aea887d",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7a8da68-0377-479a-995a-aabf83ff5417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0a1ab29-c68c-4fdf-86b7-69febc14bc14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "187bc667-a8cb-4c60-bf16-da8ff7ee8b56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9da4b9e2-3d7b-4d9a-b78e-e75cdf7ebc8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3751160-06fe-4293-bddd-0248a3f1a3fb",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2af83889-93db-41f5-be0e-2bcfdf0d1956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da20c457-1778-4e66-95e5-71e65af05ee6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ee2bd95-ad80-4abc-a488-daf340b11c6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c741a6c7-ee62-459b-8b2c-11ce3b0399d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6294d4d-822d-48d7-8505-4058d034f42b",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cec6b9ac-9c8e-4c73-bcf1-1aef96a52591",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7081883-9082-429b-9879-bcc764412e86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d63794c-e2a4-437e-a402-980c442ec609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9db759a0-5cf6-4f36-b2c6-1de4e19c2e2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9c6abfc-d56c-44a5-b079-125ec1d804a8",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e5a20f3-e3d1-4489-8db2-e17da731f342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb84f443-3a7a-42d2-94f5-b0c661624d85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01b1cccb-9076-4f49-9716-91acba7747e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7198254-beb4-4b5f-b4c8-9442b81ca5b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5796d783-64f2-4d11-a53b-bc50c5c42d10",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "006edadc-a71d-409a-b850-30060f00481b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d9d5186-f9e8-4003-bea1-0f02ec821bf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31489ded-881e-4ff4-ad3d-0a5d9a88f175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0fc5ac5a-98c7-4b88-948e-bb956e30d8e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99f17a57-c0d8-47ae-a946-89ce086f0879",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7af17e7a-888c-4a7a-b66a-8c8e905dfb09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "210ba83e-f91f-4548-b5a3-fd04bcaf8f8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1015c27-b099-4704-b92f-1195b3dbb14d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "131388f2-339e-401a-bdf3-20bc0d94872f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59edb7b4-b557-40ba-bbf9-43db10626308",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "826bb07f-55c1-457b-9078-2225dc2c8120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a70a3639-54e7-40b9-9026-09a5e410025d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f186f002-9599-4a19-89ac-a0ca1678a74f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "11ac78ae-cef2-4081-a3e6-16dd26b8c637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9de81d4a-0d05-4df3-8ea5-efe959aadc60",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e049ed4d-8f58-4d0a-9c62-bf15e561f333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c9709ff-36f1-46ed-9e7c-308a23e1cc75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9296a127-3d1c-4715-add5-7abb82f8b697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "465f70e0-0eef-41c7-a2fe-f5328d1dfab4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c79b419-c1b1-49de-b15c-069ed6336b47",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55c57a78-5c82-4bbd-a885-01765187ce9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e518449-4924-48f7-87b2-f7b65be67ece"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc6d88df-bbf6-495e-963f-32e21710bc52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e860d3a3-cc17-415d-bcb5-4c8abab0f6f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8d56e00-5ad7-4a6e-b218-cca815943154",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "299de073-a16c-40e2-b1a1-c9a81399fa29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "178eda75-58d8-4370-9fc6-8841b1fd5509"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "065a5e99-5c0a-4145-b5d3-0ac0539a813a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "21920842-d71b-4794-8269-8a53cc8cbe1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5a7643e-1d52-461c-9959-730d7d7cb906",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b7cc387-e743-49d1-9c73-debfefaf1a0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "758b9bd3-3bfd-483c-b57f-2d12c7fa79c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "457d884c-fe8e-4862-a290-1045700ff40b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce85771f-7040-4ebf-93dd-091a6652d027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da863bdd-b947-466d-b1a4-e46904203b21",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c1c894e-5789-4db2-bd69-5f8bbdc2069a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e52c64e-0cfc-43e4-b112-f9f6e3ab4257"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c6d7a91-66e4-4245-94d4-669d1ad8d3fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3dbc3fb6-6444-461d-8123-2edfcda47d17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b30fc43-565a-4f25-b2d0-75b2fbdf5968",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51c64fe6-c7c4-4c8c-94b5-784f3a0d70e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4508175e-aa2d-483b-a16b-aa778c7bda20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70b3d849-3617-4e0a-b5e2-8688f3a11e5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b16e08f4-efa7-4404-b1ca-75be7add2cd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03e2cb49-bc04-4b66-b1e7-acaf3be84c87",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "543b244d-2a96-4926-bb87-8228babd8fec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cad8760b-e53d-4097-9868-2aa3ec61356a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b622dec-a580-4c6b-b107-ab7dbe1c64c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f727224f-c456-4e9e-a4e6-42e0d7d39870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a759a709-2e25-40fd-aa61-fbe740260a07",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35e60c8c-7b40-47d5-926b-e5be3555f32d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee885e0e-0f77-4811-b800-557dc3d0643e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2899d5eb-551a-49ce-bdf6-f07decd84e56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "eeb77154-72a7-44c9-9c9b-c2406a78d0e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bbf425b-8e2c-4206-878f-488088fb9540",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "810a81e9-f09b-44f7-b514-1fdce81ed978",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4a6a561-ae1c-4054-9501-2a3dc666e4a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfeb9c4c-e18b-48ba-8c15-d4586871ab5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "bc9347fd-7d91-4bb6-a254-80a1e2ddd82a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06d8dbb3-262c-4b6c-a504-7d6e577bd994",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "176369db-e169-4827-a99a-03365a3f8e49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90d9f9d1-7854-4c76-9f8a-652a5d25fa7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eff0d466-62f9-40bf-b21c-e84af5d08d22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a66210b4-8020-4715-afef-789ccd9c0220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dcfebc7-4447-4b9a-955b-aa361bb8bc8d",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5035499a-5c49-436d-9852-1a5601c29be7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ce9ae7b-1ab7-40a5-997c-9d9a29a40582"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "753b4728-14a8-47b1-9a6b-b0f248698cbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0f795b98-ac94-4115-ae86-3d1653458210"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcd309ac-19c6-49bb-af6d-5fb46852f582",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38ed9d09-3452-4253-ab0e-6d984c49a933",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ab327af-f1dc-41b4-bda1-c4debf9c6114"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36e04da2-5eb2-4c5a-8481-d4153dc1b8d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3cb93579-0799-4861-b50b-f80f26b21559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e379329f-fd11-4967-bb22-98bb6872c713",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3729b009-c584-4bbb-947f-00f3f5b917e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "2a0fc1d2-21fd-4e15-96ed-dfba57efb66c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ff8a3ad-d9c5-412a-94d3-e5e75c3dfa7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1a916b6d-4ba0-4815-9799-2412d0f6d03d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c48bba95-aa83-4170-afab-cdecab876b20",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9969e8d5-7e77-4a32-91e4-42d1068b5732",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad657a53-0a42-42dc-820e-00a4658e98ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "63818cf1-a9a3-4c1c-80cb-a3baafc76d9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d4abf14-f4a3-45d6-8787-a9b0bd44fac1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "d6bc98cf-d33c-4bb3-8432-72da79cb6d84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f05a2a00-9502-42a3-8da4-e90db2bc5d00",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ec75bcd-b244-4003-9c6f-6bf024c34935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a07446f4-efe3-4091-8b6f-b9322ffc5bb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6afac48-d0c3-46b6-80ec-3ecf44d9b304",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "d073dc64-2c8f-4fd2-a7a9-6b7a36be96c9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c6743f7a-6396-4c42-8547-e448799a857f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "94d56481-28d0-4eb2-b22d-d0c21d0c1c5d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4f0c603d-7a32-4bd1-880a-2f5f9e6c7f14",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "922c391f-ea7d-4799-b0be-fc400ca49ae9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c07c9f58-a186-40f3-92f2-8067a4dd72d6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "764e70a2-481b-4beb-8945-6c4bd408a7c1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b7f8b0a6-3932-4e66-b720-2d06e347c60f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ff75e63d-5fd6-4844-b071-4bb7e0cf25d3"
                }
              }
            ]
          },
          {
            "id": "66b47f73-f16a-4a40-8c75-cf379269681b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "dc11497f-6ff7-4d49-bd1b-bf9fb184b8f1",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "64eeea55-f9cf-4569-8148-11f2f15d7bb9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json();",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2c98b83e-4f73-4510-b224-c0977bb31335"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "796cd69a-5e38-4531-8019-8aabc200e488",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f0e64d7d-f9e6-40de-befd-e57b7a44a662"
                    }
                  }
                ]
              },
              {
                "id": "1a75f353-b09b-49fb-a4dc-cbf239561a77",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1567db3b-e281-4dc4-885a-bdece8badebd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cb3643c7-c011-42ff-8772-959e13ac4a10"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "893ee1a8-8113-4775-9a32-23e8f61be139",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "34d4e015-0bb1-4360-b9ce-9bd86b566e7e"
                    }
                  }
                ]
              },
              {
                "id": "37803de3-3d58-4acc-b353-28fef175e482",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dbe587da-7790-4f9a-aa1e-8099000ad6aa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6c7ca855-23eb-481d-a107-8f84e2b3d703"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b40d3677-8689-4241-b62c-18dc931b4bc3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cb9bb09f-bd26-40fc-ad8d-8cb4928bca40"
                    }
                  }
                ]
              },
              {
                "id": "791e1a2e-16ea-4760-ae1f-8967191c897a",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "be99a9a7-06c8-4a6e-b9ed-8bb32ab66553",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "02acc181-9a76-4548-aaa9-159ce4aaddbf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "164d84f3-d129-4fb0-a6ce-3362ba6fa961",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "1b0dd7cf-f6b1-4721-b64c-994604d4d430"
                    }
                  }
                ]
              },
              {
                "id": "94660c2d-fec0-4030-b0d7-092b2367d121",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "74c08660-9a35-4211-9fc3-3c35e880198f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d2923b3c-7f5f-4387-a385-993623933ab5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1f828b74-99b2-4152-a808-7b94665567c9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "2d65353d-b16c-4eb1-9c06-140d4445adb7"
                    }
                  }
                ]
              },
              {
                "id": "238ff84d-98de-4354-8d8f-33cabebef2e2",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c39df347-210c-401e-b0e4-0896a7502029",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "87e5db85-95b7-4242-b363-384a5eb22a4e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e00b16ba-aca1-4a5c-b24e-b94f45af7554",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "68be096c-fec2-48be-9549-54f8c6f151c2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f8513953-c865-49a1-88f7-b02903040ee8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "438d09e2-7be0-4b93-93aa-9f1e407de081"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "13ac697b-cdff-4894-8025-787004a1538d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f74c9ba2-33cb-4e38-a30c-8074c8c27a03"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "752021c7-9765-4d48-9aa3-fe820fafcfda",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "a62bdc43-b378-4c5a-905d-8401119a2380"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ddc4b956-2827-480e-8a9a-255ae8fc5e2c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0f2f2a36-aeb4-4645-b2e8-d1b12d836fd6"
            }
          }
        ]
      },
      {
        "id": "f69a175d-489f-4d77-917e-d887a4c24333",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "eaa6a96c-9c18-47c4-986d-af1b0a3043c7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "27aa3ab5-137a-4388-9ad9-56a7561f91e9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "30afb2a3-8705-49fd-98cc-8d0f879ae7a8",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36578de0-2fb5-40ed-a106-812177d9fffb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6aae61ae-3679-4684-b415-af000b8155f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e361c5d1-c362-4d7f-8e0b-687d5281d739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "68a1e97f-a10c-4929-817b-44d5a9dcfe24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c96717c-86e2-4ee8-a71c-17589c04aacb",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b2a52c7-6fba-497d-b876-57e8e0d46261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91ff5964-0156-4a51-8d15-8b9cc8dcd747"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46bf48f9-47bc-4671-b37b-02f8e1aba0fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a9694f4-cbde-495b-a35c-760f0bc794d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23e2c1b2-253e-4da1-8482-a99721438135",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfd994d8-ca1b-4077-84ee-aa94fe5115e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "468c6452-904d-4a64-a3c2-80526474783b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65574088-c62a-444f-86db-de0be0640b03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "59ab3060-29b2-49b1-a49d-6d58ee13dda8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caa1174b-5a2f-4509-ab89-9a1528fc9bf7",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "104555bd-3126-4d0c-878f-fc72b1701407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30e0941b-75cf-48ce-a7b3-ffa5d42578c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf6c75a2-0e53-47a3-9834-1d85d5db79c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "784a5b46-986a-4c38-b50b-47149a95104f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "064c8cf9-c2ce-44ce-8955-c304dc1d4744",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "161b3def-0942-4544-a6d1-70b6fd0398e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d2a0822-9b18-44ac-a852-a62e93df49f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f44072b2-c9fa-41c3-b6e7-f356243ef95b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "103e6cc4-74da-487e-9bae-0d2585e125d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d04742aa-21a3-4171-94f4-c457cc7a136c",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7e76dfa-8e6f-407a-9dec-7401fb469e9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a641cec9-0ed6-4d75-9809-365fc3790818"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e4d96a1-8c16-4f45-bc82-5ea92eff2cc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef2d9fe4-9a7e-43f6-b0af-89f5b99dcb21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2489fc8e-4ff7-4aab-92bc-84cb26dbc317",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e078d73-6cc3-46eb-a761-0d038c3a0ab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "382f3dec-6c01-4d57-bbcc-afe09421a8e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c67b63fe-c1b4-410e-aed2-50f11c0b4aa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9830035-00ee-4ab3-b1bb-3bec8b85cfd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15fe3fdc-b82a-4aed-b0ea-1e6ec6c116c1",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a22f9f2-e2e7-4043-9d20-5974b39dfb29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5aab312-1e40-4434-a6e9-5f1b70dada00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f644fe4-6dc2-4623-8dff-072074ac4161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a0b51f4-3d82-4b45-b0e3-a3acb5987d5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b243383-2f85-4ec8-8331-4f9dce274f2a",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55b71b03-ac04-4627-bba5-418904b090c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd89ff45-5aa6-45de-b2a5-7fc2ad2cd4e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b10a518-a597-4173-a85e-302c074e2a4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "239ef6d2-9057-46ed-bfc0-e54998b141a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5d67a9c-326b-4aaf-adc4-4622bff3a123",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "847a0875-32d2-4f5b-b654-1f35fa83713b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dec0697d-51d3-4d19-8102-94dbea761860"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6acac0d0-8721-4587-9556-f2e863e6194e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b692ed05-e0f7-49ac-8053-df609bb474c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f0e4f3c-12a2-41b7-96b7-497bd11bf4ae",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e900b961-ee4a-4f5f-b726-80f6de27f6b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd4014ed-0bec-48da-a664-d77ce7792f68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc44ab30-1f60-4505-b6f6-a9be0d4b78f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "0087e655-4ef3-4bed-b536-fa011e694e34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85c4be09-3571-4fde-af43-0647db134a04",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6056386a-0ffd-47a0-a4c0-c96b79c623be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ab5aefd-1954-4713-9eca-97c9a7517b68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a66c045-ec46-4a41-bfa2-326b9b165351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "979338a8-3180-4956-8e22-a32f3f62541a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8988adde-bc84-4c9b-b5ae-ac08e768d619",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da8310d6-d600-44e3-a0cc-c4074c283a29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62b6ea9e-e6a6-4007-b856-4360385eeeef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39a63ac0-37e8-4a3e-bf69-bc5ad2f5b234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4249f31f-32a5-43a1-bdf6-cbb4264f892d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24120059-195d-434a-a5a8-e71560f70c10",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aebf3a5-f0a8-4154-8475-7f40edbb8388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c50874e-b5b3-4443-9de6-f5660be4af6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9a00832-1fc8-4b56-9081-7c5df2221950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "76a2e117-e407-45a7-9ff8-37cb6d331bd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f87d190-05f1-4473-bc66-ae760fbcb014",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ef53ea3-8a43-43ed-9dbc-d32df76ef8b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da5ac453-9a6f-47c0-84bd-913d8ae65237"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f85abd0-ea30-4979-b071-e9526f7344a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "62e42beb-2631-4f7f-9215-e90a8c9f5880"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fad7556a-e96a-4f43-af54-c7a88a997dba",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2872b913-f7a5-4b83-a3c1-f7054dc9affb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38020606-3c15-4093-a745-b852fb439415"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a044190c-4a11-4f58-af46-c827f24c18dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "97341057-7b90-40f0-8135-ea3398f3fff9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bfc7075-f296-46d8-9f52-bc35b28f3874",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fecd78d1-82e2-44f4-95d2-a7b801f2dce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09543a9e-1290-42a3-bd43-242f2c94aa1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3d77a6d-afde-46be-8705-911657550fb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "220b81da-973a-4a0f-b4aa-8e803d646f27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38af86d9-536f-4eaf-b772-2721ffe902cd",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bfd064e-81ef-4702-9ba2-3e7295b46b10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24e0ba71-7e2d-461e-8f58-6e5cf6f4e468"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dac1229b-5e2e-46a6-ae7c-42994d90ca88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "66e54344-b285-49ea-bb21-04dff05342fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c454c6a8-4ab0-4663-a81b-8d4350fbb854",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd2c863c-64ac-44c3-9504-cd03b2d5d5f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d4d4ffd-3602-468f-9d87-46fef7b68e51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a026de39-2eef-4f6d-a011-1a4c4d16db53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ccf4652f-ae12-4b57-a3b3-13653b1ad542"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18bdafe1-ab75-4e09-b27f-b60b5c64d33f",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a92e9553-20c7-40eb-a1fc-577d2886f9a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70914f5e-7c3f-4ac7-a7fe-a91496bb86fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d863ef2-c625-4fb2-a408-17001088937a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b8e5c2f-cb4c-49b9-940f-d5b6b9fa10e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af57145e-47be-4d4f-bf59-01daf6c56f67",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aba77386-2f60-4d73-8a88-747e0440ee14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "537fc10d-0513-46cf-99b0-c1445f2e8e56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12d116e2-5409-4845-81e7-3506872a7900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d03230f2-cd22-46c8-8fcd-42f1bc993b82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07969068-9c89-4f7e-ab4d-418827ceb565",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "042495f6-d3fd-4cdc-9c11-ba7a7968360e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "499214f7-ca89-486b-9ff8-aee3b26d91a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5b3886d-82a6-44f5-b665-199530bb5949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e18521b5-0af1-4b0c-9c01-d5604b16de9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "139388fd-706b-4a92-a061-aefa2f015f77",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0d6e49e-6a95-4423-a099-d0b855e1aade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25a802f8-0a7d-4556-b348-397d950505fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d699c66-4fed-4c78-a26c-ee57cddfc7b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc5b3327-ca8e-45d4-868b-c19ef88f0335"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d87f1705-8fb2-4cd3-99fd-b91ca9d97296",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6361970-ce4b-4eb9-bb9f-36074251633f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2c6a87f-ad0f-4e20-b82f-282c78253602"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38f297e4-1bf6-43a3-b189-1f0b878abc20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "731aa938-ed2b-4541-81f0-8085500b831c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6721e237-4128-495c-ae53-86584f2b9417",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c33ff7f3-37d7-445f-a9f2-324aec9e1a01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74c5afac-3c1b-468e-9b02-32d78bc0b8fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc08667a-a52b-4263-ada5-f94ba60c393e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "38de4133-e776-4143-a0fd-c5167e4d76fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fbbb5e0-daf6-4212-838f-31faf111e822",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08fcbf8c-3b63-4c92-ab13-3258745f8564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6613381f-ec9e-454e-8868-70c7a482cec2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c30ade1e-e8d6-4bee-8dd8-cf38a1928094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "893d4632-1438-4e42-9cc9-22bd07b92bab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20bd7a02-7099-4255-91af-c2cd69ffe9d8",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3a4d1e0-e907-48c7-983f-25185799392f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65068e71-58ea-403f-99da-da25b8a07b18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2492e455-99af-488e-83a0-39ed2528cfeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "14447f0e-d6fd-4d1a-9eae-ca0861ae2b74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46376409-e512-4635-9f12-addc284d6d89",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e10f9d6f-036f-4b68-acfa-683c5278fd1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87a250de-60a9-4bbb-b06b-1e8bf01c95d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd4e908e-e90b-4e47-be20-8b647b2238b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0bcc5364-519e-495b-bedd-7303a5bfb89f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c8ba088-43cf-4081-8713-4dddecbd6ccf",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0450aeb-0b75-43c2-8fec-2bf4c7dbcda9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29fe96ef-ba42-4d11-bdce-37e29e2972f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f65c1d3-d509-4052-a32c-57056b255525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "42118220-4b1f-4133-9525-b1d2ad923921"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aa96746-eb36-4c3c-aca8-49c0e263c243",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c95ba684-2b86-4b02-bb3a-08c80818ca36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3c5f749-63dd-4cb8-98f6-cbb8140c3bc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f6436cf-3bee-4b2c-9c9f-97f074b32d02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "299635da-1cee-4f80-9b67-849cb2d11630"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b06385b6-f2fb-4a9d-ad04-8e2ed9dcb37a",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "559ecfad-0507-4397-b85c-a049956a10e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01b360d8-39e7-45d8-97d5-4fe5317d6e56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "114ecba8-9b31-42f5-b788-0c979c5ad661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3cdb990-ee72-4cb7-92e9-69c47f5c50cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f8c88c3-cbdc-4fc9-b392-33824b3b06c6",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4961fdd-198e-4061-bfa3-e20309a5d3a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6860be3-69ee-433e-9e0c-77f2159560b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f4da11f-337b-4a98-bf66-d38162c9c635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3aa2657-7a16-44c2-b9ad-4147fb5a0e83"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "53bd0882-04e0-436d-8b68-ac7aa14cf601",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d4f6a946-7fd1-47e7-b765-b6ebca777f71",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74136192-2d0f-4559-a6c0-c4eaf078d049",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0023d31-20ee-44de-ac95-41f451ed7d93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ab00fb3-7932-4daf-b26c-9b03e61a8f55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "775eae7b-106f-4a64-88f8-2107f8dda807"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f41e452b-05b6-43ba-a8c5-a3fb5b5ce532",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eec8234-8b59-4d4c-9d37-50e72b242b3a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "ddfd7447-8d4f-4f40-a203-d82090df99a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8b123aa-7994-428f-9b85-bc602b8af814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "35026f66-6578-4aff-98a5-2cfbd32af467"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b53de2e6-c269-4a50-8cea-184bb309cf71",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1d21b200-2288-46b9-a9a3-8cf516e7d84e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0b2eb064-ad3e-4fd5-bb33-f5bcfd8ea1eb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f9d962bf-060f-4bfe-8eef-48dd86dd79bf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "49a6d8b6-861d-4080-8e10-c2efc8295110",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "cefd24b2-cfbb-4dc2-a18f-21e465a74eac"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "22488383-24f1-49b0-aa24-1c592db3118d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f0fdec0c-7afa-4a18-ac53-2c05a48b024f"
            }
          }
        ]
      },
      {
        "id": "f23673f0-66d6-40d3-a769-6bb3119df1ea",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "4d24bee7-2a03-4442-860b-0c4140158d54",
            "name": "Negative Testing",
            "item": [
              {
                "id": "496a36a3-988f-4aaa-955c-4a63f5f8d3de",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7ebe5efa-c0c5-44fd-a156-4c255fe4c5c0",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5794177-32b0-42f4-b138-11698f01136e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b29e126-e207-4412-b338-36fbfeb4a179"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4151f808-0734-468e-903f-6a806844707c",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72c103b1-4838-49b9-95b5-097ed87484cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bf63aed-b848-4b2c-8d60-ef34161fe21f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "becb64d2-1a6c-4cfe-a440-6acc0ecdeef2",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dabc1193-e909-4800-b1f8-e0de83832413",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "675ecb7d-4bd4-4fdb-ba1b-f69116ada5a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e20bd048-f240-485e-a956-246858c9c050",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "979b6919-02c5-49e3-93ed-9cd2c67dbe99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "965ec922-f783-4719-8058-8b3cfe7e3e23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cba7429-e816-4f16-aeaa-c324fed96075",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3944ef49-289e-4497-a30e-d6811b6e1286",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "913846ff-55c9-4b81-82e8-bac3139e8e6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "926f9af6-3efd-4be9-a380-31aed0a330de",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bbbe3f4-4377-4b6a-a077-88a0f75b0657",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd8daf93-6453-45cb-b75e-184c97651271"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dd6dd11-e4e5-4eea-8fe8-2cecffa30a94",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddbaf9bf-149b-4742-ad83-43e11e6a77a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c35d6c4-373c-4b4d-a109-e4f97975e9cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d79fc53-a615-45d1-9d4b-3a8d57f9667e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66363caf-432d-4d73-a81e-6c8d0dffb9c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32c793d4-b2aa-4b31-b9fe-6766c4ddd940",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4870f1a-4545-4c98-8b70-aa9b91d015b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a895a77e-e209-4adb-86a9-49564a9dae8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98cdecc5-c783-4e1f-a5a5-1bb7dd1d778f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f419e98-4b1e-4635-830a-9ecf6c2873e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd8a3cf8-2b76-4831-9ce2-ca351c47793c",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6617fd3-881f-4a5e-8cd5-c0988de86139",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3dcbb7ec-d357-43ce-a41f-219822b77aba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5e20487-0bcc-447e-9d93-b3412ef96507",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40d91b71-b96a-4e55-8515-86ef7894806d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a50009b-0599-4a86-8c49-417b2ee1dfac",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24947f88-2df0-47b5-b5b6-f03222c0adf2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3f33b16-cfb2-49e6-a7d0-fbd939f84421"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3321cd5b-8f0a-4681-be25-7eadc73dca78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d52ebe1e-50d5-46fc-9bb8-24140afe4b4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "670de794-f572-4f12-b095-45f5fb99d99a",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bc8fe62-56fa-4594-bd70-d90a9cc35132",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34f63e85-ae06-4e32-b297-7320521bfde9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "357052c2-3c2d-46e1-adbe-9c6d528ec653",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6738bc1-2947-49dc-b909-d409b8b3c221"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc1e3128-9e2e-428e-b8c5-146eec71db00",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de11262e-b89a-4c5b-9156-10d2edc7cc68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df26f5d9-101a-4a5d-a40f-12ae63fccd98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62dc498e-29d9-48e5-924e-9ad22f311bfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3003503-1439-440b-ab9b-3162e154c642"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d69129df-8e1e-479f-b67c-7acbf0032039",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6aae221-da56-469d-8138-5cb1ab4609dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97c9f3f0-eedb-4bad-96fe-b5c0c48e39b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6519da2c-5cf2-4427-b71d-040de37bd564",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86af2e3f-2dc3-4f13-8990-33e81dec2b2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee245358-3839-45ce-a87a-3379b025f26b",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9927521d-908b-4bbb-8b70-90a049cae304",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d2bb1e8-e2be-4599-9b05-2cc2de40c79c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28ce1186-2ca6-4858-a155-56b70fce2485",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad670f3f-9c26-41c8-bc0d-469a94f2126b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb28e96b-bff6-426e-b8ef-8408d2aa287b",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b349ad4d-3a96-49ab-830b-e0071d942f94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3321ccd-3356-4dc2-a5d2-368240db9357"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65b229e9-0746-4a11-b3a3-44e7decc2c6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23e55d94-7f83-4e2c-ac6e-4d17e0673356"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a571105-643f-4b5d-ad36-5e28fcd99e61",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52a5fea4-11c8-4ba4-a8d4-eab05f4c3108",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79c98d45-3e5d-4c4c-b396-fc05dcfb99d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfc48dd8-0775-44c4-8a34-94a8aa04c358",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cd3e5d2-7a2b-438e-93c9-20317c1c61b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "242de3b6-fc0c-4340-91bb-bf7d697c1568",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b017b8fb-4ba4-4505-84df-1f3f4ca90e27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf758efa-e03c-4058-8e99-bb9b487aceff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f74ac01-e023-4a3c-853e-414ef97e0e5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29e09d4d-72c8-4aed-bd73-27e15388eb4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03fc245f-16a6-48fd-9a87-c20f2932bf0e",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "665da77e-ba40-4cb5-a1cf-35209c9119b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a774da5-cc64-46a3-b4e2-e09ac0b8be76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "886bee93-a5d5-4609-8169-9a3d2865a416",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82f40e7d-848a-474d-894e-4acba19fee2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8e648cc-6ed5-4281-b478-66a7708e90da",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac8fcd54-0379-45ae-b38d-fefa9376dae2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d58d663-b504-4ac5-84e6-01d12e1217ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43318225-5dc1-46da-a1ee-0d42135f262a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "148a7124-2815-47e0-8cfb-d8efbc6131d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51e4570a-9d78-453c-a4e5-bb3ab75e9912",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77db0cf5-a1d6-4767-8f93-45a9b0e669fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "022b7cdc-28b0-4059-bc56-0e3ea05290c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d5f7e08-cfa4-46c8-8a17-3da52c6c65cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4192a06-8d49-491b-8c59-377c0a9a40ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3005ea2-f280-4840-9f4e-5b520d32b2f1",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad1086bc-a56a-4a74-b705-c435e9caffb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a578d34-49e7-4aeb-9e23-eb50c50367b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b513172-6c5a-4fc4-bd49-f8fa81fc16e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3db18aad-6159-47df-a16b-71cd6eaede94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed082a72-2d66-4660-a889-a6d74d96ad55",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9abd37a-0eae-4ca9-b6dd-533b784597a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d42f567-8822-4b97-9bc6-3c81bba7efa8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81b986b8-39ac-48c7-a36b-a8972e06769e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4124f8b9-6153-42d8-a20d-9d41b26551a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48e48161-eb25-4881-a1d5-32e40088eecf",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5c13ea6-9d27-4116-ab86-93eb85450eb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09d87a1b-1f3a-45e8-ad52-7e670d25f79f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6afb0d45-033a-4340-90a8-9937e2d821d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e934a533-b4a1-41da-8859-42449ee179f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28623889-c142-42ac-9449-82c50aa74145",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55e4347b-0db5-4ccb-b101-9415376a7ea5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "118efeb4-1f47-4faf-9202-e1bc737dc053"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3a6ba3f-50b0-4873-89ac-54bc6f0d77b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91215583-75bb-4e08-b243-13d9daedcaeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73ad47d7-ab65-4982-9541-c43f87f9f479",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4df1d8a9-1136-48e1-9ac5-d5f096708d53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f0e88ef-1730-4e3d-9585-eaff4e1b3331"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "210ddf1e-d19c-487e-8484-f9d4d2acbd3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4d7f70a-c27c-4757-b334-0693e67b82a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b2e326c-b35a-4d88-a83d-fc705ae70f24",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "893ac861-5d6a-4cc8-ba53-d596d3d46350",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94dab235-53f3-4778-8d68-6e52fc653b10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e797843-aaae-4cc7-96f2-83efa3d2418b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cdc8ed0-abd8-4a6c-9440-8388319952cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4828040f-deb6-4406-b5ca-8b4a51dc5c44",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dde2b48-9a8a-47e0-bc4b-0916450c831a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1ba7671-37ff-4eb2-a56a-43e19e40a29d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe8b57f5-d917-4ffe-81ee-8372fc068be5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a8e12ec-add3-439e-a99e-0b109c49b9d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8ab95e3-d032-432f-8a45-bde488cd6646",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b766180-3914-4858-9f7f-cc549ca945f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3cd3aef-6d41-433c-a32f-b8b75c430245"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81729cd6-a63c-4a8f-b29d-773a235c1728",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "958df98c-4f73-4d16-9196-16b3b46f183a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a8dd70a-4d7f-4168-ad6a-ceca8423c9f6",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a8eeb71-5d27-4a77-b5cf-22a9549d32dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2d3c381-9b56-4aba-acd3-70a894104fbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9ceaa0b-69d0-449c-885c-4f8d1e3f0ad9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c4349cb-14bc-4899-a1ef-305f16337aef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcafdda5-6464-4513-ad6c-dc782bf04a39",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3173a3c2-b78d-4ea7-b7cd-a404c73320e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb6c0764-94cd-4aa4-9413-c80e6bafcbac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71956944-e102-4064-92d4-01fb16817512",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1c26d6c-f084-45c7-a4e9-6067fd55515b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb314040-9d5b-45b5-843a-34b3b5276c58",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b97c4148-4a24-40bd-9139-21120f64e086",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b18052dc-74e5-44e9-92a5-68352c361a67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d01067a1-af11-4288-87e9-eb5bdebaf4ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cae277c5-6517-4a71-aab3-f58bdc784b51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "660ea787-bbee-4d99-8c72-c38b9d0f12f8",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "507b0fa6-8c40-4da3-8754-2a2677f02fc3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25221f14-4889-40df-bee8-89f43f521be5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dff18af-23fb-45d8-abb9-5bc180b4a5e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c919fb6e-9fe2-442d-8e6d-8c45c1629a0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c7aecf6-65a3-43fe-9743-ebef67c07d17",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ced637c7-29e8-4ec2-ab6a-1d8ebede1115",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d89ceb6c-1ab0-43f4-b3e7-1597a4301335"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb5fa010-5f99-41fd-8b8b-04c6518d72ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dabf0c7a-1dfa-4141-81a2-bd04d58de4ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6696cc21-4baa-4026-8997-68e4c36a7b11",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48b1306d-cde4-44e4-b7a4-ab14591de367",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfaa7072-2fb3-4f9d-aa22-5fed40fb47ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bab8d348-9cde-4ef5-b032-407c1f37662a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78805698-671f-43b6-9f77-19e6b646b892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70cab29c-68e0-46a8-9fde-34ea5ed8e7f8",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20de7558-f09c-4ba4-92b0-21fc204ceb65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1bd2388-2922-4188-8761-28c0b6f56bfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14a35d12-6313-4d31-9ed1-177cf62317e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c902290-1aa6-4540-a3e2-97538d3fc69f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "804a78af-07cb-41f6-b30c-e591f19de50f",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0216eee6-6c75-4bc4-9f6c-b67c0204130e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cba4d7f9-d3fb-47d0-8c57-e2f9a67da65d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc5c2940-502f-45d5-a06c-db3a11738d84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "409ef955-47f9-4688-9784-1110eaf495af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2d110bd-aec9-4699-88c1-6383c41d38c9",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7de1a89f-c561-48bc-b7f4-53454b834f50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ebaa7b9-6cf2-47c9-8d07-affd6099671b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cf22701-df58-4659-adc0-f30368163961",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba1b8d34-206f-44ba-85da-068950647d4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90f69e7b-cbbb-4980-b3dd-07a08fb8adff",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d00109b-63b9-4bcc-9648-6cf89c6a924e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dce4f58c-e88d-4eb5-ba6c-e141510a403c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "630e7b3a-1193-406c-9146-d673036a7dab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a841f967-2a69-44f3-bf72-f93f4bc8b05d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ab56ee2-b547-4f02-a763-e5446ea9a944",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96d8570f-919b-4fe8-96d5-cb06fefbe3fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f8622b3-c1dd-40ef-839b-52bbee0d0d44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38f40876-63d8-407b-b70a-4ce539bebcec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa72011a-80d7-480e-ad96-7012913ffc91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2b34c93-a843-469d-b116-8379ea6b8da9",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8abc02c0-3341-45cd-b262-e192e50f23e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3c9f339-2e86-47d3-b228-01fb19adc90f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "669ff27b-ce97-4a6e-8785-f0bc308086d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32853a42-28e9-4956-97ec-8897c7fc4f50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad179469-3fd1-4965-8bfa-1b5998df9656",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00588a72-571a-4513-baa7-9d6ab9cdbd3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc11a06c-85f4-4a39-8257-7737959c6ad6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49ac1551-48cc-406e-a2ee-e3e35749410c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8eaa7c8-8d96-4449-a98d-9d0f1b5b8a07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93d71703-a6d9-4353-9063-cb0b9c68252b",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6adb2e6-7016-4096-a2a6-d4b18a8766ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30585477-51d7-41e8-b8f4-43fefb121132"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d0051c1-e42e-496b-9285-f6b275ba602c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10df11b5-a94e-41f0-aae2-760a903a600d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bf0dacf-bee7-48ab-aadb-4638d9ca7d67",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8450915-dc02-4d5f-95b8-7499ad54f056",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4f4f887-f91c-4439-b664-da5f426088e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f126a84a-0889-41a9-af30-30d53ef3a03d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01d3121c-797f-433b-9f9b-214a3908256e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17584a8b-6119-41f9-9890-844b5b9526af",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0604f7f5-2c10-40a1-b98c-33bcffe038ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f17f2f8-9f36-40e8-9d84-d69d46f46b74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b9b8729-469d-4e37-ad72-763819c0629f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f65614f7-2723-4f14-8947-8172200ae27d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d2623a8-d765-40f4-b664-40efbc02ca8d",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7318729e-52e0-433b-be11-ab8e26c1f64a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "574bc57c-8cd3-4f90-a230-8f8642a77cfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5fa034f-6afe-421d-8b84-81095f29e271",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ad8558a-2f16-4719-a0be-3087fa52305d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f80c2153-d849-4857-9b28-5c3cc2f175b8",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcf1de8e-edd6-4757-bbba-ba67feb08165",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf6dca8c-ddaa-4368-836f-6fd100b96acf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a0ccf98-bcf4-4400-8277-b4436812bd35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8e327f7-117a-4628-8c9e-8d5f5ce1559c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "989195d7-802e-4fdf-a6ae-776df6eb05a1",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64391976-910a-4149-a683-d08ffdac8f75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6f77f36-3231-477c-af4d-e1ab960e15fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b07f3b6-a8c6-4989-b191-4fe693514e96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a34556a-7c3f-431b-a2fc-4c1b7002283c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2154fda2-7b7d-4544-9f28-7c98d8a9688d",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a09bbbac-d537-44d6-b781-ab7d51c3d026",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a02b9e4-b8a4-4f36-9435-6c597759629c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f91efba4-1dec-4a31-befb-c25b3d7f2302",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65211f48-a2fd-4956-9f6f-f6fa81760082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bdae189-96fc-46a5-9f51-b79c88ad752d",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff4a1a38-573c-4af3-b856-dc6946b459b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7b93236-35e6-479d-ae43-f0781c7b95ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fef6b6ae-a6bf-40e9-8b4a-d32a5ebebb85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "685532d7-fe4c-4319-8f52-8f99731a12b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a33755d7-5fba-4740-b009-e78a5afd0a96",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c904d9f8-c891-43ed-b158-576953fd6b5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b9b1f43-ad71-4946-b895-7a33f0dc3041"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a33763cc-9d38-4e42-b7e4-ecc2233620b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88d18ba5-b137-431f-9ed0-2ee021c1335c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a145ba56-7c75-4633-95a6-198c41944fdd",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2579bf6c-f86b-4e42-b5f8-bb6d7edc6824",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d554947-0429-468e-93f8-c48365436974"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45eb8256-55ce-4a4d-ac38-e3d3dadb303f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34a04eb7-f90b-485a-8265-bdef8b5cd71b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84eb2b90-5de7-4e3f-a8c3-5c9d5de5fa55",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43aeeeac-c9ed-4fdf-a7ae-c0dd894edac5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b477406-3344-4ef9-817a-51b89053126f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85ec7721-f378-4d03-9189-15aa125cf4ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99d30258-e60e-4e56-869f-cccce369b6a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "066cfc81-e383-4551-a497-9ff568f62843",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dc5dd9d-ff5b-49ee-a88c-40508f8c3f78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cc7445d-9af3-4e6a-a511-9f7410e8eaa1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7029e8e-3e7f-4c30-ae81-15b6da0275e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "659c0234-1827-4178-a928-dea4c0a6eb45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cea7018-0e7d-4959-aa86-a1134060d6db",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddbaedf1-d591-46e9-ab16-ea6f30f51d7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8ff4da3-52c0-4232-a534-2602019cf14d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45db0a30-8341-4447-bfd3-71473a0bf056",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32a49dbb-8813-4903-9e53-3f780836b154"
                        }
                      }
                    ]
                  },
                  {
                    "id": "550cfa25-8b50-4516-bd1a-e3f99fac7602",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8cdd6a1-c80a-43aa-b20f-c14ef89f2c5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34ea8b75-6345-40ca-9b56-09933f4da6db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14bd6377-6376-42fc-b808-e558659c007e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9d9987b-ff5d-4018-a6ed-d3be1890df30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "949a7fac-3e03-4b4e-879e-4913ea6ac410",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72bd8e4b-7b02-48f9-a053-0f19814165cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31a04ca7-1a03-4406-885e-eb064ae80ca9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34af8614-303a-4183-add6-36c70fab6796",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfe9ad5a-1d2b-40aa-a42d-10e85450dee7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46d6a31d-1f82-48cd-a303-a71c1fa0b1d5",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "897a5d87-567b-4469-bdfa-592013830eaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73bcfe5d-2e01-4e4f-92ae-39d59990b168"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49a2f219-f370-44ae-a83e-090c187aa6a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e9cffc3-1075-4c52-8457-b73930dce23c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86a869e8-30f2-4109-a763-e35b50ab41fe",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "942f3d07-d9a5-48a7-a5d3-f719e03b470b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e00346a6-da7c-4dd4-9aa4-8438d300ce3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97df729b-494d-49b3-ab8c-8a7215119a9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f283c29d-a0d1-4e71-8cf4-f73fce0d57b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6852509c-61a2-4b51-a008-f74ffa69092a",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5d8a72c-54ee-40d5-bb1f-43180cef68d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3c923dc-5c4e-40f6-8679-74da0df97868"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c89d4460-7749-4e70-ad0f-813f19b4a748",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bde6716-af11-4f50-8243-fca6ac7db57e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba3d0271-85c8-418e-8bd9-801f27f5aac4",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f2163c1-1df8-4cdc-b235-53ff77335e08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a688697-f57c-4abd-bc63-f0125aed0891"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c870bc49-ee16-4a70-bcbc-b88cb140f443",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b21fa16-048a-493b-b3ca-0510f83ccf45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59e76d0c-057b-4184-8a69-30c533b0940e",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de1b143c-5d13-49c4-bd42-43a2d8bbf9cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15455d7b-6a8b-444f-8d2d-3bae46e35b9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1963fc89-e549-4f69-b884-8b1cef7508cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "116c310f-611f-41a7-b224-da4b8c346b43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc0b0567-b565-47b2-a712-07c10a289a67",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00c5565f-3a87-418a-b56d-52d6ea59b317",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c403abb1-bb45-4dce-972d-5764398af00a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05a77cda-8321-4706-8e3d-ebcb8c11f3af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8252bb3c-8eda-4f14-8821-3fc91c77081a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35cc350f-c457-45d5-af58-186439fc5f3b",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcfe28b0-23d8-4a20-ad80-175c779448a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd3cb920-1acd-4904-a663-fb11d9cad060"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b91b7582-fee6-4264-8cfa-369aa83d2299",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42099d85-2862-4fc6-9cae-3fd80961fe66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8e42cfa-d624-4446-8588-9558365ee544",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1a03fb2-9d84-4ee6-9b10-7001b23f5790",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59060dbf-10da-4ea1-b9e4-aac7c22c0bc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95c08aa6-3567-43b9-a211-bfbec4c5a621",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a23290a-2d95-4d06-a916-d9045b41c966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c377e73-5c10-45c1-a345-2bb4dd0b85c5",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbe9e862-dc28-4f6c-8e54-6412be49d7c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "311aac8c-d0ef-462f-a118-48ed81268bf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a91fd867-be8e-4664-897c-f2280c126829",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c986e42-395d-4f86-bca5-8d28f21022cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "158eabc6-9acc-4e78-8c5a-4b16c8f54849",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "114360cd-0ac5-4e9d-8ec7-ba6571fc2eab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f3ec806-75fa-4ece-b373-a6be923f0bd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1914cae-ce31-436b-9cd4-c6de33b0b8d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fa3c6e4-67ec-41d0-9f57-386dcb9a43f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2608f4f6-490a-4bdd-ac26-0a5607c26e70",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e093a926-b1f0-45f3-8aab-a2c1c06a54c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a329ddfc-d2e0-4d9f-9707-0e8bce65d56f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eda3bf2d-c2ad-4f57-94f7-1f88a6321125",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "262e5185-3aed-453c-9454-d02b82f2ca12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3677854-8f89-4ba4-a8c4-adad3930cbf0",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11160309-14f8-4536-8251-ed65f428c02e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6a0eb52-2e52-4db3-a95a-6e9ef03c458e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00d5d021-01cb-4d1e-b3e6-ebfeee50a55c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1491488e-3327-458a-be9f-77ee777aaa61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94dccba8-bc51-45f2-9c47-292c885e78b9",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f38bec62-7b8d-4bd1-86cd-bf3781a2124b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "826b9dc1-81f1-4cc1-bd32-818bf5620d2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea309fee-88dc-447b-b802-0e45baff09ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "966eb669-44f2-4c03-9935-eb390c9b29d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f08c36f-25da-45e1-9bf3-f09a3b50a6f7",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32d92909-a517-4b04-8bef-f28f46b4110d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e2c79ef-7620-4d19-93a8-a18888840f84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4b658e4-dc8d-4e30-8cae-45ed848e3ce6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d11bd29-0481-474c-bf20-daa7406f9572"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b01756d-1164-48ff-8b44-f2d7952dc2c7",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16ebe84e-d2d5-4b6d-a3e0-94b05bc7051a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90547086-2888-4c8a-b61c-f89988470810"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40325d6a-18f5-4cfe-8c96-17e17bbda012",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4a82d11-59da-4f0e-b011-fd243aaa04d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81795eae-5023-4664-8b09-3a22913414c4",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55f3ba06-0862-4c9c-bdc8-3a2c8e53e7ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29fec08c-d36d-431d-8fe8-144469350ec0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e7cca8d-82d2-4ec6-ba4c-32c6c7fffdf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a767e10-1c86-4d99-9b2c-485309f4d9d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "828d86e1-81d3-4f24-baa9-5064dd00f4f1",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a05bdd9-f986-4d35-882a-f0444ea6c081",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f84a8b6c-9814-41c8-919f-df949a1a3ce6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0365cb23-92f6-4db3-81cd-99c0b0b03861",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63e4b257-67d4-4729-91fd-5adac043cfe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "608b38a6-75cd-4042-99c3-921cff4f80d3",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b54220b0-3a6f-41d8-84d5-ffacdf31d7d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "197e20b4-04d2-4b22-9ef1-40df0d3899d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f477b362-e61a-4872-b4de-2ce1b7acc45e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0235ecc-9a71-42c1-b546-cc76081e8a7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "235f519e-2bed-4ef4-a218-bd29f1afcc77",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "957fe0b8-4fe2-4d8b-b83c-779985677d22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf439551-9cdb-410c-b719-7d3fe80d0dd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e049280c-b727-4b38-b2ea-63b7726a4499",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8a66e79-d343-46ee-a163-c399a60a4a1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbafe701-98c2-413d-b4c5-0332ba67cc3a",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a6af579-41de-4008-bd48-d20fbde095c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73693fe1-dc60-47a4-adef-4c72fc493e16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "855e987e-933d-456e-802f-1a2b4f984b67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1a7ff00-c9d7-4717-8c47-d1f0550d56e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d225a90e-2df8-422b-8ad7-2ece6ace69ae",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3f99b56-3179-42bb-9a78-08fa35652d3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05169741-ebc9-437c-91b6-89e2671dda8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fef4bf39-8b93-467c-8c65-9a69d73b8ff4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d21f04ad-af74-406e-a3e6-cd84e7edaa1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27a632bf-4aaa-4823-aac5-24b5db3c192e",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c21953c1-70a1-49b0-bf65-7476751936c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9cf9f082-cda7-4be5-b412-172e0bae6710"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bded13ef-1802-44e1-b7ee-2f4600ec1294",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10699b48-8a3c-4f7f-b2d4-8b7cdcce66aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e9148b1-ce80-4e17-9590-6c58afffac6a",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41b1556a-7a20-4b89-871f-334fb66b68fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ccd7900-8df2-4a8f-91d3-4d892c5fc6e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a6ef179-eab3-486e-ae94-7ff3f9896aa5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdf5b17d-03f5-401e-917f-f1fdb857eaad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "623a74ca-2c87-4ce8-9a80-deac0748200a",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e832047-821f-44a3-bfcc-3441b8359937",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "813591eb-4918-4866-8e83-70021e108ed3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ac04a12-803e-4ecb-ace0-ca406267f42b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a717ef7-78e2-4d93-bf7d-0b59288e9ca1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "484f6751-4d1a-4bcf-ab9a-fecf1eafffcb",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8739ee8-6d4e-4caf-8f40-2644b88f1340",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2597a3d-426b-4915-b376-5d832f8c9db4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6594f996-385e-4116-b5d2-cd6f4c06960d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c61eddc-c08b-41b7-89b3-02c0ba6e5ead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfe9c1ca-e16b-4ee5-aeab-7275c73433fb",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cc64d50-a836-450c-ab50-c70c635eaae3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b09fbab-d2ff-4f48-bb4f-b4b3679e0430"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5d2da28-43bd-481f-b708-15f023d7435d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebb12893-e9bb-43d9-abda-9cea7e9d0cf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7ebf25a-3dd3-4d27-87bb-d9a757880976",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afcb9c5e-0ba9-4b24-920e-26e2761381f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef398fcc-a7d6-4981-8ea0-1c2dce889d0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d96b4bf9-2301-4d5e-91f0-552336ccfd4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7edc8d1-c2e0-401a-bc60-0fe60c558e0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da6d20ee-354d-4c73-a9ff-5656438eaef9",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dbae871-e861-42cb-beae-88f191a8acd5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b88a982-5443-4eee-92e1-63eec27533fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a3b7af3-3e05-4130-b5a3-f29f3c6c1693",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df9b87f8-dcce-4fc9-a6a2-13db14812482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5375008-33c8-4063-979f-034bd4362a54",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87721a83-e7f3-466b-b387-f1e5807d3d56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9b5b04f-45d1-463a-aa1e-b2a79c2184bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9c45813-00a8-4bf0-9449-f4761067196a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79f29332-0385-48da-8f05-888e048e6eaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f769261b-e7d5-447f-bc3d-6b8a8a5bb912",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "232543af-5f0c-4f08-9dce-0a0e1a047af6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98b6482e-974f-4336-9a8a-fb0c26bac288"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "305897f3-ac60-415a-8173-5c0821f7884e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83d96950-3f74-4726-a579-74ce2ed536b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a12fe184-e8d0-4612-925c-cd032d74fd3f",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a50a2c97-66a7-4f35-b71c-40648a3339bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed728c36-ed19-4509-bb3f-cc56d8db76b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c33cc22d-ceb0-4efb-b9ed-2f60971113a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f753756-2c58-419d-a959-fc3cc8b51cd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48335c37-8abc-42cb-ba77-f6a1c6aa9af4",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "227b9f08-1fbd-42f1-a9a5-caff31a616e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3aab3a28-15db-4d02-a66d-caebd8357abf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e0e673a-3892-42ca-9653-c3f7ae578cd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a8c3c57-cd5c-41db-ad6e-75a0a25b74c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "976e0fa1-ca1b-4d35-96ef-45e5bbf44d1a",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8794c0f6-eb5a-4323-a1a6-9726c691809f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f81b61b4-8bfa-48a5-ab7f-244887aa435e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e41ff84f-9f49-4fe5-ba00-7c5f2cb24de0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72940637-fa17-4042-b05e-8fff46506869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a269cf5-999a-49e5-b82c-a1577e57b4ae",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc3eaa7f-bfd5-4ebb-8b32-bd054ebc29fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2ca0090-ec23-47a0-8d19-f12e3a470afb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96fc1ad9-0604-43fc-960d-0dff5a09523a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99c0821a-aca5-41a3-87c6-779c624f698a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df8723d9-7c3f-48db-b43d-c479f78a26c4",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e1f7d71-c7fe-451b-b166-dca26b6a4a65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7dffbf8a-d6ee-4984-b6df-feae2636c6b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18abe419-cb86-4a99-8b06-b8760140d15c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1d78d3c-9f95-41a3-a417-5bc741271972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86ee97b4-4402-4dab-9c47-9ebe1fee1aac",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "813b9683-f511-4a05-8820-3eb525684db2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35e39495-4877-4f07-b469-cf0395fc3199"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0580e390-9b0c-43c7-9218-4b53b6ecb7c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43f54839-a773-46c0-afae-2e05b3a75bcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "758c4c47-3523-46b1-b451-f4f71137ea0d",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bcca0ed-07d0-40f5-80d0-185828de251a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b730b23-72e2-40dc-874f-47dce40eddca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "452f41e4-4998-4d1f-a0eb-5703f249dbb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89105d2e-eabe-40bc-89b0-30ae3dded6e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc18dfa3-ad23-409d-87e9-af21878bf8da",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89bec047-d2b3-4e5b-998f-3e91115f2cf6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "baa42d55-40c9-4f4b-a021-4d813ff9a272"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "986cc285-6bfe-4702-bbd4-9086dc927d7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "264a9427-d84c-4c16-a407-3b9aa629bad7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c4df0f9-d70c-4eda-b99a-1e110269cf44",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f18e622-ffd7-43ee-945a-dd2c5a1570bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e9b8ab4-a0f7-4741-a7b7-1ae3cfdec765"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe1745ed-b3b1-4e1f-85ff-ac3cb78aa26f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "125d7351-a44d-4c92-af8c-5a8b9f0a0d85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "099d2266-d8e8-405a-bacc-a180b1cf305d",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "354ef28e-ecd6-4c6f-8d02-5ab5e29abd17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5517a72-a5b2-4249-8cbc-1702927e2d74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cad82997-e86e-44c2-92ca-ba7fbc848a04",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e3a2734-c173-4a91-a95d-cca6eabf4493"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b4279f8-02cc-4087-9d76-66df20e851cf",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c6fa5f4-a8a8-472d-8a67-eb4eff8c93dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82b892b5-495d-4ee9-a3fb-0474c63dcd20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6051e872-286a-48be-83c4-5147cac7085c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaf7c473-0706-437a-b57a-86bc66e7831c"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "833bc2a9-28b2-4a25-b71b-a04938159d78",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e98c91f8-0ad9-4e6a-8e49-6144c510b94f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f9425a63-9773-48fc-bdaf-f541e43661b2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1964385b-e9f3-4b18-b08e-98189cd41859"
                    }
                  }
                ]
              },
              {
                "id": "914bc4fa-5611-4bac-b335-f33777e5c868",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fc11de6c-984c-4002-85a8-8f87d63aeee9",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee812fde-35b2-4cd7-8edc-16e31def664d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "1c1a5125-51a6-488e-964f-10f0840ae6e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eafac07-6d78-48d9-8bdb-46e569261c31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6cab8a5d-5be0-4cc4-895f-a165e75c584f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b56aaee8-8194-433a-876e-719c932dd006",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb5a142e-e55b-4946-9209-05a76df34173",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "e694f188-b922-4922-9701-2ad2c2b1b86e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e264c792-59d5-4cfc-b31b-6c8ea0de73a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9d8a586f-24ec-4695-9dc0-fec65b75baac"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ae565161-5be7-45ac-a1ee-eb26bc354a82",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a02f021f-7929-4602-9a4d-08f6033797b1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "85b00b29-3555-4da6-ab43-45b101e6583e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "25d92aec-43ff-4609-85a7-077eb9b6da53"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "1731827a-a568-4cb5-bd96-7f039931e23b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "47952adf-c4df-4dfa-b9cd-a5a9c57f962c",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cc9852b2-3892-4103-a4aa-02d368d23ff3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "12237d31-61dd-4cbb-bc84-b1cb3b098e77"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d4de05ea-45f1-4122-bfd6-8bf030a8c988",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7cf14be2-1da0-4c36-b993-79661794001c"
                    }
                  }
                ]
              },
              {
                "id": "9e44723e-64bd-470f-ac2d-66b8f57634c1",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "84c52d0b-318b-40c2-8ad5-2cb8ad6728a6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8f4004b7-d492-404e-93ee-0dec98217d20"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "655c12ce-c658-4607-a965-835fa1438f0a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "26225897-ab38-4b67-b250-ad8a72ad936c"
                    }
                  }
                ]
              },
              {
                "id": "c2ee5147-be68-4069-8ab4-95268ae058bc",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "21bab9c7-656f-40b1-9b2a-c0417d6aad8b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "889d5123-0b90-421b-a511-fdeb74ae1349"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "af4c58fe-3a31-4bcf-989f-aa28164e7f55",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1f987da6-80e9-457a-bee8-ce496139cf73"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c71e8963-2110-4d18-a76e-2cc0c5e955f8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "76953970-1b84-4762-8517-b5ddfbaa84df"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1a5de4ad-0401-40c4-bfdb-c067af8ef421",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1c109ea1-8c1a-42a1-ba97-17c0ece8ce72"
            }
          }
        ]
      },
      {
        "id": "f991ee98-cbac-45d5-bf0f-e8ac545c4e26",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "00d214b5-a1ac-4fc7-8559-83141dde0440",
            "name": "Negative Testing",
            "item": [
              {
                "id": "613ab7e9-595e-4863-865b-120c3b79bfff",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1d03c972-76d9-458f-bef8-5255529ddbef",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1961d68-6cf6-4627-8e69-b84299d16c01",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "bb1f0cbf-564c-4277-8741-d5e1c7efeb11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44fa61df-661f-447b-ab64-2877dce07087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "01c793ea-0b8a-4764-8a41-f6b76b432930"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5981485c-c23d-4262-93c1-7e4bccc1be5a",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eacf328-b761-4a58-97ff-ccf79a28c5f7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2dae8ba8-24fa-4266-a91f-6dfd91905558"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8edc397c-557b-4bd6-8914-d194f5d565d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e38e5a1f-33e2-4be4-ae3b-89b5a94f9273"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8e0e8833-9111-41b4-a03b-8f48b6e18547",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c821554f-fb30-432e-aac7-199c7d800168"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c6ee5ba5-2db6-4992-a030-1eae9351d416",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ca289bce-2b9c-4d19-b57f-1151dc19f430"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e652f449-ab2f-4328-97ab-f41b27a3b21a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "3a073fd2-e4f9-4e27-9789-3a0b9fcd73fb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "07797308-e0af-465f-97ae-a1c334c657e9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f027fa03-8524-4770-825e-ea11ca674a3a"
            }
          }
        ]
      },
      {
        "id": "4e0f2f50-aa60-4907-8a3e-b91d4776f1e0",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "2feab54b-4bcd-4254-af1f-ac61de8ab0f2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2da63c13-62df-4dcf-94ba-91bee054cba1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e985bf24-d4a2-4979-bcb6-b417fbb7ac25",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cf4870d-05d6-4657-8c7e-bfbb03659bfd",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "bb09f11c-a34a-479c-970a-e8e0f727a62c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62923041-affa-47e5-99f0-ce5934967384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e6bdcbff-a645-45b6-961e-a37d44596ffc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d71f374b-8041-40d8-92de-9bbf4a9c388a",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d320a79-db67-4fd1-8d72-a8cbd5ed7f2d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2540590e-9948-4f9e-9323-5f7d6650e834"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1204c477-a014-4c29-be42-2d62a1ec4a0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f6a948c7-5b9b-4693-8758-f88bd5787d37"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9c0dc88d-7dcf-49cf-8f76-d00557403681",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5a2d50a8-21b6-483b-943a-fd130620d2ae"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "55c19345-4079-4c2b-b1e7-10f1379f226a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e9959adf-2bbf-4b86-940b-ab242fd0ce2e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7e21c6aa-413b-4b41-a700-101a2cd0f520",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "206a3298-942f-497d-816e-6c1436298598"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "079c4207-4c97-4935-a425-4da2652af371",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7aa583db-cdd2-406c-8d7e-540fb543406c"
            }
          }
        ]
      },
      {
        "id": "b952282f-8295-4870-825b-0747193def2c",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "0067c6ec-aa9d-47ba-bdcc-b0c45b7764bb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4f791229-d41a-4f13-b73e-03c0953e9962",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e374e791-c1ab-40e6-9213-6d76fabdb9e5",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e56d642e-d402-42bc-96fa-bb3b3a2ab26c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3e39b9c0-4eba-4cd4-a2fe-3f86cb28d1a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "114b232b-20b9-4a1e-a94c-e1eb427e3491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "07495582-fc99-47af-8820-adfb2eea8897"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d78f58d-7912-4b47-83b5-a1966a5f7d3a",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c449d3e8-41fd-4010-bee2-2f3ed91a1cd1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "973cbe29-97c4-46bf-8a35-5c45135ce038"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99c6ecca-fda7-4280-81fe-1e977a001974",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3adf0b9f-b016-4941-bb51-e35e6609da49"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c5ec1045-a3d9-4685-a0b5-b2c5aecefac0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "85014dd3-6461-4e25-b6dc-6a2b2162962d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d9d48117-04cb-4f72-884f-d183581d1f6c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "95e2503f-afc5-48a7-bdb6-b730e6913d95"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f241a2f5-6d78-4461-af6e-5bf1ba7ed158",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "67d99bab-37e1-4530-a32e-fb442c3ead2b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "450dc530-d0a0-4345-90df-5896fa141e68",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0fed86b1-b12a-4820-8b7a-522b92536ce4"
            }
          }
        ]
      },
      {
        "id": "a6f8bd93-c99f-4b04-9c53-dfaaf86849f6",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "22a3ad34-3ecd-46e6-9d67-b62e165e1afd",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f97be831-137a-4ce2-ab4e-e0945d73e242",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "b3d7bee2-ed9c-4a0a-96a0-1cd4f0f93966",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8e5ca6aa-ae15-4d5d-bcf2-08562bf9ef1b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "08a198db-0aa8-4bb3-82b9-c7ec70a4e652",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 505,
        "pending": 0,
        "failed": 86
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 196.8076923076924,
      "responseMin": 6,
      "responseMax": 4534,
      "responseSd": 425.923496130717,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1666745451669,
      "completed": 1666745513674
    },
    "executions": [
      {
        "id": "75cb51de-4803-46ed-b3b3-e8bbd1ec9f1f",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "05a33aaf-ac0b-45b8-80f2-cd3e3303ba9f",
          "httpRequestId": "7f392bee-9bbe-4576-bf6c-8db3d7fd0c34"
        },
        "item": {
          "id": "75cb51de-4803-46ed-b3b3-e8bbd1ec9f1f",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "79bbf7e5-fc13-4ac8-8c46-b8625478710c",
          "status": "OK",
          "code": 200,
          "responseTime": 54,
          "responseSize": 0
        }
      },
      {
        "id": "6e77662b-cfb8-452d-a205-0b57a00f4379",
        "cursor": {
          "ref": "d15f1aff-2e38-48da-95e2-c1a003bd9f37",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f5b99e9d-e8b0-45ef-aa4e-00a31f3ec442"
        },
        "item": {
          "id": "6e77662b-cfb8-452d-a205-0b57a00f4379",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "ca9b9f5b-f163-486f-8e70-5ca166e722a4",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "04a2e98c-514d-4d4d-9189-670b3dbb4fe2",
        "cursor": {
          "ref": "bcc896dc-eb42-439c-ab65-0189c19cebf4",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "91a42922-598f-4792-aead-c89c0ec55a0b"
        },
        "item": {
          "id": "04a2e98c-514d-4d4d-9189-670b3dbb4fe2",
          "name": "did_json"
        },
        "response": {
          "id": "5b5620ef-5a76-422e-966e-9e14f391e5ca",
          "status": "OK",
          "code": 200,
          "responseTime": 2142,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "631cb981-8b6d-4d90-ad05-e5ee071fa30a",
        "cursor": {
          "ref": "a66a8375-bb37-49f8-85a9-4c851284aad3",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f77ef082-539d-45cc-836d-c8aa9f5ce58a"
        },
        "item": {
          "id": "631cb981-8b6d-4d90-ad05-e5ee071fa30a",
          "name": "did:invalid"
        },
        "response": {
          "id": "fdffcbb5-6ff7-4407-ac5b-d6503e644949",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "631cb981-8b6d-4d90-ad05-e5ee071fa30a",
        "cursor": {
          "ref": "a66a8375-bb37-49f8-85a9-4c851284aad3",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f77ef082-539d-45cc-836d-c8aa9f5ce58a"
        },
        "item": {
          "id": "631cb981-8b6d-4d90-ad05-e5ee071fa30a",
          "name": "did:invalid"
        },
        "response": {
          "id": "fdffcbb5-6ff7-4407-ac5b-d6503e644949",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50ef2a9b-e15c-482f-8118-e8089c8282f5",
        "cursor": {
          "ref": "54ad999c-9159-4289-80e3-365802d77951",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "fe9fcb31-4c87-40ca-b3dc-8fd6b4246bae"
        },
        "item": {
          "id": "50ef2a9b-e15c-482f-8118-e8089c8282f5",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "9886631c-71a3-444e-a17e-5745c4777420",
          "status": "Not Found",
          "code": 404,
          "responseTime": 443,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34975eeb-35df-4655-9fe7-12be10a32ce2",
        "cursor": {
          "ref": "afd9b381-4d87-4d92-ab3b-45c1616a1f0b",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "0f97af97-482c-4ad1-89e3-0090eb8a95ad"
        },
        "item": {
          "id": "34975eeb-35df-4655-9fe7-12be10a32ce2",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "e626b856-9359-4430-a2b0-d6ae245b0839",
          "status": "Not Found",
          "code": 404,
          "responseTime": 33,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f25565ee-cdb8-4d13-a09d-b22f8561f0ef",
        "cursor": {
          "ref": "231817ec-fc1b-4e87-994c-a2929aac331f",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "873253a0-e4d4-40f1-a428-70ccf363c19d"
        },
        "item": {
          "id": "f25565ee-cdb8-4d13-a09d-b22f8561f0ef",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "92c78231-6425-49bc-bece-d133c830c0c9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 93,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b49f7804-9cc7-47bf-aa72-d27e26fd8bb4",
        "cursor": {
          "ref": "5ebf4f0b-bb82-4ec3-ab24-9af77ed4fbfe",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ff9f2b02-4ea5-4dc7-8050-e0e79a816245"
        },
        "item": {
          "id": "b49f7804-9cc7-47bf-aa72-d27e26fd8bb4",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "8e6f1b2e-b382-4e48-898a-089ad99b9093",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 18,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b49f7804-9cc7-47bf-aa72-d27e26fd8bb4",
        "cursor": {
          "ref": "5ebf4f0b-bb82-4ec3-ab24-9af77ed4fbfe",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ff9f2b02-4ea5-4dc7-8050-e0e79a816245"
        },
        "item": {
          "id": "b49f7804-9cc7-47bf-aa72-d27e26fd8bb4",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "8e6f1b2e-b382-4e48-898a-089ad99b9093",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 18,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dbc266f-d638-429b-aec9-f291833080f9",
        "cursor": {
          "ref": "afe40a1b-ae05-48a4-b1a1-9e7c75c6dd2d",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "45b57f8a-6ec7-4c4b-8f6d-0113e506892c"
        },
        "item": {
          "id": "4dbc266f-d638-429b-aec9-f291833080f9",
          "name": "identifiers"
        },
        "response": {
          "id": "18a49c86-2a45-4c20-9431-9efcbf8c04f4",
          "status": "OK",
          "code": 200,
          "responseTime": 411,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f26533be-c924-4699-a83a-d4cadd497b27",
        "cursor": {
          "ref": "b5624479-ed1b-4a5d-a35c-88b78f49ed71",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "de860309-a290-4924-810c-780b69aaa51e"
        },
        "item": {
          "id": "f26533be-c924-4699-a83a-d4cadd497b27",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "74f8e944-53a9-4f5d-bf7b-f7d3827a7ea4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f26533be-c924-4699-a83a-d4cadd497b27",
        "cursor": {
          "ref": "b5624479-ed1b-4a5d-a35c-88b78f49ed71",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "de860309-a290-4924-810c-780b69aaa51e"
        },
        "item": {
          "id": "f26533be-c924-4699-a83a-d4cadd497b27",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "74f8e944-53a9-4f5d-bf7b-f7d3827a7ea4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04493f12-be88-4e1a-b88a-e398801503f5",
        "cursor": {
          "ref": "4a71556f-83ed-4d55-8c19-5ac75f8105a2",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "1337465a-93f6-4ecc-ada2-f649ce3a1514"
        },
        "item": {
          "id": "04493f12-be88-4e1a-b88a-e398801503f5",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "0b3883b5-814c-4cc7-9a89-1e529427eee8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 183,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5d91237-d6e9-49df-a74d-d322c7c0df52",
        "cursor": {
          "ref": "c1d58265-71d8-4070-befb-e4b20df1e893",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "bfabdd01-b11c-44ac-9d8f-2bd34b1aa6c6"
        },
        "item": {
          "id": "e5d91237-d6e9-49df-a74d-d322c7c0df52",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "e0997f12-a303-4c85-9b43-57b179dbb16c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de5b9b88-c931-4542-8821-015a62a3e86a",
        "cursor": {
          "ref": "e7978b1c-483e-4ea4-b1b3-1d05829334df",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "b9e7c2bc-54c9-4b4a-b0ba-8585c6dd64f9"
        },
        "item": {
          "id": "de5b9b88-c931-4542-8821-015a62a3e86a",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "c263c703-441f-469b-bede-0d1f89483a13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fbed2e7-a556-45d4-8310-65476bde498a",
        "cursor": {
          "ref": "abaa8633-6e1d-43b7-a40c-21b3cafcccb0",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "c750fe10-7689-4bfe-a05e-bb32a386f1a9"
        },
        "item": {
          "id": "9fbed2e7-a556-45d4-8310-65476bde498a",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "ae836672-4616-417c-9f8b-61981e7e94ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ff8d59a-fa50-42af-9441-ce05e5c95f51",
        "cursor": {
          "ref": "ab9a0d10-5676-484b-aa05-514efe02eb22",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "41b11b62-48c7-4aee-b915-6cd50bec3167"
        },
        "item": {
          "id": "3ff8d59a-fa50-42af-9441-ce05e5c95f51",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "dba4a1f4-660d-40a2-8397-98aee0929d9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c161cc2-72da-4e91-a29f-c7ac1d89fe4e",
        "cursor": {
          "ref": "d0fa0d58-f2fc-41c8-bbdb-013a664a89d1",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "b115ae03-820f-4157-a989-093004496a27"
        },
        "item": {
          "id": "7c161cc2-72da-4e91-a29f-c7ac1d89fe4e",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "b1bf80ac-f921-453f-bc04-0c42fc46d71b",
          "status": "Created",
          "code": 201,
          "responseTime": 1705,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "b4c42c99-d36e-4f9b-8e3c-a0664174c71f",
        "cursor": {
          "ref": "c5be711e-ec6a-440c-b094-3bf9514f520c",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "4a8da073-31e6-4c58-8244-41aa48fba71d"
        },
        "item": {
          "id": "b4c42c99-d36e-4f9b-8e3c-a0664174c71f",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "088e1cf8-b799-410f-a69d-1275c87236ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 197,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49bf71b9-b982-4202-b44b-3d51dc8b5dc6",
        "cursor": {
          "ref": "ebb84267-2c15-4ebc-a820-f24305f4be7b",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "5091a166-571c-4009-8dab-e594d30a0361"
        },
        "item": {
          "id": "49bf71b9-b982-4202-b44b-3d51dc8b5dc6",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "99d311c0-fce9-4dd6-ad2d-5174203ab986",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fadcd323-cec0-4edd-84cb-fa31c465a49d",
        "cursor": {
          "ref": "82c0327c-c567-4477-8f23-24f1a7900ac9",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "05e9f3a7-ec01-4b9c-ab8b-f466c885f74b"
        },
        "item": {
          "id": "fadcd323-cec0-4edd-84cb-fa31c465a49d",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "b8c76b57-3b22-4e5c-a4df-d59ccb9608f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 142,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35679fb6-8aba-4f39-bd5f-260a76c249c2",
        "cursor": {
          "ref": "3710dc1b-c388-4daa-b05b-c94a69b09232",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "1373af9b-2684-476c-a682-e663f5e55585"
        },
        "item": {
          "id": "35679fb6-8aba-4f39-bd5f-260a76c249c2",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "718692ce-47c2-4c96-ac6a-3f27aa92433f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fca45a4-cb59-4d61-84a5-345e17f9c1b0",
        "cursor": {
          "ref": "7817b5cc-664f-454b-9110-d8de2d404bcf",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "bb9ef024-3af9-4c59-8755-c5b59e28143b"
        },
        "item": {
          "id": "4fca45a4-cb59-4d61-84a5-345e17f9c1b0",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "b3aef2e4-4841-4bd9-a707-c5fd84f8a199",
          "status": "Created",
          "code": 201,
          "responseTime": 1356,
          "responseSize": 584
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "d120e60e-a8f6-441f-b725-b2c8f55f495e",
        "cursor": {
          "ref": "684ff18b-c033-4ae2-b2b2-3ae40bec3187",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "c6f7986c-2bea-43ea-99a5-24217ae419d2"
        },
        "item": {
          "id": "d120e60e-a8f6-441f-b725-b2c8f55f495e",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "e4dd623f-85d5-4ad1-848c-27fd9543a7a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9ff50b3-e6d2-4881-a77c-360b41848eff",
        "cursor": {
          "ref": "454e1f0d-88d3-4963-9aa2-affd331fe51e",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "84371fe1-2871-47ea-9558-d13119760d2a"
        },
        "item": {
          "id": "c9ff50b3-e6d2-4881-a77c-360b41848eff",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "603abb67-982e-4ed7-a5db-426cd7eb6caf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9333c44-94b5-491f-b4a5-1cd1e26efbcd",
        "cursor": {
          "ref": "525b4ec5-9457-4cc5-aada-9cfb277045d3",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "d7d061c7-6992-48d2-b8e1-aed8101c228f"
        },
        "item": {
          "id": "d9333c44-94b5-491f-b4a5-1cd1e26efbcd",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "6b32650f-ad80-4d3c-aab8-74601aca92b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64800618-6fcb-4d75-9653-1c1f598d09b3",
        "cursor": {
          "ref": "b70b803b-45b4-4b31-8f3c-fa8973b31176",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "1264b2e4-6f73-4c65-b69b-f5c0737f743b"
        },
        "item": {
          "id": "64800618-6fcb-4d75-9653-1c1f598d09b3",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "4ced469b-24d1-4554-85aa-2abd64dc27d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 362,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8305f93c-be98-45fe-8c19-4f65810e1a72",
        "cursor": {
          "ref": "9dd1579e-ddbc-4ec7-b27a-58cc24039d5b",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "ed444c43-eec3-4d3e-a189-9b2a151faebe"
        },
        "item": {
          "id": "8305f93c-be98-45fe-8c19-4f65810e1a72",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "109a1d4d-610c-4483-914e-1199ffecb639",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ba4084b-2111-4f64-8e3d-2c642e7a454a",
        "cursor": {
          "ref": "304a4b20-e8f8-4efb-b639-26b79c247487",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "6a6f2b89-8bc3-46e0-8b06-a29b0cac12cf"
        },
        "item": {
          "id": "2ba4084b-2111-4f64-8e3d-2c642e7a454a",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "ee5d8afc-37b0-4bdc-b110-4d2e9c11de30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51ae11fd-4298-40b9-8256-9cc10c0613cc",
        "cursor": {
          "ref": "97a37d34-745a-4fcc-9c65-167ac2565e93",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "2e3db0d4-7d83-474f-94be-d50055051432"
        },
        "item": {
          "id": "51ae11fd-4298-40b9-8256-9cc10c0613cc",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "c8977cfe-18e0-4793-9eeb-7e6a66d2fff5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dd1a1e3-ff48-4cce-b26d-b6e59df17729",
        "cursor": {
          "ref": "769697bf-9c35-40a0-ae1f-9cdb0de49800",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "6c6f6049-d9e0-4ee4-b68a-1101bb82eeaa"
        },
        "item": {
          "id": "4dd1a1e3-ff48-4cce-b26d-b6e59df17729",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "a650605d-46d9-4079-9443-1c369dd6c6fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0989776-ed7d-4d34-bd99-64bc980fca6e",
        "cursor": {
          "ref": "cc33bd91-a2e2-4e11-b9d0-90e46f202040",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "788b47bf-b9aa-488f-95c8-46daa8c563a1"
        },
        "item": {
          "id": "e0989776-ed7d-4d34-bd99-64bc980fca6e",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "a347d9b2-78fb-4b5e-88f9-0130ebdd0b08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 188,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e20f9287-1e37-4788-86df-ada704534d65",
        "cursor": {
          "ref": "f4d78d63-70d0-4a6b-8d4a-096a82df8846",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "9b0a8757-5309-449f-980c-54330369c28e"
        },
        "item": {
          "id": "e20f9287-1e37-4788-86df-ada704534d65",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "cf6dae0b-7feb-471a-8353-42a0024f5285",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8124e731-bf78-4d90-9916-876a473844a4",
        "cursor": {
          "ref": "ae5514b2-d588-4d96-8c64-5970da84994c",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "70798d1d-6a40-4c4c-87a7-b9607feea5db"
        },
        "item": {
          "id": "8124e731-bf78-4d90-9916-876a473844a4",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "e3c65312-4571-4c49-be09-0d91a1f93e1e",
          "status": "Created",
          "code": 201,
          "responseTime": 1244,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "623db153-d17c-479f-903b-5af840b26683",
        "cursor": {
          "ref": "d64dbbc5-8f7f-4802-a6cf-08c3aec80133",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "f66f83d1-3567-4fe0-bd12-0e3214aa1605"
        },
        "item": {
          "id": "623db153-d17c-479f-903b-5af840b26683",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "3158d0b0-29c9-43fc-8557-5b9b2e22c2c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42edf743-38d4-4186-bd6b-6c1371d357c8",
        "cursor": {
          "ref": "88f7a30f-fc98-4fc6-be5b-7f4a4485cadf",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "241459fb-2446-4fab-a50a-ee0e1b424b87"
        },
        "item": {
          "id": "42edf743-38d4-4186-bd6b-6c1371d357c8",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "4c18e229-d79d-44aa-8407-982375789c24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89a92be5-7f2c-4a7c-a960-a2088b6a4138",
        "cursor": {
          "ref": "9ec86e36-da41-4eb2-be52-eb928514665f",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "1328ea26-e876-403b-bdc3-9673eb83c634"
        },
        "item": {
          "id": "89a92be5-7f2c-4a7c-a960-a2088b6a4138",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "70ae2a9e-bad6-4d30-891a-d5d20c9f5e15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76ce62a6-2871-4b2b-be69-514b21772077",
        "cursor": {
          "ref": "9c878a19-8647-48b2-81a1-64c8662641ef",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "acdffdb8-8974-46cf-9b6c-6b3e4f5eb8ad"
        },
        "item": {
          "id": "76ce62a6-2871-4b2b-be69-514b21772077",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "ca41db61-31b7-4aca-82bb-82b5fad765d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84d25f7c-41aa-42c2-bb30-5cf915959938",
        "cursor": {
          "ref": "6415f0b8-0a1a-4dc7-a91c-60a1587a310c",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "52139241-c9fb-4d06-859c-f1535c831314"
        },
        "item": {
          "id": "84d25f7c-41aa-42c2-bb30-5cf915959938",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "e66933d9-825d-4623-ae34-8e4bd7e9353a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "739bda29-59ed-47bd-a721-74199405f154",
        "cursor": {
          "ref": "5392bc2e-1f6e-426a-8c09-a729297d96d4",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "5c2ebe28-7d42-40cf-9905-20b0faa877dc"
        },
        "item": {
          "id": "739bda29-59ed-47bd-a721-74199405f154",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "4405298c-6c57-4883-83e5-e3a5ab0b0202",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8023387b-499c-486d-87cc-d639b04d56b4",
        "cursor": {
          "ref": "068317c1-66bc-4046-b969-70d6b89b9c7f",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "3802a71d-95f8-45b3-a5ed-bc7c7bb83710"
        },
        "item": {
          "id": "8023387b-499c-486d-87cc-d639b04d56b4",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "d71c636f-db17-4f2a-b2a0-770b105962f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b03bb9b3-37de-4da2-ba7c-ecc4edf14e10",
        "cursor": {
          "ref": "a6904e9b-17b7-4726-95b7-e34e615f50c8",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "4827eb66-2366-4de2-9ac9-0b70fd6e073b"
        },
        "item": {
          "id": "b03bb9b3-37de-4da2-ba7c-ecc4edf14e10",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "38dafd2f-d7d9-4814-9888-96bcb4afdf8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1486cd6a-d7d0-4324-9096-3210f09aa858",
        "cursor": {
          "ref": "07aab7b0-43f9-4707-90df-2dd7fedf7423",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "2c351dfa-7ff1-4205-a1fe-0bee10c4e774"
        },
        "item": {
          "id": "1486cd6a-d7d0-4324-9096-3210f09aa858",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "613cca1d-0594-4dfc-94dd-176d70186719",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e0a5612-c3e6-406b-9af6-7d5d0081c20d",
        "cursor": {
          "ref": "6e6eb773-c73f-408a-b393-6a125772b82d",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "91bd1752-980e-4818-847c-0c05d32d1744"
        },
        "item": {
          "id": "3e0a5612-c3e6-406b-9af6-7d5d0081c20d",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "90d6c1ab-9493-42ae-adc1-b873c79d7ef2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 232,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9566ccc7-20a5-4e29-9f56-6993575db856",
        "cursor": {
          "ref": "2e2ac79e-5699-4124-ae29-e80f8d0787b1",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "36a8ba73-6157-4ca2-bb73-9924793244cf"
        },
        "item": {
          "id": "9566ccc7-20a5-4e29-9f56-6993575db856",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "747aad9f-038f-4d9e-8b67-59032a7827a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3fba540-1b5e-4de7-81b9-4ccd398330df",
        "cursor": {
          "ref": "5876f707-d58c-48a6-bb57-934f865e880d",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "f4a6ca5e-26cf-403b-afbe-d3b9f3d7e451"
        },
        "item": {
          "id": "a3fba540-1b5e-4de7-81b9-4ccd398330df",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "d55eadcf-f510-4d83-a0fc-5273da38cd56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8f416c6-18e9-44ea-923c-a32872d0227a",
        "cursor": {
          "ref": "1190d2cb-5f44-44f8-af77-d8bfb81b3d5e",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "19841b51-e2c2-4c77-941c-a0a2086ee84d"
        },
        "item": {
          "id": "f8f416c6-18e9-44ea-923c-a32872d0227a",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "c2bb979f-ee0f-4a4c-8c5e-e232be805c67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 796,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "7b271b46-74d5-4c73-a06c-7a109635a28c",
        "cursor": {
          "ref": "61398b54-ce22-4fe5-95de-dd22e37bc878",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "b6a90ab8-384d-4959-a0f0-10648429a0c3"
        },
        "item": {
          "id": "7b271b46-74d5-4c73-a06c-7a109635a28c",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "4b545d83-03a0-4a8f-9645-f7b9bdf50235",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 175,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14c61287-2e2a-4f9e-aea3-725bc3dfcfb6",
        "cursor": {
          "ref": "060a4a52-9f93-47d0-8abf-eeeeebf674e4",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "2be7e236-4998-4e79-b26d-fcae3496f42e"
        },
        "item": {
          "id": "14c61287-2e2a-4f9e-aea3-725bc3dfcfb6",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "ff15aa15-3091-485d-911c-0c5a34192623",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3299914-ebcc-4170-9cb2-a6ac0887081b",
        "cursor": {
          "ref": "a4f11f10-1c0c-4ec0-bb94-6ea8a2b7d3e2",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "b124e460-c66e-40e9-8430-eaab726964d4"
        },
        "item": {
          "id": "e3299914-ebcc-4170-9cb2-a6ac0887081b",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "3bce76cc-b26f-430f-8530-bf9e7b6694d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2751acab-8065-4617-bb3a-83daf64157f4",
        "cursor": {
          "ref": "6246f447-f6c7-4ce8-b43f-5c2d4281d4cb",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "53512497-20b9-46ea-8a52-4a3218d276ef"
        },
        "item": {
          "id": "2751acab-8065-4617-bb3a-83daf64157f4",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "a4502814-f938-49e2-be56-15cb96d2d202",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76622443-d0ac-4f74-a34d-7b43c6992154",
        "cursor": {
          "ref": "1daf35b1-2cc6-4ab3-9209-05ca77084b01",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "5e77f68b-1cde-4f00-bcb7-23beac6401a0"
        },
        "item": {
          "id": "76622443-d0ac-4f74-a34d-7b43c6992154",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "deaf2c4a-af90-4b71-b9c8-b82caa3729c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec932c9c-7ae4-4f93-841f-353a41027212",
        "cursor": {
          "ref": "db9084d0-a73f-4c66-8afb-50d883f30cfa",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "4f720409-8d29-4122-96e9-28230a5875f0"
        },
        "item": {
          "id": "ec932c9c-7ae4-4f93-841f-353a41027212",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "9751e7fe-a8dc-4b3f-87d2-747bfe52e5dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fcdfcb1-7894-4c43-8b56-ba0efeeef718",
        "cursor": {
          "ref": "b17d0f8e-093a-412f-a475-78a55d6a6d72",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "572488ca-07ee-40f5-8e58-d94ea9ba50fb"
        },
        "item": {
          "id": "1fcdfcb1-7894-4c43-8b56-ba0efeeef718",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "0321ae87-af3a-44f9-9085-d92951c6083e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 412,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "2f31129f-973e-48c3-a13b-f2b369187e49",
        "cursor": {
          "ref": "e3c3f303-cf24-424c-9a4a-e546283c72ad",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "b74bfa75-4f6f-4efe-a18d-57c00767289e"
        },
        "item": {
          "id": "2f31129f-973e-48c3-a13b-f2b369187e49",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "fc85065f-35bd-4383-ae1d-7f49a5a22706",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d85f643-5eb5-43c8-8632-3ce165e5f590",
        "cursor": {
          "ref": "8c14b941-fca6-4c3d-b32f-3b7a2cef660c",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "e0be148d-5932-471a-8354-dadf7f53af5f"
        },
        "item": {
          "id": "4d85f643-5eb5-43c8-8632-3ce165e5f590",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "8b49b148-141b-4b0c-8680-27fa44814d66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 177,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36cb25c5-5f19-4596-894d-b6e5840574b2",
        "cursor": {
          "ref": "4475aebd-3eee-4655-968a-2065452df69d",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "e8187bd8-5ff6-4306-bcec-9f5a31127940"
        },
        "item": {
          "id": "36cb25c5-5f19-4596-894d-b6e5840574b2",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "50fd9bb7-5846-42d7-b3be-a1534d87b51b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46d72688-08eb-4de1-9abd-9b4286984b14",
        "cursor": {
          "ref": "816c0886-a1e3-4c3a-b45c-72fc8998a6d9",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "7f452a32-9a47-4c3b-a7fd-ea59b707287a"
        },
        "item": {
          "id": "46d72688-08eb-4de1-9abd-9b4286984b14",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "c2707f92-72be-40e3-8a96-b13d9791ec63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e731330b-20ce-4e09-b455-108b4a598cb9",
        "cursor": {
          "ref": "9638182c-7634-4325-aaa2-a26513669cf6",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "4cedad10-ed20-45cd-b660-83ef1b6536e7"
        },
        "item": {
          "id": "e731330b-20ce-4e09-b455-108b4a598cb9",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "ba281e9f-b9f2-4d46-8bd8-6e1f9bf7df27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aee0e08-393c-40bf-8fce-f439cc88aee1",
        "cursor": {
          "ref": "6180de46-c5a9-4145-85e5-2a79baf720f5",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "ee55c1e5-1425-4ec9-a8d7-0254a734f561"
        },
        "item": {
          "id": "3aee0e08-393c-40bf-8fce-f439cc88aee1",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "a644bb55-5e84-450a-becb-c6f24f2c7528",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f53296d0-7c3a-4d5e-ad78-c8b953bf8bfa",
        "cursor": {
          "ref": "dc4f019f-2c62-4172-a681-a8d63ba51670",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "71ea8ce6-9806-454b-8f31-7ee663639e0e"
        },
        "item": {
          "id": "f53296d0-7c3a-4d5e-ad78-c8b953bf8bfa",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "587b5715-b96c-4fe1-9658-256214a506f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8403477-2d04-4d72-a91a-660a183bb5a7",
        "cursor": {
          "ref": "79d43d0a-fd03-4656-a8b5-50abab577178",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "ed44a524-875f-4af7-a13c-4c01e348ffe6"
        },
        "item": {
          "id": "a8403477-2d04-4d72-a91a-660a183bb5a7",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "b033eadd-af3d-488e-8ed4-db049b96af31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e11f0198-928d-407a-8e7f-ad53d06a27a8",
        "cursor": {
          "ref": "4b8f6132-8d64-450c-a07b-a8ca6cc3e152",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "f76fc96d-971b-4fe4-a721-a1f19473ec98"
        },
        "item": {
          "id": "e11f0198-928d-407a-8e7f-ad53d06a27a8",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "bf4f198b-ce53-4088-a092-3664456d0574",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a94ea1b-8f1f-48a2-b839-62b8b03e2dac",
        "cursor": {
          "ref": "af18c511-4997-4e93-b62a-891c6614f4e4",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "be6d57aa-18ef-405e-9ea1-6916e38c84c3"
        },
        "item": {
          "id": "1a94ea1b-8f1f-48a2-b839-62b8b03e2dac",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "1a7e2187-1945-4404-9110-d350b6109a8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "353eca2c-42b1-480d-aa0c-832efe42390d",
        "cursor": {
          "ref": "8ffb69bf-3284-42df-8c45-4193543b6f4d",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "2cbf08be-110f-4f9a-9ef3-3d360970fee8"
        },
        "item": {
          "id": "353eca2c-42b1-480d-aa0c-832efe42390d",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "846e59af-0b0a-4d87-8f55-5cec1744318b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc85e230-b287-450b-987a-3a2436febdfc",
        "cursor": {
          "ref": "37ca1d1d-1f0f-4ddd-889a-e499e1216497",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "da3ef297-1f97-4438-8700-353d6b3de644"
        },
        "item": {
          "id": "dc85e230-b287-450b-987a-3a2436febdfc",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "3dec266e-bb96-48cd-b1fe-8c93725e4ba1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f25ef1f-742a-4340-b9d5-02820426027c",
        "cursor": {
          "ref": "8cc04125-b7bc-4dc7-ab19-f8be7fc13cce",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "8c08ea76-ff4a-4956-a801-0fb1ebcbbc02"
        },
        "item": {
          "id": "5f25ef1f-742a-4340-b9d5-02820426027c",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "e83f3310-3233-4b36-8b8f-0a5d3db1ca9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e46fe62-9c43-4e7d-8fc2-62ed6a849a4c",
        "cursor": {
          "ref": "4ce167ba-f3f3-404e-b478-a14c2d9a9d43",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "f75c93c1-cd77-46d3-b6b0-311bf7a376ea"
        },
        "item": {
          "id": "6e46fe62-9c43-4e7d-8fc2-62ed6a849a4c",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "e88af428-0b25-4e7a-b760-171632f68b4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f92ab574-adc3-4e6f-b644-5474e073b665",
        "cursor": {
          "ref": "a7546096-ac5f-49df-b0a2-f601bbcc1e21",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "d06fd138-9149-42d2-9509-4740413b44ed"
        },
        "item": {
          "id": "f92ab574-adc3-4e6f-b644-5474e073b665",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "84f8eea0-3421-43f9-9004-5c81c674f0e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4ae6d3b-7551-4229-b851-cf3362da750d",
        "cursor": {
          "ref": "89faa53c-ac58-4542-aeb1-93f731ff7fa9",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "efd449e1-ec70-4441-be0c-8ad5feb511da"
        },
        "item": {
          "id": "d4ae6d3b-7551-4229-b851-cf3362da750d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "b7902e2e-415b-4188-8e58-0b7e7f13f5b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acedb7a7-ab41-4a1d-9e0c-cda92654578b",
        "cursor": {
          "ref": "b380de0b-35a7-4b4d-94a2-60de9db8a5e3",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "fd148038-3720-4c38-b4b9-79f9fcc6351e"
        },
        "item": {
          "id": "acedb7a7-ab41-4a1d-9e0c-cda92654578b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "d383f051-0f71-440f-85f8-2e37f3e77ff6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 531,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1785d151-b79c-45a0-8d4e-88d507d9ca56",
        "cursor": {
          "ref": "c1009447-713e-4dd3-ad0e-ca3c714aff16",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "8a2174d2-a1d0-4b85-bc97-b9dcc5d8b860"
        },
        "item": {
          "id": "1785d151-b79c-45a0-8d4e-88d507d9ca56",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "002981b8-a14c-4b34-b5be-a56ae32bded4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce7fa545-f88e-4c3c-969d-b74df1bf8ff9",
        "cursor": {
          "ref": "3007904c-e5d3-4d57-8bfd-a86c47ddced6",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "025b594c-3eaa-4268-9968-2893933f3ca2"
        },
        "item": {
          "id": "ce7fa545-f88e-4c3c-969d-b74df1bf8ff9",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "b146f37c-34a9-4dee-a39f-56d5f5cfee2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "515ccd9f-7e63-4cd0-a08f-affbf0d01ab6",
        "cursor": {
          "ref": "d19ec0e2-cc29-49ba-8391-421286736c39",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "6c34b60e-f13e-48a3-b913-9678c4c0d676"
        },
        "item": {
          "id": "515ccd9f-7e63-4cd0-a08f-affbf0d01ab6",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "b882e343-4f8e-46b9-b714-4089932a9339",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebf0d8c9-0d35-4360-8a38-34af6169761c",
        "cursor": {
          "ref": "f362f308-0e30-495f-91e0-40018d1fe667",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "0396b51b-9381-4fcb-9df1-7465ec7c2d30"
        },
        "item": {
          "id": "ebf0d8c9-0d35-4360-8a38-34af6169761c",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "f4881418-613c-443c-a84b-85a7e0a84a9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad949fac-706a-4dde-85a5-8481658ca613",
        "cursor": {
          "ref": "82082a64-4cb2-4177-8e23-e250fc8c5881",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "9fb76640-d6e1-4475-b0fb-14d3c7d8e4c0"
        },
        "item": {
          "id": "ad949fac-706a-4dde-85a5-8481658ca613",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "14d6037a-4719-409e-9501-3e1751cb18e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "436aaeed-779c-451b-9ce9-cab08e515b80",
        "cursor": {
          "ref": "5331f5df-ed07-4632-9f37-3dbe36f5014d",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "80f4b700-765f-48c1-9d9d-e6bdf3ccea97"
        },
        "item": {
          "id": "436aaeed-779c-451b-9ce9-cab08e515b80",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "7fafc910-17d9-45b6-8f28-08a9f64f3a02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27a70921-278a-4030-a17d-a87d3b36fe0e",
        "cursor": {
          "ref": "f2febdf6-d4b9-4bee-bbd9-47b77c1c71ba",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "bbd6d70e-3cdd-4ea1-af1e-314601c723f0"
        },
        "item": {
          "id": "27a70921-278a-4030-a17d-a87d3b36fe0e",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "5ed79cb5-8e6b-47c9-94e6-6c73323c0741",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a48d11e-6bd0-4eeb-908e-0abba9870cc1",
        "cursor": {
          "ref": "a7a2d183-eb0a-457e-8526-f7651e922637",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "b979c03c-c08c-41c7-8df5-829d4a32856f"
        },
        "item": {
          "id": "6a48d11e-6bd0-4eeb-908e-0abba9870cc1",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "65c9541d-1629-4eed-a9b1-a2bf6767e168",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bdab428-d851-4a5b-ad34-a7731cdd1472",
        "cursor": {
          "ref": "80d5ee54-8e00-43ef-a252-d32e94d7d6c1",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "217aa201-8380-4f2c-bc50-2bd12eed8398"
        },
        "item": {
          "id": "2bdab428-d851-4a5b-ad34-a7731cdd1472",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "6a91c39b-c17f-4e4e-92b7-2fb0ad8d0d45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6720277-ee95-40aa-8a47-26cb267a58f8",
        "cursor": {
          "ref": "f8fa59bf-bed7-438d-bf08-eb6ddba70199",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "97b6de39-c65f-4a4e-9c78-629637ebf0a8"
        },
        "item": {
          "id": "f6720277-ee95-40aa-8a47-26cb267a58f8",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "2ba01fa2-d1b5-4fef-b15e-564f8a128725",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51c638b0-9992-4270-920e-6551f3d235a6",
        "cursor": {
          "ref": "30d6b813-b14d-4b0e-a9c6-4a20c427e65e",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "08c8ae0a-42b4-4503-bb8c-05bf7cd49e9d"
        },
        "item": {
          "id": "51c638b0-9992-4270-920e-6551f3d235a6",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "c05d587e-a75d-4c79-a678-940bb8f41850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8c0b628-8987-448a-a7c1-74e23de6c276",
        "cursor": {
          "ref": "6c8b279d-bef4-4704-91eb-33ba160ff03b",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "3221b0db-a9ae-4c5c-8866-fff27dca83f8"
        },
        "item": {
          "id": "d8c0b628-8987-448a-a7c1-74e23de6c276",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "4fbe4010-d873-49a7-8929-43dfa2e02943",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59617123-beb4-45f7-aefb-2aa08aea887d",
        "cursor": {
          "ref": "d138864f-e081-4d46-9087-80f655c7a2d4",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "f3132645-dfb4-4c0c-a797-c9a715a42365"
        },
        "item": {
          "id": "59617123-beb4-45f7-aefb-2aa08aea887d",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "4ba8543d-071a-4329-876a-60b791f16e81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3751160-06fe-4293-bddd-0248a3f1a3fb",
        "cursor": {
          "ref": "db0cece6-8053-4a51-8df7-c9b81d161330",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "19a71406-e797-4460-a8ff-4d04e73d467b"
        },
        "item": {
          "id": "d3751160-06fe-4293-bddd-0248a3f1a3fb",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "eec30b24-b9d4-4aa6-acea-d323625ecc1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 351,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6294d4d-822d-48d7-8505-4058d034f42b",
        "cursor": {
          "ref": "eb80c3fe-fe88-4cc3-b5de-5e73a8eacd80",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "67290cc9-a092-4b44-9c87-1bd8dfefed43"
        },
        "item": {
          "id": "c6294d4d-822d-48d7-8505-4058d034f42b",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "35a13bdd-69a7-44e9-af99-9a54999aa655",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9c6abfc-d56c-44a5-b079-125ec1d804a8",
        "cursor": {
          "ref": "1125bf4d-f06e-414d-aa54-71d7e72fbec3",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "69125cc7-8111-4603-8c54-89686d593ce9"
        },
        "item": {
          "id": "f9c6abfc-d56c-44a5-b079-125ec1d804a8",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "55c2302a-5c71-45de-a21b-7e9e8a6fb507",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5796d783-64f2-4d11-a53b-bc50c5c42d10",
        "cursor": {
          "ref": "275a980c-e71a-4c8a-964e-63e0a4fa099d",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "02d14328-5c7d-461d-b5d1-d0a70606b43a"
        },
        "item": {
          "id": "5796d783-64f2-4d11-a53b-bc50c5c42d10",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "c951393f-8e59-4c87-b77a-43856d5c5308",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99f17a57-c0d8-47ae-a946-89ce086f0879",
        "cursor": {
          "ref": "812a4107-a72e-4736-b722-5a382b6c1074",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "da398be0-8115-49cb-a65e-acc796ac4453"
        },
        "item": {
          "id": "99f17a57-c0d8-47ae-a946-89ce086f0879",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "abab48d1-72ca-4453-9cf0-1222706ebc23",
          "status": "Created",
          "code": 201,
          "responseTime": 526,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "59edb7b4-b557-40ba-bbf9-43db10626308",
        "cursor": {
          "ref": "0c5d5752-6b85-4763-884c-848f1f56e86e",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "741aa5ef-9062-4860-966f-96d7273c8847"
        },
        "item": {
          "id": "59edb7b4-b557-40ba-bbf9-43db10626308",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "4d72682e-970c-42af-872a-8160f5a8104c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9de81d4a-0d05-4df3-8ea5-efe959aadc60",
        "cursor": {
          "ref": "5a820894-03f1-43a9-a2ec-5b82321eaaff",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "0ba6051c-4d31-43b2-9f7f-2830dcaf384b"
        },
        "item": {
          "id": "9de81d4a-0d05-4df3-8ea5-efe959aadc60",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "a421150f-5565-4595-af5e-7d6c185dbc27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c79b419-c1b1-49de-b15c-069ed6336b47",
        "cursor": {
          "ref": "bc00286c-0bd5-4591-a380-bd9c39dcedf5",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "583994c9-730b-4f25-92a5-bc817c92516b"
        },
        "item": {
          "id": "1c79b419-c1b1-49de-b15c-069ed6336b47",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "6868617e-dff3-48bd-a4b8-77e8b73be90e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8d56e00-5ad7-4a6e-b218-cca815943154",
        "cursor": {
          "ref": "d7653ff2-35bb-47f7-a8e7-5ed7c7b1954d",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "6839fa11-8be9-4303-bfd9-4b27b92539f3"
        },
        "item": {
          "id": "e8d56e00-5ad7-4a6e-b218-cca815943154",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "793f502b-59a3-4b0a-a971-4403a032a49c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5a7643e-1d52-461c-9959-730d7d7cb906",
        "cursor": {
          "ref": "50d8181c-ad04-4232-b3f6-55eace3c0d06",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "c86c8c4b-8b73-4a7d-bebf-bd6fb2ad6f28"
        },
        "item": {
          "id": "b5a7643e-1d52-461c-9959-730d7d7cb906",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "b11a6a13-71bb-4b38-b0e3-66720c747681",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da863bdd-b947-466d-b1a4-e46904203b21",
        "cursor": {
          "ref": "d93092c2-6ad0-4f13-b3e3-081aa5aeb103",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "799638b8-a164-430d-9de9-dc89ee85fb41"
        },
        "item": {
          "id": "da863bdd-b947-466d-b1a4-e46904203b21",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "f7b39345-59dd-4dbf-a968-d76e35763051",
          "status": "Created",
          "code": 201,
          "responseTime": 598,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "3b30fc43-565a-4f25-b2d0-75b2fbdf5968",
        "cursor": {
          "ref": "9548e08a-5994-4c3c-a869-0f9b848c275c",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "9d267578-5e37-4f4e-af5c-33c4af8b4bc3"
        },
        "item": {
          "id": "3b30fc43-565a-4f25-b2d0-75b2fbdf5968",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "80d7cf4e-4807-4305-a815-c75491e8b5df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03e2cb49-bc04-4b66-b1e7-acaf3be84c87",
        "cursor": {
          "ref": "dbcd84a8-cf80-4a68-b590-da3e1f50a4d3",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "e16b6447-3770-40fd-8649-f48a225c8568"
        },
        "item": {
          "id": "03e2cb49-bc04-4b66-b1e7-acaf3be84c87",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "4461e139-c621-4f9e-a613-22839760e525",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a759a709-2e25-40fd-aa61-fbe740260a07",
        "cursor": {
          "ref": "d9ae13eb-1e36-4619-bbd1-44ad3ffd019f",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "cf090324-3b15-4273-9085-d0fec1d9266b"
        },
        "item": {
          "id": "a759a709-2e25-40fd-aa61-fbe740260a07",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "547a9a14-0dea-4be1-a5ad-0b490096e39f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 233,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bbf425b-8e2c-4206-878f-488088fb9540",
        "cursor": {
          "ref": "bdc16821-660b-49ed-8a3d-0c0b3470aa39",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "3384bb11-fe45-452b-b663-eda66edc69c0"
        },
        "item": {
          "id": "1bbf425b-8e2c-4206-878f-488088fb9540",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "e07686f9-d4a7-4a18-97f9-4ebd54fd54a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06d8dbb3-262c-4b6c-a504-7d6e577bd994",
        "cursor": {
          "ref": "1a79e415-d21e-4fed-930b-ea99e4449b52",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "c99fac11-b752-4a64-8ad6-2594a2434bee"
        },
        "item": {
          "id": "06d8dbb3-262c-4b6c-a504-7d6e577bd994",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "89f731f6-8458-43b0-bf66-b5297da1e3f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dcfebc7-4447-4b9a-955b-aa361bb8bc8d",
        "cursor": {
          "ref": "08b418bb-ac9a-4e48-a276-2de6ab03eba1",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "ae773ce2-8e65-44f0-a581-ac0ab11ba9aa"
        },
        "item": {
          "id": "3dcfebc7-4447-4b9a-955b-aa361bb8bc8d",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "c6a96fb3-d044-4620-82d6-b2e6412b6e70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 193,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcd309ac-19c6-49bb-af6d-5fb46852f582",
        "cursor": {
          "ref": "339a20f8-c344-4c8d-96dc-54b3827f8cfc",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "c0d99ae8-39fe-4d50-987d-8029aa77ad29"
        },
        "item": {
          "id": "dcd309ac-19c6-49bb-af6d-5fb46852f582",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "2c3b7b76-1f97-495d-91cc-619635b955dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 268,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e379329f-fd11-4967-bb22-98bb6872c713",
        "cursor": {
          "ref": "c974d4be-665d-4596-a0e6-b5ac523c86bf",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "e0759185-8d9a-4702-84d7-4f4364e1a7de"
        },
        "item": {
          "id": "e379329f-fd11-4967-bb22-98bb6872c713",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "21c426c4-0dca-4f87-be40-f4fd124a135d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9969e8d5-7e77-4a32-91e4-42d1068b5732",
        "cursor": {
          "ref": "d92931b0-f3a4-45f4-9122-d4b45522443d",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "296b48e9-0957-443b-a7b9-65a049e0fa42"
        },
        "item": {
          "id": "9969e8d5-7e77-4a32-91e4-42d1068b5732",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "7bf95b90-f8a6-4470-8781-7d8b1a957760",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "f05a2a00-9502-42a3-8da4-e90db2bc5d00",
        "cursor": {
          "ref": "606606e1-b6e6-46e4-9e08-c2f4693a6691",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "fc8d87f8-ce3c-41d4-bc04-4752f7a1deda"
        },
        "item": {
          "id": "f05a2a00-9502-42a3-8da4-e90db2bc5d00",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "7d114ea4-db93-49f5-a94e-5d9adaff1f01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "dc11497f-6ff7-4d49-bd1b-bf9fb184b8f1",
        "cursor": {
          "ref": "ee1bd8a0-5135-4114-ae12-9d34658dad09",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "ebcb684f-5cdb-4b53-abe1-328729f13388"
        },
        "item": {
          "id": "dc11497f-6ff7-4d49-bd1b-bf9fb184b8f1",
          "name": "credentials_issue"
        },
        "response": {
          "id": "5bc019a1-d24e-422f-8338-c9596e9fc5eb",
          "status": "Created",
          "code": 201,
          "responseTime": 913,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a75f353-b09b-49fb-a4dc-cbf239561a77",
        "cursor": {
          "ref": "665b1d4b-0232-4f07-9ca9-043ea43eb391",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "2d0f24ec-34d5-450a-8b14-efbc3dcb8a09"
        },
        "item": {
          "id": "1a75f353-b09b-49fb-a4dc-cbf239561a77",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "913c902b-1852-47a9-9f30-9965aa798f9f",
          "status": "Created",
          "code": 201,
          "responseTime": 827,
          "responseSize": 591
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37803de3-3d58-4acc-b353-28fef175e482",
        "cursor": {
          "ref": "929f4f89-679d-4d9f-b271-f5af9649af8b",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "9071f453-728e-4ce9-bfd9-f9acfdf4c88f"
        },
        "item": {
          "id": "37803de3-3d58-4acc-b353-28fef175e482",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "d011bb48-a877-4ae4-9472-a9583732eb8c",
          "status": "Created",
          "code": 201,
          "responseTime": 677,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "791e1a2e-16ea-4760-ae1f-8967191c897a",
        "cursor": {
          "ref": "4a96cf04-4480-49cf-bbed-888e9e925620",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "bee1da6f-673e-4fc1-8948-69dded8ac255"
        },
        "item": {
          "id": "791e1a2e-16ea-4760-ae1f-8967191c897a",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "4c4f7ca4-baab-482f-9513-46299df09afc",
          "status": "Created",
          "code": 201,
          "responseTime": 853,
          "responseSize": 560
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "94660c2d-fec0-4030-b0d7-092b2367d121",
        "cursor": {
          "ref": "85ea8c35-f444-4191-baf9-bd907b69c7f7",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "37491647-00f6-45f2-99d2-3502d584dbed"
        },
        "item": {
          "id": "94660c2d-fec0-4030-b0d7-092b2367d121",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "51ca5bae-75fa-47df-a360-04e7b8d2a6d4",
          "status": "Created",
          "code": 201,
          "responseTime": 1392,
          "responseSize": 528
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "238ff84d-98de-4354-8d8f-33cabebef2e2",
        "cursor": {
          "ref": "24112701-ddb3-4fb5-adab-5c979e30b538",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "c41b2c03-4b91-4852-b686-a5940865c2ee"
        },
        "item": {
          "id": "238ff84d-98de-4354-8d8f-33cabebef2e2",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "c180f847-36ff-4f2e-948e-1203d9c6b0db",
          "status": "Created",
          "code": 201,
          "responseTime": 686,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30afb2a3-8705-49fd-98cc-8d0f879ae7a8",
        "cursor": {
          "ref": "3a3116c2-f581-45e7-a446-d627194dd830",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "85fb265f-f758-4231-a81a-e7efd3c07df4"
        },
        "item": {
          "id": "30afb2a3-8705-49fd-98cc-8d0f879ae7a8",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7d8abf59-4dd9-40e9-b187-7eaea26955af",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "30afb2a3-8705-49fd-98cc-8d0f879ae7a8",
        "cursor": {
          "ref": "3a3116c2-f581-45e7-a446-d627194dd830",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "85fb265f-f758-4231-a81a-e7efd3c07df4"
        },
        "item": {
          "id": "30afb2a3-8705-49fd-98cc-8d0f879ae7a8",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7d8abf59-4dd9-40e9-b187-7eaea26955af",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "3c96717c-86e2-4ee8-a71c-17589c04aacb",
        "cursor": {
          "ref": "02540f47-04b5-4c3e-859a-ac7d4d229fdf",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "d8d6a0c4-645a-4259-8dbe-3a1da7732f7d"
        },
        "item": {
          "id": "3c96717c-86e2-4ee8-a71c-17589c04aacb",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "63945841-b341-443f-9333-6157487bfc86",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "23e2c1b2-253e-4da1-8482-a99721438135",
        "cursor": {
          "ref": "4c9a6efa-d5a1-4382-af7b-1b8dff8445ee",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "169d5700-ee91-4810-8977-ef4dde2b2434"
        },
        "item": {
          "id": "23e2c1b2-253e-4da1-8482-a99721438135",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "232d1786-110e-4a7b-95bd-6357b8ca2fe4",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "caa1174b-5a2f-4509-ab89-9a1528fc9bf7",
        "cursor": {
          "ref": "acc7a07f-6b5a-4317-afd5-d520a1fe2e46",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "a953ff8f-76f7-4a30-89f3-0185b3206960"
        },
        "item": {
          "id": "caa1174b-5a2f-4509-ab89-9a1528fc9bf7",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "c73f8515-4e21-495f-9d90-ea561d39feae",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "064c8cf9-c2ce-44ce-8955-c304dc1d4744",
        "cursor": {
          "ref": "7d986108-6965-48e9-8546-a72218140bb2",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "6c0dbbeb-bb01-4561-be4e-7d4356fbd4d4"
        },
        "item": {
          "id": "064c8cf9-c2ce-44ce-8955-c304dc1d4744",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "4e868dc3-dd04-4291-94bb-5c83ff76954e",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "d04742aa-21a3-4171-94f4-c457cc7a136c",
        "cursor": {
          "ref": "08f1861c-22b0-49ce-924e-19abfd2bc659",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "ccb1f26e-7eb7-43fd-b6e4-4082b41ea6d1"
        },
        "item": {
          "id": "d04742aa-21a3-4171-94f4-c457cc7a136c",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "67684e43-331e-41e9-a5e5-0ed3bf3e8e53",
          "status": "OK",
          "code": 200,
          "responseTime": 29,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "2489fc8e-4ff7-4aab-92bc-84cb26dbc317",
        "cursor": {
          "ref": "c084e187-e7f7-441a-ab9c-057925957ff7",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "a2682c81-fe2d-4ece-aa55-0800521e09f6"
        },
        "item": {
          "id": "2489fc8e-4ff7-4aab-92bc-84cb26dbc317",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "15153dbf-4fe7-400d-8512-b22248f4c099",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "15fe3fdc-b82a-4aed-b0ea-1e6ec6c116c1",
        "cursor": {
          "ref": "12ac6e4b-bcbf-46d1-aff8-2c49aab091c5",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "13e4dcbf-ef87-4a3d-a5c4-019463231acb"
        },
        "item": {
          "id": "15fe3fdc-b82a-4aed-b0ea-1e6ec6c116c1",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "5c051de6-8b1c-469c-84fa-4f7620706471",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "0b243383-2f85-4ec8-8331-4f9dce274f2a",
        "cursor": {
          "ref": "eb3c80b0-8cc7-4dcc-b951-54bc46f7455f",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "369d66ec-35fc-48bc-86ff-31c7a9d9833b"
        },
        "item": {
          "id": "0b243383-2f85-4ec8-8331-4f9dce274f2a",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "374a5a2b-a857-4cf5-a809-571d72d788a2",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "b5d67a9c-326b-4aaf-adc4-4622bff3a123",
        "cursor": {
          "ref": "32581544-6487-4c9d-bb18-57e7e571c0f2",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "877c6f21-b471-4104-bbf2-5a575776da18"
        },
        "item": {
          "id": "b5d67a9c-326b-4aaf-adc4-4622bff3a123",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "1abbbc17-3979-4a0b-82d7-7a1c4f74af92",
          "status": "OK",
          "code": 200,
          "responseTime": 22,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "9f0e4f3c-12a2-41b7-96b7-497bd11bf4ae",
        "cursor": {
          "ref": "fe722108-6602-4954-a147-762837ea4556",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "8b8e1d3f-07d7-4222-973c-b96f878e47d1"
        },
        "item": {
          "id": "9f0e4f3c-12a2-41b7-96b7-497bd11bf4ae",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "e61f332a-560e-4f92-96fd-141f0d48e241",
          "status": "OK",
          "code": 200,
          "responseTime": 54,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "85c4be09-3571-4fde-af43-0647db134a04",
        "cursor": {
          "ref": "394e7573-f83f-403f-b3b4-5a23df0513fa",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "88d37442-4558-40ac-b0f2-04620cd23010"
        },
        "item": {
          "id": "85c4be09-3571-4fde-af43-0647db134a04",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "27652665-5828-49c6-83f9-2a52b301b923",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "8988adde-bc84-4c9b-b5ae-ac08e768d619",
        "cursor": {
          "ref": "02c130d7-a15f-422f-ba1b-dc4a683e1bb7",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "cb49a678-b4b5-4863-a4ef-7b4a65f16e90"
        },
        "item": {
          "id": "8988adde-bc84-4c9b-b5ae-ac08e768d619",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "9f6f4858-8ea6-438f-aef7-e167b06fa8d7",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "24120059-195d-434a-a5a8-e71560f70c10",
        "cursor": {
          "ref": "159d7bfa-870d-43f5-b2a7-10960e8a2551",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "64661da5-c9c8-410d-bc05-21133834bb8e"
        },
        "item": {
          "id": "24120059-195d-434a-a5a8-e71560f70c10",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "07046d57-0ccf-4c5e-8eb6-2b0779a535b6",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "8f87d190-05f1-4473-bc66-ae760fbcb014",
        "cursor": {
          "ref": "e319e97b-212c-4eb0-881d-862b8fbfaf1c",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "2713a7ba-a02c-4871-9d84-2333b3fd5e51"
        },
        "item": {
          "id": "8f87d190-05f1-4473-bc66-ae760fbcb014",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "8ed9bfd5-2872-4426-b648-74b09bdfd275",
          "status": "OK",
          "code": 200,
          "responseTime": 25,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "fad7556a-e96a-4f43-af54-c7a88a997dba",
        "cursor": {
          "ref": "886f6fa4-cb76-400f-8978-4acbe3144021",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "ba7cfeea-6bb3-4130-963a-caccf247ecaf"
        },
        "item": {
          "id": "fad7556a-e96a-4f43-af54-c7a88a997dba",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "5db81cfa-6574-440d-8759-b0fe0d080946",
          "status": "OK",
          "code": 200,
          "responseTime": 27,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "3bfc7075-f296-46d8-9f52-bc35b28f3874",
        "cursor": {
          "ref": "7c1f5d22-57d8-4e13-9383-34d4d473411a",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "1e391cb6-2b23-4c0e-ac36-16bd44cbe8b6"
        },
        "item": {
          "id": "3bfc7075-f296-46d8-9f52-bc35b28f3874",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "b6ada4ac-271d-4fe1-ae05-d9374fd732da",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "38af86d9-536f-4eaf-b772-2721ffe902cd",
        "cursor": {
          "ref": "d3b8defb-b351-4847-8f5d-a16db40dc578",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "94586635-758d-458a-8e00-c6a50343e6c9"
        },
        "item": {
          "id": "38af86d9-536f-4eaf-b772-2721ffe902cd",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "74d0b3ea-c57a-4e11-92f8-839dff78e877",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "c454c6a8-4ab0-4663-a81b-8d4350fbb854",
        "cursor": {
          "ref": "0cf0c35e-996f-4cb0-88f1-f54a74f2f34f",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "f8051c65-5034-420b-a1f8-78ae5b5a9573"
        },
        "item": {
          "id": "c454c6a8-4ab0-4663-a81b-8d4350fbb854",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "e74c435f-0bb2-47df-b393-f06084e14ca8",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "18bdafe1-ab75-4e09-b27f-b60b5c64d33f",
        "cursor": {
          "ref": "746e941b-572f-4243-baad-87fcd1faa5c2",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "315ffae6-8fb8-41f2-8d04-013ed1aa6b4c"
        },
        "item": {
          "id": "18bdafe1-ab75-4e09-b27f-b60b5c64d33f",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "8d0e32a5-6edb-4d48-adb6-505082cf6229",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "af57145e-47be-4d4f-bf59-01daf6c56f67",
        "cursor": {
          "ref": "b0242ccb-b581-4659-bd42-7d942ec05759",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "b6f2de9a-2f3d-4c86-b42a-4ceb850645b7"
        },
        "item": {
          "id": "af57145e-47be-4d4f-bf59-01daf6c56f67",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "493d9878-dd9a-4298-9d1b-9a8c12a600cb",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "07969068-9c89-4f7e-ab4d-418827ceb565",
        "cursor": {
          "ref": "7ae1ed9a-f99d-4112-a0c4-a718b7820060",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "3e7d68ed-7a6c-425b-8461-167020c6501b"
        },
        "item": {
          "id": "07969068-9c89-4f7e-ab4d-418827ceb565",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "e46194ee-5162-4c01-989b-98a7c6a6185d",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "139388fd-706b-4a92-a061-aefa2f015f77",
        "cursor": {
          "ref": "4ae1dc83-f7ff-4271-8f25-4009095894a1",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "be83d0bc-7ea8-47f0-9fdb-7deb4d57ff3b"
        },
        "item": {
          "id": "139388fd-706b-4a92-a061-aefa2f015f77",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "29b27851-e817-4278-b1e5-81933298ce5a",
          "status": "OK",
          "code": 200,
          "responseTime": 27,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "d87f1705-8fb2-4cd3-99fd-b91ca9d97296",
        "cursor": {
          "ref": "958aacd7-5198-447c-a6b5-88bfe204e59d",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "7eeadb32-4a75-4494-bd6f-bd0426fe31dc"
        },
        "item": {
          "id": "d87f1705-8fb2-4cd3-99fd-b91ca9d97296",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "36148e35-ba17-40a5-8ad8-4aba6a84c1d8",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "6721e237-4128-495c-ae53-86584f2b9417",
        "cursor": {
          "ref": "bd6d2a6d-8c6c-4c8e-8e3c-d4da64a2208c",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "90600e20-9779-4f32-958d-200a9bd5f7ed"
        },
        "item": {
          "id": "6721e237-4128-495c-ae53-86584f2b9417",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "f06a6cad-c4ba-43d4-a7ed-5bf03268e8dc",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "8fbbb5e0-daf6-4212-838f-31faf111e822",
        "cursor": {
          "ref": "6f96355e-96ef-4ca0-8a49-f340ea6444ed",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "f633a4a0-9939-4107-84ce-ea2a0f3cf8d2"
        },
        "item": {
          "id": "8fbbb5e0-daf6-4212-838f-31faf111e822",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "d0321e4d-e289-4db5-bb37-669db7183a0d",
          "status": "OK",
          "code": 200,
          "responseTime": 17,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "20bd7a02-7099-4255-91af-c2cd69ffe9d8",
        "cursor": {
          "ref": "50208732-4793-4bea-af92-4d1edb2cb299",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "e7b41c52-d46c-4716-bdeb-30be8851e01d"
        },
        "item": {
          "id": "20bd7a02-7099-4255-91af-c2cd69ffe9d8",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "732b56fb-d001-4207-9be9-6ec7b52c595f",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "46376409-e512-4635-9f12-addc284d6d89",
        "cursor": {
          "ref": "424b01c0-d0f8-40c7-a4ca-0d884c3e5864",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "7c742518-fb56-46fb-a40a-a192521c21ea"
        },
        "item": {
          "id": "46376409-e512-4635-9f12-addc284d6d89",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "c1767004-3125-4d68-8624-98b47e11f5aa",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "3c8ba088-43cf-4081-8713-4dddecbd6ccf",
        "cursor": {
          "ref": "76a2a2c7-07c8-4413-8df0-73c91546fc21",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "eecef71d-c357-4780-a356-2650f44cdeee"
        },
        "item": {
          "id": "3c8ba088-43cf-4081-8713-4dddecbd6ccf",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "37d1b5be-a4ec-4b2c-8367-8c82d9a5af34",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "1aa96746-eb36-4c3c-aca8-49c0e263c243",
        "cursor": {
          "ref": "d7803655-897f-49aa-b9e7-5521e7426f32",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b777ee9e-b556-4a94-98f5-b1c3324d56c0"
        },
        "item": {
          "id": "1aa96746-eb36-4c3c-aca8-49c0e263c243",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "dc28848e-244f-4f6a-bd5d-163378e1bb54",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "b06385b6-f2fb-4a9d-ad04-8e2ed9dcb37a",
        "cursor": {
          "ref": "b6326fa4-0fb6-4258-ab73-72704b5d8c3a",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "dd09d9c8-2805-4b88-b9e2-d218124838d1"
        },
        "item": {
          "id": "b06385b6-f2fb-4a9d-ad04-8e2ed9dcb37a",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "6c8fea1c-b9c0-4b1d-a717-85959e584bab",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "1f8c88c3-cbdc-4fc9-b392-33824b3b06c6",
        "cursor": {
          "ref": "312d5ff7-de5c-45e8-acf9-8c21f290fe89",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "02fdb8af-dc7b-4923-bc7f-d0ffbd3d67a9"
        },
        "item": {
          "id": "1f8c88c3-cbdc-4fc9-b392-33824b3b06c6",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "ad2463b6-05fa-44eb-be76-935292661cfd",
          "status": "OK",
          "code": 200,
          "responseTime": 28,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "d4f6a946-7fd1-47e7-b765-b6ebca777f71",
        "cursor": {
          "ref": "4ff35c48-6f20-4367-a5a0-175f51b5ca06",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "c52a70a7-50b0-4dfa-8dfa-2790cd7fdf7e"
        },
        "item": {
          "id": "d4f6a946-7fd1-47e7-b765-b6ebca777f71",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "b561031a-4952-4e00-826f-a4f6fdb37c85",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f41e452b-05b6-43ba-a8c5-a3fb5b5ce532",
        "cursor": {
          "ref": "32593ac8-26c7-4599-bc6c-2cf4e4243cea",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "7cd5bad3-6e70-4166-9c7e-6e1540c1fae4"
        },
        "item": {
          "id": "f41e452b-05b6-43ba-a8c5-a3fb5b5ce532",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "4b21600b-3879-4ee6-9ec2-f9b98c34e6a3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 18,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ebe5efa-c0c5-44fd-a156-4c255fe4c5c0",
        "cursor": {
          "ref": "c1dfca10-2f08-439f-bbf0-afb167f571af",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "b192e489-3f57-48a0-9cea-813820348238"
        },
        "item": {
          "id": "7ebe5efa-c0c5-44fd-a156-4c255fe4c5c0",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "089632d6-f6d1-4734-96fb-bdfdbdd862aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ebe5efa-c0c5-44fd-a156-4c255fe4c5c0",
        "cursor": {
          "ref": "c1dfca10-2f08-439f-bbf0-afb167f571af",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "b192e489-3f57-48a0-9cea-813820348238"
        },
        "item": {
          "id": "7ebe5efa-c0c5-44fd-a156-4c255fe4c5c0",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "089632d6-f6d1-4734-96fb-bdfdbdd862aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4151f808-0734-468e-903f-6a806844707c",
        "cursor": {
          "ref": "89acaee7-08fc-4d9b-bf61-316430d02a38",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "0b7dfabd-64ca-499a-bc26-c1ceb2e1cacd"
        },
        "item": {
          "id": "4151f808-0734-468e-903f-6a806844707c",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "e52a7a28-706f-4998-84d9-42cc328f92b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "becb64d2-1a6c-4cfe-a440-6acc0ecdeef2",
        "cursor": {
          "ref": "a21f4585-9989-4cd1-9464-ccff76facbf6",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "a24ce3ae-a7be-4632-8030-26bec04727ac"
        },
        "item": {
          "id": "becb64d2-1a6c-4cfe-a440-6acc0ecdeef2",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "2e8e4337-f0d0-4ba7-8988-6f084dad3fe7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e20bd048-f240-485e-a956-246858c9c050",
        "cursor": {
          "ref": "8800958c-5516-4346-bab5-6dc01811968d",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "3e2e68b7-ce43-45a2-a1cd-4c4028697796"
        },
        "item": {
          "id": "e20bd048-f240-485e-a956-246858c9c050",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "65fe9da1-a04d-4cf8-8b50-8fc7ea0c514a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cba7429-e816-4f16-aeaa-c324fed96075",
        "cursor": {
          "ref": "ac6b1ff8-f949-4040-8a1d-aef2a622a46b",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "473b4b77-df89-4793-a4b4-7f0609fa1591"
        },
        "item": {
          "id": "9cba7429-e816-4f16-aeaa-c324fed96075",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "6100a92a-7f54-4479-a66e-234dcdbfe4e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "926f9af6-3efd-4be9-a380-31aed0a330de",
        "cursor": {
          "ref": "098764ad-8cc7-43c3-9663-2be71fc04189",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "b938a087-94e3-4611-86ba-f6ea616ffffe"
        },
        "item": {
          "id": "926f9af6-3efd-4be9-a380-31aed0a330de",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "0b674a42-7d75-4a81-8a05-45acdd0f6920",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dd6dd11-e4e5-4eea-8fe8-2cecffa30a94",
        "cursor": {
          "ref": "f314095d-0416-4905-977e-720974612ca5",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "8297c9ea-4804-4d7a-b473-0ba111e2da63"
        },
        "item": {
          "id": "5dd6dd11-e4e5-4eea-8fe8-2cecffa30a94",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "62a0156b-d08e-4851-8bdd-9d20fb01d83e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 811,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32c793d4-b2aa-4b31-b9fe-6766c4ddd940",
        "cursor": {
          "ref": "5179662e-bb0f-4454-ac77-d9177c18a318",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "6507e289-b1a9-4b8d-9843-5fe7a485673d"
        },
        "item": {
          "id": "32c793d4-b2aa-4b31-b9fe-6766c4ddd940",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "e0a60288-e176-4019-8745-062286ed345c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd8a3cf8-2b76-4831-9ce2-ca351c47793c",
        "cursor": {
          "ref": "62ca7ec0-93f5-49f5-a39e-1522726347f3",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "f8c72729-8063-457e-8c04-19d378eb630a"
        },
        "item": {
          "id": "fd8a3cf8-2b76-4831-9ce2-ca351c47793c",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "cf9ff491-6ab7-4228-82c7-bd683b8b48b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a50009b-0599-4a86-8c49-417b2ee1dfac",
        "cursor": {
          "ref": "39746b50-fd5a-4b2a-b364-21f691171173",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "5ec5eb34-a636-4604-bca5-e67d0eb6fa64"
        },
        "item": {
          "id": "1a50009b-0599-4a86-8c49-417b2ee1dfac",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "a9d47c94-f4c7-44ab-8b31-6f94218a8cd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "670de794-f572-4f12-b095-45f5fb99d99a",
        "cursor": {
          "ref": "222206cf-5cfb-477c-b8e6-c67ae1c6a114",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "e6d094ca-1951-4a37-a484-6fc4c2baa143"
        },
        "item": {
          "id": "670de794-f572-4f12-b095-45f5fb99d99a",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "3ccb7d37-3824-424c-9641-d98fcf7c6669",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc1e3128-9e2e-428e-b8c5-146eec71db00",
        "cursor": {
          "ref": "22754a63-0789-4e85-b362-e08d7e7eb021",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "1ae5fb8f-324a-4c83-9185-f03c95e98c46"
        },
        "item": {
          "id": "fc1e3128-9e2e-428e-b8c5-146eec71db00",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "07e362b2-a2cd-46c6-8845-313d0ba32fd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d69129df-8e1e-479f-b67c-7acbf0032039",
        "cursor": {
          "ref": "ef2aa2be-75cd-4148-a2b7-fe24e164a2c2",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "3550cfc9-274e-4d09-9536-c4a554e59325"
        },
        "item": {
          "id": "d69129df-8e1e-479f-b67c-7acbf0032039",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "0acc5aa3-7195-4c78-a842-2022f1ed9789",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee245358-3839-45ce-a87a-3379b025f26b",
        "cursor": {
          "ref": "58c86000-b795-47ab-b60f-0442ff4527ef",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "5b381934-d2ae-4420-a263-77360db21758"
        },
        "item": {
          "id": "ee245358-3839-45ce-a87a-3379b025f26b",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "9521d46f-b784-4057-acb1-0cba32c5a9b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb28e96b-bff6-426e-b8ef-8408d2aa287b",
        "cursor": {
          "ref": "837f6370-e6ed-4f5b-96f4-913f20f37649",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "1355435e-0736-4efe-9731-1977b5452fd7"
        },
        "item": {
          "id": "cb28e96b-bff6-426e-b8ef-8408d2aa287b",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "d92cd435-8c6b-4165-99c4-0bed91d4d0f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a571105-643f-4b5d-ad36-5e28fcd99e61",
        "cursor": {
          "ref": "2a8bd9b3-0966-47e0-9e6b-acca4b542108",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "bc356012-0fe5-4452-af63-ba064f9fdbd6"
        },
        "item": {
          "id": "2a571105-643f-4b5d-ad36-5e28fcd99e61",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "f68c74fd-0c70-4163-85d1-e271103dded7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "242de3b6-fc0c-4340-91bb-bf7d697c1568",
        "cursor": {
          "ref": "c276ec91-4d00-41a7-9dd3-be8447fba94d",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "316bffae-659f-4fec-b173-33134ceb4b24"
        },
        "item": {
          "id": "242de3b6-fc0c-4340-91bb-bf7d697c1568",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "1b15d327-fc53-4d46-a1e4-65b8aadb2279",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03fc245f-16a6-48fd-9a87-c20f2932bf0e",
        "cursor": {
          "ref": "457158ac-7b5e-4d11-ad39-4fc2160cc98a",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "bce48d29-9644-487a-9c28-9c4f89ee88f6"
        },
        "item": {
          "id": "03fc245f-16a6-48fd-9a87-c20f2932bf0e",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "b9a252de-5064-44b4-b74b-7683e1399463",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 601,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8e648cc-6ed5-4281-b478-66a7708e90da",
        "cursor": {
          "ref": "ceefbd96-78e1-4b9b-bb5c-4171fef31cdd",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "99df37ee-694d-430d-8c31-c4f1cd7fbe16"
        },
        "item": {
          "id": "d8e648cc-6ed5-4281-b478-66a7708e90da",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "e29fc553-7b9e-40d1-acd4-27bc157656c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 568,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51e4570a-9d78-453c-a4e5-bb3ab75e9912",
        "cursor": {
          "ref": "597fe01b-ff34-4cfa-bc7e-571032b76f3d",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "5e145a6b-a14c-4e15-a858-e7a6631c8367"
        },
        "item": {
          "id": "51e4570a-9d78-453c-a4e5-bb3ab75e9912",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "aa8e9fbd-55e1-4dd8-a223-4b0d81d38bb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 490,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3005ea2-f280-4840-9f4e-5b520d32b2f1",
        "cursor": {
          "ref": "ecbd105f-2c71-4848-877c-1772950d2dc3",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "445dd604-70b9-4e45-a89f-278080bd95b0"
        },
        "item": {
          "id": "b3005ea2-f280-4840-9f4e-5b520d32b2f1",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "ac012a75-9f45-45c0-9106-543c77332cfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 300,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed082a72-2d66-4660-a889-a6d74d96ad55",
        "cursor": {
          "ref": "72ffa3c5-cfcc-4c21-bf02-ec459a8c5f0a",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "0ae30f58-1fa1-43b3-be0b-2c0ae66ac71c"
        },
        "item": {
          "id": "ed082a72-2d66-4660-a889-a6d74d96ad55",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "fc39e803-f495-4f58-a5a1-54416b4f483d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 477,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48e48161-eb25-4881-a1d5-32e40088eecf",
        "cursor": {
          "ref": "675dbe8d-b526-4b65-a82d-60402caf19e6",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "3b14ea46-a3c5-43c0-ae30-603a822a754f"
        },
        "item": {
          "id": "48e48161-eb25-4881-a1d5-32e40088eecf",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "5b032a2f-e583-46b3-97a0-edcc40af3e6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1714,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28623889-c142-42ac-9449-82c50aa74145",
        "cursor": {
          "ref": "1546f128-f70b-4721-bfc6-49e3d586842c",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "ec28aee4-f8ca-47b1-9e8a-7ea8463aed82"
        },
        "item": {
          "id": "28623889-c142-42ac-9449-82c50aa74145",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "afb7a8ec-e2b3-46a5-b9b2-a89c4723b07d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73ad47d7-ab65-4982-9541-c43f87f9f479",
        "cursor": {
          "ref": "2c6c4690-e2c1-4061-b40d-b1d52d7132fb",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "63dbe6dd-d8b8-4abd-ad58-35d982343c6a"
        },
        "item": {
          "id": "73ad47d7-ab65-4982-9541-c43f87f9f479",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "cb09a1e0-a6f8-487a-b945-475bb31eb004",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b2e326c-b35a-4d88-a83d-fc705ae70f24",
        "cursor": {
          "ref": "9451b1e5-31ab-4be5-84c2-f0bda786523d",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "02dccfad-a436-44c5-b9f1-2be12d7094bc"
        },
        "item": {
          "id": "4b2e326c-b35a-4d88-a83d-fc705ae70f24",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "e18f664f-cd07-4671-a424-bea171a1c880",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 405,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4828040f-deb6-4406-b5ca-8b4a51dc5c44",
        "cursor": {
          "ref": "45ebe6de-b7b8-421e-88ca-727b9a01a038",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "28eafc81-ad51-4b12-9f99-7311c303bf66"
        },
        "item": {
          "id": "4828040f-deb6-4406-b5ca-8b4a51dc5c44",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "05926393-95f5-49fd-b0f5-2f214c606599",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8ab95e3-d032-432f-8a45-bde488cd6646",
        "cursor": {
          "ref": "64f178b3-d164-4b26-a8bc-8d7353bf342d",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "97be62da-eaef-47eb-abf3-de4734f3d2c0"
        },
        "item": {
          "id": "f8ab95e3-d032-432f-8a45-bde488cd6646",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "39f4449d-e2a7-4712-8c99-73841fecb6af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a8dd70a-4d7f-4168-ad6a-ceca8423c9f6",
        "cursor": {
          "ref": "5851e0be-afd4-497d-a2f1-a54f5d152137",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "5ed63696-097d-4c1f-9e43-766988b40643"
        },
        "item": {
          "id": "7a8dd70a-4d7f-4168-ad6a-ceca8423c9f6",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "ee9bff7c-16c8-47b5-a316-ba00af3c4e3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 481,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcafdda5-6464-4513-ad6c-dc782bf04a39",
        "cursor": {
          "ref": "c92546ba-6116-404e-9cef-ccbdcbcb9950",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "cfcaac3c-31aa-4597-8bb4-945ab31f3606"
        },
        "item": {
          "id": "fcafdda5-6464-4513-ad6c-dc782bf04a39",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "0abd2827-7145-4e1f-9142-87546ccb9253",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb314040-9d5b-45b5-843a-34b3b5276c58",
        "cursor": {
          "ref": "6ed98a43-4d97-4963-b35d-3a5500f80412",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "0fc8f1ac-aef5-4ce8-b5fc-6a65dd94ee76"
        },
        "item": {
          "id": "eb314040-9d5b-45b5-843a-34b3b5276c58",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "58644caf-bff7-49dd-8da3-95a918b80d18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 371,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "660ea787-bbee-4d99-8c72-c38b9d0f12f8",
        "cursor": {
          "ref": "91632e43-73b0-4a0e-9014-af1d569589fa",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "b1855041-15f4-43cb-8aa3-557cbc56f3af"
        },
        "item": {
          "id": "660ea787-bbee-4d99-8c72-c38b9d0f12f8",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "779cbd24-dcd5-4b41-9fac-e0d0939a7f1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c7aecf6-65a3-43fe-9743-ebef67c07d17",
        "cursor": {
          "ref": "6dd4051e-5d0d-43fa-9081-433f5e640812",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "82a6215a-b59b-4eaa-926d-016f4f134e81"
        },
        "item": {
          "id": "9c7aecf6-65a3-43fe-9743-ebef67c07d17",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "a6513acd-a67a-4fe1-99cd-c354014b4c73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 957,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6696cc21-4baa-4026-8997-68e4c36a7b11",
        "cursor": {
          "ref": "d16c7c1e-9fa1-4d20-83a4-ed6982100a05",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "40a90f3d-7fb9-4d9c-ba18-d9f70d29d3c9"
        },
        "item": {
          "id": "6696cc21-4baa-4026-8997-68e4c36a7b11",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "eb2e3e64-17e2-49f0-a38c-26eb5320e3ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70cab29c-68e0-46a8-9fde-34ea5ed8e7f8",
        "cursor": {
          "ref": "218f5b6a-c3f6-40da-91ed-45c5b867d12f",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "a7447398-0a33-4a88-a074-a56c9d36da7e"
        },
        "item": {
          "id": "70cab29c-68e0-46a8-9fde-34ea5ed8e7f8",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "b090c685-dd0b-4d2d-ad75-3a488708d704",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 279,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "804a78af-07cb-41f6-b30c-e591f19de50f",
        "cursor": {
          "ref": "5517e48f-8f13-49ea-8789-c11749196915",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "0f3c77db-7796-42a3-b592-da7eaa46845c"
        },
        "item": {
          "id": "804a78af-07cb-41f6-b30c-e591f19de50f",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "8565b54b-b192-4ea0-bea8-8a476e6adadd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 368,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2d110bd-aec9-4699-88c1-6383c41d38c9",
        "cursor": {
          "ref": "2ff8e9c3-c98d-4a54-b459-bf42bccd15e1",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "8d6c5573-7035-41ce-aa2d-84f3f8721b53"
        },
        "item": {
          "id": "a2d110bd-aec9-4699-88c1-6383c41d38c9",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "15bd4c84-fe3b-4e1c-b801-077395d45414",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 319,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90f69e7b-cbbb-4980-b3dd-07a08fb8adff",
        "cursor": {
          "ref": "b9dbafc0-5c91-482f-a54d-03d561dc1ecf",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "f076663f-63d9-4410-9e90-21be4ff39c15"
        },
        "item": {
          "id": "90f69e7b-cbbb-4980-b3dd-07a08fb8adff",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "05e6ae1d-592a-4467-aa25-70c6562b58f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 240,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ab56ee2-b547-4f02-a763-e5446ea9a944",
        "cursor": {
          "ref": "d0ecd776-3c2b-4da5-9b84-87d016424d56",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "f7385d15-6160-48f3-8b06-950f20bc031c"
        },
        "item": {
          "id": "4ab56ee2-b547-4f02-a763-e5446ea9a944",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "8181689f-d16a-461a-86e9-428495d9711e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 279,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2b34c93-a843-469d-b116-8379ea6b8da9",
        "cursor": {
          "ref": "6d82754b-73f5-4756-8ae7-1af7c9143922",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "517bcf79-4ffb-4cbc-905b-41131452e6ca"
        },
        "item": {
          "id": "a2b34c93-a843-469d-b116-8379ea6b8da9",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "c016af62-565c-4c3a-bb51-95282648c066",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 319,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad179469-3fd1-4965-8bfa-1b5998df9656",
        "cursor": {
          "ref": "049681dd-5229-46d5-8a09-b3b4f56f0b5b",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "5ea43c1f-6603-4061-bfbb-f80c15279f38"
        },
        "item": {
          "id": "ad179469-3fd1-4965-8bfa-1b5998df9656",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "a21c7bd9-fdfb-4421-808c-d1ef2eea4545",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 546,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93d71703-a6d9-4353-9063-cb0b9c68252b",
        "cursor": {
          "ref": "ae66a221-b987-4d1e-a393-20eb53609582",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "f7afa49f-9c8e-4ae0-9577-a519c576bce3"
        },
        "item": {
          "id": "93d71703-a6d9-4353-9063-cb0b9c68252b",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "57dcc048-b51c-45b5-ae29-6653903ed80a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 373,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bf0dacf-bee7-48ab-aadb-4638d9ca7d67",
        "cursor": {
          "ref": "c6faa53c-a027-4bce-b12c-93ccd2227878",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "2423aa41-9e10-4280-969c-64d471a957fb"
        },
        "item": {
          "id": "3bf0dacf-bee7-48ab-aadb-4638d9ca7d67",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "d4b767f4-c308-435c-a4ad-57afddac6414",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 346,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17584a8b-6119-41f9-9890-844b5b9526af",
        "cursor": {
          "ref": "7110759d-6c2b-42ed-9723-d6bf08ce4730",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "34e638b7-e47f-4f86-a751-c78a2a1ab9c4"
        },
        "item": {
          "id": "17584a8b-6119-41f9-9890-844b5b9526af",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "2956a778-89e5-436a-9765-584fd54aac07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 359,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d2623a8-d765-40f4-b664-40efbc02ca8d",
        "cursor": {
          "ref": "c8bceebc-e496-449e-b4bb-698f19e1b4e9",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "76021b3d-d99c-4391-a845-e8d59c38003a"
        },
        "item": {
          "id": "8d2623a8-d765-40f4-b664-40efbc02ca8d",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "db237493-fe75-4a9f-9dbd-58b3af943982",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 329,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f80c2153-d849-4857-9b28-5c3cc2f175b8",
        "cursor": {
          "ref": "851f79e5-27d7-4be7-b394-181fe0b59368",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "44e5cb1d-184f-4c15-8dc8-d9ca46b8f80b"
        },
        "item": {
          "id": "f80c2153-d849-4857-9b28-5c3cc2f175b8",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "2f4e3ef2-3dc6-413b-b355-63165fc8aa5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 283,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "989195d7-802e-4fdf-a6ae-776df6eb05a1",
        "cursor": {
          "ref": "ca3d78bf-d33c-4376-a4fa-eb0e8a9f10c3",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "028448d9-45f0-4ad8-b5bd-3053871b6600"
        },
        "item": {
          "id": "989195d7-802e-4fdf-a6ae-776df6eb05a1",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "dff5f4a0-0202-4ca6-8d40-d14db295f86c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 261,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2154fda2-7b7d-4544-9f28-7c98d8a9688d",
        "cursor": {
          "ref": "5a7e8b0e-112a-4492-93e1-6789c6f38e1e",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "b29e5f67-3479-474d-909d-4746b7a8d816"
        },
        "item": {
          "id": "2154fda2-7b7d-4544-9f28-7c98d8a9688d",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "2dd774e9-6fa5-4bd5-b9e0-59a415cecca0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 447,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bdae189-96fc-46a5-9f51-b79c88ad752d",
        "cursor": {
          "ref": "d10af649-df78-4ec8-95bc-5faec5e77013",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "8a6a7efc-090c-45b2-b01d-22745037c3a0"
        },
        "item": {
          "id": "0bdae189-96fc-46a5-9f51-b79c88ad752d",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "90266a23-8e74-45df-9604-05af1d569571",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1518,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a33755d7-5fba-4740-b009-e78a5afd0a96",
        "cursor": {
          "ref": "8cf195a9-1c35-4a78-9f46-2c23f92498c0",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "85216324-4a0f-402b-8998-9845f338a3c8"
        },
        "item": {
          "id": "a33755d7-5fba-4740-b009-e78a5afd0a96",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "fbb05e16-de94-4ee2-a571-8426ab2cc421",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1299,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a145ba56-7c75-4633-95a6-198c41944fdd",
        "cursor": {
          "ref": "5e5b06d4-f21f-458c-b093-e0daa4a4ecd4",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "9b2741ad-3e4a-4608-9821-ce4db21fc6b9"
        },
        "item": {
          "id": "a145ba56-7c75-4633-95a6-198c41944fdd",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "5eb584ad-403b-470b-8a0e-a36d05c3def2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 497,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84eb2b90-5de7-4e3f-a8c3-5c9d5de5fa55",
        "cursor": {
          "ref": "d7320b7b-410b-41db-be69-746fdc53340f",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "e008ed62-7c90-42e6-8014-9c7187ee19f4"
        },
        "item": {
          "id": "84eb2b90-5de7-4e3f-a8c3-5c9d5de5fa55",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "56c24b19-4b42-4e27-8798-bfd194405430",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1519,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "066cfc81-e383-4551-a497-9ff568f62843",
        "cursor": {
          "ref": "4499e763-93f6-46fc-9b9c-74c7b344a6d4",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "9b067416-ca04-426f-acd0-1bc25506d16e"
        },
        "item": {
          "id": "066cfc81-e383-4551-a497-9ff568f62843",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "299f4b9c-d5fa-4660-b0a6-ac2bef7a872b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 352,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cea7018-0e7d-4959-aa86-a1134060d6db",
        "cursor": {
          "ref": "7085ea26-2578-4ffd-a82d-4e6882856819",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "1586e068-d9c7-429e-9128-c94603b3771d"
        },
        "item": {
          "id": "3cea7018-0e7d-4959-aa86-a1134060d6db",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "d095b7fe-7d78-4fee-9da2-cb61e31671b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "550cfa25-8b50-4516-bd1a-e3f99fac7602",
        "cursor": {
          "ref": "4f90498d-05cc-4b66-b9b3-5bd9293fc3c2",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "ac9b4bc9-cfdb-4142-89dc-066311433bdb"
        },
        "item": {
          "id": "550cfa25-8b50-4516-bd1a-e3f99fac7602",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "0a846f8d-e549-46e0-ac87-413645be2236",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "949a7fac-3e03-4b4e-879e-4913ea6ac410",
        "cursor": {
          "ref": "b0c204ea-ea75-4209-9bba-ad121c9e22ce",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "6760ad63-3637-41d9-abf4-41947a571a9f"
        },
        "item": {
          "id": "949a7fac-3e03-4b4e-879e-4913ea6ac410",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "f589ebc9-047c-42d4-8918-3b627b4fdc28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46d6a31d-1f82-48cd-a303-a71c1fa0b1d5",
        "cursor": {
          "ref": "f90cc1d4-2c88-4882-a943-b32c653249a5",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "56373f4b-3b22-4e00-adf4-15916f1cb783"
        },
        "item": {
          "id": "46d6a31d-1f82-48cd-a303-a71c1fa0b1d5",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "cd520219-ba82-4625-878b-65b7cb0986bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 361,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86a869e8-30f2-4109-a763-e35b50ab41fe",
        "cursor": {
          "ref": "8d04fb33-3aa8-4fff-b659-d7d8fab5abb8",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "d94566de-c443-47fb-98ac-d868e4a2235b"
        },
        "item": {
          "id": "86a869e8-30f2-4109-a763-e35b50ab41fe",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "0d52a5ca-e885-4a0e-9f48-3f4e498d60eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6852509c-61a2-4b51-a008-f74ffa69092a",
        "cursor": {
          "ref": "276dba28-1cc7-47b0-9ce9-cd1ce1d231a2",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "5e132a37-ac88-4903-8475-682c7584fdeb"
        },
        "item": {
          "id": "6852509c-61a2-4b51-a008-f74ffa69092a",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "6dece0f2-a670-4153-a54b-84634fa24871",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba3d0271-85c8-418e-8bd9-801f27f5aac4",
        "cursor": {
          "ref": "c9810f3c-e8f9-4cad-842d-a3eac71e9bb1",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "21529900-e64d-4207-b7db-fa0a4b22a5ed"
        },
        "item": {
          "id": "ba3d0271-85c8-418e-8bd9-801f27f5aac4",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "f5da69e4-dd3f-4805-9d86-6c94e0131942",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59e76d0c-057b-4184-8a69-30c533b0940e",
        "cursor": {
          "ref": "68e4e7ea-93d1-4cde-b3a6-87fd381eb25a",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "5a30b250-985a-47de-aed9-dd34a6b6b58a"
        },
        "item": {
          "id": "59e76d0c-057b-4184-8a69-30c533b0940e",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "00522330-419f-499a-aff3-308138c4a7a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc0b0567-b565-47b2-a712-07c10a289a67",
        "cursor": {
          "ref": "24e2c65c-a15d-4496-98fa-4dde1acdf6e1",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "6d220904-1852-49ca-ad61-b63944846b34"
        },
        "item": {
          "id": "cc0b0567-b565-47b2-a712-07c10a289a67",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "3ca5be85-24d2-45f0-bc1d-974ac34b3b15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 959,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35cc350f-c457-45d5-af58-186439fc5f3b",
        "cursor": {
          "ref": "8bd2c872-830d-4aec-b533-6b1938b75f91",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "76fcd7f7-f4f8-4b8e-b0b6-7b23ff7cc9ec"
        },
        "item": {
          "id": "35cc350f-c457-45d5-af58-186439fc5f3b",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "49416592-85e6-480a-b612-7f929049eaa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 134,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8e42cfa-d624-4446-8588-9558365ee544",
        "cursor": {
          "ref": "85b10399-788b-4d87-9987-541949ebc223",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "d6432fa9-0147-4c8a-8b75-35ed99c2bbe6"
        },
        "item": {
          "id": "d8e42cfa-d624-4446-8588-9558365ee544",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "f73df643-5e0a-4345-a4ed-d63a6a0f2034",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 170,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c377e73-5c10-45c1-a345-2bb4dd0b85c5",
        "cursor": {
          "ref": "474baef5-d563-43e0-91b9-67763e46df07",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "7f1005de-2bfa-4c4a-8cba-90a8c434d1ba"
        },
        "item": {
          "id": "7c377e73-5c10-45c1-a345-2bb4dd0b85c5",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "0cc40ffc-2538-4432-a33c-37d26d615c60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "158eabc6-9acc-4e78-8c5a-4b16c8f54849",
        "cursor": {
          "ref": "e15860ad-558f-4236-9a30-8c6860dd45ae",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "a1626c3a-d31b-4b36-a298-45ffcbc93d61"
        },
        "item": {
          "id": "158eabc6-9acc-4e78-8c5a-4b16c8f54849",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "2763b3a6-c9f0-45fb-b15e-b0af08eeed9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2608f4f6-490a-4bdd-ac26-0a5607c26e70",
        "cursor": {
          "ref": "cd44c0d2-862e-4f79-86d5-f23c3287d09b",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "c5f3fcce-65f6-44f7-9fcf-b375da7595c3"
        },
        "item": {
          "id": "2608f4f6-490a-4bdd-ac26-0a5607c26e70",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "4825de0b-0577-4f36-8e4e-4bf1fd6da34c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3677854-8f89-4ba4-a8c4-adad3930cbf0",
        "cursor": {
          "ref": "3b32091b-e8c7-47ee-bd46-cabf4256f369",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "e7a97017-9b48-42cb-98de-1a9519f48974"
        },
        "item": {
          "id": "b3677854-8f89-4ba4-a8c4-adad3930cbf0",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "e53b02d1-54f4-40c2-9bae-6b2a25810e6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94dccba8-bc51-45f2-9c47-292c885e78b9",
        "cursor": {
          "ref": "13f5f721-4381-4f4f-ba7e-2ae3bfbc54dd",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "3e131468-8105-479b-8ba6-98b6dac5336d"
        },
        "item": {
          "id": "94dccba8-bc51-45f2-9c47-292c885e78b9",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "b71f7cc3-9d4f-4bd7-b1d9-f0610f722683",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f08c36f-25da-45e1-9bf3-f09a3b50a6f7",
        "cursor": {
          "ref": "65541b08-0848-4a98-b283-b1efbac8c360",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "b420940f-592d-4a58-a560-ee5965960921"
        },
        "item": {
          "id": "4f08c36f-25da-45e1-9bf3-f09a3b50a6f7",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "504e2446-7b21-4b0c-b703-6e56ce5d9969",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b01756d-1164-48ff-8b44-f2d7952dc2c7",
        "cursor": {
          "ref": "919e97cc-33e1-4e61-ae5d-c0daf7eb247c",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "8e6bba1e-a8ee-4dde-9747-dc31864c5d5e"
        },
        "item": {
          "id": "4b01756d-1164-48ff-8b44-f2d7952dc2c7",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "5366c480-80f0-4241-8ed2-29b09ef023f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81795eae-5023-4664-8b09-3a22913414c4",
        "cursor": {
          "ref": "09b82cb6-0816-427e-9c3d-dfaf33b46be1",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "9364a9bd-9d0b-4e54-930c-48b6b79060f1"
        },
        "item": {
          "id": "81795eae-5023-4664-8b09-3a22913414c4",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "98da2f74-6c00-40d7-afe9-569d54f0230e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "828d86e1-81d3-4f24-baa9-5064dd00f4f1",
        "cursor": {
          "ref": "3e52d0e3-45bb-464d-8125-e8167e20b015",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "c1bdba5c-2dfa-48a8-b2c3-509214f33c30"
        },
        "item": {
          "id": "828d86e1-81d3-4f24-baa9-5064dd00f4f1",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "250aa8a7-9b0a-4b4d-a81a-e2a1e0d6d863",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "608b38a6-75cd-4042-99c3-921cff4f80d3",
        "cursor": {
          "ref": "01621885-9937-46dc-994b-5fe6e1052d5a",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "c84b4c00-6b12-4d1c-9e02-7ea4ea8dec25"
        },
        "item": {
          "id": "608b38a6-75cd-4042-99c3-921cff4f80d3",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "ddc5d58a-f446-4eb0-b8b6-1db8640c3b26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "235f519e-2bed-4ef4-a218-bd29f1afcc77",
        "cursor": {
          "ref": "00922d7e-dfce-46ef-b2e0-2f586d27c877",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "a26d9908-ebb9-4cc1-87da-d104f40aa33c"
        },
        "item": {
          "id": "235f519e-2bed-4ef4-a218-bd29f1afcc77",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "34c2a458-d9a9-4db9-abdf-da4716842da8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbafe701-98c2-413d-b4c5-0332ba67cc3a",
        "cursor": {
          "ref": "e297d029-c053-4515-8d8e-09909154088c",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "ca901d2b-fb7f-4877-9737-ef1508dafdf1"
        },
        "item": {
          "id": "bbafe701-98c2-413d-b4c5-0332ba67cc3a",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "030b1ae5-79b2-48a4-953d-bfbc51427bbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d225a90e-2df8-422b-8ad7-2ece6ace69ae",
        "cursor": {
          "ref": "4ff4e6ea-3383-4bf1-8a6e-024f9ed052af",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "f7e49e18-e7e7-41da-8ab1-734fb3dbd0a9"
        },
        "item": {
          "id": "d225a90e-2df8-422b-8ad7-2ece6ace69ae",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "69e80134-5aa4-4c70-ad93-3bfa6610d540",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27a632bf-4aaa-4823-aac5-24b5db3c192e",
        "cursor": {
          "ref": "eab657a8-3d6b-4f8e-b0ee-3942206b4bed",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "d3fd060e-ff9b-4d5b-824f-7010f29ddc2f"
        },
        "item": {
          "id": "27a632bf-4aaa-4823-aac5-24b5db3c192e",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "925c03ac-a074-4797-a56f-19af75991ab8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e9148b1-ce80-4e17-9590-6c58afffac6a",
        "cursor": {
          "ref": "e191a0a1-eca4-4c25-88ea-07dd9268ff7d",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "d765c0c0-a49f-44ae-a876-236a71b9e6ca"
        },
        "item": {
          "id": "1e9148b1-ce80-4e17-9590-6c58afffac6a",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "c5eafad6-8d3a-4726-9db4-c03ad00e1313",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "623a74ca-2c87-4ce8-9a80-deac0748200a",
        "cursor": {
          "ref": "c72ee8a3-b557-45ed-a495-27c863554e6b",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "36c1e85d-8d61-4dff-8316-ef268d0a3690"
        },
        "item": {
          "id": "623a74ca-2c87-4ce8-9a80-deac0748200a",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "7da2db3b-262c-4196-b01f-1a73a3dba9b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "484f6751-4d1a-4bcf-ab9a-fecf1eafffcb",
        "cursor": {
          "ref": "f91a9853-8767-4ea0-a0a4-f5297c6f373a",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "ff49a34d-60ca-4650-9429-9eedfd29489d"
        },
        "item": {
          "id": "484f6751-4d1a-4bcf-ab9a-fecf1eafffcb",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "f86b11c1-8e5e-435c-9c0b-ff2f4d350c6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfe9c1ca-e16b-4ee5-aeab-7275c73433fb",
        "cursor": {
          "ref": "c5b86852-fb6e-42cf-8732-c0d191252bd9",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "8cea8d74-51d6-42ca-9229-628ca46eafa4"
        },
        "item": {
          "id": "dfe9c1ca-e16b-4ee5-aeab-7275c73433fb",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "420de527-95e8-4d60-8bb6-382737e64313",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7ebf25a-3dd3-4d27-87bb-d9a757880976",
        "cursor": {
          "ref": "4de733ae-7aec-4cc7-a09b-252ab830a77c",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "267e9246-d792-4527-b7a4-4ae1137618ed"
        },
        "item": {
          "id": "d7ebf25a-3dd3-4d27-87bb-d9a757880976",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "c74143d7-880c-4ae2-8268-697d21a40e47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da6d20ee-354d-4c73-a9ff-5656438eaef9",
        "cursor": {
          "ref": "5e8fd988-5d55-4272-b813-2c577e6f1178",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "42eb0e5f-cfc8-415f-8940-c1f1421f1acf"
        },
        "item": {
          "id": "da6d20ee-354d-4c73-a9ff-5656438eaef9",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "27797810-3185-41ee-8444-ef1fab51300c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5375008-33c8-4063-979f-034bd4362a54",
        "cursor": {
          "ref": "54553cda-db37-479c-ac63-109606628d78",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "4451f46a-cd3a-495d-9e89-bec335a90fdb"
        },
        "item": {
          "id": "a5375008-33c8-4063-979f-034bd4362a54",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "4cff2a9e-3d93-4977-a3ae-1bac4a5f4f50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f769261b-e7d5-447f-bc3d-6b8a8a5bb912",
        "cursor": {
          "ref": "aa50bae2-7e0e-4f03-9e17-aadbd8eabb6b",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "7a24c838-9951-47a3-a0af-6d1437e3b84c"
        },
        "item": {
          "id": "f769261b-e7d5-447f-bc3d-6b8a8a5bb912",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "79f1743d-cba8-4568-aefa-5308869c5ad7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a12fe184-e8d0-4612-925c-cd032d74fd3f",
        "cursor": {
          "ref": "074c733c-b66c-4d57-946b-8cc169514215",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "bf97983d-6a8f-4c07-a2ae-56a3bbf663cc"
        },
        "item": {
          "id": "a12fe184-e8d0-4612-925c-cd032d74fd3f",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "ee82d69c-ff85-4cb9-9d20-4d29e61f78fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48335c37-8abc-42cb-ba77-f6a1c6aa9af4",
        "cursor": {
          "ref": "5973988d-8036-4a12-839f-00e99e2faa0c",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "af34a848-fd31-42b6-a5c8-b2a4a09ffdd5"
        },
        "item": {
          "id": "48335c37-8abc-42cb-ba77-f6a1c6aa9af4",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "c1dcb694-ed0f-4322-bd46-f3f0dc627bf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "976e0fa1-ca1b-4d35-96ef-45e5bbf44d1a",
        "cursor": {
          "ref": "c8611194-2dd4-4df8-9168-eb0293ba4e65",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "af8e0da3-e063-4ce0-9658-3ffef939084d"
        },
        "item": {
          "id": "976e0fa1-ca1b-4d35-96ef-45e5bbf44d1a",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "915169e1-ec1e-4da0-b23a-1e841085498f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a269cf5-999a-49e5-b82c-a1577e57b4ae",
        "cursor": {
          "ref": "c6effdba-1cd1-453c-bb73-4cf4b1d15c1c",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "8e1d9fda-56a1-42e0-9ed3-0482ccc9ff3c"
        },
        "item": {
          "id": "8a269cf5-999a-49e5-b82c-a1577e57b4ae",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "6981f258-55fe-4273-a645-d7d51dac676b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df8723d9-7c3f-48db-b43d-c479f78a26c4",
        "cursor": {
          "ref": "c0cb5d8e-7a84-4435-9478-577710d26026",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "59d3ade2-7150-4f9a-a0c9-c8fb0d28e4a9"
        },
        "item": {
          "id": "df8723d9-7c3f-48db-b43d-c479f78a26c4",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "67f13627-9d32-4d5c-bf13-8c2699511008",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86ee97b4-4402-4dab-9c47-9ebe1fee1aac",
        "cursor": {
          "ref": "fb6299ac-b98e-4977-9cc3-7b6d7e65cbba",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "2eca7626-f57e-4de9-941f-98d4acefc471"
        },
        "item": {
          "id": "86ee97b4-4402-4dab-9c47-9ebe1fee1aac",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "9f0f00aa-ee22-48b6-a3b3-8d5b60716269",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "758c4c47-3523-46b1-b451-f4f71137ea0d",
        "cursor": {
          "ref": "73e0ce51-3cf2-4e95-ae40-8ceb5f3c8e92",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "09c278c8-b517-4cfb-b158-399315f453a2"
        },
        "item": {
          "id": "758c4c47-3523-46b1-b451-f4f71137ea0d",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "8ad6a067-5275-45c5-81aa-4d70f567e16b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc18dfa3-ad23-409d-87e9-af21878bf8da",
        "cursor": {
          "ref": "f86705b0-d60c-49e7-88fe-0684324bd4f1",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "25700b11-1421-4687-9d5a-afbf5c4c96b7"
        },
        "item": {
          "id": "cc18dfa3-ad23-409d-87e9-af21878bf8da",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "fb257a72-ae42-4ed7-aa2b-fd0fa555f241",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c4df0f9-d70c-4eda-b99a-1e110269cf44",
        "cursor": {
          "ref": "062ebe68-2be5-45cc-82be-38dc3848ef26",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "30d24900-3341-47f8-80a3-442931953fc9"
        },
        "item": {
          "id": "9c4df0f9-d70c-4eda-b99a-1e110269cf44",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "1d9dab32-f580-469f-a6fe-fcdaf27edbff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "099d2266-d8e8-405a-bacc-a180b1cf305d",
        "cursor": {
          "ref": "d8f330da-b362-4163-a5b4-8ae6064ff5f8",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "3a2742ae-f4e9-41f5-88d0-5ee69ef78732"
        },
        "item": {
          "id": "099d2266-d8e8-405a-bacc-a180b1cf305d",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "66f77327-569e-4bbf-9ad3-23f340cdf578",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b4279f8-02cc-4087-9d76-66df20e851cf",
        "cursor": {
          "ref": "30719cfe-26b9-4894-b1b1-2e8351b21539",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "357bb73c-3b24-4f44-9ced-7018b6e51888"
        },
        "item": {
          "id": "6b4279f8-02cc-4087-9d76-66df20e851cf",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "fa1c9f84-f77e-42ab-8c94-0ab93c96d79d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc11de6c-984c-4002-85a8-8f87d63aeee9",
        "cursor": {
          "ref": "ff9062fd-1818-4818-9146-a99a63589ebd",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "4d29f8c7-1333-435f-b6b6-229644ca6928"
        },
        "item": {
          "id": "fc11de6c-984c-4002-85a8-8f87d63aeee9",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "a2e08727-9b10-4a9f-b548-118bc9759ed1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 14,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b56aaee8-8194-433a-876e-719c932dd006",
        "cursor": {
          "ref": "44f38c9a-90a2-4e8a-9a9e-013bb2301b47",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "63ccbbc2-e2f7-47dc-9675-55ccb79e51a8"
        },
        "item": {
          "id": "b56aaee8-8194-433a-876e-719c932dd006",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "07542a7b-0a45-4c5d-bf8f-05847209e749",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 42,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47952adf-c4df-4dfa-b9cd-a5a9c57f962c",
        "cursor": {
          "ref": "4a87e04e-5a40-43b2-a618-3b22037c48cc",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "397d0eec-f784-4b9c-8b64-e8900705fcbe"
        },
        "item": {
          "id": "47952adf-c4df-4dfa-b9cd-a5a9c57f962c",
          "name": "credentials_verify"
        },
        "response": {
          "id": "38abc1e0-0d15-43f3-88a4-c6b5f2626312",
          "status": "OK",
          "code": 200,
          "responseTime": 1028,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e44723e-64bd-470f-ac2d-66b8f57634c1",
        "cursor": {
          "ref": "ee5fbc73-68f8-4b73-91ab-59166f6c2392",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "4a7f5f11-8c99-4d20-b9ec-9b35cc162f07"
        },
        "item": {
          "id": "9e44723e-64bd-470f-ac2d-66b8f57634c1",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "de888458-d7e6-4244-944b-7b1fe7262646",
          "status": "OK",
          "code": 200,
          "responseTime": 601,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2ee5147-be68-4069-8ab4-95268ae058bc",
        "cursor": {
          "ref": "6ee1d2ad-5122-4d84-bd34-d7482f600fe4",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "31454b2d-b4b5-49ea-9cc7-8b9efc7b4e10"
        },
        "item": {
          "id": "c2ee5147-be68-4069-8ab4-95268ae058bc",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "d9408489-483b-4125-9461-186a846c8ca3",
          "status": "OK",
          "code": 200,
          "responseTime": 4534,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d03c972-76d9-458f-bef8-5255529ddbef",
        "cursor": {
          "ref": "b9df57cf-ac2f-415d-b7a9-8a603503dfd8",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "12ec7a39-81a2-44df-b3e5-c2c690d87a03"
        },
        "item": {
          "id": "1d03c972-76d9-458f-bef8-5255529ddbef",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "ed4d5679-f77d-4d87-bf14-135b6702b761",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 314,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d03c972-76d9-458f-bef8-5255529ddbef",
        "cursor": {
          "ref": "b9df57cf-ac2f-415d-b7a9-8a603503dfd8",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "12ec7a39-81a2-44df-b3e5-c2c690d87a03"
        },
        "item": {
          "id": "1d03c972-76d9-458f-bef8-5255529ddbef",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "ed4d5679-f77d-4d87-bf14-135b6702b761",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 314,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d03c972-76d9-458f-bef8-5255529ddbef",
        "cursor": {
          "ref": "b9df57cf-ac2f-415d-b7a9-8a603503dfd8",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "12ec7a39-81a2-44df-b3e5-c2c690d87a03"
        },
        "item": {
          "id": "1d03c972-76d9-458f-bef8-5255529ddbef",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "ed4d5679-f77d-4d87-bf14-135b6702b761",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 314,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5981485c-c23d-4262-93c1-7e4bccc1be5a",
        "cursor": {
          "ref": "37e7b087-1c2d-4a5c-af4b-5b0e13279a51",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "dc2c99f8-c8d8-4637-b59a-a583ff41c22c"
        },
        "item": {
          "id": "5981485c-c23d-4262-93c1-7e4bccc1be5a",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "6aadb278-dacf-4369-8764-f60b732a4453",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e985bf24-d4a2-4979-bcb6-b417fbb7ac25",
        "cursor": {
          "ref": "a58346b4-f94b-4be4-b63e-69c76cb385f6",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "60002545-3756-4c33-986e-72c3d093ce2f"
        },
        "item": {
          "id": "e985bf24-d4a2-4979-bcb6-b417fbb7ac25",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "690d095f-0bc0-4bdb-9027-c8c93b074250",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 228,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "e985bf24-d4a2-4979-bcb6-b417fbb7ac25",
        "cursor": {
          "ref": "a58346b4-f94b-4be4-b63e-69c76cb385f6",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "60002545-3756-4c33-986e-72c3d093ce2f"
        },
        "item": {
          "id": "e985bf24-d4a2-4979-bcb6-b417fbb7ac25",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "690d095f-0bc0-4bdb-9027-c8c93b074250",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 228,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "d71f374b-8041-40d8-92de-9bbf4a9c388a",
        "cursor": {
          "ref": "49154bc3-d4b4-4d38-8053-f20896408455",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "b5e7f63a-c919-426e-9005-fcbbdbf6b17a"
        },
        "item": {
          "id": "d71f374b-8041-40d8-92de-9bbf4a9c388a",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "aa17b49c-c8ce-47ef-8ba9-197df66e38dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "e374e791-c1ab-40e6-9213-6d76fabdb9e5",
        "cursor": {
          "ref": "ed998b04-2ead-429d-9e09-c88d5b31b8bf",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "035d884b-c0e0-488c-8f63-3d73f94d5a92"
        },
        "item": {
          "id": "e374e791-c1ab-40e6-9213-6d76fabdb9e5",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "1bc1f5c5-26cf-4896-9283-bd67ce1b6ec5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e374e791-c1ab-40e6-9213-6d76fabdb9e5",
        "cursor": {
          "ref": "ed998b04-2ead-429d-9e09-c88d5b31b8bf",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "035d884b-c0e0-488c-8f63-3d73f94d5a92"
        },
        "item": {
          "id": "e374e791-c1ab-40e6-9213-6d76fabdb9e5",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "1bc1f5c5-26cf-4896-9283-bd67ce1b6ec5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d78f58d-7912-4b47-83b5-a1966a5f7d3a",
        "cursor": {
          "ref": "58178e98-ef33-474d-9397-012266b5a038",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "fe7c66d9-28b7-4645-936e-a6b2fd21f5bf"
        },
        "item": {
          "id": "7d78f58d-7912-4b47-83b5-a1966a5f7d3a",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "9ef713c6-708c-4d2b-92c7-f1e61b770eeb",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 25,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}