{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "ddf0c564-f73a-4753-be4b-53dfb2fb5b77",
        "name": "Clear Cache",
        "item": [
          {
            "id": "93222665-2378-47f6-abe7-dacdd4dcc737",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "903c1db2-61d8-4e80-90a8-e82a4e5a8636",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4bead81e-bae2-47ee-a904-84505c61949b"
                }
              }
            ]
          },
          {
            "id": "a6332a14-d2fb-4ded-b068-a672cfbae466",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "11c6edc6-9c27-407b-8ca1-5b4191840c49",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "df4c73c4-2b43-43bb-8f7c-88ddbda6dbc3"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "c991b20e-a80e-4366-9ff1-17220596d2ba",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "bb0562fc-22d8-4613-802b-53bd94dcb605",
            "name": "Positive Testing",
            "item": [
              {
                "id": "893a3e56-29d4-4a6c-a0d2-ccefee5ebd78",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "10cbee6e-7173-4fad-ac6c-913f57bc3026",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a709bb7d-1a71-4774-a72c-b020abc70620"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d894e270-f2d9-452a-bf7c-b58f874363a6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a799df82-84a1-4be5-a944-08724379f9a5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3ec11e2e-f2fa-4773-a490-b6e406cd7fe5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4e6503f6-8a62-43ae-ab88-373de4089238"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1fc9204a-da7f-465f-8366-3a994fda192e",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "19396ece-f0ca-42f1-bfbc-cb2d430d78d8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "51cbc8be-3348-4314-9d32-a1fa6fe1aeff",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1e644615-fa7b-40fc-986e-b49fb3de37d6"
            }
          }
        ]
      },
      {
        "id": "72997a2e-748d-444d-9423-8d87b99ca7f2",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "c065cae3-e706-4ee2-96fc-982c400c2648",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1cf6b12c-47a9-4c08-822f-09f2182b12ae",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9827a429-138c-4b10-9860-c0c8a52d3da2",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1357288-dd31-4f8b-b5e7-b870db3e341d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dbb0307a-235c-42b3-8b34-06dc45183c27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "013a1bfc-43b1-4de9-97a4-439891b5afb7",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1d4035d-812b-4724-b457-6f642c4bd047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c77dc6d8-ae49-4ef4-bb86-7a40c24021d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab82c9d9-7ebb-4d66-acef-6eb0d6abb841",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eea6b064-4381-4bf4-86ac-3fcea55de26c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6615b575-7bf4-43c5-aa0f-01a8e3199c24"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4480533c-b7d8-4489-a67c-1447c5d6c24f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d098a482-fcd7-4030-928f-06c988aa5fe2",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc41fcb8-947f-4b17-bf50-20472d2905d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1596d886-cf50-4455-8cd1-1837d9f9977e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2cbeb86-707b-478e-8bbd-f9501b705814",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1959b24-5fb0-4f82-b07a-058c25367b0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6371e9a6-9aa7-4ef1-aad3-85b90988abc1",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ecfd847-e4f2-4587-8ea5-ea327bd5b087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3528fd1f-efab-46c8-8ec9-b921902a6126"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01a8ba1f-e453-4d87-936e-156bf6d64480",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "d1740941-30ac-4bcc-a434-56ae81867968"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a21f5124-3781-4e68-a5e8-7c760afcbeec",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3a936e73-7a20-4d71-b340-5c7583da851a",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b337baf2-428d-4d96-87e3-0431877fe64e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "e741aee6-9ca2-4e7d-baa2-b3724b8f1b3a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fdff74a0-2b8d-4694-9945-d4a98408d3d2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "8be2439f-3175-43a4-9753-a059168a37cc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5c2fa336-458c-4413-ac47-a5229dfa6d5c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "05c7dab0-c2b4-4fbe-873b-40da4838ba33"
            }
          }
        ]
      },
      {
        "id": "04defef6-0ff6-4094-9f83-c16d4e5fefac",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "4af48140-84c6-496f-a019-51b4a0aa9d98",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0456c865-b957-45a4-bf14-d8c239e9e29f",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "e12604e7-fa30-4490-bde9-ae2dccaba38c",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb119707-0a01-43e8-87fd-fb755addfe0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3918372-5e9d-4222-9981-2afab7746ca6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebdbc3dd-ffc8-4501-8400-d048048ec29c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7caf8795-54a7-4cc3-96e9-60c1c384d3ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ed74eb8-4593-4009-8aa8-a7ac0f0ac8b3",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00b4be5e-9112-41c7-a163-39967d718548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5176c325-a8c5-41ca-b0fc-9f8de3bcc91d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddd90b6d-daf3-4feb-ad02-cbed7d7802f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e5b744cc-2f66-4c86-b122-e97b6f90972b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65daba1a-fe52-40ec-ad3b-6718e8435584",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15e98499-d231-4da4-8f95-f8de21ca5c65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a348d3bb-4e88-4899-9549-7bc9d44d364c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8cbe9c5-27b9-404d-bf9e-db1dc89baf3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9ff1b029-e65e-49a1-b61a-627203a696e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd54dabb-7ca6-4fb6-a043-5129ca226e54",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80a6f29e-fefe-400f-a320-f6f3c49a1e95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e94b552-9336-477f-892d-8b2b3b03ee9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3b62615-54d0-4838-8cf6-9c65b6af59d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a51be784-8bd3-424a-a598-0d7f3533ffd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34445e20-6c5d-4241-b02b-42df77e3b8e6",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4db7aef0-9dea-404c-baa2-5d56c944e6cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fab5a221-88fb-49ed-b2b9-f51fe1ca7b5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc3bf4d8-ca58-4af4-b1bc-b9e4c44355b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "762f0199-bb5a-48a9-befa-f9f1558d21d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53a136e1-a741-4349-bd22-003c92144351",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "077aa263-07e5-4bba-9d33-267fb27d95ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0108c05-3f4b-413c-929a-7721a171407d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e3d9fd9-4e92-4009-8381-252d20075fe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "50ac3343-22b8-4d5a-839e-d1f78c88b644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10cf5ae9-c98c-4c5b-91d4-14cd66e97f38",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9286cd2-7876-4a7b-8aa1-88762717c153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b62f417e-e627-4e00-a187-b950020e73d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7390073-1156-4765-848d-b0572ec9d8c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5e6e0428-c49d-4e92-a8e4-16d30d6fa05a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16399c6e-c029-4b75-b5c1-46682377757d",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f10a421-c524-43c4-a67e-fd3883b77349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1d28d4e-08d9-4dfd-9e10-0045269ee299"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a6b3433-5593-47f6-b42e-c6e5cbaa7355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b288e98f-2375-43bd-9930-5eac44b90b65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99137b51-787f-4941-a3af-ce64012de00b",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b9c6dba-c91d-43e4-bc9a-dfa25cfcbb04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b458edf-268a-43e5-baef-d21012b8adbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3b9ee52-aebd-4a89-9ea7-febcf16a69a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f2a4069b-f6c9-4add-b977-38ea82214796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59b85a8f-5a83-46a2-9987-115b2474d0ef",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c8dac77-9c02-427f-8d3a-e78a6c9db932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdd81985-cd72-44af-92ef-97d2d32313ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e5686fd-eeee-423f-8e0b-5d8699344bce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0920ce8e-dd5e-4d53-8d04-7d4370ce9abe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e0011c9-9ff2-43fb-91d8-aa0905e1e544",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "925e69b1-1348-4a86-bfef-b11c538802c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b04e2ba3-ff2c-4196-b52e-58ca2c2f8ace"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91f0ed36-54f4-4dc2-b1bb-de49a67533e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fcb48b28-38f6-4f33-9de7-a6baa99d92a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ce461eb-a6d5-49ec-946c-a6a7a565192e",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea71b05b-9a63-44d1-aa77-ad917e1cf0c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88080bd7-1f91-44df-80aa-1713ed8dcd6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eba8b29b-bfdd-4b9b-a217-a725ef98ce1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "146eb2ea-64fd-4a80-845c-d351ac766e9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c6cb931-aac1-4670-bd95-bb9992cea3d1",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "492a4e51-2b64-455f-8f28-904e2d66f1db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d861decc-ed7e-45c9-adee-79704945991a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1c609f1-7d04-4fd1-b605-3a1261029519",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "87d8fdcb-9cc2-4704-bff0-bfe4223a32d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31402c7f-ef98-408e-9825-e4b42edc69e5",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba2c38a8-4ae5-47f8-bd46-cbbe9a860780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e30d6dfc-36b9-4ae7-a196-beedfb175603"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73c77b40-c377-4465-9dae-33eb65f44890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "93bb5e6e-2699-40f4-8b1c-5e67c4a40b9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8e0673a-c262-4a5a-8299-d019d7231090",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afa0b68a-cc19-46ea-9191-4b5ea66ec031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96d8b8da-91cf-4979-903a-7702d06e3963"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73376e67-637b-4d1e-95e0-781a210635be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e3ae7fb1-f34b-44e9-aefc-51545916009e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbc73e36-ffc0-4288-bdfe-1dbcd9a66cbb",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f46f48a-550a-4b13-8b70-ed31b6641d6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e92a3d4-5ce0-42b4-b533-670e0f4655d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97d27f80-76e4-40ac-b609-b9cc8c18a6bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3aef433f-b142-468e-9b9b-a8135d4e43af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b8d7a60-8ac5-4882-b489-4d60e4a2d5d4",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bf308a4-2bc0-4528-a0e6-f3cb5be17c64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b3d6c96-dae8-40ba-8d57-f9177af83a13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7595f2a-7f7e-4a5f-92e9-9787adf99939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "92f2a992-6cbe-4004-8cfc-875fa3cda7f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c22ebe62-2d1e-4094-beaa-3107148e5a60",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc03a7d4-1640-48f1-b4d3-92d29a735ee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc164c6c-7f3c-492d-9240-2b28e18c1652"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afbb5204-d8d1-47ef-a294-816ce575287a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "094a1e74-7321-427b-a6e2-7496d65a6843"
                        }
                      }
                    ]
                  },
                  {
                    "id": "698d7b5e-f813-402b-abb9-ad471b9c1e20",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54f92b38-5c35-4f9f-811c-8cfcb7e495ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5a91353-994b-44a1-8f05-3c14e7809835"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ef3cb95-a84c-4553-b249-cd134103054f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb335ae2-837c-492e-9c3b-e40535540858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c00bd1b5-5b8b-4dbd-a9e1-468406ce33ac",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9e32cbe-e020-4381-bd55-22fc86714eb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bde23921-e4f2-452f-8d7c-2459b0bd5eae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a0d7799-b95c-4d49-81b1-33468111aa4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac238750-eee2-48a9-be55-f9f0fc74d75c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b7f1bb6-a2dd-48d1-a084-fe0e0270c804",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "451c8f64-79e4-4154-9be6-143d3863cb57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42214e0b-dede-40f5-a5e4-3be69f450ba7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e517c0f4-67e2-40ce-a444-8862f2560a6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0af8cd3-50e0-4dda-acae-f44a30b2eca7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b56daec8-50a4-43b3-88fc-758e4f0a734c",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09569d2d-3408-41f5-87d6-96eca1d070c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "231d2d3e-754b-428f-8bca-4faaaabac7db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bf7014e-922f-443a-9bf1-ad79923b98b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "16ddb86c-5f46-41e2-9719-e195cfb2e026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2020421-2f88-4d88-b621-017e318c09ff",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3fa8f74-55d7-41e4-ab23-f44b8536ad8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad3fbb62-ed93-4d79-9140-d1031eb146f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3873b5dd-2642-47cc-8998-3d978b560d90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b667e397-b075-4c99-bc5a-becbd92213ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d655916e-c4cf-46da-96a3-76afd5dcd221",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0634a5f-4157-4a67-b687-228c1debfb60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc6c6697-0453-4dbe-9873-76d0c260add2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a47015d9-9c9d-4891-a2e7-4c0dfada3ee5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "098b7c6a-5fff-4e52-9246-6c452c31f575"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c83516d4-7278-43e9-896a-847aa3b803cb",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06f9794a-f41e-4b8d-82fa-60b4351a09a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9c74090-20c8-4d8d-ae0b-f43136c08788"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69c2e673-5e6d-4dc2-886b-6737a16b472c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4f35955-aae1-4439-b548-a6d06b27ef1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b74f252d-6654-4b9b-985a-c88bb9718240",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd9e04a4-571e-4916-aebb-b02c40133f2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "635da553-9395-46f9-aa5b-104d283c27fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9df66c8a-6136-4cbc-ab0f-dfec5d5a6535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0aaad41-3369-4314-9757-e831887caad4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a53480e8-0339-429f-b053-808fa480a898",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38b79db9-d987-4600-bbd7-36a674f33bf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91641be1-2da4-4e70-966d-f527f32bc565"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c892b8ac-718d-416d-90fc-717482329a06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "378d81e2-10b0-4e21-a593-2e9d47fcbdfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "771a2aa8-88d1-4a14-a09b-d213f357c0d2",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ae051bd-3ae9-4e8f-89e2-a2d28c256bd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a32f0c5-ee73-455a-9ce4-586a7314d7d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "315a2900-7162-40d3-9e04-8676cd1fc91d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "eadd847e-d5aa-43f4-a688-8a3392b3b4b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5203f383-7b0f-4f96-af58-d04959c42ee4",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4da6b66a-299a-4c4f-9e0a-0d44d14f2ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45cfc524-64aa-4016-91fe-776e65fb27bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "403d6aa3-28a5-4cc2-9d5f-3e1a6e3eaf32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "221504f6-a561-44cc-ac84-581dca371369"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9196c4a-bb3d-4a21-acfd-6afe7834623f",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fa256f2-0e2d-444f-b507-f0e141fcfc42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba8f91eb-5c59-4851-940d-546d7d31fdfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f0d16e5-4ba5-4b51-ae1e-3e0c3e4ae0da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "edab9a07-a3ea-4fae-b0e0-be3eca07aca8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a077a10-92f5-4f2c-8847-a2dd683c7dba",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c0b8b95-1236-496a-9705-72e706dfa463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ab5d27a-8813-4c69-8227-f7f475eab55d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d835ac4-fec5-46fa-abb2-ffde38faf7f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d876e454-faac-43f8-92e0-2a5ee02640ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd0591e3-503e-49d7-8755-e847a861414e",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76346707-1860-4365-87c4-121396437b9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c4a0f22-2df1-4d73-8262-4b6fdab1b4a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f4784bf-857b-49a4-bc31-e01471ab9603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4987fa23-a91e-4221-93c6-33dd3ed1a2a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "933ce416-24c0-4bf6-abcc-ec8d622800cb",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e41941cc-fc36-4a6a-bc94-adb8556b39bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d147d2a-f7f0-4e2b-ac26-8c9b276c93bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfa69bf1-a877-4991-95aa-be2fef8acc51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e059ab8-23c9-4e62-be34-8e300ff6c1a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1069a115-7c4a-4516-a03f-d0ae1375cc4f",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71bfee2b-4e4c-49c8-9f65-3aadc94a0003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5384d28-630a-44eb-af72-a3f28e3e1f83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a72bf71-ea33-4745-95e1-97c60ea5a1ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b5022b1-41f7-44d5-ae6f-db5c46498bde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70317166-253e-4760-a323-2a1d28561596",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cff2f207-dc9f-4c49-adef-6961a8139c3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d34aa62c-da57-45a1-a0a0-596b3df440b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "554449f6-7121-46a5-8533-27998476da01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "ab802cf3-4642-4f35-a037-3eb3acdd1b13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30b27037-c5d9-48de-a273-c9ee73a0aa83",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3c53fcf-7e2f-468f-895b-baf66cf817c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8d2e0266-143b-41f0-96bf-e7a4002b1ec6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d98e546-ce09-4454-9d64-4c0772edc100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8184d493-3a61-4d3f-83bc-6d66495aff64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80d37d4e-761a-480f-b8e4-3a15a32ec4ee",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7a25a53-4403-4e34-91d3-e1366b1e853a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f45ccbc-5150-4f86-a249-fd528f7c8855"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08bc6ef5-9077-4030-9c0e-2dddb9aeba6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1ee1db24-ef70-4a0e-969d-367ce35e6080"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a17c17aa-e8d3-4ec5-8eda-d22d50a0c323",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f3f1bcd-e377-4f78-ad79-85630b0884fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e684235-d584-4ec8-86a6-8f45bf5c8e2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1a5d4c5-d244-4d60-99b0-062292ce7cb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "fd662e24-2d0e-4f54-a04a-8ad3b8581999"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f86c9aef-eee7-4485-b2d0-8a7109fefe53",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12fd62c8-5c10-4be4-941e-672b02ffd95a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d3b025b-03bb-4348-a863-d5d5e19fffdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76632516-3e78-4332-b089-68a354b19ecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3dd9d864-45a0-42e0-bd03-46f2555241ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebcaf766-490e-40e6-94a0-38e09509b49f",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "294df04e-9f5d-49a9-808b-9a19c2e2b29a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8319d70b-40c9-4680-8ec5-b45ebf5833d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "077d743e-27d2-440a-808e-007897dd880d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9467a38d-1fe4-4b53-a2c4-02709e92eed3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87978fce-fba7-454d-8d30-d1f2dc36c606",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17bb879a-bdd0-4c5c-be93-2f8f1074b480",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09aaa54b-7803-44d3-b849-953960e5c734"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05c91c9f-8122-4fe7-8f64-be5f4810b2ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6d379def-1c0e-47b5-82e5-916655231b28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac87f0c4-98f0-4e1c-a7c2-23fccffc4da9",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59f709cb-d6ca-4171-8046-7b6767120df7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f93f57a-b79e-4635-8398-eede38765cba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2ba84bf-5006-4ae1-94b2-d154e3becf84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "79ff109c-4e8d-4d1d-bb70-770a3906f140"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3c8f940-e107-4671-be88-9bbe911274b8",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "596da697-31d6-42de-923d-e4c798ed584f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5f8ce4a-5c4f-45b1-88d8-fd56b6e9fe0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53f12cc0-478d-4fa4-807b-be72077d02a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "675cf9ba-3c93-4591-b2e8-3fad0ed8fe7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8783021e-121e-4e94-b1bd-2b053349bcbf",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9d41ba8-d3e0-49c5-a418-65e639f720b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c87d35e1-642c-407a-b5cf-18e420ba5bba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33a10747-95c1-486d-bafe-90548369200d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "3821ca4e-a2d5-4b22-b8ab-0effc4da1678"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5643d390-4aa6-409c-b4d0-10bb1be59d0b",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6acd3f3c-90f8-4815-aa12-0328c8de0ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b433e5a-c0e9-4afd-af26-82fe7eb9aa2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c04fcae-eeea-4a3a-a74f-c8a7b816529e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "13359370-784d-49be-b31d-6a8a5e4d608c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa3bd700-bb35-4275-80c0-d7d748620427",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f08e2132-eebe-4d5d-b3e9-fd82a9def537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2422b7ba-93a0-421d-95db-02fb3f803756"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e937114-afaf-4095-8746-58f462309e2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "656656f7-ba34-44a1-81b3-f94f07c5a37c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e397da5-631d-4cdb-882b-d3217d285343",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee54675b-086e-4d28-b4b7-220077139329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc71a8c8-c1ae-4706-8a21-65effad88d4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca6b5be4-a03d-4d5e-8188-39f9c4c9bd6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e3f474b-66da-4fd7-87a5-1309c3ccfbb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2307f200-72a0-4d87-8c50-44dc46cc57a7",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35aee5db-fd5c-4a2b-b07b-3eb28b908394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2356e263-7cf1-40e5-95ae-f09dea3a402d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab7d9092-6112-45e1-bef8-e3ce8c23e79e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0881e44c-fed0-46bb-94fd-465115cd8daf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91c6a93b-e62c-406b-a017-5991ed939e33",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9236f7b4-a6b6-4a3e-8292-9faf9eb3d3bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12502fd3-1a1c-4ad0-8d51-7a7e729346d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fbad1a5-3a41-4709-9def-bca8e89930c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "30f8f318-2501-4889-97f2-8ea7895a091a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "451eea9d-6818-4d7d-8164-3fe4515821df",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cba1a08-df9d-429d-a97c-a234cf9109d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0ab18f5-1623-488e-a6f5-d56950f3aec3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff91f9ef-4162-4861-8159-0cfe121b3b0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d2f1b388-2a32-4d98-89cf-90e346d3a778"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8303a538-a80d-474d-9c2e-4df371ebb839",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb9c9d55-82d7-4d34-aaad-7d3e8b9fff99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "725f96db-977d-4132-a3ff-cbdc328ff31c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fdaa362-5ff3-4449-8a47-2009a12a30f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "92ac090d-ed79-40a9-8611-efee28836375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41e1a9c5-0ae4-40ae-a137-1ba25a34665d",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34360073-9539-40ff-97c7-211e5c71271e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec452aee-c33d-48f1-bc22-ccf6bfd8ac3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74265d43-19ac-4be1-9be0-934b77492520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9c43ea2-ff01-4863-b654-0471e52a7886"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a351f87-baf4-4bc3-a1ff-f07451af2399",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b571399-7c0c-4e53-bb2b-1d9792272cd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ffce726-a34e-475a-aa98-bd2043c43e29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ec62e90-f79f-4595-946f-b6e459dc6e94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5bd3b705-5a74-4cbd-8d4c-3f53a320ac88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9355e34-1778-4264-88ff-f9604ba40cba",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "459d646a-961f-4e05-acd0-d26a148c14ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd042d4e-3121-42fb-adf0-98bced66a3df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd5add30-aadf-4597-87d9-f1ec87ffd3bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c17601d7-43b0-4b75-bfe4-9c07d2bc5564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0135ade5-ed47-4158-9904-0babcced685e",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bbb441b-c8c5-4677-ba20-8c51d1641b51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abbc7a81-5c75-4650-b5b7-16d1866c38d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30032047-f810-4e77-a0f6-44afbb55213c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "be625593-c24b-48d9-a658-aa8688d149e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39fe5d2e-8f8e-4d8b-a8a1-8d2222173c97",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a3b4e8a-1e77-4419-b210-7a19d3cf7c6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dbc99f1-ebf7-468f-b6ac-3d7b2bf67c4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bc7c5f7-dc11-4ae5-82ce-1dbf6ddc6cf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "65cac636-0729-422a-95ed-3b3ed49ff398"
                        }
                      }
                    ]
                  },
                  {
                    "id": "946bf389-1ba1-4ea9-b7f7-647763763bd7",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b2883b3-5dfd-4064-9784-15b77f2efd9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e7a290a-f22b-4e47-b07a-8c0b8a593546"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "761f2fc2-bf79-451d-b54c-ff7b0c0bc274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8a99f85e-3353-417c-bd94-db259307d922"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60ad71b9-7e52-43d8-b50d-887641d3da05",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bffad25b-90c7-4ce6-b33e-bc78dd01792b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb58e394-8768-4f80-aef1-adb0913b2f85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67de546a-aea2-4ed0-ac68-a0f761b7cc49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc4a58fa-b578-43d0-bd16-0e4a2992154e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9932776f-68bd-4817-8b2d-44920616a341",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80127cf3-eeae-4aeb-86cc-65a8c6b8bb63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcb5ac06-98e9-44d5-8f29-cf666f13b04f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97f6c1d2-df79-43ee-b024-26b30185bb3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6ff8b71d-5168-4fe8-96a0-b6a7a7ff57e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e4acde7-5c95-4d84-9730-591e5025a385",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c56d7d1a-5b2e-4722-ac0e-d01a181f3965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "630b2dec-20c9-4b63-b769-68ac10de8400"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5d4af52-b5bc-415f-9114-b129ca5e8844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3e2a6fe7-c6d2-43db-afae-0f8ebd67d621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c04ee6c-28b1-4fea-863c-0e07f306dd81",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f174b659-db55-4f10-8bf2-eda4ec7a10e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "095c6758-dca4-49d7-b38e-550b31f6feb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51151e6b-d1f8-4b16-b3f5-a89d4c710547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "296d4722-a205-477d-94b0-daf6b619f095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfcdc455-4b07-45c0-9f14-ae4b0ff9d651",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0e8a955-2ce9-4b90-a8c4-b2ff5d7c17e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "632a0288-4b59-488b-a830-f70b48980f47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74797f97-8874-4013-ad5f-cd6019a29b61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ba1710b-ef20-4f4b-9803-c52b501d9936"
                        }
                      }
                    ]
                  },
                  {
                    "id": "265c316d-456d-4425-93d1-d4e1c7274413",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfc5f966-eaa4-4b1b-9045-6abd4e846fb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4547c11-214b-4fe1-85cf-16a103be1542"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30e9472b-8eb6-49f8-a63f-774adc7774f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b6d0636-eb94-4097-8197-f88496bdb4c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adfb9e9f-2657-4ade-a534-bfb7b16c9577",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58f5bbf1-abce-42d4-80d9-03bdbd3c5b37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc29524c-6812-44ae-b9c3-3fe17ce0e23b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "477b2910-e4a1-439a-8dac-b27e435b23b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c8cf25b-96a4-4920-8b9c-7fd83656fec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5514f7e8-38f6-423b-b9ce-362ef9c3edb2",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53080ccd-cc10-4297-a2c9-2ef44d400806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d44a6a5-c737-4555-8f0f-7e549a5954c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3650ff5-db9e-434a-b0ae-14be8035b4b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8706e654-040c-47e3-a6c9-d6419dd958ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06bf9d93-115e-4bb2-8ccd-aaad666b2d0e",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "410fd2f8-5555-439b-863a-111052aa8521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "021c24bc-c605-488f-bd25-fe240969ce8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cbf8c41-a97e-4068-bb5f-78935bfacb3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "19ff37d6-06fe-4492-a3da-10f2c6e33ea3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4953b0b9-821f-4b9b-9696-019aa245d6ff",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ce195c5-f43d-4b94-9f41-9286f853a470",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15a1e62a-b47b-416f-ab53-0f259b1f829f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96c3d23d-08e5-41e4-9857-0a1ddc42711f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b4da511e-c0d2-4b6d-8d5e-7fc6ed5ea960"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53b14e26-2847-4009-becd-7e439f660b0c",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c675ce9d-e6a0-426a-9c04-6474c548b198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38f8edbd-f07c-44db-9a4c-a489b2d3aff3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d35cb6ad-8c1f-4d24-bab9-7f9dc564805a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ee3d5e8-3323-486f-b525-7944c661b7b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d459ee0b-6e5d-451a-a1d3-8fe37e1a9d80",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c4b8f59-67f5-4082-b99a-e6422bc58702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20565b8b-4634-43e3-bea8-e5b6dd66fdc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95bcd1fa-d42d-4303-8b77-a80b31fb77a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f95df5c7-89bb-41b6-90cc-66e523a3c24c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a7c5461-923c-4d65-8513-d8fab70f25b0",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05254398-0870-4934-93d4-6e3f2d9b85fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02c7e456-0c5c-42e8-afcc-7fd6f66e647c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "704bafba-48a7-471a-b16e-b217d1469674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1c78372-2439-420b-9d47-1d6aa3b0aa8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd42bd5a-01fa-4d6d-8c19-5cbd5a575fd7",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db414f47-7eac-47f9-ae7f-487763d364c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cccd0b8-07b3-4eee-871e-4db491bc9c02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76e9b35d-44d9-480c-a356-01f46b042e31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a686db5-a4ea-4568-a802-359dea28011c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81edcb68-3944-4750-a963-b870cfc8a35f",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d0dcffb-1752-4265-81b8-641831da4251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a2bfc85-6f70-4f48-8b23-2b0aa2728962"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ff79e99-3946-4162-9ba2-9048d98aeb27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4200718a-978b-43c5-84af-c96d99d981b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6840a4d9-3036-4520-9a62-c932495d70cb",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab486f1b-001e-494e-bfd7-83588e7b83ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27d2355d-95de-4817-9eb1-94c6d2358a43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de31b8bb-d8db-4a83-a122-63ae70b3e167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a79da413-c6d6-45a3-87f2-abb5cd995719"
                        }
                      }
                    ]
                  },
                  {
                    "id": "796f8714-d70a-4a9a-bad3-1a84480fd985",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7accb4ba-c863-46a3-bf28-e8da9632fae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61aaa12d-8be8-4a0d-b715-e7a933801606"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21ac28cf-1174-49af-8b83-b6c69ef05f5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "da079d41-07d8-4257-9fd0-6b992c94b194"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e57dd1f4-545c-416f-96de-bff0fb2c6ba1",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf41d99b-59d0-4b8f-8a14-1c0d787cfe83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e68148d9-004d-41e7-b5f8-2be1b3a48992"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aed57fc6-245e-4efc-a502-4c011a15b068",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "849cbce8-e0d4-4310-98e5-428bd781bd5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f91fdca9-edc2-40e6-a8a9-dec6289015f1",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dcdc1f9-53f4-4c87-823e-9ec05d765a91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "861d31a1-9069-4647-be03-f27493f699d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dcc27d6-be82-42bd-b427-655718dd532c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "595f2e83-18bc-4064-8ca4-6542e823da53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b30faec7-04ec-4eb2-8466-daf48464abcf",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41db3cad-ce71-40d3-9f2c-b32e865a381e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4a1fd3d-3d40-4764-b67b-e8a327080ed8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "902dbdbe-9ace-4f0b-8bba-dbefb06989db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a00e46d5-2197-414d-ade2-f224b9fbf744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7b9180f-d721-47eb-a06f-c3f587416a37",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "212b8c16-a20f-47e8-81b6-43790f1f7240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e9aece0-b0e5-40cc-aa3b-cd749a848742"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7cd6686-f1f6-4ca3-aa03-c2b7478fc85d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc174f8f-4ee2-47a3-991a-4939fd80a08a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e379f9c2-c41e-4a90-bb6f-18ba96e11083",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc1d3619-60e7-4a8d-8823-c87984cf76b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a819e34-de7e-4b11-ab7a-8b55546edd05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9eafb62-9f9a-4ab6-9fa2-e3c4d4c205ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "addc7192-ec34-4e46-9904-87501f59abc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbaabf89-fc25-468c-8a92-8e266543091a",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e95db6d-2c3c-4ab5-891f-2b96be9aeb59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0e55cf7-3960-4120-aa08-8b22cd713745"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8100ae80-71f3-45b2-8b78-509360934e3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bbc0cd8e-4c97-4bcb-aff9-f840a45693e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e7f50bd-8112-400b-8ecc-c35826114552",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e84fe70a-dd18-43ee-b03c-7d932a26a53d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d80de7c-53a9-4bbf-b3a5-07954d852150"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbd24289-312c-4b64-8475-d8704159a3fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4dcb3e09-8eda-432e-8e8d-df159a08860e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eed771e-13af-4fee-b54c-6b0db2d4b63c",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1ffe46f-444a-440a-899e-b75d13c99e48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae579490-b294-44a2-b0b3-206e513eeee7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13d3583f-9728-46ac-9299-f6143aacaa24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa29930c-fd4c-431b-b46e-772dd8b7329a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b5df26a-70a2-464d-bb13-f27fec95c7f9",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0a41026-8d4a-4e6d-be3e-13103eef8828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a666b15a-3ac0-48d1-88ad-e438eb14b233"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fda99b29-0d13-44b0-a92d-17d79338c788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c133df2-0d28-4cf5-9dd4-5c9a3fc6fd8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39fb1d74-f7ef-4bda-abce-107c72eb483b",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aa32327-4171-444b-9f8c-18338e09d7f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8d2f154-c757-4b8a-8c81-eba75e234694"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01ec5a9d-e1a2-41e2-807b-b2508cf068df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a2e3547-5470-4b73-af5c-0d8dd3569c19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ed2c96b-cb24-40c2-a1a4-8d5d90ef7fd2",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8de7c25a-c988-4aaf-9021-e40c2dfe9167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acbd7dee-b8fc-4d1d-9fd1-c33045fecaec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69fe787a-e071-45b7-b584-9552267f88a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f1930a23-ad8e-4bdc-98ad-903878d5ab9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fad4540-def6-473d-94b8-4b09bab9e034",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c610f543-3931-4afe-99ec-282aa62e25cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09982fde-3228-4fec-866c-c856a2c79dde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d1200d1-60a2-4e7b-b08a-b9ad5a368f0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ad2c232c-91cc-42fc-b7d5-cad975fbd16a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83cbf0b6-7f73-4bfa-acd9-38c772e3e1fc",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d5fdac0-275d-45d7-a895-1585aa88c9bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c379af4b-0e62-46df-b539-0c794af513b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaa5db06-28c9-4949-b451-f0ba625ba9e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0d61608c-9d22-434c-8609-b1378052ee7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac8a2758-c139-48c2-8d6a-f52d3e91b029",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6cc55cf-f2ab-493b-a13b-7797254f0fd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af75fd1b-f6af-4acd-bc62-7ff761d045b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60d3c6f4-cfeb-4b7b-8910-d9517e2b6c7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7dbb9205-746e-49ed-b7f5-fbfe771213e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c1327db-9d41-48e0-a1b2-1d0a32af4060",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4facf1a1-6704-49c6-8450-73b94be05658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbfa0883-8cda-480f-b68e-2f17b8961de8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd5b34a6-e149-4e05-8a88-0ec125177638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b2837ec5-a754-4284-8b46-7f7bfed4371d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97f4fa1d-77e4-441b-9122-5b03a77c74b1",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb65c52a-57e8-4e60-875d-e70b612cc4c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a30497c7-72bb-4aee-adb7-5d590c5d9b30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a615dd80-425e-47ec-a6dd-4c36f112663a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a3a0724a-c4f8-4682-a0a0-d4a9d70ac4fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a3343b3-aa50-4260-a077-ab881030337d",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "154d6b82-61b3-4bcb-8b96-6244be166a1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a70c1cb8-4f83-49ad-a606-536442c1b7a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce973ac8-9d61-48fc-93ea-7bc0bc0cb1c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f1ac02a4-e984-4bf5-a854-97abb2cfe061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4d8abfc-94e8-4b8b-a46f-dff1fcc89a74",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "235d030a-2942-4650-8b1b-57ad95f10a37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "35e4598f-c319-4476-9983-e59d8f102ee7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3facb85b-090f-4bde-b345-5a442cfac146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "019f1dac-a9b4-4111-9f9d-41cb036784df"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "83da68ce-538d-4bf4-8124-4d446c503eac",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1f477d37-3617-412f-87e7-9fafc634e35d",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2498980-3b49-4f75-b50c-7a64fde3d330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "346d1b06-f1c7-4a91-a320-7966c1f4c4ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06fcea58-401c-4f2a-8bc9-9a7fa8da0c12",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "f0ac2b61-e307-46a5-a55a-cff6972bb0b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22929b5d-03a3-477f-b3d6-2826ef69d3c9",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74842d56-a45a-41db-827c-454082e54767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5ef83f89-d88a-43cd-9d6a-7e57162b0b7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0cd6435-4693-4935-bb23-b2c61dc55b79",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "df95cf1e-9eaa-486e-88fb-43cd15a3f590"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "59d67cfd-c9df-4ab9-90d4-da3fe84063c7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6a1d797a-3671-482b-97c1-974118b7919e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d6bc9a53-a37e-453d-9234-e65637b7d40f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d97078ba-9147-416f-931f-68aa6d327e26"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1d1c9b21-c30a-44f9-84b6-89c7fcdf147d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b150bc6e-5980-46c2-a983-b40d00b2d635"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "fcb2c688-eb59-4f35-af12-90336a2f5132",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6f418ec2-f797-4371-9e09-17d68fde8ccc"
                }
              }
            ]
          },
          {
            "id": "76d20b0d-b84d-4807-b71a-5d9681a1687f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ffb13e0c-d25a-4460-9aa4-9097fb20038c",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cb4ed82e-4861-4c9e-813d-35af077f0166",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json();",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ea314910-0d7a-47e9-86c7-7f276f5bee2b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8cea2bb9-6ae2-45dc-a301-9d74f025a93b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2dd24362-7ec3-4a9e-8189-37fc159cbca1"
                    }
                  }
                ]
              },
              {
                "id": "06edf9dd-4bb4-4653-8f11-437ff5f5781c",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9042e32f-9faa-412d-90ad-3e9b07ee9bd5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9f9c99cb-0368-4d68-a5af-09f21da49b75"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d3893b2a-b3e5-4e5b-9f97-bc1a0dc1ae21",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "40187faa-0213-4cd9-bc4e-698e84777c05"
                    }
                  }
                ]
              },
              {
                "id": "d8c935ae-d70a-4c06-8509-5007fb206638",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4cf51c74-c889-4dda-bdab-5f3b81371d9a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "135c7011-7ac9-42ae-88db-0f0a45497af9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5f1b6e8c-79fd-4e02-8819-490c9f2da76a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "918940b3-a986-4698-9f28-ed4d9c902dd4"
                    }
                  }
                ]
              },
              {
                "id": "b28cab2d-e1eb-4e70-9479-aaa6860738a8",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "29635c02-3126-4b0b-8015-f47e631c09ac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "287a62ab-10b1-44d7-a469-773d0a931398"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "412ec302-99fc-4dfb-97e4-6ad58e3c9c62",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "cf0337a7-5ffa-45ab-9f22-3a53bb331123"
                    }
                  }
                ]
              },
              {
                "id": "430bf66b-094a-41ea-ace4-3bc0126000f5",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4d88a988-50af-4612-9d86-1593fceda8af",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "84be32de-200b-422f-b197-ead2a73157eb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "770257e3-bb54-49c1-9b3b-360b8e601d25",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "f00590df-9719-4e79-8e8b-797236a1119f"
                    }
                  }
                ]
              },
              {
                "id": "38e7e4d6-8fc9-4484-bbb9-f068952ce407",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "40f88eb9-5198-4e44-be87-6f3168306d26",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "102ff3c5-28f8-4b52-98c6-ccd23249098a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b00faea2-aa08-4b96-862c-f10eb016655d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e28ea757-3d45-4310-bd53-9c50956a6b6f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f6540a87-df05-4240-810d-078fb3dd60c7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bdf2cadf-d5c1-4211-a964-555541f4ce8c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "453bc995-3a6a-47ae-a2c5-034271b4187f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "df4dc1bd-4afc-49b5-a3d3-ad35c7e3fe58"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "733028a9-b64f-405d-a3fc-10f73da0fbfa",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "f11605eb-c3ae-4c43-b275-149b258b1aba"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cf7f3c5d-d3f4-41ef-ba78-23520e1e3598",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fd2531d8-79a3-4966-937e-7f2ca8e33f11"
            }
          }
        ]
      },
      {
        "id": "68e7dd99-f1b7-4e1b-9a17-e5a3dc11c0ef",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "7d54f326-dd5b-41e8-b5e5-3502044c4c39",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a0f2217f-90e7-4260-90a9-353ce126aba7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "80595161-cdff-4a36-a363-e202d30c79bd",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8539473-0b1a-4009-b4de-34edd3ab23e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af757592-9fdd-4ce6-bf59-8e7010dc1c5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "630be62d-d7d9-4dbc-a8b0-ca240ad8c0b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "03763253-6a7a-4191-b9de-c49d2f975b63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d71c437b-9815-4e44-93cc-b66ac8451f6a",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ce84ca3-8f02-478e-8e50-103eb0fe4af8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a52ffb7-5c72-4255-8b5c-f2ad42ded513"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4555051-07d9-4426-89d6-6acebab03996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "08ddb2bb-3a4f-4938-b233-5c4395e63498"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcb87681-d4ba-4d24-b733-d5ba0dd1bbfc",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3617373-c892-4bff-aa28-53e59d2532dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd4044a2-03ff-4841-bea6-9f31ca1e3455"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9a621f3-b748-4619-9ef4-e77e0990662e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2392d09-46d1-42b5-937f-2cb1716f0243"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99299ffb-dff3-4759-a1cd-95ba53e888ce",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "819aeba3-c072-4a01-a55c-ad2716f3c5aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1e385c7-ef1c-4799-a0b6-9dab6182fba7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67d46e21-f05f-43ac-a7f8-264c06d44d2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f745a84c-fd3c-48ad-bcc8-de3191ef7dce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a97660d-c966-4f14-b0ab-eff9c55d476e",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2783e9cb-c7cb-47e9-8c8a-770340c41d54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "815363d1-b2fe-4e80-97d6-59ef0377b8e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbc94ba9-42b4-46af-b4f1-a99df12cef00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a25632e1-71a7-4ba2-9e42-1b0f3784e89e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4a5f236-98ca-4f7c-aca1-c36c266363fb",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6fc65e7-38e7-4387-8af4-76284edce956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "903c7539-b7cc-4314-9fb9-9d5beb6b872c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73da8479-8978-48c2-82fe-ae452a548e17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e04f983b-9d46-4403-983a-0fcc84474d1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66a5e13a-73c7-4336-aaa9-b5f81f9730b0",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b6cea72-e9cf-4d3e-913a-e8c3189a970e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a9317ff-b17e-43cd-89de-b4b1d2b96c35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a9cc7b4-01b0-4717-ae7b-d2b223aae8b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "47bb4d2d-fe5b-4449-a3c9-22ad591f4645"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e03b5afc-5d48-46e1-a4b2-e15cb9846cd3",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5576baef-b5a7-4d07-acff-a14e640d511f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "429e6872-8f8a-4921-93c5-e6b619467a39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "938484bb-2c02-42a9-bed7-3c0b1888457c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6fdf9d8-f27b-494f-ba33-8dcb13a89c8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8a5204c-80ad-4da1-b0a8-1eff4105b621",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9b0f273-3184-461d-ab56-22a51c6f4288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fa8a0d1-45c1-4756-87a3-1a8dcef5e44b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45563743-709e-43e9-8f07-ed4d3470ea01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "553123e8-e3a2-46e6-a639-3d6d6dd661ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b533c53-7c76-49f0-8037-eae56291bd2f",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "430ae46a-4a48-408e-a616-7dc2fc83233e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e0830ab-5f61-438a-8aa1-fe7d3018e40d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ecfbbf2-6b4b-43a0-a3fd-5a2aa64d3696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b07243c5-1769-4369-a5b4-4cb8be5e357e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e54e6a8-0fd4-4f0d-929f-43bb7b6bae59",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9695e1b1-bee3-4630-9f48-68246b9af110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "008ecb50-95d1-4713-a243-2483fa3b64dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6106958-4e8a-4feb-9a83-d72dc24d01a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "a8a33266-cd52-4a9d-9a3b-9185fb090bde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "893312a1-0b82-44c9-a7f2-3524292a124b",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec59b325-2c87-445a-a0f8-79e107d86869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10b2cb8b-b094-4287-889d-51a5519cc5be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef410666-ef7f-4e48-a57e-a79a4ec169ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e97604b3-2f90-4211-8625-f10c57c91886"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72ae2316-cd0e-4643-bc2a-597939d3c17f",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73f259b2-855f-49e8-b7f4-5c3ed05bd6cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8309c41a-e86a-408d-95af-23349e637bca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cdc49c4-8ab8-40ea-9a7a-6d75ad28481d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b53d747-c988-40f4-a0b2-24316f11f80a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0432a921-9bc6-4f3b-9d5e-b86d809d193a",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d44a732-9d10-443e-bfca-4d04a62c8027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "288edf46-3bca-4866-8d15-fdca89213446"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16c4b2a2-d16e-473f-bd36-6d6d00eb020c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a355538-7b47-482f-b8bf-cfeef38406bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e86b9add-6c9c-46ef-b0c2-7c191d4b3f02",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41149506-779a-4072-9301-f62982ba93af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f7a57d9-6ac4-4566-8ca0-f9e6b4a3e5c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f2cece4-08d2-4325-ab6a-c34b8baea37c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b97c9b4-77e6-4012-acc8-9584b92a4dc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "117b6d62-43af-4e70-acc3-86db54153040",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64bca9be-f6d1-406c-ae43-e5f65110b047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c0f45af-2be0-42ae-94f5-a75aa1d84c83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e283d64-76bc-436a-a6e7-0746108cfe4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "328a0a1a-8e3f-45b0-9b05-bb2db02d2752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "789d0157-d34c-4e45-94e5-7c08a9adb097",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90e7a6e8-40c7-46b8-b2b3-d66309381a81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffecf62a-0d55-4fb7-b213-fa2a9e1948cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6db62444-8f35-4380-9800-26e0efa170a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "62d756f9-10d9-4bf9-956b-38d2823e0c99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8823c49-7e67-47bd-b0eb-286803422b2a",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "433eb461-6e4a-476e-b170-a238a5c67d2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f429ca29-2602-4d6b-b251-19923aa2bde6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4eb1b36-6365-4c4d-9cef-ef6925d0fc2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3225fa48-a56c-4311-bbab-fde8b93fa836"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3bf8174-92f2-43e1-a62a-abf1448a2533",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75aa1e9a-c30f-41ec-bf0e-d493e2012f4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "751841c3-6421-4a8f-a648-bf72efa03901"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c40f6bb9-2f37-4aa5-a723-3c75c6caa3c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "379ccb5a-f22c-4a33-9cf0-71f14dafa2f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f189cf10-6e47-4b30-adbd-8e2b799e9ed6",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d48bf115-2635-46ea-983d-8e84c1902943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ea6fe14-ebe0-473a-8dd9-19c7ff4cc0fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df8c9b0d-618a-49e0-935a-6a812c6839ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f971e988-9bca-4558-9205-df895b0ad3cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4e53c1f-7876-48ec-9e4e-549917f5f511",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f16f9983-edcf-4242-9bcf-f55282970860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73501a16-2d27-4665-ac65-8f697dbb55e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7c3e3cb-344f-4912-9388-008e26523694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "000e220f-7677-4eba-a1f4-ee7e3d879623"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3595eb2-0733-4ad8-93fe-d9d01c369edc",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0f6499d-4d73-4e10-a02f-b28df86240ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63f28329-a933-41d8-ae06-3757fc3396d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfcf35a1-c32d-49ed-8ca2-1138008ae9fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "66fec57b-d7b4-4d88-8081-50747523d82f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff99ae63-4d18-4e37-9d7f-83233bef2762",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9efa25c3-f075-49d7-b59b-6ae023920133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "433b8976-8fc5-4594-b5ce-e62adc5e34ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94e2b682-0013-43aa-8701-22a1871e3c97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d54aec6-e0a1-45a2-b301-83fddf18ff18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97ab4587-6f7e-4440-9808-56d66bbc7e45",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cd806ee-ad2c-4b7b-9b1f-f80418c55d91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ab1966a-7b8b-4085-a804-5e690eae02b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a42bdc4-bf02-427b-b661-b2bf01f34033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aaa20ac1-fe3f-4854-ade7-9c76d2b77f5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0552281e-6ea3-4c32-99c7-4cb2bd8f1e0f",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5093d96f-010f-41dc-b988-b08aaf844b04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8bc66e8-42d2-4187-b682-1a69c881bf0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d35b132-6961-47a6-9a3d-1008515fd3ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e341007-5196-41e4-8916-1c55e893f5b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1167ff7-f982-4d78-b780-e42f5d725856",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d201b895-622c-4cde-b9a0-15a83dafc021",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d82fba0-9a27-479c-a7a8-afe793bf6389"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5487c671-0e11-44b0-8941-ee8d97d5be2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea17f152-4cb8-43b3-bf90-ece54fd79701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a46426a-94b1-44dd-af77-b6d1d783d8fa",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33be1c8b-eea3-4eec-b624-9a8b163da045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "439730f7-b100-4bec-969a-c5b824599cf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d798445c-196c-4c13-a99a-81c0230ec229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b56d131e-3e0d-44ba-abdc-5c452ff90e28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4208d2c0-2ae5-43e8-b1b4-4b6b2f8692b6",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec39eefd-660c-4adf-8956-0b6d967c0cc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60642b0f-95b9-4496-a761-28a4c31ec03d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "579aaefc-d53d-4319-aa91-b1c636ab9481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9842992-3621-4746-a0e7-ce125973041b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4eb4a2d-66b2-47d0-8836-64dad46d0b4d",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c76f6960-d008-4b9c-97eb-f09fa7a01acd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0031f66-df9d-4f97-b6b7-8296d40c9d9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89605d86-1e31-4803-89ac-990344df87bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c13d30e-49cd-4f46-b22b-fa182f265f7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18742d9d-a6a6-40fc-b1a7-cac4fd721206",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3af63117-1ab8-4cff-a45c-0a45a9ae9d4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ba7a614-facd-441c-8066-ffd9aab33b41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32a6d7b3-3acc-4d69-b3a3-34f115fa91f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "16f10d6c-5653-4d97-b3ce-4dc393b085bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cb4b014-b171-4326-a039-18faae578826",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a53544ef-1bef-41bf-9ea5-a4fc0d457db4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ada8cc7-255a-497a-bd95-574e7c8d3630"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8998e718-797b-42ef-a35a-7072e858b560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c956d94b-705c-4566-81e0-3b554bc4616b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fd385d3-48f1-47fa-aa9e-8ad491716f90",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d72ace09-5a53-4ea9-b21b-a91e78aa5c5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd6c6cc1-dc0d-4d62-8689-429e01c17586"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4e22cb8-494c-44a8-a6b9-edab4be80504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e7b103f-83ee-43cc-a7a4-8b0069143d65"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c2e162ee-8953-4b1b-9154-f824b16015e0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b1117723-313b-4936-8f1b-47465210460f",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a8e60c5-27c3-4e30-a52b-6d2d5b909c64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c95308b2-75cb-4260-a906-059fd1735f2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "911656a6-1a7b-498d-9630-d63f872d15c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "15d0c146-d930-45e2-8e1a-b606cf950c48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b260280d-ba88-4f54-be3a-a96eede345a7",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecfdab44-c5b6-4bbf-966c-93c8ee7fff03",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "d897afd3-bec9-462f-9408-e2622bca2c16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1bc0d86-1cb3-466d-be5c-d302fd149269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7268eec1-ff5d-4bf3-8b0f-b642e2275f26"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f84c44c2-86ae-47d0-9241-57f61c7997ae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ba15409f-0483-4209-8967-a6643bf26f73"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5f7869ed-bdb5-4b16-8784-9d3ea1bcf88e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "11b57f0c-87f1-4acf-8b61-9faa9b16e1ff"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2bc2f28d-408e-4471-bc26-250e52346534",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7bd6b39a-e533-4f3e-aca6-a6928dabc504"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e0d1392b-05ec-4953-9f19-c304a4125e16",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0e011937-603a-49eb-9cf9-e9a8d7777eee"
            }
          }
        ]
      },
      {
        "id": "e840b0dc-7ca2-4960-a8bc-a991a8a5a334",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "ca50c95e-6a51-4fba-8a48-2e1725f3eead",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2211972c-930b-40dc-8348-6c5b12f8dc07",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "58a801a0-b9b3-40da-a485-6afd1894a4b0",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71751ff1-2e64-4f11-bbbc-67f2c75f4d16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da6021e0-15f4-4cb0-a820-e4fab405de61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3309fdfe-0035-4c85-ba41-5076ac2ac952",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "519c7985-96fd-47dc-820c-3616388afb02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19205628-c573-4684-b356-119a9eab1771"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5ac2b1a-ae96-44f4-9d95-5025a813af55",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9b98aa7-ab68-428b-aa93-6ad168685a31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecc22d0f-9e3c-4bf0-a843-00ebce41aadd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d274117c-ec2c-4367-ab7e-0112eb205f59",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcd7cf3b-6812-43aa-9045-d416c0a1afc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ca890bc-c874-491c-8fe1-8694216dc955"
                        }
                      }
                    ]
                  },
                  {
                    "id": "308febb2-03c5-4100-bc98-e71b459bc9b0",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1cb73c9-1323-45b6-b20c-82837a2187f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c2156e6-383d-4131-9fd3-cf4289d7841e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f94cb64-52f4-4b28-af5a-7a50262fc517",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d43fd60-9787-4953-8902-0bc75148c533",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bd354ab-1536-4f2c-a7ea-c075081f0cdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13c728a6-e228-4a1a-9603-05c3a2da3463",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c18facb7-fd79-48d3-a22d-30d2d1a28822",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80789032-1486-46aa-ba2b-f8065c17c03a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9807a96-a8e8-45b6-8110-fa5b04fe8d61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81699a5f-422f-49c3-87c6-8d98f37550ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12954c52-d29e-4367-8d48-c978bfd5b027",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65d8f26f-532e-48c8-8308-989e2f09043a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34eff0b8-8d60-405c-b167-bca63ec5c6cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a774f2e-ccae-4871-8bd8-83b90d37d653",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d1583b9-16d5-4a5a-b220-3ed66f706673"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f31e7df-1976-416b-afc2-e29fa450644c",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a941a833-f694-4640-9d0c-b7e2262516b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef0d2899-52a5-490d-9bf5-d6de2b9cb26b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d90c80a-4a04-4942-a23e-ed4c880d5149",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aeafab2a-bf6e-4899-b95e-a5e434357d81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdbe0440-63b6-4b95-bd64-d20254e4611b",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afaee649-cff6-430d-bb2a-876759ec6163",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c420fa2-056a-4821-83ab-98a6e2eca9fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5c1888a-3766-4cbb-9a99-b38d25982ecb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e724342-b286-48a8-9069-9dd68a80f0e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a5d13c7-671f-4fea-9c31-831b0a95c6bd",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45b7d218-b295-4ba9-9f77-30af96476d67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4220460-f962-430c-b1b1-44ff5f246187"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "471c930a-cb12-493c-9cea-cf17591fba50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "776ca06e-13f5-4d3d-8ae0-30fc48f66f8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c06ba1f2-87ac-4acc-b07f-87777c18cc63",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de4797df-23d1-4ab9-9561-d05de5f36f56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "862f4b4f-2ccd-46bf-9221-e32bc11f51ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ef848a2-9f78-4735-88bf-3a0157474ad9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02bfed2f-09e7-4b17-9b91-feb6f09327c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6f680bc-cddc-4818-aca5-f7bd251fbf42",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "445a8d53-cc8a-4d47-bb22-3f7a916cebc8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5728255a-f1f0-41e5-8739-775225ed6918"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61eed90d-8bd1-415d-9fce-42e991abb715",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d3c2e64-11d0-4837-97a9-31d8a460f156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe1786a7-b9c4-4327-a533-338ffc699cc9",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "407515ea-7165-454d-abd9-90b8a60cdcad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4fd322a7-b25f-48f7-a4b4-b228587329cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c44515b-d25c-4af2-b39d-44486a36f912",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c933227-cc54-498e-bca0-a310587eb51b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ede2fe83-91c2-4c09-a47b-4422b88bfd56",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33329ad5-a30c-4578-8811-b1cba07ae487",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "216f4e15-95f8-4632-87e9-953404ca1429"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b2960cf-2fc7-4d6d-9111-280ffdc24d9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f08518ae-9fdc-48f5-be6a-bd966a901a4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0774bf2b-828e-45da-9dc2-eadd6b88e921",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "949e333f-0713-4610-ad26-77efe6007530",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46dbb40e-df77-4c3c-b09b-3f9d4bbdc975"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7872fe89-a25b-4d27-878c-75c64ec48a14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1070ecf0-f334-4333-8398-3673e56dc15b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05541a16-520e-484c-8735-75c7974c1fa2",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31e787d0-c38e-46e2-a369-399672940654",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "929f64dd-564d-479b-84da-20e758479a59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cb4eb97-1ca2-4fe8-b517-4579c667cb17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a70cbd94-cff5-470e-96f7-086a56051d32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1055f457-9067-4967-9d8f-08704db02032",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "866abe22-acd3-4e20-bd21-ac2b87b7c166",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3009e255-0d49-4273-aebd-0dc44aa27c05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bad7087-9230-4307-b2ca-77ce68d8246e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "823b250b-5a45-4d67-866a-3fa6659eb87b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "458cec2c-f155-4d76-a3f6-6792fef8308d",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fe19b0d-90ac-4b21-b7fd-695f180f31a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4c3226c-5f70-48f9-ad40-309d029b7355"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53dd89fe-7f32-4b34-b17b-2d3f12395918",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b7f5c1b-18b0-4b33-a8b3-f3748a289355"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8be905be-efbb-4b16-a582-edad16f255d6",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fdf6b22-ec24-4696-afa7-260cadcea17e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fd18819-47e5-4a8d-9722-0ba54f5d3466"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46a76358-5540-45d6-8e04-aa188ccfafad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "462161c6-3982-4448-a976-a7519326369b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e205910-e406-43ac-adca-bcf77aca10a2",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b00ee1e1-0afb-4219-b1fa-51295deef8a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2223751d-112f-4c0f-9b4a-17438ce121b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2123b03d-91ec-49bf-8b91-a0f6f2a514e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb2afe2a-14ea-4118-b939-7572eaf1fc6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d577a661-9597-4fad-b4db-5aebc17e1013",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bbb7624-2611-44ed-a51f-594511728c3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d2e3a1a-829d-486c-886a-d33b05875a54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47d5ace8-2059-480e-a712-2f690c6e3ebc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29c8976f-b655-43e9-b77e-1ef3d931d556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb5e200c-236a-4607-a31e-6236b5754a12",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1e4bcd8-e8a0-4adf-a640-ce7b1fcd9cba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73e6b3eb-95fa-4a5b-8060-08a8738eef43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31a1e049-6206-4f3b-9845-954fa23d30a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09dae2fc-822a-4b07-b9bf-b1af51505682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28f89cce-d12b-4ed2-8e55-b271e05b8915",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d64ba80b-9377-4b5a-a6c5-501f6aab8494",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37fff367-54c9-453a-a13b-3bede435e1ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "780f7866-8e02-4252-94ca-0e5b3a0294bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e9e2bd3-0a40-4a8d-9607-3f96ef74f4a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4622cf3-04b1-48ba-ae64-223875fae3dd",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33f1bdaf-797e-4a9a-81af-34bd5b5d4763",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20257586-90ae-44de-8be3-b74d2dcb5b17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f1fad61-8e77-40e3-b0bd-be7fa86b9c8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b838cf37-4a91-4109-9ca1-50d73f020041"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07e85b6a-b8ed-4a06-ba79-5610d9159771",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f01a6757-e7d5-4471-89e5-3f7509eef5b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91534383-b0d9-48cb-8585-6ef278601547"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "621dbc48-6040-4ec2-a7a6-76ad0b2c032f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39b3b789-8e91-47e5-b99c-2373d9383abe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afc308b1-f9c1-4497-93f2-cb0c2fd625e8",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7443f099-8111-464c-bc3e-54b9bf168284",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d44fdd2a-fe3e-4b33-98b2-87eb5b0892a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69c8b2b4-209e-4873-b315-eaa33d94fb25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aeba8026-a021-4354-bc72-8eeb4b36bd1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "506f086f-45f4-446c-ac9f-43e2cb7d484e",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d512ceb1-194b-4a68-83c3-123410e6b2e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c1aa094-560f-4b1d-bb23-b180fba26a8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ab780b4-73d7-477b-b2e4-b75b23d8eba7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cbf5932-c2dc-4842-841f-c995a0cf2efe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abe4d1f5-ef25-4e7e-905a-27d7a47c8e37",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31a3708d-4abe-4a03-bd2c-533f4485a6ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed42803f-6f70-4f4c-a6d0-2feb30206552"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf9e4bb9-ae13-4031-95f0-3cd63940daba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70a08b88-6a9b-4d5b-864c-584123041f13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc699f1d-83c0-4aaf-a170-05367a667f96",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db6960b1-9d93-4105-8e5f-f9ff879be048",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5779852a-f289-4466-bb94-5a95223af7d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35530149-3d68-46ac-bb90-483ae39441f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95249a9c-56a0-48d4-880e-2490215b88c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aca6d5e-0df6-4415-ae81-87909b32e382",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b29964c8-fecc-4aba-875c-b2d511f9a248",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bb21dd3-5094-492b-8b99-928434f81414"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71128b69-a161-4fa5-a1f4-f6841d6bd3d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f12d11bd-7eb0-4711-b1d1-f3492aacfda6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "899a3a58-f037-479f-be49-1db7e37313c2",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "237520a6-30d1-43c3-9b19-fd9430d13142",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d795846b-8d41-49af-887c-5a970318df92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dd55d47-6fe0-4a85-b9a5-91ca04852d0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1c95ce9-5b06-4717-be9b-52cd80c2d915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "875bdd9f-fb7d-4473-a281-a14420d59afb",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8cd2077-0a00-44f6-b4c5-3322791b2310",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f6bf790-a5fb-4795-992a-f26c832bd842"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c0357f8-1a09-458e-82f6-e6ed9133e260",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc843992-b608-4ab0-8669-2345142ff182"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38fc93e9-9cf2-4ebf-8993-56c1a13663f7",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb848d5b-c887-4c34-82b4-bbec767ec7e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "378bb9d3-084e-4ae9-a9f8-e1aa14fcf0d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33d61a09-ada9-4bdd-8cca-4b967a88f9bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d007ab5c-11b6-4685-951f-5944fbced7b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e25ec86e-ad81-4374-a083-55b1db9f6ec8",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc85bf91-1e90-41d5-9279-adffcbc27ac6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a285e03-8672-4560-af78-393f634b23ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4231db1b-9e3c-4a20-a9b9-ad51eed22d51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8a93a1c-2e0e-427c-8d79-2fb97e122374"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f80c1065-e3f4-4644-80f5-44371557c002",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7072ee9-7317-4e32-998e-c72bcaacb557",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e32a8684-fb28-4448-bdf4-89c1fddcf0a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a728ab9f-d28d-4f2e-afbe-39c454bb3941",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0163368b-474a-4fc8-bd02-9f6d1776b55a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e1ea24c-d77e-43f6-bdd1-aa0b3d0b75c2",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38a344bb-fe4a-40d6-9651-a1dd6ca3ac7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9994031-2411-42b7-9a75-4e499066778b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "789f4530-03d3-48cc-937c-68f49d381e85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76b22349-2544-45d6-9bb3-ced2563421c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d8f456f-b14a-40b3-8e99-19f9dc9f5d25",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4de70811-c8ab-4b1d-abf3-ddc451b6a545",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffb7699b-41b3-46d7-84a1-0d1877fd60b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0b8bdaf-41e1-4c83-a2c9-1ba249c6da58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae4d5f5a-6535-4c40-b92a-0f983c0f5f89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "304f7095-3ff3-483a-b7d3-fefe63136db2",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25facca2-20e4-4ec4-bd4a-a49d1a7e9663",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d04be294-7076-407b-814d-8eab5d3ff6b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53c0d6ee-c6fa-4aac-9ccb-f3b3338188f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14eeb2a5-72aa-4403-92e6-d33e13a30dc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbbd1811-0cbd-47b5-a546-45bb58c19180",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5989b547-c105-4ffc-a246-8635fa815398",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8089f875-3997-404d-91bc-4d2f8f315c78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a45146d-3ce8-4b85-a2eb-f462d89509d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6efb7fd1-c210-43cc-9d73-8c0f60ef3ee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e14df7ee-ede7-4e7a-a989-fea4bc0ad42b",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1b64b10-6100-4e46-8e18-ca5c8b2642a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82d77e33-5286-4fe6-97a8-458714c91caa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "899baa13-5ba1-4952-a015-a05078bbdbc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0354feed-83a9-4a02-896b-502e4306a744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cf1b0e5-bafd-4d0e-bc99-8cbd78d4ae15",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24944833-e634-4762-b090-c77ede301633",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a6ce1c8-5bc3-48b9-b5e2-3f8bb27e9c56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2c6e096-caf2-48eb-b628-cd9041787c95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46fe3ba8-bfeb-444c-8a44-d2403f201f32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92c3f588-303e-474b-98ae-45ae6a409c0a",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73183e10-55dd-4643-bc9e-be1b7097ec4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a0d7654-f5e2-4cff-a04c-00905d593ab1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34c1229c-4122-4371-94cd-8a3e68a98808",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d17f6de0-5ef9-496f-b744-a3cfb671c14c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c06ed0f7-6720-442b-835b-603de8b365bd",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d969d6b9-dec7-47cb-9339-bc3fd57ce393",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68fe4d5e-0e42-47c1-bca0-6bf09053da4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d297ae1c-f6c6-4a1b-8665-b502e2b8cfe6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cb31c55-8626-4622-886a-209261916c73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "056b2e65-c492-49c6-b21f-f5637ca62abf",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0d11053-0996-453d-8587-f9f82673c0d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5292f02c-a588-46a9-8a0f-2e0e2e65ba2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a976df55-04f2-4ca1-99a8-6edfcdbeaac3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7feb010c-a58f-48bf-ab21-936a4dfc6932"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5df3efaf-79d1-4e1e-a359-16b1814c5fac",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "989d877e-c6d9-4ce0-bf46-8a6d77dcc3ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb673f94-26d4-47d8-b6ae-1681a241a23a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aca3b4b-6ef1-4295-a925-1a3347520d39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a71a2bb2-290f-4620-9375-b3ec29f49891"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c9c4bb8-c1e9-4147-a817-bdede9788fdf",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "add950d5-0349-4f90-9cfb-043f4a53c753",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5851d43e-c2b7-4a0b-9408-cbc18e873454"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1af5154a-9204-4bf0-bf5d-9da21c858943",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8b37779-b0b5-4c98-bbec-d73976b3cbd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03865bdd-d5c2-4327-9165-437b61910df0",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "908ad67f-22ea-4e66-b872-4dbfe62f0ff5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03a02716-425c-4601-8907-4c049c43a6ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f8abfb6-21a5-4319-8ea5-a605fd412088",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3494e951-0dde-4ecd-b2dd-0ae83af46939"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5695fb07-f75b-4f95-bc80-e58afbe96c5c",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab5376e4-9f75-48c8-8391-4c9df039d826",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a823034-82e8-4a39-8831-547c022d3b85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46eb224d-8e52-4a5c-9ded-3cf9e3fe594a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89dde362-c0b2-45a0-805d-f136f466068b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "227cdc99-7b13-44dd-800c-38005e56bdfe",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebd44969-b44b-4b77-8d75-9e50b8e0fbe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa172720-4073-4cf0-a0d3-d96b1d1e5080"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d442fc94-6dbb-44ca-a7e3-f416a1f1421e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16a79b05-bd32-4e71-964b-1e8f5ce1c1c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a272d579-fe2b-4080-9a4f-e5ac14fd637b",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62c87c81-312c-40d5-b0b5-e0d94dbff4eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "084dff9f-796d-48fb-9d7e-18f2b044a603"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e717dac-a1e6-48b5-be9f-b8bf93cd88ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d375abb6-3d2b-4f9c-b9f1-2a5249e1543b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9c7ad89-c0b9-4f33-80e6-f8f8d936b55e",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e73272d6-9cda-4a2b-89e2-20630f409e04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a873b8cf-fc01-4d48-9ca5-bd57e38e458e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8611fa1-0afd-47b7-907d-6e0adffc0549",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad4513e7-5500-4b1a-a881-1f334ee9e734"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fcee2c7-50ea-44cf-84ad-b1c7f6a994b2",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17ae1df6-9623-462b-93cd-ed6af0f6b61a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d25125d-4fd5-4628-9ee6-dbacdb4a999a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77c9f66a-7b44-4900-9700-485f28813584",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f36f7a6-9b41-44b8-b9b7-58dbaed3e7a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d715ea9-9780-47d5-a3f2-dbfc18721f22",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf150021-bf4e-426d-a86f-b1a397f9b67b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75e56d38-7ec9-47a4-997d-35a7152f5122"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c745e2d4-c3a0-45b6-a71e-67d8a92c48f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f8c3dc7-7982-429a-95bf-3c0ffc5ebfc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25144306-fc03-475a-9d95-6a6f9b58a1f7",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "822a488b-32ab-49a7-b37c-bae296d89512",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f1289fd-615b-45c4-a3b7-32bd372055cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e187a6e9-c6e1-4e3e-9f08-1dccffccac1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a61efb9-af92-4c9f-9a02-fb05cbdee563"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d094e6a0-0115-4a08-8d25-ace5206ee359",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdec1c4e-e741-405a-824b-5f86200b1e16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d277566e-232b-49f1-8b8c-30346e3c5a3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fd6f5d7-f1f8-4add-b726-9151cd315d9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "205b04a1-a5ba-4a5b-a072-e48afe325f30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eb320c1-9a87-4083-b75f-fd81239a8696",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df6e5eb4-4d9f-4725-b105-30ee7cf16aaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21835ec8-d228-4967-82fc-8ab694e1f3f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9c23a14-7215-4f83-9629-585db02351a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "676bd767-c928-49d0-8e57-b3920cc55367"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbf59c99-49aa-432e-a298-8957971944e5",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3d2ffa3-1f33-4802-a7ae-0f8499317100",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25532640-4d9a-42f6-8be7-d35a1f89acda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5d1878b-64fd-44dc-8abe-47611c9b99a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cd7603c-00e7-408d-b2a0-3f8f42d79dd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90c7f741-4a8d-490f-bee7-eb4f391ad725",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6de8510-f008-47b4-8a2d-64971ca6f5f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98225b13-df06-4d58-87e1-ec9d286bb914"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4d63278-479c-4c54-9497-e12c12e06797",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "659a5f6a-ea2d-42ee-83e6-af034371ee53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f670edca-e40a-4e96-ab9f-130466de5b02",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "075bd865-299f-40bf-844e-597aaf7dae8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9df49d6e-f24a-4a45-88d3-fb4376797338"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72252449-de36-4966-80f4-abbde811a891",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f96fa8fb-0377-43e9-a1b5-77a26e9e984f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ddd0134-8718-4e54-a592-6dddf53c37ae",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f6e649f-4b53-4af7-ac04-145a24c53e2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2d53162-48f0-4fea-a133-997a3f055e60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "312bddc0-b3d5-4287-a00a-6b06505b67e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cb52e45-faa3-428d-8142-970bd53bf322"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5b3d8b8-31ce-4d86-8bea-b69190c0db0a",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b8f94c5-0de2-4297-98a2-6c0aeb857902",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "426e16b6-f685-4824-ab5f-f5c897d711ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fac50fc2-032c-4a01-a9c1-b8a05c9b74cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c08a467-1b4f-4750-830b-b3af06d38f81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67631e3f-97ce-46a4-b143-516055800632",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76a2d514-e0aa-49ed-ae37-bd3d1eb5aad7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44041a12-64c2-41e7-9cb1-bb95e079732e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca566a7b-b3a5-4040-a2a2-7b910c2e82ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10393502-fca9-44fc-82ae-ead0780ac4af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f235bb3-fee0-4f31-9e92-6b19850ff748",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aebef590-e98d-4967-9e15-c3d2dfcdb833",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c93b80e-dc55-4ed5-90b3-06b880c7a18e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f44f083c-a1e5-4139-9635-fc698c87f190",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7a22dc2-5091-4c97-bad8-81551da5571a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecab8c48-aa46-43ed-8ff6-1c85b0ee2858",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0d71b31-45f0-42db-beca-b245fff969d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "790d6fd6-9257-4094-9e79-cc7ab127b3a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e91fff3f-8960-4cdb-adc3-c94f932dbb73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1fde000-81b2-4cb6-a37d-d37a831059c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30d21d1f-bcee-452c-99bf-cad8fdf730ac",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74078f78-44c9-4acf-9964-447996064d1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3e7834b-0309-4fa4-91b6-3fcc8e5cb7f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99779ce9-0da7-4ce8-858f-f1ae6c592369",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8106ec7-cd04-4168-b04c-2b13945a9a56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3294d989-813f-4011-9aa5-ae84fa8d9de4",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3bbe704-1920-4f26-8f1a-f1f0b8f0fb3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ee2d892-a15f-4e53-9476-be0dd53fb0b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c7bf8dc-edd5-4fc6-b384-46a75dded73b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca6a8a77-9b66-4e6a-8ba8-97d6c2665500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e2ff467-7818-4180-ad6f-3f2403fa0354",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54c15c07-a8f7-4252-9967-f52c0d34a6a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "124f9a74-a43c-4213-ad64-e3f08f8af7a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f017c64-70f4-4174-806e-61e45db099c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3175828-a77d-4497-936f-2162eeffd7f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edc33113-f21a-4a09-bd65-670ff003a173",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13d0e51e-de56-4d53-8176-4f8923eafa8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ac0f87d-9781-47b9-b0b6-2b50f177bcff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ce5144c-9066-4d20-be1c-22eba455a4a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0dc36ba-e052-431b-8818-18be1dd99dac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8fb6203-826a-41c0-be7b-87cfe8f38776",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a10f566e-cfe6-4b95-a15e-60a52063af34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c25d85e-da15-481d-99b1-a880fef9d24f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57d09437-37e7-495c-be53-577807c62a70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38117c92-6b2d-4cd8-8775-37706152b6c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05860edb-7668-4a41-92fa-8e10595c7e59",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f498ade-b785-4586-9317-28d3ee2562a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db3b02e7-bf31-4ae2-abf4-5ce69efb774e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ad7fd35-69ac-4199-9079-d708b3fa0efc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caea28cf-3da2-4af3-a7e6-e64f73ceac93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f16349fd-32c7-4b9c-9168-258fff425cc2",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5229edac-91aa-419a-826a-89cb4fd2c7ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4cb56683-3bc6-45f0-90e8-4a276c91443d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "082122c5-e16d-4900-a45b-8339a39ea852",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e20a5e96-fe13-4f64-be68-558081dd8db8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a8d0b68-3b9d-42e1-af9b-4f99c9e408eb",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c422b5d8-1bea-4226-ba13-b8b5af57877e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f333afb-5b50-434e-95b5-07cef03effa3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f415e56-1cf0-4cf8-8940-6e494cad1811",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8efab0ed-4fda-4db4-98ef-b701d3c739a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b561735-7171-4f7f-97ca-a7272507b2e0",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa7b965e-80ea-4342-8112-60c0f2dc9a4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e735bcf-cedb-4096-96be-dbdb42a5ae91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88bdf610-1573-4445-8b14-7cead280adc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce9a777f-f723-4744-8d8d-35f5109343c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bcd0a2a-4cc8-42c5-849c-8d7d08ae96ee",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "837f750d-8d70-4d50-80a2-e2b63fed9b26",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ccacb3bf-8890-4dce-bb36-859e0674d715"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "422a189e-39bb-4c90-bbd8-3fff80a45df3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2058fbdf-d8b2-477c-a819-2488bea0c803"
                        }
                      }
                    ]
                  },
                  {
                    "id": "075cd72f-19b6-4f9c-9b90-2599ee37a09f",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a08326b6-3e1b-47ec-8f48-780b401172dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "940f4339-6b2e-4a8f-bbb9-56842133c243"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "981fcbc1-8183-496a-bc18-c46eaf8935af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "922c69fa-c2b6-424a-824d-ba06289a6ea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49a0490f-c5b2-4bb1-bbf7-1362f8c94f68",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee5e6eb5-46e9-4349-bd4d-774c4f543d55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b88b843-72a3-4925-be8b-8d2860ca95dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be604ee9-978b-4ee8-b374-cd4d060bef7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3ad53a2-1228-4d7b-bb78-0470fc71232a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5beb5a96-ce3e-4572-9a67-7133df83db81",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e68632ef-abca-4c21-85aa-cd535b2e5c2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "644c4a67-ae17-4e24-85fc-15faa4df69c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05601c28-6151-4b33-8b51-3ab698568f7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efa91cd6-d2a6-4767-9467-d2ccbeb456fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14aef255-0548-40bc-a09d-3aba93655ec3",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9369ddad-029f-4304-83d1-d7330aaf591a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ab357dc-099c-4fcd-a4d7-bb1335b3fa76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afd923e1-58c6-4c50-9156-58b7e3a55552",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a2aa4d7-755d-4eee-aa66-87b17ccc2412"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53fcf6ed-4bc3-449e-bc07-572af70774e0",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a93e210-018f-4c14-b44e-9c025fbfa767",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "160b2165-72be-4c39-b414-a80182183e6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c56540b3-45b3-4ffc-bacf-a52140dfce1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "943e990d-9431-4a03-a9d7-ee78ac469641"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9e41d5f-bf37-40d4-9bd4-8742551c861e",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39ec2543-2e93-4553-8faa-37e88501fb39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa08cd95-2083-4f3d-9f3e-e5161be3806f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ba88864-691d-46ac-a7ec-2771d17deceb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be4a9d14-1ab3-4de7-96cf-e45359f0c28b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e4957de-05a3-49f8-ba97-85b4d69517a2",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eba39739-6486-4174-a5ca-1a270dce26e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "742f31a5-1f9b-414f-a4a2-4b869fc4fb47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bb3f32a-2759-44cf-aeb0-0e38b664df4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c79364d-c333-4c6f-98c4-0e7a5c7eb703"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55afd6fe-5214-4319-9051-1a5d56307447",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4604c65-f49b-43c5-8f5e-758011d2b4e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19fad0d1-479d-437d-b636-da04637512f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2292a3b-ea5c-4cbf-8bbd-d1fed982ba05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f897f7d-d3a0-43c8-bb14-8cf3afb159f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e1159ac-f5b0-444d-a5a0-71930b5a91db",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e23c569-02c9-465a-b2db-49bb88dc7f54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "474b103e-83e5-4530-952f-c1f12e5be96b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3421c08-ec62-453b-9b83-b3ec4b11c1e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cf98c4e-5dda-46fd-ae5f-9bf44f7f24b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3563c197-c64e-48a9-8741-611f478acc89",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3399555-1539-4d54-941b-21bd7a00b856",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbb1e4a6-2508-4b02-b074-ef4a2b42e62c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ee10c73-a5bb-42a2-8942-4a7d362d0dcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f3aef63-b711-4ea1-909a-d34642cf9acb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87ecf012-2273-435a-b88c-41fea9a89175",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "328e606d-20a2-4e69-9de7-6c8b7f7cf459",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f7f8ea3-839f-43a5-9943-0e78dd208132"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf4d4fe0-e85e-4df2-a80c-b8fb400b9349",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7f3887a-4051-4ed0-89a3-6f14362c5550"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46f06f56-815c-4b1d-8a96-3ccf7dccb63d",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a2304c1-d847-42c0-b2a6-283597b40b32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "665eefb3-8ab7-4c55-81b1-9373a84bb55a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "777321a4-c67a-4285-ac16-0e57f775cc28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82099944-3fd3-4cee-9878-7e40b6159449"
                        }
                      }
                    ]
                  },
                  {
                    "id": "897df951-6125-4555-897c-a612e1fb2384",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7902439b-4011-4624-9109-2189b96a2885",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9faecb47-cfed-4493-bbce-c04930f40c9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df64f526-56f8-42dc-9584-c46f0a85d2bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40b39e3d-d7b1-4b74-92b4-6114712b7925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ae26f91-3dbe-4a87-9003-6ef2c46e9c05",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a2f6e5f-c2de-4ce5-92c9-0052247e6fe9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6146a51f-9aa6-441e-880a-542bb7ab9b7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c696bd40-d3cd-4294-be62-04abc644427d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5838fa68-daac-465c-8137-d3bbe93f872b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "385f1863-d1d5-4cb8-a812-3b18164482ad",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f292301d-4da4-4ac3-98c8-d6c88493f32a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba8f789d-3f98-4b9a-a5c4-baa33a85be7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "045508c6-a116-430d-bb32-ad45fe4615ae",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "033371f1-6bf9-4e90-904d-f75db2f9551c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbfc2bf9-2dec-43b4-83b5-c6908542ff3f",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c45d0916-2e84-41d6-8fd1-debc08ee9efa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d183be99-999e-4ae7-90a1-740c82ef4f3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf8ed640-5033-41f0-a03a-4b48c4aadce1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "866c136c-e1a8-4e56-8df6-f8319c306394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4b07e2c-4b21-46a3-80d7-45dc5478e0c4",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9b30d54-afd8-416a-ab74-9a7bc51d2173",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a74ec30-e5a1-4204-be9f-e7460acc0176"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47b858cc-32e4-4f63-8054-dfb156ff385a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40b8e908-6e9f-4401-9c84-71f6b8cbbc3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f68f982-f66d-48b1-b70b-53d4d2fa5695",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c03c03a2-3570-4e68-b0e5-359a9441bc0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d34d7575-5bf7-4cbe-9a84-4afb3915a8f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d80c1b22-836b-4b24-83e1-bfc938fb9135",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f66eae9-1ccf-4431-b083-f228147de1fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "789df06b-b1c2-4681-be3a-8b25fd5753b0",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1165fc77-21e7-4487-80da-c0ca2a0e2425",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3acc5681-1151-4651-806f-e7ec519bb19e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf46415e-ac69-4a54-bed1-29203902f3bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb4f06e0-d070-496b-ade9-05ac9f07c174"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6855c467-9ef9-4d1d-988e-5bcbdb38fa4c",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23d250b9-7224-46a8-a19d-348b976192ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7d502d3-56fb-4cb5-9986-3df2b9b183f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02822f15-6fc0-43df-81d4-2eb9d2a48fa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01802c3a-1c9e-4e54-aec2-9f4857d21b57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45734cfd-126f-42ab-bffe-681897d5d3af",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52a6a855-fcb1-4f9c-a992-d726aaa7d86f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a046475-acf8-4ff3-9b3b-f59778b9e19c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31afb88b-93e3-486e-84b6-1b39c000903a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be15d983-f86a-4705-8f45-17722ed211c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a906715e-e25d-4555-9e79-e0f96a07e98b",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d97b96c1-d174-4a0e-b2e7-8b576ff87f7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c00cc9a1-37b4-4d56-8c1d-35b1e2a62f1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "335ea066-7364-43bc-9552-6e99e6f31efb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f26e88b-0e3f-4d64-8435-6c99283f11dd"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a8d9b8bf-3003-440d-a3c8-5660fc0365c5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f73ef12f-ca1a-41b7-a9ba-ee1aa95a39a0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b390420-9436-487d-b742-d72e6ec06871",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9277f16e-f801-4886-8f50-4fa41d30e4fb"
                    }
                  }
                ]
              },
              {
                "id": "2ae10fe9-3685-49fd-a503-d948d35a0164",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a80df6e6-4053-4efc-bc90-999488a4a300",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f78c64cc-b2ed-4d0b-ae40-48ae397ac7ea",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "92eb458d-688d-4266-a19e-96869781cf19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb9a6940-ce10-4efb-bea5-b085b2a216e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "72225886-84aa-4141-981d-38006f60c766"
                        }
                      }
                    ]
                  },
                  {
                    "id": "403f7565-df52-406e-8a67-d6b5b382c2b5",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89f04568-f0ce-4a2e-9fc1-4d307f77e7c7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "70c20898-ccd0-4664-ab11-50f734f6c4de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b9ab06b-b8fb-433b-b50f-01ceae8b87a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8bbccbb5-c2b1-4fc3-9cf5-148aa5dfd71f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a7665305-8bcf-4829-86c7-f62cc9423907",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9a23d904-2fa0-43a6-afef-2cd930a3fdda"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bb48d550-14a2-4cfd-b5b2-8c8d06aada0f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c9a78597-dab1-46d8-bf5c-e94d0e43707e"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "aa14aadb-d440-4f29-9e45-033ca61cdc52",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e6db2163-0167-4449-98a5-7cad0eb224df",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5cf0f2e1-cab3-4056-9ed1-3add54459e52",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c7782339-9553-42e5-b2fe-93bf821ff721"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a50191af-afb6-4f8b-b75c-4ef652a84e23",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "de0a2784-b3cb-4b3e-9504-5e896a27a12a"
                    }
                  }
                ]
              },
              {
                "id": "cfc4b45d-c98d-42a9-8b44-7b45b99107bb",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fb6234ca-5336-412b-a840-dc88c3795b82",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d5dca94d-0cf3-427e-97cd-433bf1df61a6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "20b9ad38-233c-4f2c-8a9d-e36ccdf05b3a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d61c76e7-3da9-4be7-8da5-10a659aea6d0"
                    }
                  }
                ]
              },
              {
                "id": "b1172f86-41ed-4350-ac46-3e55a256d148",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6389ee61-552a-4d76-9bea-c1cc25c775d2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "04106ca5-478f-467b-9e1f-73b023cc2c17"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bd55d941-4395-4715-8815-8b28eedb6b90",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0520d33a-ed66-46e1-b337-e36985a8dec3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "858a8349-8f4a-4b22-bec3-ac4d06eaeff9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "2db6864c-0654-4df9-ae34-9e15643df6e6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d886d562-6215-4855-9144-282435c4a624",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a586015a-868f-4d0b-9c02-ce968f0b261a"
            }
          }
        ]
      },
      {
        "id": "39bb256c-96b4-44bd-b6c6-d533f1bf5eae",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "226e30da-8049-44d2-a768-5df3f971b201",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6333a057-a524-4944-81f9-1ad5c3f9de5b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7f23cb5c-7327-41f3-a07f-4d2064890d24",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10014e9c-43ba-498d-bb30-44273d5cae73",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ae4cfe62-7418-40a0-b722-8aac81e5de0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9a8639c-f2e8-4f8a-8b2d-dabcd4b6781f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "742f8ae5-2ebc-4e1e-8ab0-733a29232e57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92717f58-e834-4910-928e-ccd70be6cad6",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a74c09d7-ebd4-46cb-81ea-56b639900c3c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8d59aeba-0056-4c1c-8522-f721d3877cfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08c20171-1930-4255-8ff8-eefc42c6a94c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "494af862-ccad-4256-9282-ddf12fe4fc7c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3a3cdb38-34c4-462b-a99e-cd944cd4492b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "593930c1-63b5-4a48-ad99-c3808918fc1d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5add931b-024c-4f7d-8734-0498baf74972",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7846786c-7a26-45b7-9969-d3f8f602dcf6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8cc2a752-0382-433a-8b5c-2cfb3445bdf8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d0838e16-6afe-4341-a45d-c474ef5d3671"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1e4e7bfd-613c-4d62-8deb-2bc591f123db",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4188f84e-3c4e-43ea-82da-ee1dff763f16"
            }
          }
        ]
      },
      {
        "id": "43466413-e62f-4900-9551-ba0ef6ae9c84",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "d196f067-1945-4943-bff0-9f217154693c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f812d141-f007-410b-b7c1-41494089d6eb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9d80e4e4-24be-4792-b4d7-3fa303730300",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9faaf3c-38f6-4ed6-a655-e1d859785c91",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "628b3112-ec81-489a-90d2-37e37797a484"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab288f80-b175-428c-963c-782b25937cca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2fcb07a6-b288-4a04-ab2f-ff23980f0937"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9a8f509-b302-492e-9796-ff312afbd345",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c789effc-7b36-412e-bdc0-da604844285a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5ec65798-8331-41b3-b348-5596e7557325"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6612c35-473c-44d0-b3b4-76096bad71bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bf5f64ed-1bee-413a-baf0-05bcb8f1df82"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "17a147b2-7ab6-4d52-b798-0171c6bdcc56",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6027b5d4-1c08-489c-8b0d-a441d024e063"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "31d466c5-4b0e-418d-a0af-bd6c5f165707",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8104c3de-4952-4fe0-806a-06ac92bdab87"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "96f1f84e-3ba3-47fe-bd92-158cafc91ee3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "4b436750-31e6-4380-940f-7725fcde48d5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ddd28246-2989-432a-9df2-25519b14939d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "79fd78a0-49b7-41cb-b35b-12ae532b2555"
            }
          }
        ]
      },
      {
        "id": "2de0ba23-d7e1-408a-9d1e-10448fb19340",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "97abb9ff-7b5b-43d4-8188-1ac821f29efc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "67845f4f-cdb7-48cf-a69e-ce14fed43d9a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1b7a2e87-8fc1-482b-b1f0-40f00d69afea",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3e4595b-5942-46cd-acd3-5c63c864a76f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "53898256-a779-4bcc-81b4-05fa3836f95e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39b4e500-03be-46bb-96f3-0751e2e36f4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "59a5ab72-942c-467a-b95b-2eb0411d6b47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90a11f26-ceb2-4567-a6d5-513680608ccc",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2b1b3e4-afb1-415a-91cb-36ef86cb60ac",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "7d8e80cb-5357-4244-bf0c-b0a7170ff5a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d9ca7ef-d55b-425c-b9ec-f68504ec714a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7e545252-a028-472e-9a2b-e8417b40d1b8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1d595367-529f-49f4-9fd8-733e45019f4c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d06128ac-9189-44cf-901a-7de17e2086db"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "48300c46-1491-4b5d-84a3-32dba450aca3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c84a9dbf-62f5-467d-b8c4-f47f6e80b53f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4f32cec9-af5f-4477-80a9-1437eaee266f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "371bdd30-23fe-4366-9a3a-29fc948216a9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f63e9d11-5fe9-43a0-9983-7b170d35cebf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "979dfab2-cdfa-4000-9d3c-77b61def6156"
            }
          }
        ]
      },
      {
        "id": "732edf43-c710-4a20-b370-b46c649e3ccd",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3118a340-b32c-4429-a73b-808b2d61ef50",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2d57519d-f2a9-4a1b-9c40-03bc7e13c9e3",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "dec40ecb-02b8-453d-b6d1-a0a45276b75c",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d6dc2bce-ee8b-4d35-839f-70f03894068e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "532d9ca9-a066-48b8-b1cf-58d49785503e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 505,
        "pending": 0,
        "failed": 338
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 652.4,
      "responseMin": 6,
      "responseMax": 8758,
      "responseSd": 948.423449731183,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1666141281757,
      "completed": 1666141464993
    },
    "executions": [
      {
        "id": "93222665-2378-47f6-abe7-dacdd4dcc737",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "28921cb7-fcde-452a-ac8b-4c51507c9ce0",
          "httpRequestId": "790b3452-9586-4f8e-bff2-92be95a9174e"
        },
        "item": {
          "id": "93222665-2378-47f6-abe7-dacdd4dcc737",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "74a22d91-0934-433d-8c59-0de20e82cfa8",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 0
        }
      },
      {
        "id": "a6332a14-d2fb-4ded-b068-a672cfbae466",
        "cursor": {
          "ref": "95786eca-0962-4f2c-8ed6-b21f8dc7d3c1",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "45189941-1e90-48f6-aa2a-94070e780f68"
        },
        "item": {
          "id": "a6332a14-d2fb-4ded-b068-a672cfbae466",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "6a1ca7aa-2726-4fe7-9d5e-83f6066d77b2",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "893a3e56-29d4-4a6c-a0d2-ccefee5ebd78",
        "cursor": {
          "ref": "223227bb-32de-41bf-9076-929a7bf6044c",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a218107c-61ca-4850-b492-f9d38d416942"
        },
        "item": {
          "id": "893a3e56-29d4-4a6c-a0d2-ccefee5ebd78",
          "name": "did_json"
        },
        "response": {
          "id": "7e2d1488-a3d5-451d-ab77-c418fa74a8ee",
          "status": "OK",
          "code": 200,
          "responseTime": 2167,
          "responseSize": 1640
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9827a429-138c-4b10-9860-c0c8a52d3da2",
        "cursor": {
          "ref": "7a8851a2-66a2-4b78-91c4-805e97b98be9",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8571818a-9908-4f4c-b5bc-dbe7fa07a730"
        },
        "item": {
          "id": "9827a429-138c-4b10-9860-c0c8a52d3da2",
          "name": "did:invalid"
        },
        "response": {
          "id": "71ddc530-adda-4660-8ed3-41552ea79d8e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 2172,
          "responseSize": 64
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "9827a429-138c-4b10-9860-c0c8a52d3da2",
        "cursor": {
          "ref": "7a8851a2-66a2-4b78-91c4-805e97b98be9",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8571818a-9908-4f4c-b5bc-dbe7fa07a730"
        },
        "item": {
          "id": "9827a429-138c-4b10-9860-c0c8a52d3da2",
          "name": "did:invalid"
        },
        "response": {
          "id": "71ddc530-adda-4660-8ed3-41552ea79d8e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 2172,
          "responseSize": 64
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "013a1bfc-43b1-4de9-97a4-439891b5afb7",
        "cursor": {
          "ref": "89357b2f-da8c-4a03-b2d5-ddb2366ca492",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "be149f8e-fa1b-4086-abeb-33f629bb5c00"
        },
        "item": {
          "id": "013a1bfc-43b1-4de9-97a4-439891b5afb7",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "27592084-047d-4fa5-bbda-80249f9ebbfc",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1608,
          "responseSize": 64
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "ab82c9d9-7ebb-4d66-acef-6eb0d6abb841",
        "cursor": {
          "ref": "6667bf94-2aca-4190-bff7-e38e9963abce",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "a3881b65-6a41-49b8-a90f-ef2d460528ab"
        },
        "item": {
          "id": "ab82c9d9-7ebb-4d66-acef-6eb0d6abb841",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "b8c70655-dd0c-4bc8-8ce7-778ccd2f778b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1484,
          "responseSize": 64
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "d098a482-fcd7-4030-928f-06c988aa5fe2",
        "cursor": {
          "ref": "f88b18ad-c65f-482b-b231-2c95b6e7caa5",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "23fef12a-3ff9-411c-90e9-8228dfddac82"
        },
        "item": {
          "id": "d098a482-fcd7-4030-928f-06c988aa5fe2",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "ab7a695b-d0e6-4878-bc36-9870b7fa1c01",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "6371e9a6-9aa7-4ef1-aad3-85b90988abc1",
        "cursor": {
          "ref": "6d2cfc1d-b469-4965-bd7f-4779c076b4b1",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7dcdc936-a415-4528-88a1-f58d142a6b93"
        },
        "item": {
          "id": "6371e9a6-9aa7-4ef1-aad3-85b90988abc1",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "30bd12d6-2a6c-4a32-b096-685dfafa28c7",
          "status": "OK",
          "code": 200,
          "responseTime": 2956,
          "responseSize": 1656
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "6371e9a6-9aa7-4ef1-aad3-85b90988abc1",
        "cursor": {
          "ref": "6d2cfc1d-b469-4965-bd7f-4779c076b4b1",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7dcdc936-a415-4528-88a1-f58d142a6b93"
        },
        "item": {
          "id": "6371e9a6-9aa7-4ef1-aad3-85b90988abc1",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "30bd12d6-2a6c-4a32-b096-685dfafa28c7",
          "status": "OK",
          "code": 200,
          "responseTime": 2956,
          "responseSize": 1656
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "3a936e73-7a20-4d71-b340-5c7583da851a",
        "cursor": {
          "ref": "039fc984-068a-4b5c-a08f-fb006b4d6245",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "323fecf2-b30d-4d79-81da-56187abb266b"
        },
        "item": {
          "id": "3a936e73-7a20-4d71-b340-5c7583da851a",
          "name": "identifiers"
        },
        "response": {
          "id": "4fca8552-347b-48e5-8d97-2f2c9eb10a26",
          "status": "OK",
          "code": 200,
          "responseTime": 2252,
          "responseSize": 1656
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e12604e7-fa30-4490-bde9-ae2dccaba38c",
        "cursor": {
          "ref": "73f35d47-e967-4839-a898-71b13cf22fb1",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a89a12d5-4be5-4fec-b0a0-97aba5725d33"
        },
        "item": {
          "id": "e12604e7-fa30-4490-bde9-ae2dccaba38c",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "1af92df1-9992-4f82-9bd4-a73e90ace16e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1218,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "e12604e7-fa30-4490-bde9-ae2dccaba38c",
        "cursor": {
          "ref": "73f35d47-e967-4839-a898-71b13cf22fb1",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a89a12d5-4be5-4fec-b0a0-97aba5725d33"
        },
        "item": {
          "id": "e12604e7-fa30-4490-bde9-ae2dccaba38c",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "1af92df1-9992-4f82-9bd4-a73e90ace16e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1218,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "3ed74eb8-4593-4009-8aa8-a7ac0f0ac8b3",
        "cursor": {
          "ref": "b5018b3f-198f-4c2a-93dd-7c967ed734c3",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "6ca60bce-bf75-4d92-9e51-96035f78a3a1"
        },
        "item": {
          "id": "3ed74eb8-4593-4009-8aa8-a7ac0f0ac8b3",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "5fd242ff-9379-4f18-b86e-7a2216395aae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1914,
          "responseSize": 441
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "65daba1a-fe52-40ec-ad3b-6718e8435584",
        "cursor": {
          "ref": "1bfd6cee-d0f8-4d69-9f7a-3a0086b60502",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c0ab3763-af1e-4b02-a1cf-9801c77774ef"
        },
        "item": {
          "id": "65daba1a-fe52-40ec-ad3b-6718e8435584",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "e2f309c8-5648-4c96-a7a4-c09edf2c732a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1491,
          "responseSize": 960
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "fd54dabb-7ca6-4fb6-a043-5129ca226e54",
        "cursor": {
          "ref": "e5eb04fc-1a9c-4dc3-8adb-c0eba8ddb863",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "666cf43c-6b2e-4529-a82e-55e9e40c33ef"
        },
        "item": {
          "id": "fd54dabb-7ca6-4fb6-a043-5129ca226e54",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "88182ee1-4f76-4e31-ba0e-51138514b4c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1275,
          "responseSize": 957
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "34445e20-6c5d-4241-b02b-42df77e3b8e6",
        "cursor": {
          "ref": "e55e0b0a-8319-4fba-a5eb-201acaff45e4",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "0e84533d-aade-4a30-acd4-412867262a73"
        },
        "item": {
          "id": "34445e20-6c5d-4241-b02b-42df77e3b8e6",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "c437640c-79a6-4d2d-9a5a-1ff2560dbc1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1203,
          "responseSize": 959
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "53a136e1-a741-4349-bd22-003c92144351",
        "cursor": {
          "ref": "90c74d72-6bf9-45c7-b9c8-45f2a01f20f1",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a662bf90-3396-43f5-a3bf-7ed214d35457"
        },
        "item": {
          "id": "53a136e1-a741-4349-bd22-003c92144351",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "a88d21cc-68d5-44ee-ae3a-8f9498f10366",
          "status": "Created",
          "code": 201,
          "responseTime": 8758,
          "responseSize": 645
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "10cf5ae9-c98c-4c5b-91d4-14cd66e97f38",
        "cursor": {
          "ref": "64820d49-0389-48d0-abf4-559e2dede20b",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "1f0f0ebd-5d09-46cb-a676-5bb504475871"
        },
        "item": {
          "id": "10cf5ae9-c98c-4c5b-91d4-14cd66e97f38",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "873062f1-f5f7-4224-a330-50235feabe84",
          "status": "Created",
          "code": 201,
          "responseTime": 5851,
          "responseSize": 634
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "16399c6e-c029-4b75-b5c1-46682377757d",
        "cursor": {
          "ref": "ba8a6973-c005-4689-9d25-14e1b1da0a98",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "daa94dc6-a55c-4e3f-93fd-effbd94f91cb"
        },
        "item": {
          "id": "16399c6e-c029-4b75-b5c1-46682377757d",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "b32aa499-a212-4867-a7da-1616f837e4f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1223,
          "responseSize": 1448
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "99137b51-787f-4941-a3af-ce64012de00b",
        "cursor": {
          "ref": "564e204d-7a11-44d5-8927-faa6672c6589",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "fd57d6d7-6b07-4782-ae5a-9b5d1b68a2a4"
        },
        "item": {
          "id": "99137b51-787f-4941-a3af-ce64012de00b",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "0660421d-6893-4a1c-bc9f-de6fc35ceea8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 916,
          "responseSize": 1417
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "59b85a8f-5a83-46a2-9987-115b2474d0ef",
        "cursor": {
          "ref": "58f463f7-ec35-40e9-a35f-c1a82941f33b",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "919e16d5-7878-4506-8d70-8cb9cdb0edb5"
        },
        "item": {
          "id": "59b85a8f-5a83-46a2-9987-115b2474d0ef",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "193e3984-5678-4ca9-a4fd-f80d0e5225b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1209,
          "responseSize": 1414
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "9e0011c9-9ff2-43fb-91d8-aa0905e1e544",
        "cursor": {
          "ref": "9ca66368-d9e8-41cd-a64e-1f9543d4fd58",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "34d61a77-8d3b-4abd-a13b-64dece029a17"
        },
        "item": {
          "id": "9e0011c9-9ff2-43fb-91d8-aa0905e1e544",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "96f6374b-4ce8-424d-a08a-8db32b4bb52b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 916,
          "responseSize": 1416
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "8ce461eb-a6d5-49ec-946c-a6a7a565192e",
        "cursor": {
          "ref": "395888d1-d587-4628-8755-e4a8cfaea9a2",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "186708de-1e68-4b27-aaf5-fd8d71f76f2f"
        },
        "item": {
          "id": "8ce461eb-a6d5-49ec-946c-a6a7a565192e",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "41584e98-3420-4835-8d10-b78db4a9c5a9",
          "status": "Created",
          "code": 201,
          "responseTime": 5108,
          "responseSize": 682
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "8c6cb931-aac1-4670-bd95-bb9992cea3d1",
        "cursor": {
          "ref": "ffb2b194-5526-4212-8df5-d1a0af781c41",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "d66f77de-ae7c-4176-94ec-18d341a4dfcb"
        },
        "item": {
          "id": "8c6cb931-aac1-4670-bd95-bb9992cea3d1",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "db8f07f9-8dd9-495b-a9e8-2721ddd8c4e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1243,
          "responseSize": 522
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "31402c7f-ef98-408e-9825-e4b42edc69e5",
        "cursor": {
          "ref": "bf6bbdfe-698a-4b8c-9f38-4e60109bb614",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "82f5c91e-ed8f-4ac4-aa06-55626ee7a157"
        },
        "item": {
          "id": "31402c7f-ef98-408e-9825-e4b42edc69e5",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "69cf8117-cda1-4bd3-8d00-9688b013ec0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1053,
          "responseSize": 478
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "d8e0673a-c262-4a5a-8299-d019d7231090",
        "cursor": {
          "ref": "2e0dfeea-e459-4ed8-a81b-5e907418cd35",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "b64a37d1-247c-4f1e-957f-dece484090a2"
        },
        "item": {
          "id": "d8e0673a-c262-4a5a-8299-d019d7231090",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "948e23d4-afa1-4982-b118-f29b831721a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 982,
          "responseSize": 475
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "fbc73e36-ffc0-4288-bdfe-1dbcd9a66cbb",
        "cursor": {
          "ref": "df361eae-8317-4f28-bb80-6e277b6d94a1",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "b534e841-cc7a-410c-b3b4-7f058022a950"
        },
        "item": {
          "id": "fbc73e36-ffc0-4288-bdfe-1dbcd9a66cbb",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "812babf6-4031-4ee4-9b89-7181a02a7d3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1381,
          "responseSize": 477
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "0b8d7a60-8ac5-4882-b489-4d60e4a2d5d4",
        "cursor": {
          "ref": "a01a11d3-f554-4cc1-8108-4d1d468feaec",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f10a78c5-1120-42d9-8a50-5e6a832b168c"
        },
        "item": {
          "id": "0b8d7a60-8ac5-4882-b489-4d60e4a2d5d4",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "daf51626-c0e9-4376-9a42-f1e46ec84fc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1062,
          "responseSize": 527
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "c22ebe62-2d1e-4094-beaa-3107148e5a60",
        "cursor": {
          "ref": "ff7bc85e-9ece-4d32-baf6-1246412b8712",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "67cbd045-cdab-4dfd-8ca4-c77413c4d798"
        },
        "item": {
          "id": "c22ebe62-2d1e-4094-beaa-3107148e5a60",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "183990ee-96b1-4bbc-b3c0-fedd20c18883",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1425,
          "responseSize": 455
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "698d7b5e-f813-402b-abb9-ad471b9c1e20",
        "cursor": {
          "ref": "7946da82-bfab-4904-933b-04c47e45fc3c",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "6545d5df-7580-462c-836b-8062cf59bdd4"
        },
        "item": {
          "id": "698d7b5e-f813-402b-abb9-ad471b9c1e20",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "dc5be60b-353c-4444-90ad-c49c257642d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1018,
          "responseSize": 757
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "c00bd1b5-5b8b-4dbd-a9e1-468406ce33ac",
        "cursor": {
          "ref": "f3ee65d4-9fd4-4b2f-affd-305f77795a22",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "eecf670d-1fef-4a2d-b338-e7c6b222d397"
        },
        "item": {
          "id": "c00bd1b5-5b8b-4dbd-a9e1-468406ce33ac",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "d4aed808-6e78-4e85-a407-4ea2bdbdd19d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 508,
          "responseSize": 754
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "7b7f1bb6-a2dd-48d1-a084-fe0e0270c804",
        "cursor": {
          "ref": "ca78d345-3d39-4aed-8a05-1732fa105b89",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "374789d5-81af-4997-aa7e-30039e5ae50f"
        },
        "item": {
          "id": "7b7f1bb6-a2dd-48d1-a084-fe0e0270c804",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "e835c30f-d5f1-4057-8219-65a1bd6796e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 578,
          "responseSize": 756
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "b56daec8-50a4-43b3-88fc-758e4f0a734c",
        "cursor": {
          "ref": "d4ef56c6-a315-4813-afd8-cbf881c53bc4",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "90853dec-6748-4376-beec-8a533694bf48"
        },
        "item": {
          "id": "b56daec8-50a4-43b3-88fc-758e4f0a734c",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "c01dae34-7f7a-42e7-b49e-66dfd3161dfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 696,
          "responseSize": 754
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "c2020421-2f88-4d88-b621-017e318c09ff",
        "cursor": {
          "ref": "ae8111aa-0fb0-4c80-9216-c0f5cc29b577",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "1b99384d-6407-4906-adaa-7a39b882dfac"
        },
        "item": {
          "id": "c2020421-2f88-4d88-b621-017e318c09ff",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "44aef425-71b2-43ed-9166-2e7227cc35f9",
          "status": "Created",
          "code": 201,
          "responseTime": 1769,
          "responseSize": 634
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "d655916e-c4cf-46da-96a3-76afd5dcd221",
        "cursor": {
          "ref": "3cac1cba-80ae-407b-bb3d-ec1201310278",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "35e93415-a136-4cb2-a1a7-42258f835b6a"
        },
        "item": {
          "id": "d655916e-c4cf-46da-96a3-76afd5dcd221",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "4b82f3be-7f32-49f1-929c-ffa288bdcb38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 487,
          "responseSize": 174
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "c83516d4-7278-43e9-896a-847aa3b803cb",
        "cursor": {
          "ref": "554e5260-5fdd-4d0a-a968-d5da75a74e97",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "386ad163-fd92-476b-b164-a7057e7871f4"
        },
        "item": {
          "id": "c83516d4-7278-43e9-896a-847aa3b803cb",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "a478a116-115a-484d-97a3-faeb784dd706",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 471,
          "responseSize": 802
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "b74f252d-6654-4b9b-985a-c88bb9718240",
        "cursor": {
          "ref": "89d1ce03-0797-4b38-81a6-64559b674a01",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "b2133a27-1537-40bb-a488-e7cbae51a65a"
        },
        "item": {
          "id": "b74f252d-6654-4b9b-985a-c88bb9718240",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "06fffe77-338d-4514-b5ea-3236b79474d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 485,
          "responseSize": 792
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "a53480e8-0339-429f-b053-808fa480a898",
        "cursor": {
          "ref": "24175d94-b5d0-4535-ab9a-2c70b8c8d32e",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "7e25c04d-a0ea-4dbb-b69b-1568d9907ed1"
        },
        "item": {
          "id": "a53480e8-0339-429f-b053-808fa480a898",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "7127ab05-6bd4-4c69-b2ab-1e0fbf07b68e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 471,
          "responseSize": 789
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "771a2aa8-88d1-4a14-a09b-d213f357c0d2",
        "cursor": {
          "ref": "fc207162-ce8c-454d-a1e4-2a04a6813e70",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "f4f8cb90-775b-49cb-b131-0ceb3e36a54e"
        },
        "item": {
          "id": "771a2aa8-88d1-4a14-a09b-d213f357c0d2",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "afdcc913-a427-4e84-8c9e-4321a9097e5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 443,
          "responseSize": 791
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "5203f383-7b0f-4f96-af58-d04959c42ee4",
        "cursor": {
          "ref": "0b5d9d92-0416-4f86-8217-1e16ac0b10ad",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "f3b26469-4353-4f18-a0f8-4a6edc1870bf"
        },
        "item": {
          "id": "5203f383-7b0f-4f96-af58-d04959c42ee4",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "2c402cdb-cc8d-4e70-b739-cb45c5a649cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 523,
          "responseSize": 789
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "d9196c4a-bb3d-4a21-acfd-6afe7834623f",
        "cursor": {
          "ref": "99a535bb-442a-436d-98d6-20d4053f5807",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "6009e895-1702-4e79-862b-07671a1a9e09"
        },
        "item": {
          "id": "d9196c4a-bb3d-4a21-acfd-6afe7834623f",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "b18acf40-a600-4b75-836a-9570bb2a5346",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 472,
          "responseSize": 407
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "2a077a10-92f5-4f2c-8847-a2dd683c7dba",
        "cursor": {
          "ref": "69194819-f5ca-470e-9e78-2e309679d99e",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "fd08b982-570f-46a9-9e34-2c19ab707bc6"
        },
        "item": {
          "id": "2a077a10-92f5-4f2c-8847-a2dd683c7dba",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "7cab4f4c-d695-40b7-88b9-4b66668250c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 489,
          "responseSize": 753
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "dd0591e3-503e-49d7-8755-e847a861414e",
        "cursor": {
          "ref": "06ca6c51-90cf-4f2e-91c1-26bc608d1372",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d73e3fa2-08cb-4586-b468-754097687b0b"
        },
        "item": {
          "id": "dd0591e3-503e-49d7-8755-e847a861414e",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "0a886089-5b08-4777-ae57-50db602be470",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 512,
          "responseSize": 682
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "933ce416-24c0-4bf6-abcc-ec8d622800cb",
        "cursor": {
          "ref": "474f22e9-ed9c-4bcd-8eea-e9ea38fc092e",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "54e72e31-a27e-4753-8847-1d7ada966dac"
        },
        "item": {
          "id": "933ce416-24c0-4bf6-abcc-ec8d622800cb",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "2f827cd0-291c-4cfb-bc3b-10caa4e17d8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 562,
          "responseSize": 679
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "1069a115-7c4a-4516-a03f-d0ae1375cc4f",
        "cursor": {
          "ref": "f7715214-a2ab-4b52-9430-6143cc41c671",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "8f3f1ff6-34e6-49ce-8d14-945c5372d443"
        },
        "item": {
          "id": "1069a115-7c4a-4516-a03f-d0ae1375cc4f",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "ba30a63e-10d5-492a-9bf8-f5dc40f8b34b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 480,
          "responseSize": 681
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "70317166-253e-4760-a323-2a1d28561596",
        "cursor": {
          "ref": "303314e7-4ebc-4dc9-ad15-0164a7eb3bd0",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "c85a0ab2-6389-45a2-9542-7f4f2ff87f86"
        },
        "item": {
          "id": "70317166-253e-4760-a323-2a1d28561596",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "626419d0-4352-4fc7-a69d-fb9b7ffbd97b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 522,
          "responseSize": 930
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "30b27037-c5d9-48de-a273-c9ee73a0aa83",
        "cursor": {
          "ref": "c61ca217-c34d-4dd4-86d3-c4e07e8898ae",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "ad7fe21f-69b7-45ff-9dbc-336f5c5f1af0"
        },
        "item": {
          "id": "30b27037-c5d9-48de-a273-c9ee73a0aa83",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "79c591e9-629b-4fa6-8353-b7c493bc3bb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 527,
          "responseSize": 966
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "80d37d4e-761a-480f-b8e4-3a15a32ec4ee",
        "cursor": {
          "ref": "18bc7ceb-4133-432a-b150-501af80f441c",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "2b48429e-580f-474b-b512-91f4172ea4d5"
        },
        "item": {
          "id": "80d37d4e-761a-480f-b8e4-3a15a32ec4ee",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "9c955463-a75c-42fe-b154-7e3b367851e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 477,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "a17c17aa-e8d3-4ec5-8eda-d22d50a0c323",
        "cursor": {
          "ref": "a50aaf61-d145-4b32-8c49-2253e829fd92",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "c39d2d79-ade4-4322-ba83-ce4e9e0fa814"
        },
        "item": {
          "id": "a17c17aa-e8d3-4ec5-8eda-d22d50a0c323",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "e9b91d49-fcc8-4fe1-ab18-6e7c439d078d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 489,
          "responseSize": 778
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "f86c9aef-eee7-4485-b2d0-8a7109fefe53",
        "cursor": {
          "ref": "acf0bb4c-dafc-447f-a62a-0e00a5f853ee",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "c4efbaab-7921-4770-b8ec-a2f1611745b7"
        },
        "item": {
          "id": "f86c9aef-eee7-4485-b2d0-8a7109fefe53",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "1c7440a4-aadb-4707-a3f4-ad480efdb68e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 479,
          "responseSize": 707
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "ebcaf766-490e-40e6-94a0-38e09509b49f",
        "cursor": {
          "ref": "4ad531f6-0407-4e93-8b5b-c52fcb445a47",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "07b6e0f3-3783-4949-af06-57cda21015eb"
        },
        "item": {
          "id": "ebcaf766-490e-40e6-94a0-38e09509b49f",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "0cad31f6-1c0e-4362-9dbe-bb1a2ea3f3f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 612,
          "responseSize": 704
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "87978fce-fba7-454d-8d30-d1f2dc36c606",
        "cursor": {
          "ref": "a716bc72-f69f-4f47-8c75-b9c230af184f",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "fc6de686-4dc3-485a-a94b-0f2626325ee7"
        },
        "item": {
          "id": "87978fce-fba7-454d-8d30-d1f2dc36c606",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "d2f2eaed-06b9-4d4e-9ce9-527b8c67fbe8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 482,
          "responseSize": 706
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "ac87f0c4-98f0-4e1c-a7c2-23fccffc4da9",
        "cursor": {
          "ref": "a3e54946-3127-49ca-8a55-5ddb9b96000d",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "0289dbdd-3f8e-4615-95ef-97da1184344a"
        },
        "item": {
          "id": "ac87f0c4-98f0-4e1c-a7c2-23fccffc4da9",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "1c765548-39be-4cdd-b1db-a6f4b16de3cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 545,
          "responseSize": 955
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "b3c8f940-e107-4671-be88-9bbe911274b8",
        "cursor": {
          "ref": "7c89fde0-4f6e-4e84-b626-bafa9f23deb0",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "d0f67039-870e-4808-b8f7-c1702694fdc5"
        },
        "item": {
          "id": "b3c8f940-e107-4671-be88-9bbe911274b8",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "db41c6f3-ac90-4f9e-993f-7b8fc6b1b590",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 467,
          "responseSize": 991
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "8783021e-121e-4e94-b1bd-2b053349bcbf",
        "cursor": {
          "ref": "375fa749-c582-4783-8875-7ebac8cfe83d",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "d827f905-43fc-41bd-a542-4753eb233174"
        },
        "item": {
          "id": "8783021e-121e-4e94-b1bd-2b053349bcbf",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "2da78bd1-67bc-429c-ae47-df447de9b5b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 522,
          "responseSize": 465
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "5643d390-4aa6-409c-b4d0-10bb1be59d0b",
        "cursor": {
          "ref": "16cdd8f0-74d5-4300-9cd1-562f86a03a3a",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "da995bb5-629a-4408-b9b8-b76f8f93618f"
        },
        "item": {
          "id": "5643d390-4aa6-409c-b4d0-10bb1be59d0b",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "422b54b3-0fcf-4596-9605-845ae85a7bba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 470,
          "responseSize": 489
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "aa3bd700-bb35-4275-80c0-d7d748620427",
        "cursor": {
          "ref": "041bf796-3a39-4797-b616-6f0065311883",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "e143e921-3e11-48ad-a895-b85c54c67c8a"
        },
        "item": {
          "id": "aa3bd700-bb35-4275-80c0-d7d748620427",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "4d30210f-f2d0-43ac-ad11-046158e41705",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 486,
          "responseSize": 470
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "2e397da5-631d-4cdb-882b-d3217d285343",
        "cursor": {
          "ref": "567a7151-729e-4076-a532-f561ab1d3ea7",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "4e0dfc41-faa6-425f-a599-bbcb163c0fe7"
        },
        "item": {
          "id": "2e397da5-631d-4cdb-882b-d3217d285343",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "92bbfc4c-1b59-41b2-85d9-924bb9b84ed6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 513,
          "responseSize": 467
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "2307f200-72a0-4d87-8c50-44dc46cc57a7",
        "cursor": {
          "ref": "289ad265-ed23-48b7-b00a-1b462087ebf4",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "03e75be8-f655-4c57-8990-a7b3afe953ef"
        },
        "item": {
          "id": "2307f200-72a0-4d87-8c50-44dc46cc57a7",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "026d678a-1c61-40ee-b9e2-fe3e1a8657f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 559,
          "responseSize": 469
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "91c6a93b-e62c-406b-a017-5991ed939e33",
        "cursor": {
          "ref": "b6ff9d6f-8cdc-4f02-8622-3d9f20080321",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "c2fabfa9-a2ad-4df9-9a9e-d1f1747d53f9"
        },
        "item": {
          "id": "91c6a93b-e62c-406b-a017-5991ed939e33",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "41168d3c-81e9-4e65-8ef6-f5deb8ca509c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 464,
          "responseSize": 467
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "451eea9d-6818-4d7d-8164-3fe4515821df",
        "cursor": {
          "ref": "92deb502-a78e-43ca-989b-83af627c9443",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "49c3e675-5c3d-421f-bfa6-059af38a6b18"
        },
        "item": {
          "id": "451eea9d-6818-4d7d-8164-3fe4515821df",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "69e09390-14b3-4f3b-96aa-6ead98817753",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 502,
          "responseSize": 237
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "8303a538-a80d-474d-9c2e-4df371ebb839",
        "cursor": {
          "ref": "dd4dad32-0199-4344-9a59-abdc14075111",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "1c32e8d4-070a-4be8-9f68-3f31cf6145ee"
        },
        "item": {
          "id": "8303a538-a80d-474d-9c2e-4df371ebb839",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "9b85a7f3-6481-4cf1-bc26-dee2a42e5c82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 483,
          "responseSize": 490
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "41e1a9c5-0ae4-40ae-a137-1ba25a34665d",
        "cursor": {
          "ref": "09e80597-2684-48d8-8ead-e1f358b902f0",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "7cc83854-2ce7-407b-a584-1cb316661512"
        },
        "item": {
          "id": "41e1a9c5-0ae4-40ae-a137-1ba25a34665d",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "0209d161-6464-4294-a055-fda65b85336f",
          "status": "Created",
          "code": 201,
          "responseTime": 1923,
          "responseSize": 653
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "3a351f87-baf4-4bc3-a1ff-f07451af2399",
        "cursor": {
          "ref": "cf8e74e8-2605-47e3-97ce-22ac30c55d74",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "4d7bab0c-f5b2-4424-b5a6-1a86c38144a2"
        },
        "item": {
          "id": "3a351f87-baf4-4bc3-a1ff-f07451af2399",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "d05b3459-f73c-44e3-b053-722de937b916",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 491,
          "responseSize": 935
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "b9355e34-1778-4264-88ff-f9604ba40cba",
        "cursor": {
          "ref": "58572ce3-7656-4b99-abc7-c76fc49d1a1b",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "4918ae0c-f9fb-429c-860a-fd016170368b"
        },
        "item": {
          "id": "b9355e34-1778-4264-88ff-f9604ba40cba",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "bace8e09-048c-424c-8bcc-e8f4b769f19d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 471,
          "responseSize": 932
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "0135ade5-ed47-4158-9904-0babcced685e",
        "cursor": {
          "ref": "adb6191f-73dd-4704-85d0-725c92bc43c1",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "ba9f9570-22d0-4886-a641-af79787d5c14"
        },
        "item": {
          "id": "0135ade5-ed47-4158-9904-0babcced685e",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "33985a4a-c2c8-4a2b-b78a-702f2ea4ff71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 643,
          "responseSize": 934
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "39fe5d2e-8f8e-4d8b-a8a1-8d2222173c97",
        "cursor": {
          "ref": "398152b7-79ed-4f7e-9630-e06cbb32e7f1",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "897549e4-443f-46ac-83b4-c316de2f3c42"
        },
        "item": {
          "id": "39fe5d2e-8f8e-4d8b-a8a1-8d2222173c97",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "37ef4ce0-b630-40f1-8baf-a4aac53861eb",
          "status": "Created",
          "code": 201,
          "responseTime": 1634,
          "responseSize": 651
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "946bf389-1ba1-4ea9-b7f7-647763763bd7",
        "cursor": {
          "ref": "4f27ecd7-bacd-4127-99de-e7493d0fffa6",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "8d1a7d36-a1b4-4219-912a-4ece98b9792b"
        },
        "item": {
          "id": "946bf389-1ba1-4ea9-b7f7-647763763bd7",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "7159f80c-6298-40ab-a185-83daef026598",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 526,
          "responseSize": 1273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "60ad71b9-7e52-43d8-b50d-887641d3da05",
        "cursor": {
          "ref": "43688810-cc04-40cd-98ca-7f328751fb99",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "69445091-936a-42ef-92ba-028007400bea"
        },
        "item": {
          "id": "60ad71b9-7e52-43d8-b50d-887641d3da05",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "b8a76614-73b7-4081-b609-2f645acf6288",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 623,
          "responseSize": 1259
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "9932776f-68bd-4817-8b2d-44920616a341",
        "cursor": {
          "ref": "f432b2b8-6230-42ac-abe3-c6337da351a2",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "434bbd05-0ee2-431b-b7f2-67cef624a048"
        },
        "item": {
          "id": "9932776f-68bd-4817-8b2d-44920616a341",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "57456591-c739-479e-97ca-f86a844fe232",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 600,
          "responseSize": 1256
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "2e4acde7-5c95-4d84-9730-591e5025a385",
        "cursor": {
          "ref": "96948c7f-f2a9-4eca-8fa8-389af3c5c9dc",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "1d4c7cbc-07f5-48e9-8d4b-0b29a7422ae6"
        },
        "item": {
          "id": "2e4acde7-5c95-4d84-9730-591e5025a385",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "241607cf-0449-4f08-a8a0-f52e30976a81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 596,
          "responseSize": 1258
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "1c04ee6c-28b1-4fea-863c-0e07f306dd81",
        "cursor": {
          "ref": "27906021-4af4-445e-8c07-4df5ea4ba2e2",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "a2d0bc38-3722-4388-82b0-d084584e7484"
        },
        "item": {
          "id": "1c04ee6c-28b1-4fea-863c-0e07f306dd81",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "5c637848-66d7-491d-8c48-34387a1aed29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 568,
          "responseSize": 1256
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "dfcdc455-4b07-45c0-9f14-ae4b0ff9d651",
        "cursor": {
          "ref": "762ec249-1727-49de-981b-dca8b887fad2",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "2f817f56-c9ab-43ab-8ffb-fe55da13e632"
        },
        "item": {
          "id": "dfcdc455-4b07-45c0-9f14-ae4b0ff9d651",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "97cfd67b-1058-4d28-a90b-14fb232ecf32",
          "status": "Created",
          "code": 201,
          "responseTime": 1777,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "265c316d-456d-4425-93d1-d4e1c7274413",
        "cursor": {
          "ref": "028d32a6-a913-424b-b8f4-a96809186b6d",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "f2381808-a429-431a-aa98-6dff91e45984"
        },
        "item": {
          "id": "265c316d-456d-4425-93d1-d4e1c7274413",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "16032429-a5ac-4038-85d0-6c2f33ccbf57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 452,
          "responseSize": 460
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "adfb9e9f-2657-4ade-a534-bfb7b16c9577",
        "cursor": {
          "ref": "99c31b05-1b32-42a9-86ca-504e631742b0",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "72d0dc01-7e2b-438b-953a-8eb53e80b5e0"
        },
        "item": {
          "id": "adfb9e9f-2657-4ade-a534-bfb7b16c9577",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "7960ca61-b910-4311-848e-c0ca3c03333d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 509,
          "responseSize": 463
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "5514f7e8-38f6-423b-b9ce-362ef9c3edb2",
        "cursor": {
          "ref": "5e7ddbe4-6811-480c-baa0-00fd5417baa7",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "ebef0a93-f47e-430e-ad4d-7b35cc767fcc"
        },
        "item": {
          "id": "5514f7e8-38f6-423b-b9ce-362ef9c3edb2",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "4caf36ec-95e5-4e53-be30-b15e28cbb9e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 483,
          "responseSize": 460
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "06bf9d93-115e-4bb2-8ccd-aaad666b2d0e",
        "cursor": {
          "ref": "c41dfa43-0702-4bd0-a9a9-6994e03bcd65",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "45f5cd1e-126e-4e13-9366-3a3871b8032e"
        },
        "item": {
          "id": "06bf9d93-115e-4bb2-8ccd-aaad666b2d0e",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "48a1c463-d38b-4564-9aa3-ef88ef08a7fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 632,
          "responseSize": 462
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "4953b0b9-821f-4b9b-9696-019aa245d6ff",
        "cursor": {
          "ref": "bb014d4f-2721-48c8-98e0-b37da40f646e",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "0a02d50e-c4f4-4408-9fd2-665d21815b9e"
        },
        "item": {
          "id": "4953b0b9-821f-4b9b-9696-019aa245d6ff",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "15a205c3-0e00-4fe1-8958-56c653a15bdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 558,
          "responseSize": 460
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "53b14e26-2847-4009-becd-7e439f660b0c",
        "cursor": {
          "ref": "af015dd7-64bf-469a-a426-013a614f3af4",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "9f44194a-552b-4691-ad64-7837ab660b28"
        },
        "item": {
          "id": "53b14e26-2847-4009-becd-7e439f660b0c",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "09d8e820-dcad-457b-8a4e-1f94a15a3d4e",
          "status": "Created",
          "code": 201,
          "responseTime": 3992,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "d459ee0b-6e5d-451a-a1d3-8fe37e1a9d80",
        "cursor": {
          "ref": "311a8873-b651-425f-9843-65c761071e06",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "8b1693e2-8797-46e8-8d78-3c16b6ce4294"
        },
        "item": {
          "id": "d459ee0b-6e5d-451a-a1d3-8fe37e1a9d80",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "bd10d9ce-dda6-47cd-9957-797b648eadb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 792,
          "responseSize": 512
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "9a7c5461-923c-4d65-8513-d8fab70f25b0",
        "cursor": {
          "ref": "4546693b-5529-43c5-8f1e-6e45b4376685",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "9e6dd6e8-319d-45ff-97ab-cfb26fa414c0"
        },
        "item": {
          "id": "9a7c5461-923c-4d65-8513-d8fab70f25b0",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "b145a028-ea85-4061-8677-23383c767b18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 490,
          "responseSize": 493
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "fd42bd5a-01fa-4d6d-8c19-5cbd5a575fd7",
        "cursor": {
          "ref": "28854c70-2cf4-4e88-8163-10618403c9ea",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "0f16a0a6-e384-43c6-b5d0-b599c84503d3"
        },
        "item": {
          "id": "fd42bd5a-01fa-4d6d-8c19-5cbd5a575fd7",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "c820a810-eeee-4818-9837-ae0ca12836e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 560,
          "responseSize": 490
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "81edcb68-3944-4750-a963-b870cfc8a35f",
        "cursor": {
          "ref": "92835383-7f94-43e5-8f97-cf8464020c40",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "0d9d626e-9cbb-4d00-a99b-f646c61a1b71"
        },
        "item": {
          "id": "81edcb68-3944-4750-a963-b870cfc8a35f",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "c50d898f-8163-4259-b4ab-73330779106c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 489,
          "responseSize": 492
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "6840a4d9-3036-4520-9a62-c932495d70cb",
        "cursor": {
          "ref": "4f13b424-9c6f-4bc7-91df-a1dc85db76d1",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "59ad063c-c11a-4035-9461-3ae9cd0d1f2c"
        },
        "item": {
          "id": "6840a4d9-3036-4520-9a62-c932495d70cb",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "ab306bf0-cca4-47d0-a828-3d0c145a26ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 531,
          "responseSize": 490
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "796f8714-d70a-4a9a-bad3-1a84480fd985",
        "cursor": {
          "ref": "1397aa69-c0fc-422f-a4e6-98b97cce1396",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "1acb92bc-34fa-409e-b358-9478f39632ec"
        },
        "item": {
          "id": "796f8714-d70a-4a9a-bad3-1a84480fd985",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "8f0b06fe-bab3-4462-80cf-fc62ad78b4d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 480,
          "responseSize": 588
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "e57dd1f4-545c-416f-96de-bff0fb2c6ba1",
        "cursor": {
          "ref": "82674c87-4ae3-4fee-8559-d34f775bb7bc",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "5bbbc9a4-412f-4b61-a616-9968eb5a6ea3"
        },
        "item": {
          "id": "e57dd1f4-545c-416f-96de-bff0fb2c6ba1",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "3ca03bc8-d225-41e8-a65f-8ab555daf94d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 476,
          "responseSize": 551
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "f91fdca9-edc2-40e6-a8a9-dec6289015f1",
        "cursor": {
          "ref": "852e8161-7567-4c53-b0ea-2feabd962666",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "84836e1b-413d-4c74-a8fc-a7a892a51ab7"
        },
        "item": {
          "id": "f91fdca9-edc2-40e6-a8a9-dec6289015f1",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "8323292a-cfe5-49b3-95da-54b3e00bbf73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 490,
          "responseSize": 532
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "b30faec7-04ec-4eb2-8466-daf48464abcf",
        "cursor": {
          "ref": "dce1cbb1-c51d-4452-ad7e-5d8976fd791b",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "6f9535e3-3e93-4d5e-8e8f-32e60d7827a8"
        },
        "item": {
          "id": "b30faec7-04ec-4eb2-8466-daf48464abcf",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "def74725-6fa3-4701-ab29-d2404a51d9bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 463,
          "responseSize": 529
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "d7b9180f-d721-47eb-a06f-c3f587416a37",
        "cursor": {
          "ref": "b6c9052d-540e-4177-a48c-dda73be3e104",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "f1e584bf-8722-4949-99a3-a6ce2bc54844"
        },
        "item": {
          "id": "d7b9180f-d721-47eb-a06f-c3f587416a37",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "33e26bb4-fb0b-4fd9-b75b-542b9d9e1038",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 481,
          "responseSize": 531
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "e379f9c2-c41e-4a90-bb6f-18ba96e11083",
        "cursor": {
          "ref": "c85e4cf5-baa7-46d1-b92e-1489c0244cd1",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "1b718670-5178-4f29-8f45-78926feeac07"
        },
        "item": {
          "id": "e379f9c2-c41e-4a90-bb6f-18ba96e11083",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "ed26b913-ef7d-4723-b845-c66d141f12ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 508,
          "responseSize": 529
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "bbaabf89-fc25-468c-8a92-8e266543091a",
        "cursor": {
          "ref": "f9f0bf56-fdac-476d-9d5c-2d5c19552c40",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "381d7ced-e1b0-4803-9064-96450cc7586d"
        },
        "item": {
          "id": "bbaabf89-fc25-468c-8a92-8e266543091a",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "649fc4e0-9346-4dd1-9698-db0726459a59",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1347,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "5e7f50bd-8112-400b-8ecc-c35826114552",
        "cursor": {
          "ref": "d6c693de-9e58-4b50-8192-948f15e88b69",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "5bbdf95d-d7f0-48f8-b8ea-4532ca7558bf"
        },
        "item": {
          "id": "5e7f50bd-8112-400b-8ecc-c35826114552",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "b42a8364-bdb0-40c8-81f5-b9c90f1db3de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 468,
          "responseSize": 582
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "9eed771e-13af-4fee-b54c-6b0db2d4b63c",
        "cursor": {
          "ref": "fe80f0fd-53c1-4e13-b648-7f91ceab6ab3",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "0d838fee-b532-4ce3-be18-ab51053cd41c"
        },
        "item": {
          "id": "9eed771e-13af-4fee-b54c-6b0db2d4b63c",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "fc8616b1-3b3e-4d78-af64-64208b7f4239",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 515,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "3b5df26a-70a2-464d-bb13-f27fec95c7f9",
        "cursor": {
          "ref": "4a5eabf7-5b26-4cee-a699-821136aa4f4e",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "6317e73a-26b4-4e35-9f95-50cdddd9f48c"
        },
        "item": {
          "id": "3b5df26a-70a2-464d-bb13-f27fec95c7f9",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "26bbabb2-6698-4fb9-9db1-3206cc18d2da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 532,
          "responseSize": 556
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "39fb1d74-f7ef-4bda-abce-107c72eb483b",
        "cursor": {
          "ref": "8582c8a8-ee14-494b-85f2-c73bb18107c7",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "19424509-b00c-4f13-9ebd-540c9afc73d9"
        },
        "item": {
          "id": "39fb1d74-f7ef-4bda-abce-107c72eb483b",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "9a137d85-2765-48be-8af5-e86935173641",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 492,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "6ed2c96b-cb24-40c2-a1a4-8d5d90ef7fd2",
        "cursor": {
          "ref": "7449d777-a8e7-48bb-9963-5e4f860cdf2a",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "38d559f2-3bcc-4981-9879-57ecf735995f"
        },
        "item": {
          "id": "6ed2c96b-cb24-40c2-a1a4-8d5d90ef7fd2",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "92395e6a-c4a1-412f-b18b-5e81e9268404",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 553,
          "responseSize": 580
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "3fad4540-def6-473d-94b8-4b09bab9e034",
        "cursor": {
          "ref": "cf9f3450-f565-43fa-9b7b-3f20916ce295",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "f7db951e-a2c5-4cc1-a749-885011036bf9"
        },
        "item": {
          "id": "3fad4540-def6-473d-94b8-4b09bab9e034",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "9e9fe401-931a-4668-8ab2-a53e481bc426",
          "status": "Created",
          "code": 201,
          "responseTime": 2234,
          "responseSize": 975
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "83cbf0b6-7f73-4bfa-acd9-38c772e3e1fc",
        "cursor": {
          "ref": "2f71dd5f-f995-49ec-8a98-452b0aea3a4f",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "905d750d-ca62-401a-a42e-c77e3ac0f375"
        },
        "item": {
          "id": "83cbf0b6-7f73-4bfa-acd9-38c772e3e1fc",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "e7acc743-e834-4716-bc14-22252de7baa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 492,
          "responseSize": 612
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "ac8a2758-c139-48c2-8d6a-f52d3e91b029",
        "cursor": {
          "ref": "685f81c0-81aa-42ef-912a-f99167083a1d",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "4ac30a72-a453-48fb-897e-55652b9d3a46"
        },
        "item": {
          "id": "ac8a2758-c139-48c2-8d6a-f52d3e91b029",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "3f03006d-4049-4ef4-a528-f91b60506092",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 496,
          "responseSize": 589
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "2c1327db-9d41-48e0-a1b2-1d0a32af4060",
        "cursor": {
          "ref": "cf3fd020-589e-47f1-9d12-2ce8dcfdaae8",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "8ccab211-b79f-40e7-adf5-0a3c81fdedf9"
        },
        "item": {
          "id": "2c1327db-9d41-48e0-a1b2-1d0a32af4060",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "0dc43125-72e1-4b6d-932e-ccdb31ac7b6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 537,
          "responseSize": 586
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "97f4fa1d-77e4-441b-9122-5b03a77c74b1",
        "cursor": {
          "ref": "62841181-aca6-4f0b-9d1a-3cb3221aef52",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "788b46af-e87d-42e9-818f-d10a08a8ef57"
        },
        "item": {
          "id": "97f4fa1d-77e4-441b-9122-5b03a77c74b1",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "a3c8488e-748b-4e2c-bcae-d8c4a8fdcc77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 571,
          "responseSize": 588
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "9a3343b3-aa50-4260-a077-ab881030337d",
        "cursor": {
          "ref": "7051c5f9-3286-41ca-a7c4-a9d03ee5d406",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "51f8ddc3-c965-4996-9d0a-78c6cf7576c2"
        },
        "item": {
          "id": "9a3343b3-aa50-4260-a077-ab881030337d",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "26573b48-6387-4eb3-a4f1-cd4694a4493d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 464,
          "responseSize": 586
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "c4d8abfc-94e8-4b8b-a46f-dff1fcc89a74",
        "cursor": {
          "ref": "02ad6a60-74f1-49c2-88de-65d57c51487f",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "eec4c80e-0c1e-4b9b-af5c-9a252adb6e5a"
        },
        "item": {
          "id": "c4d8abfc-94e8-4b8b-a46f-dff1fcc89a74",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "b064a93b-9e5a-43b0-93b2-6912c15c2179",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 525,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "1f477d37-3617-412f-87e7-9fafc634e35d",
        "cursor": {
          "ref": "cb36f848-2119-4b45-993f-9e999f1fd853",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "1558b042-713b-4909-bffa-a2a034e24445"
        },
        "item": {
          "id": "1f477d37-3617-412f-87e7-9fafc634e35d",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "cc24f23e-ad48-47e6-a789-4204864522ec",
          "status": "Not Found",
          "code": 404,
          "responseTime": 71,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "22929b5d-03a3-477f-b3d6-2826ef69d3c9",
        "cursor": {
          "ref": "6f56fe26-57e1-4a02-ac67-7e379f1c0e28",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "c22bd11e-30de-4a80-a5d3-6b01da922405"
        },
        "item": {
          "id": "22929b5d-03a3-477f-b3d6-2826ef69d3c9",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "e1886533-729b-4c2e-a603-bea63a5457f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 479,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "ffb13e0c-d25a-4460-9aa4-9097fb20038c",
        "cursor": {
          "ref": "19e65758-2dc1-4013-9278-3a518a344695",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "41bc910a-3580-4bd3-86c9-92fe1aaf8403"
        },
        "item": {
          "id": "ffb13e0c-d25a-4460-9aa4-9097fb20038c",
          "name": "credentials_issue"
        },
        "response": {
          "id": "4d862621-c915-4932-9ee1-da08c1a385a0",
          "status": "Created",
          "code": 201,
          "responseTime": 1764,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "06edf9dd-4bb4-4653-8f11-437ff5f5781c",
        "cursor": {
          "ref": "af74a428-5ba2-49ec-9323-ad505f444c13",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "15836ff4-3a84-473f-aa82-aeada1a0065d"
        },
        "item": {
          "id": "06edf9dd-4bb4-4653-8f11-437ff5f5781c",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "779c5598-4f3b-4599-9149-ffe2ab82f3ea",
          "status": "Created",
          "code": 201,
          "responseTime": 1725,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8c935ae-d70a-4c06-8509-5007fb206638",
        "cursor": {
          "ref": "c20d6814-1b9b-4891-bc7e-3f2dee383048",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "34091261-5192-4a80-a4f3-2b74964e3c8e"
        },
        "item": {
          "id": "d8c935ae-d70a-4c06-8509-5007fb206638",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "087f214a-3c40-40fe-a83c-ae5623031c7b",
          "status": "Created",
          "code": 201,
          "responseTime": 1875,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b28cab2d-e1eb-4e70-9479-aaa6860738a8",
        "cursor": {
          "ref": "3432fab9-3a97-4db1-bcf3-9f5e9aec8dc4",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "7dab1b9e-acf8-44a9-bc4e-128856ea9fdb"
        },
        "item": {
          "id": "b28cab2d-e1eb-4e70-9479-aaa6860738a8",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "10c66ac4-275a-4a0e-bd35-f2f33eeff229",
          "status": "Created",
          "code": 201,
          "responseTime": 4598,
          "responseSize": 658
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "430bf66b-094a-41ea-ace4-3bc0126000f5",
        "cursor": {
          "ref": "246e347c-7592-448c-af97-25f59ad42863",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "1dd19cab-072d-4ffc-9646-72817cb6e6ad"
        },
        "item": {
          "id": "430bf66b-094a-41ea-ace4-3bc0126000f5",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "63fd692f-552d-43ae-a121-48a5c01c67ec",
          "status": "Created",
          "code": 201,
          "responseTime": 5420,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "38e7e4d6-8fc9-4484-bbb9-f068952ce407",
        "cursor": {
          "ref": "85c7358c-0b8c-4318-9eb1-e0fb3bf07809",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "2da1fac8-567a-4eac-9269-d030276a85f4"
        },
        "item": {
          "id": "38e7e4d6-8fc9-4484-bbb9-f068952ce407",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "563673d9-64d6-4218-8070-ba77f0f8d75d",
          "status": "Created",
          "code": 201,
          "responseTime": 4827,
          "responseSize": 975
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80595161-cdff-4a36-a363-e202d30c79bd",
        "cursor": {
          "ref": "8857c893-99ff-4014-9c90-89b0782f5eca",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "d5fad09c-e16e-431d-a73d-9c65de438cff"
        },
        "item": {
          "id": "80595161-cdff-4a36-a363-e202d30c79bd",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ac2d1b6f-82ec-4c33-994e-e1f4ee5a6ad3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 615,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "80595161-cdff-4a36-a363-e202d30c79bd",
        "cursor": {
          "ref": "8857c893-99ff-4014-9c90-89b0782f5eca",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "d5fad09c-e16e-431d-a73d-9c65de438cff"
        },
        "item": {
          "id": "80595161-cdff-4a36-a363-e202d30c79bd",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ac2d1b6f-82ec-4c33-994e-e1f4ee5a6ad3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 615,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "d71c437b-9815-4e44-93cc-b66ac8451f6a",
        "cursor": {
          "ref": "16dd3565-e99b-43f2-bc4f-c3d766a015a5",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "c3723ea2-74b6-4501-b7bf-a913b6533867"
        },
        "item": {
          "id": "d71c437b-9815-4e44-93cc-b66ac8451f6a",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a7cd62ea-d2b9-44d9-b799-28802bcb1ef7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 512,
          "responseSize": 327
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "bcb87681-d4ba-4d24-b733-d5ba0dd1bbfc",
        "cursor": {
          "ref": "010bce72-9613-469f-876d-bfe5e547c225",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "7a63d701-a958-4c20-835b-689d58e1281b"
        },
        "item": {
          "id": "bcb87681-d4ba-4d24-b733-d5ba0dd1bbfc",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "639e9b26-40b8-4727-9bfd-7d4c1afa2a5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 524,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "99299ffb-dff3-4759-a1cd-95ba53e888ce",
        "cursor": {
          "ref": "fdf45792-45c9-4dfc-a3d7-f47589ce667e",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "01c2d0e8-15b4-4e1f-83a3-d2183e5f1ffd"
        },
        "item": {
          "id": "99299ffb-dff3-4759-a1cd-95ba53e888ce",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "e3c998c9-1341-42dd-b200-d6dcb2c20240",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 584,
          "responseSize": 280
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "9a97660d-c966-4f14-b0ab-eff9c55d476e",
        "cursor": {
          "ref": "006f2127-2aba-4e14-bb8d-da313013e0ac",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "be357d4c-76c5-462d-8c48-d27dc0ebb175"
        },
        "item": {
          "id": "9a97660d-c966-4f14-b0ab-eff9c55d476e",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "41b3df70-5a4f-4cee-9350-8af3bdd8146a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 523,
          "responseSize": 282
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "d4a5f236-98ca-4f7c-aca1-c36c266363fb",
        "cursor": {
          "ref": "ae851165-aa50-4885-874a-42f24050d3bf",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "4adaed6d-a55f-4321-b030-b41203b4683d"
        },
        "item": {
          "id": "d4a5f236-98ca-4f7c-aca1-c36c266363fb",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "01e7b558-9401-4fca-b43c-2dc711aa3564",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 495,
          "responseSize": 280
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "66a5e13a-73c7-4336-aaa9-b5f81f9730b0",
        "cursor": {
          "ref": "c387f84e-2a60-4324-aeed-b9a16eb2a79a",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "f81defb5-6b1a-4296-aca7-c0ed7a449336"
        },
        "item": {
          "id": "66a5e13a-73c7-4336-aaa9-b5f81f9730b0",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "43db0be2-e9cf-4e62-8ee4-5b68423dbf26",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 568,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "e03b5afc-5d48-46e1-a4b2-e15cb9846cd3",
        "cursor": {
          "ref": "f6bcfec1-660f-49a0-8691-5a2148bc1f33",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "75646a2e-4930-4431-823c-7dbaa5eb7769"
        },
        "item": {
          "id": "e03b5afc-5d48-46e1-a4b2-e15cb9846cd3",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "2d1375c0-4bd8-443b-ac69-38f17a3e0237",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 511,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "d8a5204c-80ad-4da1-b0a8-1eff4105b621",
        "cursor": {
          "ref": "94f482be-4ddd-434b-940f-2a3ab6933d68",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "780261c6-98fd-41cd-ab6b-20f38405cba1"
        },
        "item": {
          "id": "d8a5204c-80ad-4da1-b0a8-1eff4105b621",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "eaf98e5a-706f-4680-bc64-f9c812caa3cc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 544,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "7b533c53-7c76-49f0-8037-eae56291bd2f",
        "cursor": {
          "ref": "f2e6114e-c788-4c5a-b6a3-0179f2408bf4",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "6595467f-c7e5-43c5-b0d1-6c4e2f614cba"
        },
        "item": {
          "id": "7b533c53-7c76-49f0-8037-eae56291bd2f",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "e5ebb1d9-c138-42ec-b376-297447482766",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 502,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "2e54e6a8-0fd4-4f0d-929f-43bb7b6bae59",
        "cursor": {
          "ref": "425d4df6-0a0b-402d-b589-694dab1c5316",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "53fd8038-475b-4d56-bd63-881412b98646"
        },
        "item": {
          "id": "2e54e6a8-0fd4-4f0d-929f-43bb7b6bae59",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "c5ac4f09-8da5-451e-b43b-4fbd9dc61524",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 557,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "893312a1-0b82-44c9-a7f2-3524292a124b",
        "cursor": {
          "ref": "d7661ad6-91b4-4f58-b4c9-dc74d36d46e0",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "7800ba45-183d-4e40-9d98-a0f5a7b092cc"
        },
        "item": {
          "id": "893312a1-0b82-44c9-a7f2-3524292a124b",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "0a2ae85e-ddf7-4c8a-a2a6-09c8a524b118",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 520,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "72ae2316-cd0e-4643-bc2a-597939d3c17f",
        "cursor": {
          "ref": "ced23cb9-a5e3-4c35-a4ef-5b3c40d79611",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "1a4fd3a2-2f23-4624-8620-fd4271adec8a"
        },
        "item": {
          "id": "72ae2316-cd0e-4643-bc2a-597939d3c17f",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "609e3b71-30d4-4ad9-a595-90ffceb0188b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 503,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "0432a921-9bc6-4f3b-9d5e-b86d809d193a",
        "cursor": {
          "ref": "6f25278c-c186-4c86-805d-f2db912db0d3",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "54b22b8a-2282-4fdc-9b19-300e9e813db0"
        },
        "item": {
          "id": "0432a921-9bc6-4f3b-9d5e-b86d809d193a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "400dbd39-82ed-43b8-93ac-00e8bfa76c0f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 477,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "e86b9add-6c9c-46ef-b0c2-7c191d4b3f02",
        "cursor": {
          "ref": "155f901d-4c6e-4181-b35c-d97eedbc6023",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "70637cc2-7ca2-4772-afcc-d9466e3599e9"
        },
        "item": {
          "id": "e86b9add-6c9c-46ef-b0c2-7c191d4b3f02",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "4cfb957b-d25b-4135-9bce-8dd71ebf31e6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 567,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "117b6d62-43af-4e70-acc3-86db54153040",
        "cursor": {
          "ref": "0c23e161-5dbb-4838-8ecb-3f796969808d",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "17511d18-c5c2-4fda-ba93-ad2acea71c1a"
        },
        "item": {
          "id": "117b6d62-43af-4e70-acc3-86db54153040",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "d0c0ff7c-64ba-4603-ab38-a0f6ebcadde5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 492,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "789d0157-d34c-4e45-94e5-7c08a9adb097",
        "cursor": {
          "ref": "66ad16f2-575c-4bbc-9b58-bfd3f77b3d77",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "c5444005-59f3-49ef-8eae-2f591af40dd5"
        },
        "item": {
          "id": "789d0157-d34c-4e45-94e5-7c08a9adb097",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "f9e5f9a1-ffed-406c-9c67-4dc051cd5bcf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 487,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "d8823c49-7e67-47bd-b0eb-286803422b2a",
        "cursor": {
          "ref": "43442b41-953c-4640-bd5a-1b1997385a6a",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "301ebb92-55f0-4beb-a315-eb31e8c276db"
        },
        "item": {
          "id": "d8823c49-7e67-47bd-b0eb-286803422b2a",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "9abed54f-54b3-4d8b-81b1-f2a7666795bf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 530,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "b3bf8174-92f2-43e1-a62a-abf1448a2533",
        "cursor": {
          "ref": "f0605a97-1bb8-4668-bdab-0437cbce85d5",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "20772ca0-1d3c-4c71-bc42-4a0077c6e5b5"
        },
        "item": {
          "id": "b3bf8174-92f2-43e1-a62a-abf1448a2533",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "0f7b8e89-05ae-4036-82c8-ea53e766acea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 526,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "f189cf10-6e47-4b30-adbd-8e2b799e9ed6",
        "cursor": {
          "ref": "ef11e572-c296-4d80-94b7-d19e6284d7ae",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "0829f3bf-8982-423c-9e33-42bdb5c2e231"
        },
        "item": {
          "id": "f189cf10-6e47-4b30-adbd-8e2b799e9ed6",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "7034ec39-b488-43d1-bff2-5b0081ef6569",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 553,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "c4e53c1f-7876-48ec-9e4e-549917f5f511",
        "cursor": {
          "ref": "58c1a2e0-94d0-495e-98b2-427464fd2db9",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "b6f488da-b5d1-4b35-89c5-d0024f6b3534"
        },
        "item": {
          "id": "c4e53c1f-7876-48ec-9e4e-549917f5f511",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "94b05e07-c972-4b76-bab2-86cf57b3bfaf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 470,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "d3595eb2-0733-4ad8-93fe-d9d01c369edc",
        "cursor": {
          "ref": "474b54ec-a0c0-426e-9bfa-8b65128b49e8",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "890aee41-7032-4872-8457-65613df0539b"
        },
        "item": {
          "id": "d3595eb2-0733-4ad8-93fe-d9d01c369edc",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "056ca5f9-f2a1-4c8e-a1fb-5b2ec4dfdad8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 480,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "ff99ae63-4d18-4e37-9d7f-83233bef2762",
        "cursor": {
          "ref": "ac47d25c-e633-4a2a-942a-eed02738a306",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "9311fd73-8fd4-4a3e-bc15-c3afe9a43743"
        },
        "item": {
          "id": "ff99ae63-4d18-4e37-9d7f-83233bef2762",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "6cc75924-86a7-4a84-aa66-4cf4314363da",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 481,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "97ab4587-6f7e-4440-9808-56d66bbc7e45",
        "cursor": {
          "ref": "a0cfe3ee-6023-4cfb-a668-1797b767da60",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "d27087fd-d95d-4a49-8f61-7050aef5a0c8"
        },
        "item": {
          "id": "97ab4587-6f7e-4440-9808-56d66bbc7e45",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "6fc0b17a-a9db-4d44-b787-04cd48726c5d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 474,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "0552281e-6ea3-4c32-99c7-4cb2bd8f1e0f",
        "cursor": {
          "ref": "693c3339-6362-431a-9096-85ad9ce7a4b4",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "61ee5ed4-2233-4a4b-9413-86b52ff1faf0"
        },
        "item": {
          "id": "0552281e-6ea3-4c32-99c7-4cb2bd8f1e0f",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "2de6150c-982a-4438-a173-65921c480bc3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 494,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "e1167ff7-f982-4d78-b780-e42f5d725856",
        "cursor": {
          "ref": "148a0cc6-efe5-481b-a930-139d127654a0",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "900ec3dd-ba48-42a5-8246-516dcbb5f94a"
        },
        "item": {
          "id": "e1167ff7-f982-4d78-b780-e42f5d725856",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a4b7f44d-159f-43c5-9bd7-cdce14ecec10",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 465,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "5a46426a-94b1-44dd-af77-b6d1d783d8fa",
        "cursor": {
          "ref": "b140cd51-f874-4c68-906c-fc23878577e7",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "33ba8d4a-016a-4df0-9280-239526d1c85e"
        },
        "item": {
          "id": "5a46426a-94b1-44dd-af77-b6d1d783d8fa",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "9d9a505c-1815-481a-bbb1-46015635f971",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 457,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "4208d2c0-2ae5-43e8-b1b4-4b6b2f8692b6",
        "cursor": {
          "ref": "4a4a3928-5080-4506-af60-927d8ea47d52",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "bb22d492-c8e8-49ad-bac7-0fdc42233499"
        },
        "item": {
          "id": "4208d2c0-2ae5-43e8-b1b4-4b6b2f8692b6",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "836f2629-d3c1-4f89-b4b9-895bc642c691",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 448,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "a4eb4a2d-66b2-47d0-8836-64dad46d0b4d",
        "cursor": {
          "ref": "da0277fc-6e00-4ed4-ad71-73b7f6f997a6",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "c9f6e367-e901-4e1b-9d59-880fdcca3176"
        },
        "item": {
          "id": "a4eb4a2d-66b2-47d0-8836-64dad46d0b4d",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "cdcbf867-d8b6-4518-8b5a-0f53cf83b64a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 478,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "18742d9d-a6a6-40fc-b1a7-cac4fd721206",
        "cursor": {
          "ref": "6fe6484a-2b2e-4d39-abb3-62651e62958c",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "3664dac2-3ff4-4ee6-aa51-a287fa67f0ce"
        },
        "item": {
          "id": "18742d9d-a6a6-40fc-b1a7-cac4fd721206",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "7e2ede9a-2662-4df6-a5fc-6caf441cc6be",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 456,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "2cb4b014-b171-4326-a039-18faae578826",
        "cursor": {
          "ref": "e5e2276a-d79c-4455-b29b-c54fca51d1bd",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "eb5cbc3d-1a06-469d-ab81-f38fd779e293"
        },
        "item": {
          "id": "2cb4b014-b171-4326-a039-18faae578826",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "dc42126a-0070-40ac-adbb-8dedf00aa4c2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 490,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "1fd385d3-48f1-47fa-aa9e-8ad491716f90",
        "cursor": {
          "ref": "ac6c5a21-7907-4292-8e78-234378186c04",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "bf2f7a1c-c91d-46ab-88b4-76b40d09a883"
        },
        "item": {
          "id": "1fd385d3-48f1-47fa-aa9e-8ad491716f90",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "8fa2dd46-af22-4209-b081-85ae4351a89d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 476,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "b1117723-313b-4936-8f1b-47465210460f",
        "cursor": {
          "ref": "e1e87865-043c-492e-a8a0-b4f63900e059",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "a62ce912-ea6e-46e4-9a7d-d26705b5911c"
        },
        "item": {
          "id": "b1117723-313b-4936-8f1b-47465210460f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "71b262a1-6011-429e-b4eb-71c51df0544f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 71,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "b260280d-ba88-4f54-be3a-a96eede345a7",
        "cursor": {
          "ref": "55dd0fe5-aa7d-46ae-8275-5a228982a3d5",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "f6676390-6707-4f27-adf1-742d3206948d"
        },
        "item": {
          "id": "b260280d-ba88-4f54-be3a-a96eede345a7",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "d9564b74-1f76-444b-b6d1-d47cc578856d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 466,
          "responseSize": 206
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "58a801a0-b9b3-40da-a485-6afd1894a4b0",
        "cursor": {
          "ref": "8471eb71-f896-4d29-a614-fb9fa248ac88",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "e9c6618b-00c8-4db6-9f4b-6e6d6403e2f3"
        },
        "item": {
          "id": "58a801a0-b9b3-40da-a485-6afd1894a4b0",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "c8457ad8-044b-4ee3-869f-0faae5cecb81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 235,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "58a801a0-b9b3-40da-a485-6afd1894a4b0",
        "cursor": {
          "ref": "8471eb71-f896-4d29-a614-fb9fa248ac88",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "e9c6618b-00c8-4db6-9f4b-6e6d6403e2f3"
        },
        "item": {
          "id": "58a801a0-b9b3-40da-a485-6afd1894a4b0",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "c8457ad8-044b-4ee3-869f-0faae5cecb81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 235,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "3309fdfe-0035-4c85-ba41-5076ac2ac952",
        "cursor": {
          "ref": "8895e3ce-ed42-4034-8420-ab2ff02d1611",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "78f76173-138a-4b6c-9291-3abed23e9a5d"
        },
        "item": {
          "id": "3309fdfe-0035-4c85-ba41-5076ac2ac952",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "b94a6856-7cc9-4ce9-973e-f4bfdae00484",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 262,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "d5ac2b1a-ae96-44f4-9d95-5025a813af55",
        "cursor": {
          "ref": "23178492-fbec-484e-9658-0e3ccf678c15",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "12571c92-1a30-4de7-a6ca-47641738a7f9"
        },
        "item": {
          "id": "d5ac2b1a-ae96-44f4-9d95-5025a813af55",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "90f4d6f2-f6c2-4353-a8bb-3f65e7a5d9f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 225,
          "responseSize": 541
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "d274117c-ec2c-4367-ab7e-0112eb205f59",
        "cursor": {
          "ref": "4c9e8da3-afe9-423b-8232-5a0b219a7c7f",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "a80f3c4b-4b9c-4b51-848f-5ed632b15fd0"
        },
        "item": {
          "id": "d274117c-ec2c-4367-ab7e-0112eb205f59",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "1246fa89-8e08-404a-9594-b48c00ea20f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 234,
          "responseSize": 540
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "308febb2-03c5-4100-bc98-e71b459bc9b0",
        "cursor": {
          "ref": "dbac7dba-1828-49e9-bbba-5d028f591574",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "095e098e-f117-490b-9138-c99ef148331a"
        },
        "item": {
          "id": "308febb2-03c5-4100-bc98-e71b459bc9b0",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "460947f8-3ad7-4b60-9116-fc51e5877882",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 251,
          "responseSize": 541
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "4f94cb64-52f4-4b28-af5a-7a50262fc517",
        "cursor": {
          "ref": "29f2fdf8-0b30-462f-a148-ef42ba9e7dd7",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "bb56137d-72f2-4b30-8013-2fd4e8e2f9e3"
        },
        "item": {
          "id": "4f94cb64-52f4-4b28-af5a-7a50262fc517",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "7a7f48a7-4852-404a-a624-8933df458a46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 224,
          "responseSize": 539
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "13c728a6-e228-4a1a-9603-05c3a2da3463",
        "cursor": {
          "ref": "3aec8ba4-fd2c-4869-9001-70e1231ce93b",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "e6675400-8a98-4a8d-ac0f-a5fe2742bd72"
        },
        "item": {
          "id": "13c728a6-e228-4a1a-9603-05c3a2da3463",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "fb5ef1e3-58d9-4d26-bdf5-8b222e41696d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 241,
          "responseSize": 1154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "12954c52-d29e-4367-8d48-c978bfd5b027",
        "cursor": {
          "ref": "e95ddd20-9a4d-4600-a9b0-fbaf39184cd2",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "b98915a5-0eda-40c4-b10f-765e4158a2b3"
        },
        "item": {
          "id": "12954c52-d29e-4367-8d48-c978bfd5b027",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "de8fc0ad-ed2f-4c31-be7f-2172c34e19df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 228,
          "responseSize": 1700
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "1f31e7df-1976-416b-afc2-e29fa450644c",
        "cursor": {
          "ref": "ccf639a8-b5cb-48eb-9bbc-4b079df0a2fb",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "eac4b2d9-3053-4626-a376-c9ef3921c3cd"
        },
        "item": {
          "id": "1f31e7df-1976-416b-afc2-e29fa450644c",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "e010263b-fb20-42fd-86f0-f7de7f9d6b4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 250,
          "responseSize": 1699
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "cdbe0440-63b6-4b95-bd64-d20254e4611b",
        "cursor": {
          "ref": "ecdf32fb-3134-4571-90de-39b2015a6415",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "c2b22a15-9221-43f8-93e0-37189a5732ef"
        },
        "item": {
          "id": "cdbe0440-63b6-4b95-bd64-d20254e4611b",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "37ce59ef-1f58-402c-96cd-d5a0fe46489d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 239,
          "responseSize": 1700
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "7a5d13c7-671f-4fea-9c31-831b0a95c6bd",
        "cursor": {
          "ref": "183d6947-0683-4538-a81a-ed423852535f",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "2c9057da-6fe3-4798-bf7b-43cdf39b3a9f"
        },
        "item": {
          "id": "7a5d13c7-671f-4fea-9c31-831b0a95c6bd",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "c646c77a-6977-4925-8c6d-5a7e66ac7b42",
          "status": "OK",
          "code": 200,
          "responseTime": 380,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "c06ba1f2-87ac-4acc-b07f-87777c18cc63",
        "cursor": {
          "ref": "53a805a2-7761-4fde-a102-ee0175e2f8aa",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "aad21d5a-a088-41f6-a117-6506c1360291"
        },
        "item": {
          "id": "c06ba1f2-87ac-4acc-b07f-87777c18cc63",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "f71696f0-603e-4eb3-acd7-eea5c505695f",
          "status": "OK",
          "code": 200,
          "responseTime": 356,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "f6f680bc-cddc-4818-aca5-f7bd251fbf42",
        "cursor": {
          "ref": "0c7c8564-e05e-4286-9d30-805117c9e5b6",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "b9d4fe85-8799-460f-a77e-4367f059f6b9"
        },
        "item": {
          "id": "f6f680bc-cddc-4818-aca5-f7bd251fbf42",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "677e2f50-29b3-40bb-b625-00c30e102f5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 252,
          "responseSize": 2187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "fe1786a7-b9c4-4327-a533-338ffc699cc9",
        "cursor": {
          "ref": "b85dd46b-f1b3-4ee6-b1c6-c4f7510526e6",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "7e592a53-6b70-490a-a4d3-f4538451e7b0"
        },
        "item": {
          "id": "fe1786a7-b9c4-4327-a533-338ffc699cc9",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "0dcc363c-bb31-469b-9a9c-327e2fe37b3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 220,
          "responseSize": 2177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "ede2fe83-91c2-4c09-a47b-4422b88bfd56",
        "cursor": {
          "ref": "42ff8b3b-bf08-4d3b-ae9e-0e0fde02f157",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "d2395fd3-41ac-4f50-a7f6-653642fc490d"
        },
        "item": {
          "id": "ede2fe83-91c2-4c09-a47b-4422b88bfd56",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "3c9ff347-045b-4992-a8c7-5d68ece019ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 232,
          "responseSize": 2176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "0774bf2b-828e-45da-9dc2-eadd6b88e921",
        "cursor": {
          "ref": "83723c12-2d81-4bad-a741-f293f5920f90",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "1f2fae80-2cd7-4bf5-8e49-c15ceee7cd79"
        },
        "item": {
          "id": "0774bf2b-828e-45da-9dc2-eadd6b88e921",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "775eaacd-c077-4b54-8a74-6ff95aa47921",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 240,
          "responseSize": 2177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "05541a16-520e-484c-8735-75c7974c1fa2",
        "cursor": {
          "ref": "c0ec7fda-8fd7-4da0-9607-3d96d4f79d04",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "7b322ee6-9da9-4f77-91ce-eefb490b78c7"
        },
        "item": {
          "id": "05541a16-520e-484c-8735-75c7974c1fa2",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "1dec38e8-c17c-4915-9613-1633dabaf553",
          "status": "OK",
          "code": 200,
          "responseTime": 348,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "1055f457-9067-4967-9d8f-08704db02032",
        "cursor": {
          "ref": "213611ef-6abb-4a69-a71b-81674bb33b1f",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "b4ae2040-e297-45ab-ac14-0e1e444b2ce7"
        },
        "item": {
          "id": "1055f457-9067-4967-9d8f-08704db02032",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "5f693b05-f11e-4851-a782-1d308b9fb1ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 227,
          "responseSize": 1235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "458cec2c-f155-4d76-a3f6-6792fef8308d",
        "cursor": {
          "ref": "085e2d01-cc7b-41dd-9cfb-06063840464a",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "0f1bed77-a030-4426-9b8b-515e5bacf799"
        },
        "item": {
          "id": "458cec2c-f155-4d76-a3f6-6792fef8308d",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "f38dbd19-e5fa-41f5-ab7d-e7b751a10475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 226,
          "responseSize": 1191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "8be905be-efbb-4b16-a582-edad16f255d6",
        "cursor": {
          "ref": "b13a8418-2b3b-4454-8b19-eb88c23231ca",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "2669ba79-0b52-4d8a-a119-947680a1fac7"
        },
        "item": {
          "id": "8be905be-efbb-4b16-a582-edad16f255d6",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "837f0520-f588-415b-9a8f-8e1f00e60189",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 235,
          "responseSize": 1189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "8e205910-e406-43ac-adca-bcf77aca10a2",
        "cursor": {
          "ref": "99560633-30bb-418f-8e0a-ba4b6337558d",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "b765eeb7-8a51-49e7-9a08-063d569c3362"
        },
        "item": {
          "id": "8e205910-e406-43ac-adca-bcf77aca10a2",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "c34b8f12-ae27-4cd6-a012-0f66f2a493b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 220,
          "responseSize": 1190
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "d577a661-9597-4fad-b4db-5aebc17e1013",
        "cursor": {
          "ref": "b949ba95-be26-4b4a-82ac-1e59e4a12731",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "03900271-9b0e-4314-96a9-9bb0247ca92f"
        },
        "item": {
          "id": "d577a661-9597-4fad-b4db-5aebc17e1013",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "e528d034-734d-4eab-950a-6db7057b8063",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 230,
          "responseSize": 1241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "fb5e200c-236a-4607-a31e-6236b5754a12",
        "cursor": {
          "ref": "f4f249d8-0a5d-4383-ab95-cdca74b54abe",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "15bb0a8b-03ec-4097-b6d4-7bed61b6031d"
        },
        "item": {
          "id": "fb5e200c-236a-4607-a31e-6236b5754a12",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "cf562e21-b4f1-4ee4-947f-0552f5d46587",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 237,
          "responseSize": 1168
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "28f89cce-d12b-4ed2-8e55-b271e05b8915",
        "cursor": {
          "ref": "b227005a-e2d3-4026-842c-c5c7e24889bd",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "f885bb0e-2c2d-46bd-8bc3-e9edb9f048f6"
        },
        "item": {
          "id": "28f89cce-d12b-4ed2-8e55-b271e05b8915",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "f5bc1b90-c515-4e3b-a40a-dd8e7ea8d7d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 220,
          "responseSize": 1489
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "f4622cf3-04b1-48ba-ae64-223875fae3dd",
        "cursor": {
          "ref": "70464914-20d2-40df-a340-f9a3cd0511ea",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "d9b2be0b-1faf-4bd5-8fdc-e2515559d276"
        },
        "item": {
          "id": "f4622cf3-04b1-48ba-ae64-223875fae3dd",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "04c1ad38-749f-4a2a-9d61-bec39980f27a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 230,
          "responseSize": 1488
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "07e85b6a-b8ed-4a06-ba79-5610d9159771",
        "cursor": {
          "ref": "821cfeee-4d7b-42b0-bd2d-3ba7e23499d9",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "dabf69b9-8413-4a93-8354-918e61d2e256"
        },
        "item": {
          "id": "07e85b6a-b8ed-4a06-ba79-5610d9159771",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "2f69201f-58ed-427f-a584-5d5244182632",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 256,
          "responseSize": 1489
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "afc308b1-f9c1-4497-93f2-cb0c2fd625e8",
        "cursor": {
          "ref": "ada58e1b-81fc-4fb6-93d9-f788b3fcfcaa",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "362ba8ae-35a3-4902-93ff-c14ff8b99ffe"
        },
        "item": {
          "id": "afc308b1-f9c1-4497-93f2-cb0c2fd625e8",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "83f3da18-32da-4c5b-b477-668bd70bbfb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 275,
          "responseSize": 1515
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "506f086f-45f4-446c-ac9f-43e2cb7d484e",
        "cursor": {
          "ref": "5e92944f-557a-4f07-b718-e2eef256a884",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "7661442e-07b4-4eeb-8704-f987675f971c"
        },
        "item": {
          "id": "506f086f-45f4-446c-ac9f-43e2cb7d484e",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "96cf81e8-30fe-4979-8df7-491535e8b913",
          "status": "OK",
          "code": 200,
          "responseTime": 348,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "abe4d1f5-ef25-4e7e-905a-27d7a47c8e37",
        "cursor": {
          "ref": "6cb0f7a1-0a1e-4db2-bd57-4a02784ea0a3",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "bd459105-c1b3-4494-bfc7-c9acc014cc84"
        },
        "item": {
          "id": "abe4d1f5-ef25-4e7e-905a-27d7a47c8e37",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "9b5e2615-4a07-4cf9-b8b2-706a93a8bafb",
          "status": "OK",
          "code": 200,
          "responseTime": 245,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "cc699f1d-83c0-4aaf-a170-05367a667f96",
        "cursor": {
          "ref": "b67e447d-25e7-445d-bf15-b0e7c0d51c43",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "d0d29cd7-916c-46e3-9bb5-b298138b5cd1"
        },
        "item": {
          "id": "cc699f1d-83c0-4aaf-a170-05367a667f96",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "f2b39bc0-7769-4d61-b945-ae66af4da362",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 248,
          "responseSize": 1534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "3aca6d5e-0df6-4415-ae81-87909b32e382",
        "cursor": {
          "ref": "59930115-de21-4821-b2d3-4ce6eaafd292",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "79ae7dd5-1cc1-4c54-8b7a-cbf1d38ff216"
        },
        "item": {
          "id": "3aca6d5e-0df6-4415-ae81-87909b32e382",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "266a2fd4-7301-4200-b82c-076b96a7974d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 227,
          "responseSize": 1524
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "899a3a58-f037-479f-be49-1db7e37313c2",
        "cursor": {
          "ref": "cd4e4152-a782-4945-8c42-e68cf1fb5eae",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "7e8bb521-d8ed-4893-859c-482628bd5500"
        },
        "item": {
          "id": "899a3a58-f037-479f-be49-1db7e37313c2",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "1ca8fe0a-0fc9-4ec8-999b-d4366bed656f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 225,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "875bdd9f-fb7d-4473-a281-a14420d59afb",
        "cursor": {
          "ref": "3682ba3a-d24a-4354-8941-4a4fc558da7b",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "012fbec8-7fcf-463b-8b15-77f495868b51"
        },
        "item": {
          "id": "875bdd9f-fb7d-4473-a281-a14420d59afb",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "90e1723a-136a-4c40-8c38-50c078a2ac34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 234,
          "responseSize": 1524
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "38fc93e9-9cf2-4ebf-8993-56c1a13663f7",
        "cursor": {
          "ref": "bb0d1abe-a61b-4ab8-858f-c657271a1ab3",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "8a80e63b-979f-4a59-8727-b15f69042b12"
        },
        "item": {
          "id": "38fc93e9-9cf2-4ebf-8993-56c1a13663f7",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "d221d284-daad-4e2b-bd1f-17b5f363df26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 267,
          "responseSize": 1550
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "e25ec86e-ad81-4374-a083-55b1db9f6ec8",
        "cursor": {
          "ref": "42078c3b-2afa-4974-9369-97058603a439",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "99714aa6-8970-4f3e-8b6e-964678fece9e"
        },
        "item": {
          "id": "e25ec86e-ad81-4374-a083-55b1db9f6ec8",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "97eeffd7-d700-4176-8c97-012af299798f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 263,
          "responseSize": 1136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "f80c1065-e3f4-4644-80f5-44371557c002",
        "cursor": {
          "ref": "6ea30bca-ebf8-43af-a8f9-7737ed265d99",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "1a03dac2-1605-4983-acbd-8f9dc06f08d5"
        },
        "item": {
          "id": "f80c1065-e3f4-4644-80f5-44371557c002",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "746f87fa-987b-413b-a5dc-822d8558bb92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 352,
          "responseSize": 1445
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "6e1ea24c-d77e-43f6-bdd1-aa0b3d0b75c2",
        "cursor": {
          "ref": "98165206-e1bf-419f-b285-11a9a4856154",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "1f2951b2-52ba-4137-ba6b-9457d22b4135"
        },
        "item": {
          "id": "6e1ea24c-d77e-43f6-bdd1-aa0b3d0b75c2",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "5f9fb12f-c48f-4ce1-803f-1ec83314f079",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 332,
          "responseSize": 1431
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "2d8f456f-b14a-40b3-8e99-19f9dc9f5d25",
        "cursor": {
          "ref": "3168d647-fe00-418c-a1d9-21c065aa9d9b",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "a76f5ee2-90f5-47bc-93d4-4d100f3820cf"
        },
        "item": {
          "id": "2d8f456f-b14a-40b3-8e99-19f9dc9f5d25",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "f95b5a02-1511-4bf1-9b8d-96875a25ac68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 347,
          "responseSize": 1429
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "304f7095-3ff3-483a-b7d3-fefe63136db2",
        "cursor": {
          "ref": "d55be059-04d7-4313-a980-0910c7814304",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "9abe3e08-5ef2-497b-86a4-a9fff55f5394"
        },
        "item": {
          "id": "304f7095-3ff3-483a-b7d3-fefe63136db2",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "3987cbc9-31e3-4379-845b-14147164c281",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 556,
          "responseSize": 1430
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "fbbd1811-0cbd-47b5-a546-45bb58c19180",
        "cursor": {
          "ref": "105424b0-1594-4e5c-86dc-d830e26f69e2",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "085c46b9-b03f-4181-84ee-26875a14e463"
        },
        "item": {
          "id": "fbbd1811-0cbd-47b5-a546-45bb58c19180",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "e7b4c97b-33fe-4fce-9a22-a5392ba4ab80",
          "status": "OK",
          "code": 200,
          "responseTime": 771,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "e14df7ee-ede7-4e7a-a989-fea4bc0ad42b",
        "cursor": {
          "ref": "63319675-5857-41cc-9655-98c58bd3c434",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "aaabca9a-b2eb-454e-b838-b425e7891512"
        },
        "item": {
          "id": "e14df7ee-ede7-4e7a-a989-fea4bc0ad42b",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "f44b8c44-22d3-426c-9a06-e24124d4de55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 301,
          "responseSize": 1470
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "9cf1b0e5-bafd-4d0e-bc99-8cbd78d4ae15",
        "cursor": {
          "ref": "6ea52d74-922b-4138-a9ba-b1595ef0f1db",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "7ccffe5e-6979-4570-9aa2-90b98df4917f"
        },
        "item": {
          "id": "9cf1b0e5-bafd-4d0e-bc99-8cbd78d4ae15",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "df35cfd6-37e0-433c-8f58-37bfb91f0cd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 283,
          "responseSize": 1456
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "92c3f588-303e-474b-98ae-45ae6a409c0a",
        "cursor": {
          "ref": "5d950470-2acf-4241-9445-211f92564d56",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "2f7e12c6-e419-4307-9519-7a6b40c03110"
        },
        "item": {
          "id": "92c3f588-303e-474b-98ae-45ae6a409c0a",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "1f51ddf1-a503-4eb8-a035-9988d340d217",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 311,
          "responseSize": 1454
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "c06ed0f7-6720-442b-835b-603de8b365bd",
        "cursor": {
          "ref": "dac4c842-5efa-48bf-8b04-fd80f60cfc79",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "337a13c4-1171-41d0-b445-d162d01855e5"
        },
        "item": {
          "id": "c06ed0f7-6720-442b-835b-603de8b365bd",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "dea7c76d-8920-4654-af02-07e86ce694c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 286,
          "responseSize": 1455
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "056b2e65-c492-49c6-b21f-f5637ca62abf",
        "cursor": {
          "ref": "6fdb2557-c518-4c0b-acba-f8a49d21c67d",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "d31bf69a-62fb-4d14-82e2-2e2d7d58eebc"
        },
        "item": {
          "id": "056b2e65-c492-49c6-b21f-f5637ca62abf",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "eea524ab-f491-4d0c-b4bc-a882950965ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 287,
          "responseSize": 1476
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "5df3efaf-79d1-4e1e-a359-16b1814c5fac",
        "cursor": {
          "ref": "7ad9f4fd-c4d4-4661-b731-3d4aea27d180",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "ea231099-eef7-4611-90e3-d7762f9fd9db"
        },
        "item": {
          "id": "5df3efaf-79d1-4e1e-a359-16b1814c5fac",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "28696767-a5b1-4f47-9ee8-c706144bee7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 281,
          "responseSize": 1178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "8c9c4bb8-c1e9-4147-a817-bdede9788fdf",
        "cursor": {
          "ref": "60c2a978-341a-4e57-908e-c7dbde2d30fd",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "8afc2d29-a413-4564-91d6-a07276739b58"
        },
        "item": {
          "id": "8c9c4bb8-c1e9-4147-a817-bdede9788fdf",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "f2a82511-78f7-416f-a55c-8af1d65d96be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 232,
          "responseSize": 1202
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "03865bdd-d5c2-4327-9165-437b61910df0",
        "cursor": {
          "ref": "3f86050d-4697-4351-92a6-8a4f6f15d9df",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "8b15fadc-1b71-4e98-ae42-5988b2b14f6d"
        },
        "item": {
          "id": "03865bdd-d5c2-4327-9165-437b61910df0",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "b94f0184-d445-43cc-9d7a-d8d8716635c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 241,
          "responseSize": 1183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "5695fb07-f75b-4f95-bc80-e58afbe96c5c",
        "cursor": {
          "ref": "d8524d84-b42b-4e8c-84b8-afb75158b0a9",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "0c9baca4-876e-4ea6-90e1-4f4bf13b55b0"
        },
        "item": {
          "id": "5695fb07-f75b-4f95-bc80-e58afbe96c5c",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "49db6a21-550b-46b5-a349-e27a93b2b9a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 209,
          "responseSize": 1181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "227cdc99-7b13-44dd-800c-38005e56bdfe",
        "cursor": {
          "ref": "c70bfc31-bde8-4291-bb77-5f9c3acbe860",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "a60b1a06-2697-4d1c-945f-39c2ff7228e8"
        },
        "item": {
          "id": "227cdc99-7b13-44dd-800c-38005e56bdfe",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "33ac8fc9-3629-4ae0-a646-e15697af1187",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 256,
          "responseSize": 1182
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "a272d579-fe2b-4080-9a4f-e5ac14fd637b",
        "cursor": {
          "ref": "79c7d81f-bbb8-458d-9a7d-dedbad6d4675",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "80b690b1-5c89-47b4-a206-ab9bbc998aba"
        },
        "item": {
          "id": "a272d579-fe2b-4080-9a4f-e5ac14fd637b",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "d26ee106-8cf5-482a-9873-f03cc0286470",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 287,
          "responseSize": 1208
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "a9c7ad89-c0b9-4f33-80e6-f8f8d936b55e",
        "cursor": {
          "ref": "5397fe69-7ccf-4d49-9406-350bcbb4f22e",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "213a022f-276b-4c32-8eeb-a83c25e987f7"
        },
        "item": {
          "id": "a9c7ad89-c0b9-4f33-80e6-f8f8d936b55e",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "48eaef6f-bf09-4dba-ae11-3c333852c1db",
          "status": "OK",
          "code": 200,
          "responseTime": 330,
          "responseSize": 333
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "6fcee2c7-50ea-44cf-84ad-b1c7f6a994b2",
        "cursor": {
          "ref": "67919beb-e08c-4b64-93fe-d65cc1828e3c",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "6a682143-970c-4c0f-80bd-30f0aa4dbbb5"
        },
        "item": {
          "id": "6fcee2c7-50ea-44cf-84ad-b1c7f6a994b2",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "8a58a46c-c3d1-4b20-8986-673cb9ff3b04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 232,
          "responseSize": 1181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "6d715ea9-9780-47d5-a3f2-dbfc18721f22",
        "cursor": {
          "ref": "e9a6fb5e-3383-43a6-9c8e-b45ced39265d",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "1a53b47c-89f1-48b9-b9f2-d9d5bc2cbd43"
        },
        "item": {
          "id": "6d715ea9-9780-47d5-a3f2-dbfc18721f22",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "a4cd22c2-c687-444b-853f-3ecab52aa033",
          "status": "OK",
          "code": 200,
          "responseTime": 390,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "25144306-fc03-475a-9d95-6a6f9b58a1f7",
        "cursor": {
          "ref": "3cbab23c-bb02-48fc-af6c-afb319f8d730",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "b75d0ae7-057e-414c-8634-a2c4d8e97b7f"
        },
        "item": {
          "id": "25144306-fc03-475a-9d95-6a6f9b58a1f7",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "8b9b223c-36c0-414a-b86e-99607d544a74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 215,
          "responseSize": 1656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "d094e6a0-0115-4a08-8d25-ace5206ee359",
        "cursor": {
          "ref": "c81019a6-6d7b-4929-9dd8-303b2ba27b20",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "b22900db-740a-48ac-ad3c-59db3a743a71"
        },
        "item": {
          "id": "d094e6a0-0115-4a08-8d25-ace5206ee359",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "bfb91455-cdc5-4a09-87a4-5834ae11390b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 253,
          "responseSize": 1654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "7eb320c1-9a87-4083-b75f-fd81239a8696",
        "cursor": {
          "ref": "77aa510c-2284-459a-a8b8-657fa510cad7",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "e60015a5-09d3-445b-b08f-eb8ec62f5aff"
        },
        "item": {
          "id": "7eb320c1-9a87-4083-b75f-fd81239a8696",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "bc693665-d824-47c4-af4d-239e06b42a10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 284,
          "responseSize": 1655
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "dbf59c99-49aa-432e-a298-8957971944e5",
        "cursor": {
          "ref": "2646ca96-a7c7-4dbe-bd36-c1be65d93311",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "0b19f4c8-3b13-48b8-a66b-dbdaa0e4207a"
        },
        "item": {
          "id": "dbf59c99-49aa-432e-a298-8957971944e5",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "ea83196f-7d8a-4d9f-b9e5-a3711a89a2d1",
          "status": "OK",
          "code": 200,
          "responseTime": 350,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "90c7f741-4a8d-490f-bee7-eb4f391ad725",
        "cursor": {
          "ref": "d2286152-78cf-4172-9ce1-6eda7d6ca39f",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "2e08de56-ec72-45cb-aed7-9a0450a41c19"
        },
        "item": {
          "id": "90c7f741-4a8d-490f-bee7-eb4f391ad725",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "d888e7e2-09e9-49df-9d29-cebe7cf914ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 251,
          "responseSize": 2014
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "f670edca-e40a-4e96-ab9f-130466de5b02",
        "cursor": {
          "ref": "6cc9633d-a6f7-4109-bb06-9d06b2d9debe",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "8a60c98a-b4d8-46a4-8ae7-a88ad00ef6dd"
        },
        "item": {
          "id": "f670edca-e40a-4e96-ab9f-130466de5b02",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "e7d74276-6d14-4b17-b625-f33fc423cde3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 244,
          "responseSize": 2000
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "3ddd0134-8718-4e54-a592-6dddf53c37ae",
        "cursor": {
          "ref": "10ad314c-1eec-4fc3-84fd-6e994b448792",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "cd001bd5-4a3e-4708-8fd6-8f73977d1745"
        },
        "item": {
          "id": "3ddd0134-8718-4e54-a592-6dddf53c37ae",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "db753771-c44e-4cfc-8623-6f762f33c223",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 244,
          "responseSize": 1998
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "b5b3d8b8-31ce-4d86-8bea-b69190c0db0a",
        "cursor": {
          "ref": "d5396527-b9bd-4904-885c-552a2ecfb3cd",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "8cf41f8c-6dac-4e67-8133-86420d775276"
        },
        "item": {
          "id": "b5b3d8b8-31ce-4d86-8bea-b69190c0db0a",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "bb85fb7a-7fd4-437f-ba15-d6b045e625e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 221,
          "responseSize": 1999
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "67631e3f-97ce-46a4-b143-516055800632",
        "cursor": {
          "ref": "75507a40-27e6-4af8-8113-8b5e1718ef15",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "8e92d7c7-2a85-457b-a720-5e3e539a0dfe"
        },
        "item": {
          "id": "67631e3f-97ce-46a4-b143-516055800632",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "c539af4a-3cf3-4b64-9e70-97dee84be27a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 242,
          "responseSize": 2020
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "1f235bb3-fee0-4f31-9e92-6b19850ff748",
        "cursor": {
          "ref": "8819d3fd-6dbb-4e3a-8308-637fd16fa805",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "f9746977-0684-4e16-b844-dcdcd7e59d44"
        },
        "item": {
          "id": "1f235bb3-fee0-4f31-9e92-6b19850ff748",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "95ee9e14-8acd-4822-98bc-c651a06af5d7",
          "status": "OK",
          "code": 200,
          "responseTime": 283,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "ecab8c48-aa46-43ed-8ff6-1c85b0ee2858",
        "cursor": {
          "ref": "1ebc8102-d6bd-4487-b954-162dbd727cbe",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "8e614f29-05de-4f27-8e1e-864344c24414"
        },
        "item": {
          "id": "ecab8c48-aa46-43ed-8ff6-1c85b0ee2858",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "ffd78eea-abaa-4713-a921-7b84803e5e85",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 222,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "30d21d1f-bcee-452c-99bf-cad8fdf730ac",
        "cursor": {
          "ref": "910ac3f0-65ed-4780-a08e-169a58c04a3a",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "2103aa4f-a6f4-4c41-b915-13bdf4637f24"
        },
        "item": {
          "id": "30d21d1f-bcee-452c-99bf-cad8fdf730ac",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "9b018adc-0ff4-453d-a9ad-b007e832e3a0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 262,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "3294d989-813f-4011-9aa5-ae84fa8d9de4",
        "cursor": {
          "ref": "436d5e99-4f0b-42cb-b2dd-4bb48293ee15",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "9e50a5b5-ac49-43b9-9820-b59831de79ea"
        },
        "item": {
          "id": "3294d989-813f-4011-9aa5-ae84fa8d9de4",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "92b1b24d-ff9e-4648-8202-11765c7504e8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 254,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "0e2ff467-7818-4180-ad6f-3f2403fa0354",
        "cursor": {
          "ref": "1b621d99-b7e3-4831-94a8-917a2715452f",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "3b318f5b-d51f-4b4a-bab3-43f3401b98e5"
        },
        "item": {
          "id": "0e2ff467-7818-4180-ad6f-3f2403fa0354",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "522bc74e-fd6d-4879-bbe9-9293ee17221c",
          "status": "OK",
          "code": 200,
          "responseTime": 224,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "edc33113-f21a-4a09-bd65-670ff003a173",
        "cursor": {
          "ref": "41feb2ff-5f42-4251-a86f-2d8332c307a9",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "3632fd37-55b7-4666-b86a-dbbeac467466"
        },
        "item": {
          "id": "edc33113-f21a-4a09-bd65-670ff003a173",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "06ebfcf3-9a06-4058-9b37-5bd3c703c3fa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 236,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "a8fb6203-826a-41c0-be7b-87cfe8f38776",
        "cursor": {
          "ref": "30b14f58-eed7-4516-bfce-813af2d113bf",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "54e51181-1366-4031-8663-122f14392979"
        },
        "item": {
          "id": "a8fb6203-826a-41c0-be7b-87cfe8f38776",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "9cdcb71c-b754-4459-8aae-735d434bc20d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 252,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "05860edb-7668-4a41-92fa-8e10595c7e59",
        "cursor": {
          "ref": "6c11b97b-f61c-47d5-99ad-492cbce948d8",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "efa93bdf-457d-4ac4-9c97-acf6ac985359"
        },
        "item": {
          "id": "05860edb-7668-4a41-92fa-8e10595c7e59",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "2afdfb9d-528d-46d7-a8cd-a35c1e87a8e3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 257,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "f16349fd-32c7-4b9c-9168-258fff425cc2",
        "cursor": {
          "ref": "7abed1c3-6ad9-4ba8-9e73-84f1ecdd326d",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "5e87c7f5-3674-4faa-9425-e62c41ccdd33"
        },
        "item": {
          "id": "f16349fd-32c7-4b9c-9168-258fff425cc2",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "042c354d-a16b-415b-a6de-6ae6d64bc0b7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 228,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "9a8d0b68-3b9d-42e1-af9b-4f99c9e408eb",
        "cursor": {
          "ref": "026fd097-6d87-495e-8107-6b866f1c2c69",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "2366de49-376c-47d5-9df0-667b650cec79"
        },
        "item": {
          "id": "9a8d0b68-3b9d-42e1-af9b-4f99c9e408eb",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "c10fcd09-9aa3-4816-a644-11c0bd356f06",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 235,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "2b561735-7171-4f7f-97ca-a7272507b2e0",
        "cursor": {
          "ref": "745ff143-1556-4ce2-b779-a238afe05d73",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "aee614d2-b276-4833-9a5a-93a01276bdb8"
        },
        "item": {
          "id": "2b561735-7171-4f7f-97ca-a7272507b2e0",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "ac11c896-c715-48bc-8199-f86ccdfe5525",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 259,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "4bcd0a2a-4cc8-42c5-849c-8d7d08ae96ee",
        "cursor": {
          "ref": "64279a0f-61a6-45cc-8d14-f571fcd66d39",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "ab370c14-6ec4-438c-bfaa-b89e124ac64f"
        },
        "item": {
          "id": "4bcd0a2a-4cc8-42c5-849c-8d7d08ae96ee",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "381e7d73-9503-4cff-86cd-05ae57f924fb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 240,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "075cd72f-19b6-4f9c-9b90-2599ee37a09f",
        "cursor": {
          "ref": "a157d83a-b31b-4d9f-9c55-dea07b5bb5c6",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "50f84671-cc3a-45c1-bc16-8050995b16ae"
        },
        "item": {
          "id": "075cd72f-19b6-4f9c-9b90-2599ee37a09f",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "f0c69f9f-ad15-4711-b420-056d6332e50c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 239,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "49a0490f-c5b2-4bb1-bbf7-1362f8c94f68",
        "cursor": {
          "ref": "6ebc7477-fa3e-4b20-8d36-3548e1bb66ba",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "807170d1-6372-448a-83f0-9121a03d0863"
        },
        "item": {
          "id": "49a0490f-c5b2-4bb1-bbf7-1362f8c94f68",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "9d98ae91-1235-4e29-ab61-3a639852b08a",
          "status": "OK",
          "code": 200,
          "responseTime": 315,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "5beb5a96-ce3e-4572-9a67-7133df83db81",
        "cursor": {
          "ref": "294815b7-fdb4-4bc1-8cfa-69c8892d5d0c",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "afff297e-6047-4034-88b5-6d4e09c1ad1f"
        },
        "item": {
          "id": "5beb5a96-ce3e-4572-9a67-7133df83db81",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "444b1fdf-58ef-4c36-8687-270f398c3d6e",
          "status": "OK",
          "code": 200,
          "responseTime": 313,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "14aef255-0548-40bc-a09d-3aba93655ec3",
        "cursor": {
          "ref": "cdabfbaa-ba40-4b7a-ba9e-81593c60b779",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "2239c891-0523-4170-87b7-ea0f2359720f"
        },
        "item": {
          "id": "14aef255-0548-40bc-a09d-3aba93655ec3",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "64d2eeee-497b-4d01-844a-76a66053ffd8",
          "status": "OK",
          "code": 200,
          "responseTime": 317,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "53fcf6ed-4bc3-449e-bc07-572af70774e0",
        "cursor": {
          "ref": "27915303-5ced-4ebd-a636-4df25ca263ec",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "c801e965-9e8f-4ce4-a755-71b6545e8d0e"
        },
        "item": {
          "id": "53fcf6ed-4bc3-449e-bc07-572af70774e0",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "5af297f0-6176-4848-8f08-242af13305ea",
          "status": "OK",
          "code": 200,
          "responseTime": 326,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "d9e41d5f-bf37-40d4-9bd4-8742551c861e",
        "cursor": {
          "ref": "7a6d77ff-e6fd-42b4-8814-c455d014629b",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "2df2dca3-7ed4-446f-980d-bd68f9926d62"
        },
        "item": {
          "id": "d9e41d5f-bf37-40d4-9bd4-8742551c861e",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "23e44911-25bd-465e-bbd7-37a18d943f19",
          "status": "OK",
          "code": 200,
          "responseTime": 254,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "9e4957de-05a3-49f8-ba97-85b4d69517a2",
        "cursor": {
          "ref": "56eed1f1-4154-467d-8912-8591fa405586",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "8987420d-ce05-4b06-a6af-a667d8762b54"
        },
        "item": {
          "id": "9e4957de-05a3-49f8-ba97-85b4d69517a2",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "59ad1bea-78ab-413e-9518-ec3329eaf50e",
          "status": "OK",
          "code": 200,
          "responseTime": 255,
          "responseSize": 303
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "55afd6fe-5214-4319-9051-1a5d56307447",
        "cursor": {
          "ref": "a4d0953b-0712-44cb-894f-c7684510b1f1",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "2b225c4d-4cc5-4c21-a095-5205380f15ce"
        },
        "item": {
          "id": "55afd6fe-5214-4319-9051-1a5d56307447",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "95c25672-eea0-4d89-bbb2-bab7b32b9a30",
          "status": "OK",
          "code": 200,
          "responseTime": 280,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "4e1159ac-f5b0-444d-a5a0-71930b5a91db",
        "cursor": {
          "ref": "cb01f251-e807-4f39-8644-1d147ecf2773",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "61df1cf8-bdbd-4b24-b42b-d3fd5824f24b"
        },
        "item": {
          "id": "4e1159ac-f5b0-444d-a5a0-71930b5a91db",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "00edc49b-04b6-4237-8a8f-1e06af876c71",
          "status": "OK",
          "code": 200,
          "responseTime": 267,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "3563c197-c64e-48a9-8741-611f478acc89",
        "cursor": {
          "ref": "1686896f-43eb-477b-8333-bd2cf51961bc",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "9a06f904-75e7-456e-b46e-56ac23bb926f"
        },
        "item": {
          "id": "3563c197-c64e-48a9-8741-611f478acc89",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "7b5535f5-7de7-4b6a-9f47-c733891d4cbf",
          "status": "OK",
          "code": 200,
          "responseTime": 240,
          "responseSize": 237
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "87ecf012-2273-435a-b88c-41fea9a89175",
        "cursor": {
          "ref": "55bfcde5-e3a4-4f2b-99bc-5dbdc993e06d",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "73151aab-30d3-4d76-81a0-5d53b4326b0f"
        },
        "item": {
          "id": "87ecf012-2273-435a-b88c-41fea9a89175",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "9add2f9f-c283-4cec-9423-b40aef9523cc",
          "status": "OK",
          "code": 200,
          "responseTime": 250,
          "responseSize": 309
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "46f06f56-815c-4b1d-8a96-3ccf7dccb63d",
        "cursor": {
          "ref": "510342e2-862b-4c07-85fc-528c653c6863",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "cde3227f-45bf-4f21-bebd-d35b715c6a9e"
        },
        "item": {
          "id": "46f06f56-815c-4b1d-8a96-3ccf7dccb63d",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "2b6f5e97-5e07-4430-8cea-3b8a3a1f5424",
          "status": "OK",
          "code": 200,
          "responseTime": 372,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "897df951-6125-4555-897c-a612e1fb2384",
        "cursor": {
          "ref": "b46e77d2-5e9e-4204-ae50-aa0672ca6379",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "a0c63949-bd1d-4d01-bcea-a7485987609a"
        },
        "item": {
          "id": "897df951-6125-4555-897c-a612e1fb2384",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "a2926422-5495-4e57-9524-64f1d0a6cba9",
          "status": "OK",
          "code": 200,
          "responseTime": 252,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "0ae26f91-3dbe-4a87-9003-6ef2c46e9c05",
        "cursor": {
          "ref": "79bd97bc-0eb1-4c03-b910-ea0ebb9280dc",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "78f9cb32-979c-4698-bcaa-f95f261f6123"
        },
        "item": {
          "id": "0ae26f91-3dbe-4a87-9003-6ef2c46e9c05",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "8c4a9068-3353-41c4-a9dc-ca2a4f1f59bd",
          "status": "OK",
          "code": 200,
          "responseTime": 258,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "385f1863-d1d5-4cb8-a812-3b18164482ad",
        "cursor": {
          "ref": "b7dbdcbc-c39d-464f-a0da-0fbeb25f42c4",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "73c7c560-e3a3-4fd8-88be-224ec839f84f"
        },
        "item": {
          "id": "385f1863-d1d5-4cb8-a812-3b18164482ad",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "93963a24-56e8-4e88-a20d-99ad8360d993",
          "status": "OK",
          "code": 200,
          "responseTime": 263,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "fbfc2bf9-2dec-43b4-83b5-c6908542ff3f",
        "cursor": {
          "ref": "6acde7bb-2c3c-4966-a52b-ee95ff452287",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "e4f2dd4a-5b9b-4776-aad9-d3aba856da7e"
        },
        "item": {
          "id": "fbfc2bf9-2dec-43b4-83b5-c6908542ff3f",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "d2c73b62-d1ba-45a2-8ad5-c65ad6fe76b3",
          "status": "OK",
          "code": 200,
          "responseTime": 255,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "c4b07e2c-4b21-46a3-80d7-45dc5478e0c4",
        "cursor": {
          "ref": "7c64d7cf-d7ff-453b-a068-9f9c37a0f58c",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "a29a36ed-814b-4c10-a29d-472bdade90f4"
        },
        "item": {
          "id": "c4b07e2c-4b21-46a3-80d7-45dc5478e0c4",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "71e3a0d1-286f-4c2e-a170-46bec09a3829",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 221,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "4f68f982-f66d-48b1-b70b-53d4d2fa5695",
        "cursor": {
          "ref": "88de629f-f931-40ca-80bc-e07800773579",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "d3289bf8-7431-4309-8a3d-d57c64c4132b"
        },
        "item": {
          "id": "4f68f982-f66d-48b1-b70b-53d4d2fa5695",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "8e48fca9-83ce-4655-9e57-4729bca3cf64",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 347,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "789df06b-b1c2-4681-be3a-8b25fd5753b0",
        "cursor": {
          "ref": "e6145bf6-65ab-45d1-8922-e3760fe26d3a",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "3ffd5780-1740-466f-bed5-72dd52335304"
        },
        "item": {
          "id": "789df06b-b1c2-4681-be3a-8b25fd5753b0",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "90de9569-7263-4c08-96ed-27fa0277424c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 243,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "6855c467-9ef9-4d1d-988e-5bcbdb38fa4c",
        "cursor": {
          "ref": "f420762d-add8-4ec4-9c97-99a508ec2994",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "9531a78f-b9a9-46ff-908e-07f0772670fe"
        },
        "item": {
          "id": "6855c467-9ef9-4d1d-988e-5bcbdb38fa4c",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "5aab5f96-6247-42a5-8c71-6f3b695e2225",
          "status": "OK",
          "code": 200,
          "responseTime": 241,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "45734cfd-126f-42ab-bffe-681897d5d3af",
        "cursor": {
          "ref": "9e5b0e66-862a-4790-a965-60e00d22d366",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "104536fa-f6f9-4d01-a2c9-9e9e41c2b38d"
        },
        "item": {
          "id": "45734cfd-126f-42ab-bffe-681897d5d3af",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "62f5cd80-a71a-41fa-a9a7-d978b9747c48",
          "status": "OK",
          "code": 200,
          "responseTime": 250,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "a906715e-e25d-4555-9e79-e0f96a07e98b",
        "cursor": {
          "ref": "bbeb47dd-b357-4e61-97be-013910d57635",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "639746d3-51b0-4d5a-969d-dc58e4efba04"
        },
        "item": {
          "id": "a906715e-e25d-4555-9e79-e0f96a07e98b",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "69436a4c-0541-40f4-b395-c906ffb2ae57",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 221,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "a80df6e6-4053-4efc-bc90-999488a4a300",
        "cursor": {
          "ref": "18c2a6b3-e213-43ce-87bd-8e18fab1fbc9",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "17f2442f-1e7a-4138-9262-6e29afd26af0"
        },
        "item": {
          "id": "a80df6e6-4053-4efc-bc90-999488a4a300",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "61e78496-d4c4-47cd-b850-fd0f4836cb48",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 71,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 403",
              "stack": "AssertionError: expected response to have status code 401 but got 403\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "403f7565-df52-406e-8a67-d6b5b382c2b5",
        "cursor": {
          "ref": "9bd04896-20e1-44f2-a576-a4524fd44611",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "520d5849-0081-4768-a975-4fa8ad443830"
        },
        "item": {
          "id": "403f7565-df52-406e-8a67-d6b5b382c2b5",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "21119813-880d-4b21-aa30-62e6f9fdf48b",
          "status": "OK",
          "code": 200,
          "responseTime": 330,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "e6db2163-0167-4449-98a5-7cad0eb224df",
        "cursor": {
          "ref": "6ad89667-767d-4b76-827d-64f2163baae3",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "3ff4c509-50c0-4794-befd-0b6e0f54d512"
        },
        "item": {
          "id": "e6db2163-0167-4449-98a5-7cad0eb224df",
          "name": "credentials_verify"
        },
        "response": {
          "id": "4f919bb0-37da-4beb-9dff-a34cee94366f",
          "status": "OK",
          "code": 200,
          "responseTime": 337,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "cfc4b45d-c98d-42a9-8b44-7b45b99107bb",
        "cursor": {
          "ref": "c8233590-1dc0-471c-a183-8826e8270ac7",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "2f37ef99-f75f-4d1e-9540-0c5119bc01f3"
        },
        "item": {
          "id": "cfc4b45d-c98d-42a9-8b44-7b45b99107bb",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "0314b807-915c-4273-b1c6-9e3831a9bd19",
          "status": "OK",
          "code": 200,
          "responseTime": 338,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "b1172f86-41ed-4350-ac46-3e55a256d148",
        "cursor": {
          "ref": "9a9e8d9a-1253-48d8-8172-d4b1af10d4de",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "323f303a-629f-4af7-a2c5-94e1f9e490a3"
        },
        "item": {
          "id": "b1172f86-41ed-4350-ac46-3e55a256d148",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "48df0bbb-ebb7-41d7-bf47-8bcb862625e0",
          "status": "OK",
          "code": 200,
          "responseTime": 291,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "7f23cb5c-7327-41f3-a07f-4d2064890d24",
        "cursor": {
          "ref": "757a50c0-a232-4418-a808-1806060d5258",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "c4bb21df-c5b3-41ce-ab10-1762d196e547"
        },
        "item": {
          "id": "7f23cb5c-7327-41f3-a07f-4d2064890d24",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "96c38bd0-c6da-4ee4-8abb-81f0e936a4b0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 70,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "7f23cb5c-7327-41f3-a07f-4d2064890d24",
        "cursor": {
          "ref": "757a50c0-a232-4418-a808-1806060d5258",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "c4bb21df-c5b3-41ce-ab10-1762d196e547"
        },
        "item": {
          "id": "7f23cb5c-7327-41f3-a07f-4d2064890d24",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "96c38bd0-c6da-4ee4-8abb-81f0e936a4b0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 70,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "7f23cb5c-7327-41f3-a07f-4d2064890d24",
        "cursor": {
          "ref": "757a50c0-a232-4418-a808-1806060d5258",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "c4bb21df-c5b3-41ce-ab10-1762d196e547"
        },
        "item": {
          "id": "7f23cb5c-7327-41f3-a07f-4d2064890d24",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "96c38bd0-c6da-4ee4-8abb-81f0e936a4b0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 70,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "92717f58-e834-4910-928e-ccd70be6cad6",
        "cursor": {
          "ref": "0f72b677-0432-4a43-b2f9-f0b42be6c476",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "9e38829b-41d5-4406-93f5-02f498fb0416"
        },
        "item": {
          "id": "92717f58-e834-4910-928e-ccd70be6cad6",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "53467682-3efd-4bc0-9c64-ba54c9b2a28f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 244,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "9d80e4e4-24be-4792-b4d7-3fa303730300",
        "cursor": {
          "ref": "c408269b-2fd8-483f-91ff-9092a833cdc5",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "22ac3d01-c826-4162-8954-8892db2b4b8b"
        },
        "item": {
          "id": "9d80e4e4-24be-4792-b4d7-3fa303730300",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "8b989afe-c792-40f5-a799-92af33ebedff",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "9d80e4e4-24be-4792-b4d7-3fa303730300",
        "cursor": {
          "ref": "c408269b-2fd8-483f-91ff-9092a833cdc5",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "22ac3d01-c826-4162-8954-8892db2b4b8b"
        },
        "item": {
          "id": "9d80e4e4-24be-4792-b4d7-3fa303730300",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "8b989afe-c792-40f5-a799-92af33ebedff",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "d9a8f509-b302-492e-9796-ff312afbd345",
        "cursor": {
          "ref": "d0d5012d-4a2b-4bd5-b7ac-3563e098edf7",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "3ecb8d80-bd0c-43ad-a675-7e14894d867f"
        },
        "item": {
          "id": "d9a8f509-b302-492e-9796-ff312afbd345",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "6d48aa5c-213e-4380-b992-b7894771667e",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "1b7a2e87-8fc1-482b-b1f0-40f00d69afea",
        "cursor": {
          "ref": "5b1cd482-c902-409c-b056-0dbdb77b487d",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "70deea8a-3d55-4bf1-af4f-0a48b08a7fcd"
        },
        "item": {
          "id": "1b7a2e87-8fc1-482b-b1f0-40f00d69afea",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "5b12d745-b410-41a3-be0b-0ed3986220db",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "1b7a2e87-8fc1-482b-b1f0-40f00d69afea",
        "cursor": {
          "ref": "5b1cd482-c902-409c-b056-0dbdb77b487d",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "70deea8a-3d55-4bf1-af4f-0a48b08a7fcd"
        },
        "item": {
          "id": "1b7a2e87-8fc1-482b-b1f0-40f00d69afea",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "5b12d745-b410-41a3-be0b-0ed3986220db",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "90a11f26-ceb2-4567-a6d5-513680608ccc",
        "cursor": {
          "ref": "d4c80e52-9d8e-431c-a71f-b8a93df05146",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "3a7d6d1a-a66e-4ce8-aa33-13a1479124b3"
        },
        "item": {
          "id": "90a11f26-ceb2-4567-a6d5-513680608ccc",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "75aabb33-0e97-47c1-a30d-ceb9ee9898b8",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}