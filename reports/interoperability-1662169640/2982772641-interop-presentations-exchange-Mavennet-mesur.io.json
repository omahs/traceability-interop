{
  "collection": {
    "info": {
      "_postman_id": "8b877171-8d96-4bec-aefb-538d3e4cf0bb",
      "name": "Presentations Exchange Tutorial",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "11d4948d-6f2a-4f71-b24a-8b1db15a5457",
        "name": "Get Access Token (Issuer)",
        "request": {
          "url": {
            "host": [
              "{{ISSUER_TOKEN_ENDPOINT}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "urlencoded",
            "urlencoded": [
              {
                "key": "audience",
                "value": "{{ISSUER_TOKEN_AUDIENCE}}"
              },
              {
                "key": "client_id",
                "value": "{{ISSUER_CLIENT_ID}}"
              },
              {
                "key": "client_secret",
                "value": "{{ISSUER_CLIENT_SECRET}}"
              },
              {
                "key": "grant_type",
                "value": "client_credentials"
              },
              {
                "key": "scope",
                "value": "resolve:dids issue:credentials prove:presentations"
              }
            ]
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "282f6016-21fa-4b43-967e-5f3e097561be",
              "type": "text/javascript",
              "exec": [
                "// Token requests are expected to return a `200 Success` response code. Any",
                "// other response code should trigger a failure.",
                "pm.test(\"must return `200 Success` status\", function() {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "// The response should include an `access_token` value - this will be presented",
                "// to authenticated API endpoints in the `Authentication` header (see the last",
                "// testing code block for details on how this is persisted).",
                "pm.test(\"response body must include non-empty access_token\", function () {",
                "    const { access_token } = pm.response.json()",
                "    pm.expect(access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// The type of `access_token` returned by the token request is expected to be",
                "// `Bearer`.",
                "pm.test(\"response body must represent `Bearer` token\", function() {",
                "    const { token_type } = pm.response.json()",
                "    pm.expect(token_type).to.equal(\"Bearer\");",
                "});",
                "",
                "// The returned data includes an `expires_in` field that indicates time until",
                "// token expiration. Validate that this value is a whole number greater than",
                "// zero, as anything less than or equal to zero means that the `access_token`",
                "// is already expired.",
                "pm.test(\"returned token must expire in the future\", function() {",
                "    const { expires_in } = pm.response.json()",
                "    pm.expect(expires_in).to.be.above(0);",
                "});",
                "",
                "// The returned `access_token` value is persisted as a Postman collection",
                "// variable that can be accessed by other requests in the collection by calling",
                "// `pm.collectionVariables.get(\"issuer_access_token\")`.",
                "pm.test(\"`access_token` persisted to collectionVariables\", function() {",
                "    const { access_token } = pm.response.json()",
                "    pm.collectionVariables.set(\"issuer_access_token\", access_token);",
                "});"
              ],
              "_lastExecutionId": "0c12f4ff-c3f0-4f92-a7f7-86e7c70ed84e"
            }
          }
        ]
      },
      {
        "id": "6a961526-01ec-47b2-aaae-b06b3867e549",
        "name": "Get Access Token (Verifier)",
        "request": {
          "url": {
            "host": [
              "{{VERIFIER_TOKEN_ENDPOINT}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "urlencoded",
            "urlencoded": [
              {
                "key": "audience",
                "value": "{{VERIFIER_TOKEN_AUDIENCE}}"
              },
              {
                "key": "client_id",
                "value": "{{VERIFIER_CLIENT_ID}}"
              },
              {
                "key": "client_secret",
                "value": "{{VERIFIER_CLIENT_SECRET}}"
              },
              {
                "key": "grant_type",
                "value": "client_credentials"
              },
              {
                "key": "scope",
                "value": "resolve:dids"
              }
            ]
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "9db50638-fc69-4961-8b47-8b441c16305b",
              "type": "text/javascript",
              "exec": [
                "// Token requests are expected to return a `200 Success` response code. Any",
                "// other response code should trigger a failure.",
                "pm.test(\"must return `200 Success` status\", function() {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "// The response should include an `access_token` value - this will be presented",
                "// to authenticated API endpoints in the `Authentication` header (see the last",
                "// testing code block for details on how this is persisted).",
                "pm.test(\"response body must include non-empty access_token\", function () {",
                "    const { access_token } = pm.response.json()",
                "    pm.expect(access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// The type of `access_token` returned by the token request is expected to be",
                "// `Bearer`.",
                "pm.test(\"response body must represent `Bearer` token\", function() {",
                "    const { token_type } = pm.response.json()",
                "    pm.expect(token_type).to.equal(\"Bearer\");",
                "});",
                "",
                "// The returned data includes an `expires_in` field that indicates time until",
                "// token expiration. Validate that this value is a whole number greater than",
                "// zero, as anything less than or equal to zero means that the `access_token`",
                "// is already expired.",
                "pm.test(\"returned token must expire in the future\", function() {",
                "    const { expires_in } = pm.response.json()",
                "    pm.expect(expires_in).to.be.above(0);",
                "});",
                "",
                "// The returned `access_token` value is persisted as a Postman collection",
                "// variable that can be accessed by other requests in the collection by calling",
                "// `pm.collectionVariables.get(\"verifier_access_token\")`.",
                "pm.test(\"`access_token` persisted to collectionVariables\", function() {",
                "    const { access_token } = pm.response.json()",
                "    pm.collectionVariables.set(\"verifier_access_token\", access_token);",
                "});"
              ],
              "_lastExecutionId": "de3db445-4eeb-4803-86d1-d6344229cea2"
            }
          }
        ]
      },
      {
        "id": "8b09ab5c-d1a8-4ab7-ba12-f8581218b273",
        "name": "Get Organization DIDs (Issuer)",
        "request": {
          "url": {
            "path": [
              "identifiers",
              "{{ISSUER_ORGANIZATION_DID_WEB}}"
            ],
            "host": [
              "{{ISSUER_API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{issuer_access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "0df4e0b7-f3d7-47f7-b31a-cb3ae7559f13",
              "type": "text/javascript",
              "exec": [
                "// This endpoint is authenticated. This test will not prevent the request from",
                "// running when the `issuer_access_token` collection variable is missing, but it",
                "// will give an indication of why the request failed in that scenario.",
                "pm.test(\"`issuer_access_token` collection variable must be set\", function () {",
                "    const issuer_access_token = pm.collectionVariables.get(\"issuer_access_token\");",
                "    pm.expect(issuer_access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "pm.test(\"Status code is 200\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test(\"must include valid JSON response body\", function() {",
                "    pm.response.json(); // will throw on parse failure",
                "});",
                "",
                "// The response JSON must include a didDocument property that contains the",
                "// resolved DID document.",
                "pm.test(\"didDocument must be present in response body\", function() {",
                "    const jsonData = pm.response.json();",
                "    pm.expect(jsonData).to.have.property('didDocument');",
                "});",
                "",
                "// The DID document must contain an alsoKnownAs property.",
                "pm.test(\"alsoKnownAs MUST be present\", function () {",
                "    const { didDocument } = pm.response.json();",
                "    pm.expect(didDocument).to.have.property('alsoKnownAs');",
                "});",
                "",
                "// The alsoKnownAs property MUST be an array.",
                "pm.test(\"alsoKnownAs MUST be an array\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.expect(alsoKnownAs).to.be.an('array');",
                "});",
                "",
                "// The alsoKnownAs property MUST be a set.",
                "pm.test(\"alsoKnownAs values MUST be unique\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.expect(new Set(alsoKnownAs)).to.have.lengthOf(alsoKnownAs.length);",
                "});",
                "",
                "// The second element of the alsoKnownAs property will be used as a",
                "// credentials_issuer_id for subsequent tests.",
                "pm.test(\"alsoKnownAs[1] must be present\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.expect(alsoKnownAs[1]).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// Service array is used to look up traceability API service endpoint",
                "pm.test(\"Response must include 'service' array\", function() {",
                "    const { service } = pm.response.json().didDocument;",
                "    pm.expect(service).to.be.an('array').that.is.not.empty;",
                "});",
                "",
                "// If a verificationMethod property is present, the controller property must",
                "// match the didDocument.id property.",
                "pm.test(\"verification method controller must match did subject\", function() {",
                "    const { didDocument } = pm.response.json();",
                "    const vm = didDocument.verificationMethod || [];",
                "    vm.forEach((m) => pm.expect(m.controller).to.equal(didDocument.id));",
                "});",
                "",
                "// Service array must be correctly defined in DID document",
                "pm.test(\"'service' array must define Traceability API service endpoint\", function() {",
                "    const { service } = pm.response.json().didDocument;",
                "    const entry = service.find((s) => s.type == \"TraceabilityAPI\");",
                "    pm.expect(entry).to.be.an('object').that.is.not.empty;",
                "    pm.expect(entry.serviceEndpoint).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// The value of didDocument.alsoKnownAs[1] is persisted as a Postman collection",
                "// variable that can be accessed by other requests in the collection by calling",
                "// pm.collectionVariables.get(\"credential_issuer_id\").",
                "pm.test(\"`credential_issuer_id` persisted to collectionVariables\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.collectionVariables.set(\"credential_issuer_id\", alsoKnownAs[1]);",
                "});"
              ],
              "_lastExecutionId": "1659f5fe-a600-4b8b-8e63-ec30708dfc12"
            }
          }
        ],
        "protocolProfileBehavior": {
          "disabledSystemHeaders": {}
        }
      },
      {
        "id": "6e09b196-73cd-4240-9182-4f71b2ded0ad",
        "name": "Get Organization DIDs (Verifier)",
        "request": {
          "url": {
            "path": [
              "identifiers",
              "{{VERIFIER_ORGANIZATION_DID_WEB}}"
            ],
            "host": [
              "{{VERIFIER_API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{verifier_access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "8311240e-cfb3-4c38-b4c3-754a354fb08c",
              "type": "text/javascript",
              "exec": [
                "// This endpoint is authenticated. This test will not prevent the request from",
                "// running when the `issuer_access_token` collection variable is missing, but it",
                "// will give an indication of why the request failed in that scenario.",
                "pm.test(\"`issuer_access_token` collection variable must be set\", function () {",
                "    const issuer_access_token = pm.collectionVariables.get(\"issuer_access_token\");",
                "    pm.expect(issuer_access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "pm.test(\"Status code is 200\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test(\"must include valid JSON response body\", function() {",
                "    pm.response.json(); // will throw on parse failure",
                "});",
                "",
                "// The response JSON must include a didDocument property that contains the",
                "// resolved DID document.",
                "pm.test(\"didDocument must be present in response body\", function() {",
                "    const jsonData = pm.response.json();",
                "    pm.expect(jsonData).to.have.property('didDocument');",
                "});",
                "",
                "// The DID document must contain an alsoKnownAs property.",
                "pm.test(\"alsoKnownAs MUST be present\", function () {",
                "    const { didDocument } = pm.response.json();",
                "    pm.expect(didDocument).to.have.property('alsoKnownAs');",
                "});",
                "",
                "// The alsoKnownAs property MUST be an array.",
                "pm.test(\"alsoKnownAs MUST be an array\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.expect(alsoKnownAs).to.be.an('array');",
                "});",
                "",
                "// The alsoKnownAs property MUST be a set.",
                "pm.test(\"alsoKnownAs values MUST be unique\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.expect(new Set(alsoKnownAs)).to.have.lengthOf(alsoKnownAs.length);",
                "});",
                "",
                "// The second element of the alsoKnownAs property will be used as a",
                "// credentials_issuer_id for subsequent tests.",
                "pm.test(\"alsoKnownAs[1] must be present\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.expect(alsoKnownAs[1]).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// If a verificationMethod property is present, the controller property must",
                "// match the didDocument.id property.",
                "pm.test(\"verification method controller must match did subject\", function() {",
                "    const { didDocument } = pm.response.json();",
                "    const vm = didDocument.verificationMethod || [];",
                "    vm.forEach((m) => pm.expect(m.controller).to.equal(didDocument.id));",
                "});",
                "",
                "// Service array must be correctly defined in DID document",
                "pm.test(\"'service' array must define Traceability API service endpoint\", function() {",
                "    const { service } = pm.response.json().didDocument;",
                "    const entry = service.find((s) => s.type == \"TraceabilityAPI\");",
                "    pm.expect(entry).to.be.an('object').that.is.not.empty;",
                "    pm.expect(entry.serviceEndpoint).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// The serviceEndpoint for the verifier must be persisted for later use",
                "pm.test(\"`verifier_exchange_endpoint` is persisted to collectionVariables\", function() {",
                "    const { service } = pm.response.json().didDocument;",
                "    const entry = service.find((s) => s.type == \"TraceabilityAPI\");",
                "    pm.collectionVariables.set(\"verifier_exchange_endpoint\", entry.serviceEndpoint);",
                "});",
                ""
              ],
              "_lastExecutionId": "a0aaefe1-ef5c-4ba5-a3e7-4ecc8ab2134d"
            }
          }
        ],
        "protocolProfileBehavior": {
          "disabledSystemHeaders": {}
        }
      },
      {
        "id": "62345ed1-434a-49bb-adb1-2e33976a9e4a",
        "name": "Issue Credential",
        "request": {
          "url": {
            "path": [
              "credentials",
              "issue"
            ],
            "host": [
              "{{ISSUER_API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"id\": \"urn:uuid:{{$randomUUID}}\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{credential_issuer_id}}\",\n        \"issuanceDate\": \"{{$isoTimestamp}}\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        }\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\",\n        \"created\": \"{{$isoTimestamp}}\"\n    }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{issuer_access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "81e3deff-caf4-4274-b68c-7b40f7a68d0c",
              "type": "text/javascript",
              "exec": [
                "// This endpoint is authenticated. This test will not prevent the request from",
                "// running when the `issuer_access_token` collection variable is missing, but it",
                "// will give an indication of why the request failed in that scenario.",
                "pm.test(\"`issuer_access_token` collection variable must be set\", function () {",
                "    const issuer_access_token = pm.collectionVariables.get(\"issuer_access_token\");",
                "    pm.expect(issuer_access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "pm.test(\"`credential_issuer_id` collection variable must be set\", function () {",
                "    const credential_issuer_id = pm.collectionVariables.get(\"credential_issuer_id\");",
                "    pm.expect(credential_issuer_id).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "pm.test(\"must return `201 Created` status\", function () {",
                "    pm.response.to.have.status(201);",
                "});",
                "",
                "// Verifiable credential must be made available to later requests",
                "pm.test(\"`verifiable_credential` persisted to collectionVariables\", function() {",
                "    const verifiable_credential = JSON.stringify(pm.response.json());",
                "    pm.collectionVariables.set(\"verifiable_credential\", verifiable_credential);",
                "})"
              ],
              "_lastExecutionId": "4855475e-e8ac-468a-8493-67d8d6a2cefb"
            }
          },
          {
            "listen": "prerequest",
            "script": {
              "id": "b050b25e-a70e-48ee-8f4a-dded15838ec7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "08e1f494-45f4-47b0-8239-da4921676a4f"
            }
          }
        ]
      },
      {
        "id": "fe88157c-f283-4252-98fe-1c8f66a5a074",
        "name": "Initiate Exchange",
        "request": {
          "url": {
            "path": [
              "presentations",
              "available"
            ],
            "host": [
              "{{verifier_exchange_endpoint}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"query\": [\n    {\n      \"type\": \"QueryByExample\",\n      \"credentialQuery\": [\n        {\n          \"type\": [\n            \"VerifiableCredential\"\n          ],\n          \"reason\": \"We want to present credentials.\"\n        }\n      ]\n    }\n  ]\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{verifier_access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "1ad773df-5b4d-4832-b4d5-aa4cc1c5788c",
              "type": "text/javascript",
              "exec": [
                "// This endpoint is authenticated. This test will not prevent the request from",
                "// running when the `verifier_access_token` collection variable is missing, but",
                "// it will give an indication of why the request failed in that scenario.",
                "pm.test(\"`verifier_access_token` collection variable must be set\", function () {",
                "    const verifier_access_token = pm.collectionVariables.get(\"verifier_access_token\");",
                "    pm.expect(verifier_access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// The expected response code for a \"Presentations Available\" request is",
                "// `200 Success`.",
                "pm.test(\"must return `200 Success` status\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "// The response body must include a \"domain\" property.",
                "pm.test(\"response must include 'domain' property\", function() {",
                "    const { domain } = pm.response.json()",
                "    pm.expect(domain).to.be.a('string').that.is.not.empty;",
                "    // Domain must be made available to later requests",
                "    pm.collectionVariables.set(\"domain\", domain);",
                "});",
                "",
                "// The response body must include a \"challenge\" property.",
                "pm.test(\"response must include 'challenge' property\", function() {",
                "    const { challenge } = pm.response.json()",
                "    pm.expect(challenge).to.be.a('string').that.is.not.empty;",
                "    // Challenge must be made available to later requests",
                "    pm.collectionVariables.set(\"challenge\", challenge);",
                "});",
                ""
              ],
              "_lastExecutionId": "84946426-d0b9-46a4-b7f7-1bb7153930c0"
            }
          }
        ]
      },
      {
        "id": "adecb4a7-22a5-4676-99ff-d2649e7d6086",
        "name": "Sign Presentation",
        "request": {
          "url": {
            "path": [
              "presentations",
              "prove"
            ],
            "host": [
              "{{ISSUER_API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"presentation\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"type\": [\n            \"VerifiablePresentation\"\n        ],\n        \"holder\": \"{{credential_issuer_id}}\",\n        \"verifiableCredential\": [\n            {{verifiable_credential}}\n        ]\n    },\n    \"options\": {\n        \"domain\": \"{{domain}}\",\n        \"challenge\": \"{{challenge}}\"\n    }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{issuer_access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "670f7b34-d7b8-4b70-953b-03a3eb7db02a",
              "type": "text/javascript",
              "exec": [
                "// This endpoint is authenticated. This test will not prevent the request from",
                "// running when the `issuer_access_token` collection variable is missing, but it",
                "// will give an indication of why the request failed in that scenario.",
                "pm.test(\"`issuer_access_token` collection variable must be set\", function () {",
                "    const issuer_access_token = pm.collectionVariables.get(\"issuer_access_token\");",
                "    pm.expect(issuer_access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// Credential issuer id is a required element item used in the request body",
                "pm.test(\"`credential_issuer_id` collection variable must be set\", function () {",
                "    const credential_issuer_id = pm.collectionVariables.get(\"credential_issuer_id\");",
                "    pm.expect(credential_issuer_id).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// Verifiable credential is a required element item used in the request body",
                "pm.test(\"`verifiable_credential` collection variable must be set\", function () {",
                "    const verifiable_credential = pm.collectionVariables.get(\"verifiable_credential\");",
                "    pm.expect(verifiable_credential).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// Domain is a required element item used in the request body",
                "pm.test(\"`domain` collection variable must be set\", function () {",
                "    const domain = pm.collectionVariables.get(\"domain\");",
                "    pm.expect(domain).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// Challenge is a required element item used in the request body",
                "pm.test(\"`challenge` collection variable must be set\", function () {",
                "    const challenge = pm.collectionVariables.get(\"challenge\");",
                "    pm.expect(challenge).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// The expected response code for a \"Sign Presentation\" request is",
                "// `201 Success`.",
                "pm.test(\"must return `201 Success` status\", function () {",
                "    pm.response.to.have.status(201);",
                "});",
                "",
                "// Verifiable presentation must be made available to later requests",
                "pm.test(\"`verifiable_presentation` persisted to collectionVariables\", function() {",
                "    const verifiable_presentation = JSON.stringify(pm.response.json());",
                "    pm.collectionVariables.set(\"verifiable_presentation\", verifiable_presentation);",
                "})"
              ],
              "_lastExecutionId": "22e42f5a-5588-4d66-9cac-99393aa45ff7"
            }
          }
        ]
      },
      {
        "id": "c1c1adfb-917f-4bf8-a07e-ae32485c1010",
        "name": "Complete Exchange",
        "request": {
          "url": {
            "path": [
              "presentations",
              "submissions"
            ],
            "host": [
              "{{verifier_exchange_endpoint}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{{verifiable_presentation}}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{verifier_access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "f013d851-22b9-443c-b11f-fa50aafb690f",
              "type": "text/javascript",
              "exec": [
                "// This endpoint is authenticated. This test will not prevent the request from",
                "// running when the `verifier_access_token` collection variable is missing, but",
                "// it will give an indication of why the request failed in that scenario.",
                "pm.test(\"`verifier_access_token` collection variable must be set\", function () {",
                "    const verifier_access_token = pm.collectionVariables.get(\"verifier_access_token\");",
                "    pm.expect(verifier_access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// The expected response code for a \"Complete Exchange\" request is",
                "// `200 Success`.",
                "pm.test(\"must return `200 Success` status\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "// Response should confirm the submission is accepted.",
                "pm.test(\"verification response should be 'true'\", function() {",
                "    const { verified } = pm.response.json()",
                "    pm.expect(verified).to.be.true;",
                "});"
              ],
              "_lastExecutionId": "dac9263f-70a7-4ba0-8e03-ec77f6c76211"
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 8,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 25,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 8,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 8,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 8,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 51,
        "pending": 0,
        "failed": 2
      },
      "testScripts": {
        "total": 16,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 9,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 158.875,
      "responseMin": 7,
      "responseMax": 415,
      "responseSd": 145.77417252380476,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1662169478977,
      "completed": 1662169480571
    },
    "executions": [
      {
        "id": "11d4948d-6f2a-4f71-b24a-8b1db15a5457",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 8,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "81c6521a-131a-4335-a56f-63c46cdaaec0",
          "httpRequestId": "3fe134dc-b072-4664-bff9-701c67a1ae8d"
        },
        "item": {
          "id": "11d4948d-6f2a-4f71-b24a-8b1db15a5457",
          "name": "Get Access Token (Issuer)"
        },
        "response": {
          "id": "a4779434-9dce-4a1b-b543-d60870465a01",
          "status": "OK",
          "code": 200,
          "responseTime": 415,
          "responseSize": 956
        },
        "assertions": [
          {
            "assertion": "must return `200 Success` status",
            "skipped": false
          },
          {
            "assertion": "response body must include non-empty access_token",
            "skipped": false
          },
          {
            "assertion": "response body must represent `Bearer` token",
            "skipped": false
          },
          {
            "assertion": "returned token must expire in the future",
            "skipped": false
          },
          {
            "assertion": "`access_token` persisted to collectionVariables",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a961526-01ec-47b2-aaae-b06b3867e549",
        "cursor": {
          "ref": "27d95a24-3676-4367-8bca-efbdb0e265e7",
          "length": 8,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "86f2073d-f651-4786-8d82-2dbd00655f95"
        },
        "item": {
          "id": "6a961526-01ec-47b2-aaae-b06b3867e549",
          "name": "Get Access Token (Verifier)"
        },
        "response": {
          "id": "1934cb71-91bd-433b-8b2a-b0879a30b3e4",
          "status": "OK",
          "code": 200,
          "responseTime": 284,
          "responseSize": 865
        },
        "assertions": [
          {
            "assertion": "must return `200 Success` status",
            "skipped": false
          },
          {
            "assertion": "response body must include non-empty access_token",
            "skipped": false
          },
          {
            "assertion": "response body must represent `Bearer` token",
            "skipped": false
          },
          {
            "assertion": "returned token must expire in the future",
            "skipped": false
          },
          {
            "assertion": "`access_token` persisted to collectionVariables",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b09ab5c-d1a8-4ab7-ba12-f8581218b273",
        "cursor": {
          "ref": "0a939ca1-637d-49e4-8f9f-3f573c9d427d",
          "length": 8,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "62b8b5dd-87e5-42aa-956f-711a119f87d3"
        },
        "item": {
          "id": "8b09ab5c-d1a8-4ab7-ba12-f8581218b273",
          "name": "Get Organization DIDs (Issuer)"
        },
        "response": {
          "id": "cba400b1-028d-42eb-9c97-766b10165955",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 946
        },
        "assertions": [
          {
            "assertion": "`issuer_access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "must include valid JSON response body",
            "skipped": false
          },
          {
            "assertion": "didDocument must be present in response body",
            "skipped": false
          },
          {
            "assertion": "alsoKnownAs MUST be present",
            "skipped": false
          },
          {
            "assertion": "alsoKnownAs MUST be an array",
            "skipped": false
          },
          {
            "assertion": "alsoKnownAs values MUST be unique",
            "skipped": false
          },
          {
            "assertion": "alsoKnownAs[1] must be present",
            "skipped": false
          },
          {
            "assertion": "Response must include 'service' array",
            "skipped": false
          },
          {
            "assertion": "verification method controller must match did subject",
            "skipped": false
          },
          {
            "assertion": "'service' array must define Traceability API service endpoint",
            "skipped": false
          },
          {
            "assertion": "`credential_issuer_id` persisted to collectionVariables",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e09b196-73cd-4240-9182-4f71b2ded0ad",
        "cursor": {
          "ref": "0277402b-7896-4333-a34c-89e75c590f78",
          "length": 8,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "3bf07105-1ccd-4131-9f91-fbe74a48d1fe"
        },
        "item": {
          "id": "6e09b196-73cd-4240-9182-4f71b2ded0ad",
          "name": "Get Organization DIDs (Verifier)"
        },
        "response": {
          "id": "ac017e60-9211-43fa-b049-142fe0518136",
          "status": "OK",
          "code": 200,
          "responseTime": 286,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "`issuer_access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "must include valid JSON response body",
            "skipped": false
          },
          {
            "assertion": "didDocument must be present in response body",
            "skipped": false
          },
          {
            "assertion": "alsoKnownAs MUST be present",
            "skipped": false
          },
          {
            "assertion": "alsoKnownAs MUST be an array",
            "skipped": false
          },
          {
            "assertion": "alsoKnownAs values MUST be unique",
            "skipped": false
          },
          {
            "assertion": "alsoKnownAs[1] must be present",
            "skipped": false
          },
          {
            "assertion": "verification method controller must match did subject",
            "skipped": false
          },
          {
            "assertion": "'service' array must define Traceability API service endpoint",
            "skipped": false
          },
          {
            "assertion": "`verifier_exchange_endpoint` is persisted to collectionVariables",
            "skipped": false
          }
        ]
      },
      {
        "id": "62345ed1-434a-49bb-adb1-2e33976a9e4a",
        "cursor": {
          "ref": "0bca6275-5185-4c76-8dcb-4762ee167ba6",
          "length": 8,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "64dd40f6-65ba-473a-ba55-df1b575c3adb"
        },
        "item": {
          "id": "62345ed1-434a-49bb-adb1-2e33976a9e4a",
          "name": "Issue Credential"
        },
        "response": {
          "id": "3110347c-56d9-4566-b52d-9c479e890779",
          "status": "Created",
          "code": 201,
          "responseTime": 182,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "`issuer_access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`credential_issuer_id` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "must return `201 Created` status",
            "skipped": false
          },
          {
            "assertion": "`verifiable_credential` persisted to collectionVariables",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe88157c-f283-4252-98fe-1c8f66a5a074",
        "cursor": {
          "ref": "68dd2a46-dd30-4222-9dee-cf2e171d03a2",
          "length": 8,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "35a404bc-bd60-4afd-9a9f-ecf2e1661c16"
        },
        "item": {
          "id": "fe88157c-f283-4252-98fe-1c8f66a5a074",
          "name": "Initiate Exchange"
        },
        "response": {
          "id": "2819315a-2fd2-43d2-8473-ef4dfc3a3751",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 229
        },
        "assertions": [
          {
            "assertion": "`verifier_access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "must return `200 Success` status",
            "skipped": false
          },
          {
            "assertion": "response must include 'domain' property",
            "skipped": false
          },
          {
            "assertion": "response must include 'challenge' property",
            "skipped": false
          }
        ]
      },
      {
        "id": "adecb4a7-22a5-4676-99ff-d2649e7d6086",
        "cursor": {
          "ref": "1e69656d-d9f4-48aa-a710-3df332c7c398",
          "length": 8,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4a7afb15-f1da-4bf7-951c-47110a4a90b7"
        },
        "item": {
          "id": "adecb4a7-22a5-4676-99ff-d2649e7d6086",
          "name": "Sign Presentation"
        },
        "response": {
          "id": "a460280e-5723-427a-977e-174f77d1a68c",
          "status": "Created",
          "code": 201,
          "responseTime": 52,
          "responseSize": 1371
        },
        "assertions": [
          {
            "assertion": "`issuer_access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`credential_issuer_id` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`verifiable_credential` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`domain` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`challenge` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "must return `201 Success` status",
            "skipped": false
          },
          {
            "assertion": "`verifiable_presentation` persisted to collectionVariables",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1c1adfb-917f-4bf8-a07e-ae32485c1010",
        "cursor": {
          "ref": "2c0b51ad-7d96-4b34-bd88-6031a91cfefb",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "028dd104-9681-478c-b314-922460d8d7e0"
        },
        "item": {
          "id": "c1c1adfb-917f-4bf8-a07e-ae32485c1010",
          "name": "Complete Exchange"
        },
        "response": {
          "id": "683f1d65-8702-4458-bea5-b11456fb7ff3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 7,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "`verifier_access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "must return `200 Success` status",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "must return `200 Success` status",
              "message": "expected response to have status code 200 but got 403",
              "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:2:8)"
            }
          },
          {
            "assertion": "verification response should be 'true'",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "verification response should be 'true'",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:8)"
            }
          }
        ]
      }
    ]
  }
}