{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "0c9c423c-332c-447f-86ea-2ef36ff823bd",
        "name": "Clear Cache",
        "item": [
          {
            "id": "3948e2cc-fe5c-481f-85c4-484d68f74091",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7fe79ba7-5982-42d0-8034-5547b2e6e855",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "b720c945-bc51-44c8-aecc-6617c16338aa"
                }
              }
            ]
          },
          {
            "id": "e967f2ab-9f10-4154-aa65-e617dbfdff4a",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7f5fed48-5d86-435c-855f-cffabf52d53b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "df0d6771-9439-4704-a6aa-cd3d3b04be54"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "78cf850c-e83c-4e31-b008-e170a4a0e841",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "6badb161-31d0-4858-9a90-e9fec30c6590",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bd9515d8-ac82-4dc9-b794-c777368e320d",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "18ab6bb5-b6c3-4139-b95b-4650b8eeb013",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4fbd6cc5-c428-49c4-a2a0-5199f060ac71"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4df3147f-fe2e-4fab-952d-7def51eecd0e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c9681c45-fdd1-4349-ae5b-2160e6f7f069"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d849ed10-2b4c-454d-bf56-661fb54e26ef",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c14d58d9-5a0b-40d9-92b9-f56945075864"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e753bd38-6075-44d8-a47b-1e5ad515b428",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "44a07a74-8b43-45ea-911e-8bc14455a534"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "976893c0-51c8-4940-88a0-035bbaea7966",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "484edbc6-150c-4026-bf32-8e7dadfde505"
            }
          }
        ]
      },
      {
        "id": "df71981e-aa2e-4007-85df-627be6712b29",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "672139ab-e9cc-4547-b1c1-915e6a2dfcc2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "af598c44-1600-4ec8-8a6f-95c5ae3aa0af",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6f871c61-6021-46a5-8c04-139a1687a193",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc471778-7e6b-4fca-affd-5ea3f14c63b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1f49ac60-f636-4d1b-96b4-5f3a8d003fc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59a22e68-5aa2-4fdf-a091-96664de8afbc",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cac6e13e-deda-47fe-8b97-c8666cc19ddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e27139de-c7b1-4dbf-ad91-9633d41a6aa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15bc8194-d11d-4f2b-a833-bb9851478b01",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d182eda1-50e8-4ca3-8c6a-518b71e888bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "71cc9bdc-c454-4723-9281-f40eccbeba68"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4df63e74-230f-4cfd-b8ee-5ca4e82aca91",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fb3d704f-beaa-4505-b13b-5688b4f15521",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82e58b73-e96f-4125-a6ef-262ee4a26d35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a8663527-9fd6-4284-a2b7-053a846236e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6418844-7936-487d-a835-2992e67c8911",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "029701b8-9337-4f34-8f01-0894940ae0c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e70fe0b3-27b5-47e7-be36-1c5d99d3d292",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a46eb25-48e3-45af-a3a1-7bfe4f63a62c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "79691b85-de69-4335-8cc7-26704a610e94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3af1153c-0e0f-41a4-be4b-6d8cf969155c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "b6b8e991-9046-41f1-9adf-565bdf11c161"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "28f20215-7aaf-4d8b-8c3c-431a769c63ad",
            "name": "Positive Testing",
            "item": [
              {
                "id": "03dd6e6a-c619-4dce-9a50-f8611a2c094d",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d883bae6-57e0-48c3-8fea-f2d9236ef64c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "a6c09144-df37-4b18-805b-58cb9ff2f5c4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "99b825ba-46d1-42c4-ae6d-62fa9f781bd5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "30ceffb7-bafa-4557-9fc3-35668f719da2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "431df8d2-b858-49cb-bc37-56e90e1c7efd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "02356819-223f-4c2f-9c76-ea5adb8a2e26"
            }
          }
        ]
      },
      {
        "id": "ceb1615b-99e7-4d0a-ad53-118f7286399c",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "cf8035c9-a49e-4b0f-a3c1-259f813f2534",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d6f78ff0-0f94-46bf-b6ae-a9dd71598d54",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "5115fbe2-4c3e-4318-89ff-3e62e19e20ef",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07d204a2-318e-466d-a94f-7fbaf4338154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b87b71f1-f5e4-4582-939a-3a76aa45a0f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d24af8dc-6a9e-482e-b7c2-656ece62372a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f1005b4b-306d-41bd-842a-f35ceae044d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af50e412-50d3-42cc-ade2-a2dbac183ba2",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f77695a9-8866-43ca-b038-e5f99fecf1d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97a6ffc5-7d00-4e7a-876c-1521bed429c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3c5cdcb-a41a-4d94-a3e1-b2175787b218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bb69b83a-b016-4d3d-a098-705d410e5317"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df5731c5-2be3-4e54-9595-caab0b8e37a4",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaf5b87e-f8da-423f-bdf2-fd779e708e78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03e62853-02bc-440f-85d5-37bddb9867e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "965aad46-7fa1-49d9-a434-3e826ff7a242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1282c46f-6e22-4f6b-8dd7-cff7950cdff3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4932431-3e63-450a-a48f-1cd4f0f775b5",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50f02315-505e-44c2-8b2a-9421ba8989de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d227dd8c-6b9c-48af-846f-c03f4702b515"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05325abc-76ac-490a-ab3e-12febb52fe56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2dea36b1-c61f-411b-bea0-01d762b99365"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55c84b45-554f-4f9c-8a1b-bdac2ac60ffd",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27e92057-59ed-4d56-8c4d-fa43d5e948d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "926d5a6f-46c9-4a37-9f7f-c30152fc4d54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "865803c0-ddce-4356-a71a-ddd35fc07e71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d4d4446e-da26-444c-a5a4-748a00fd0fc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05a0190e-c366-46fe-9f06-165a1ed7c794",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3cfe636-9455-4c63-afe6-64697fb5d329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe3a3fda-9240-4d78-841e-2e3f341f211f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68045d15-9a82-452b-8864-071fa9f8f288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "74d622ac-bc7f-458d-9ccf-a4e9561c9ec9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c818747b-1376-44b4-8790-3672584ce040",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59c1bf22-988f-40d1-bd62-bb731858c782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e1774bc-c79b-4655-9e2d-107ccdaecef5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5013e38f-2c23-497d-b5f0-a231e2e57595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7383c815-f9e9-4a05-a025-7c177917a53d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a1f7cd4-37da-48d4-81f3-e286a0c3ed79",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27e67a9b-8afb-4935-b077-922ed8f24f5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21407ed5-959f-4ea8-b284-c5f5603b8cb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93cbe25f-cffc-404d-bef6-f927192811c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8040d900-5f49-4396-bb08-52b9ed119453"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42dc2ae3-dee0-4db5-983a-f5e94fdfe050",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48e90327-cb53-49a4-924c-5effe0ba580d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e9f20c0-db86-4d1f-bdd4-c66d2ef0e1b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20636c09-1181-40d3-9bca-1abc17c4b5b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "05b1899e-95a8-4d2e-9ceb-9ecb185e7793"
                        }
                      }
                    ]
                  },
                  {
                    "id": "100f1752-b1fb-4f16-9c21-1100312c60ca",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "572ae5e2-7df0-406a-b51f-53e55059cbe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40444f8c-c249-4e40-947f-51abae3caab2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "237222d1-0d17-40c8-ade0-c2ed69593b66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0a102e54-9b6f-4bd5-934e-19f1606d1f6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "751ca324-28a2-4520-9000-885c6743f3c0",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d89864b9-05a8-4d91-b2ab-fec525701369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3139bbcc-3878-4971-993d-ea86b13386b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d5cfac4-6c31-4654-ba56-2257200ffc4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "95cbe5b4-e59b-4944-a44b-bca62e3255bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "698bf413-39af-4822-9f92-e88274df846f",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6778cb66-f1e4-4eff-85fa-a747bdf59efa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "733c27f3-27b6-41a8-8784-a8a5d24775d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87053656-2147-493f-909a-823b0656fce0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "de608256-59a9-4d1f-a5a0-c6d89f00ab83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ca6ede3-3039-49b4-8351-696ca4f0e2ad",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbca0cd6-c959-4c21-a587-9898bb49ad27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2aed7be2-ccdd-4d95-b915-00525bf7f1ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be3c429c-6818-48f8-a085-dc5c955a7576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f3703660-e0a1-47ca-84cd-21356a984301"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dedaf223-c430-4cd6-b0bc-7ffd356024b5",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "670a07b7-6eaf-4efe-b4c5-e959bf20294a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bace99f9-e8c1-4072-bbf7-574be08a4eb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07c27d79-0324-4f5c-847f-2cf78728813d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9255a351-a420-4c5c-9715-198bd5e9d0eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85a46ed1-49a3-44e6-a6b8-5b749d3c0feb",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21c0cd8d-d5e1-45e4-95f2-11e49a039750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74047af4-318d-4552-8ab5-51fe54062ab4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eaaef2a-604e-4480-bd99-39f37e8abff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cff32fdb-c152-4dc1-9aa5-abf1986af697"
                        }
                      }
                    ]
                  },
                  {
                    "id": "573c996b-6db4-4070-a6dd-b0a1e7ff33f8",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81a73bf8-3016-4f79-9a8b-b0bda66189ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fec7892-239a-407a-954c-ff6f70b43f79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29b53999-7394-4d5b-b282-4edda75aeef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3150361c-07f7-448c-8d50-47efddc1e299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d80ae488-b3f9-4ad9-807c-268140b1c0a1",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e46f2851-99be-4cef-8b56-fbd0f7c10760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8350367a-3b0d-4b54-b67f-7e0582b5dfb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd39728b-ca06-411f-86ae-a60f7b2a0ed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e7591559-3ca5-4eb7-9567-893f67d83bca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5c1ed6f-edb9-43eb-98a6-d7e17e4f8fbe",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1493550-2d5d-4978-ac98-52d014f7d7ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c2b355a-5b55-4244-9f99-e992f4aa7b45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd01c6b7-8dc2-4e93-8e4c-4f2c6bdf209c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f5d1f7c-d4f9-4c26-af96-f561ee3f638d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4d9cda8-cb19-4012-98b7-c2b34d46ed01",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cf0618f-23f8-4371-afbc-f0ae201b3b44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7055887-2abd-433d-863c-2bcaea28b4d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "653f6e34-f143-4ff1-b172-1cac2c8c2233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8c4b28e-8ee8-4cda-b84c-d12ba07de487"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7e96d73-59a8-4c16-a732-fcaa7c2d9d60",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e562c0f-b297-4602-aca9-5c54b40ba846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f686a705-f6c5-41eb-9e63-5ce08cbe9428"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08945e9a-5531-4b97-bb6b-ef366c4273f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7547ee3c-27fd-46d0-bbdb-2b72b4fc7b70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60cea501-9467-4b2f-847a-ec9d352c1e0d",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "329c10f6-807d-4ed1-9e57-0699739ab4bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a4aaedc-05f6-44d6-8a29-8d1c5d93bfc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69fcf158-f125-498b-bae9-bbe16baee5df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2edc44c7-0f72-488a-839c-15f9e2cae135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6450a185-3b24-4399-b265-f4e4ac48eb3d",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ec39c8d-8b8d-4efa-96f6-48efcbbbc53c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c85228e-c69e-485f-a24b-80c180420e84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7badf3c-470c-49e3-882f-2d932f0e72cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b4ab36d2-3a26-4160-b3c5-a3aced442d45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b296acf8-8d41-44d0-8975-28c79bd8f8d6",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3026f5c1-d16d-4938-b5d7-7de7cda3d566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b80e412-e8b7-419e-81fc-f04b57ec61a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c68f28d8-70e4-4eb3-8e0e-e72d5f69fef0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "92b53470-8746-4024-a9f7-43e5c35cc7f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1ae088f-a330-4c24-8e45-c5ea10309d78",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9747ee0a-b034-43de-8eca-7ab54de39dd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49b822a2-2626-4077-ade8-9afa15050bce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be0df195-90c7-4755-aadc-efe2f85ad884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc57bbbc-340f-458d-81a8-e9a8270447a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0487e577-6ecd-454d-b954-5994fad8b6ef",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b783989-3545-4651-9d69-352995e8d0d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62d82178-1f23-4f6c-a1ee-6415f0b564b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c8ef0c8-c85f-4339-b237-3a38620cd58c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d5a60e0-842a-4271-aa8c-a2b339b46aed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f246e5b6-7362-410d-88dc-5e39afaa801a",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d2a2b33-91bb-43dc-94ea-ee61c7c54de5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d417c70-4f7a-4c4c-81ce-9383dc9fff6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b82d3fa-f67a-4bca-bacd-00763160a771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5108e434-6d93-4822-b463-7ffc2e9a7405"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93472cdd-2bc3-4c5a-b3eb-eb2005fd8bda",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2d07c92-a72d-47b5-bcae-efb32f88fc46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80ba1ca6-6b4c-463f-9f64-593977ac629c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a158d490-c386-482d-a903-1a25cf4da6df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bda1c32f-3789-4a88-805b-ee70e87541d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d1afdc2-313b-41b0-87a9-d3e68b3537e6",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8d7f9f6-2486-4ed4-a9f0-73b22f40a964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d6b7e32-e00e-4d84-bfa9-c007b24f4983"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcc87a58-223c-4b90-bb20-f2ce43aabe69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ed7bedd-1f30-4eb8-8664-d9119af7b8aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a23552b-92b7-4241-bb1f-011d428e4b62",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09bd2ec3-076d-40ed-97d2-a77e1bb83592",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5e5a9eb-ce44-4117-9c3b-9b510f272847"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1b845d1-e3ba-4e43-b6a9-804a060b64b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ffe6614-db9b-4add-97eb-c1b91716ecdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "657f355e-2a58-451f-b80b-f6ae8d1d7739",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c99fd54b-e2f2-411a-be47-ff62c61207b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0b7df67-e5f6-469f-ba5e-269ea3607d61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d54b9b8-8b55-4781-a60f-162c1efb0277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1de78c7-8803-4b84-b74c-52aa6c61e0e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6270b10-f26b-4678-b5d9-5545376ae8be",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba354281-a4f6-4f46-ab35-d92cf6a7ff40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d887657a-3fac-4801-b886-c642b2ee7bc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cce778fe-4331-4df4-98f4-d42e362c7a0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b0a5f08-025b-4621-933b-ee2b59a5684c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3da7d257-55c4-471c-8087-3e277890652a",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db78f1ab-29d1-46cd-8a5e-7370b8b96bd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a4ea741-f3d3-4934-b2ce-0512d31ad8f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0a3c370-6f15-48dc-a79a-5a4e612b47c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b457189b-e988-4943-8d22-f72abf321d34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8ef8c09-2148-4889-b3db-464caeee5ca4",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "031def34-9026-4125-935b-aca7748462dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "377346b5-3c3e-42d2-b97c-86c0d49c3230"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee3d9a26-6de1-43f8-9bf7-a0c87d720ff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5392a23d-6294-4e3b-b965-494e6d64fce9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee6a5563-12c1-467b-a1ab-04aca8032d10",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be2fd398-7a5e-45f3-82bf-f082eeb9d7df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "456eb0f2-9961-4595-bc0c-99bd3251622c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69b67022-d949-4ee1-b8ec-0ed196173766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9dc78338-1072-4ea6-9127-4a34d85190ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2907e82d-3d4c-44ba-8f7e-aeced896225e",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d1381de-d2ba-4e1b-b773-56b41dd4dc28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13ed32e1-df5b-4aaa-b507-4d1fa04f3b19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "397255d9-2134-432b-81c6-2f29b6ca9bca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "df6706b3-8dbc-4a8a-81db-9d2b47080616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44fcaef1-ef7b-4e0c-9ce0-918e47aeebc9",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0abe0eef-9f74-4520-9db2-d34d220e119f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6b86c3cc-3c05-4330-8bae-3d7107d395e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64ce2240-5a5a-49c1-89fe-526aece03b82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "05c9273b-a88a-4abc-9144-de7c579dda5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5f18a16-0727-4bbe-be95-0e73ac3e718a",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abb433ff-aa95-4faf-9bdf-15ba5ceff83e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13e141f8-08e0-4167-b1b1-36ae1effe289"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3523d9af-2f67-4c5c-ac34-64c52b0fda0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a39c0667-98d1-4776-98eb-abed71c0fdc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36ef76d6-6fcb-4e5f-8eca-0dbdd2240a09",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "046f98a4-2eda-4102-b0b0-0d34178fa585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b702ecb-6c2c-457f-8b07-5aec03715c59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "660b6403-c3c7-41fb-ab27-543fb9715c53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "fa1e24f1-c22d-4ad0-8bd0-de09e1796ef7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7abb29a-cbe9-48f6-9538-8b2be94695c2",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdc052d2-f318-4067-8eb0-719378ba4de9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "017816a0-6d83-431c-b424-ee7a7dd60e6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cc6ed09-7f9a-444a-99ce-075d515569b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "707b3ff1-6cc5-4b05-8238-b35ba423a181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "885429fe-fde5-4293-8a7e-d3dd30cd9d0e",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "855118a9-f2ab-4f99-991f-546912046b3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "794b2e27-a578-4408-9354-42d367b49682"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09052a4c-7ea0-43a3-b88d-d8f98898aa65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e7aa3c43-003a-493c-95cc-1f844b3c5121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38353fa2-859b-4071-af42-4f93f5c38b5b",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33e1ae4c-309f-4874-bccf-0a78b4e17bbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "666040df-5054-43ab-9eb2-f7f85cb0101b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "279e1573-0cb4-4122-90a4-0ddcc8e71c9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "341a81c8-1719-4fe5-b7bd-1019f30e2774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9923d166-601e-4b2c-ac1d-fee31e98b640",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baba6b95-f169-48aa-998e-e5b12f3ff59b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "589cb52d-557b-439a-b5a3-675419976455"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68ae7cd6-2106-4a0a-a6d1-98afc2e4cbff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "7b90e07e-3c49-48f9-b7ed-4c7de504d0f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bb26cc2-b741-476b-8d93-94cee63eb370",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f46580d4-9009-4122-9d82-3f2510a5bb5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ef2965c-8768-4dc5-a291-4ead8f5e4269"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35dbb120-4063-4438-b327-862d76ddd74c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "e0b454b2-63c7-45d4-afd9-edc5a6fea09c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9d80bdd-bf58-4f2d-b4df-e8aa5bec034d",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccdaae6c-edf2-4131-9ae2-07db8cd248e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07374841-7af2-44e8-a934-59aa01219b49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a162ddd-f003-4dc6-8757-5f69d2e58ce2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "09fc8ba3-b72e-4d70-8652-f5ee6c572b7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cda63f09-30a6-4ee4-94a2-b17d16a35e9e",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa73e2dd-01da-4554-b5c7-1c0ea65e15c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fa533b3-75ee-4275-b3d8-7e180c590f18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b52fa23-d701-4a18-bc9a-dc57944bdf63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9e779ad-d43c-4e99-bdd6-d81ddc981454"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00589614-5b00-482e-ba8b-72d60067178d",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1abe57a5-0d80-4521-863c-108da458e3b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bb68107-e288-4914-bec6-4d4a41afbf76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aa13a63-7024-40a8-a394-d44e03214373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "21bb78b1-c10c-45e3-ab69-6fa8289ae076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99864e7e-a2a6-4ec0-8be1-3e08f50be4f1",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b8457e9-2674-4a1b-ad1c-d746aa9d8a1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b0b76ff-0ef3-43d5-8c96-2065d6010633"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d6bb1bb-5cc6-455f-af05-559b328781bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7237cd89-95cc-495f-93f0-1d819a094f07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95ca11d9-ed13-4614-88c6-7e0b6441d752",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1bf6e9a-e1f6-441c-bcfd-3571ddae75b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "090af4dd-5cfb-40b6-9140-237516784205"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae4907f0-324f-44bc-a502-b065ac706a03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "25d616df-ed9b-45d5-bb87-93d74396334a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31505eeb-dd45-444b-8ce2-55e6c89ad7db",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9836bb0-8e63-4141-a248-9fe3a9ddf71d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a31d74b7-1c65-4086-921d-d627763c5147"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14cec0e4-39f7-43f0-a623-5cd18b03a704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a3220c2f-ff0b-4d08-a577-9969b7e81382"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a326cad-0087-43e5-826e-9d83804cfc8c",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab2e8727-c69d-4186-becb-80aea3b54b22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19e4604d-cc08-4e45-a487-62c99e7a537b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6efea518-b29a-4c94-9897-d9bb86949030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "67226095-ff1e-47c2-9577-16a3cfab6e92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a7fbb40-1e67-4876-bafa-272d244cb89e",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ba95ce1-1a95-4c1a-992d-c037186fd530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c325caab-45d3-4a1f-b086-6aa70566bc29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35c8d224-cea0-4b63-8196-291b3f4bf3f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "7fc4a1ed-4dd9-4762-9444-d3c81ff9806f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46319bf2-4e42-4fe5-b5fe-22f048b8b867",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8551a88-5ff4-42bf-b1e3-a014b1e75a8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f0bf26b-98b4-4ad9-b232-c7237a0ce2ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "715c8330-1c90-46d8-b857-50728dd2412e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "54c6ac92-f9a5-4e69-8869-fc021c7a994e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5b463dc-a0c2-4e65-b2c5-7133a0f054fa",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1da1b4c-710c-44ed-b405-0661b42fbb92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a756b649-d370-4530-801d-cbcec02e2666"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fe7be49-c9e5-46fd-8f15-5a1dd42f7b77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5000c81-2de8-46c3-8e17-abbc2b1651b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47404dff-bb44-4319-92da-d287951d3001",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eed20457-ce69-4d4b-8c88-ffeee65facc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fc893bc-31c6-4b6d-bf82-f3ddc96e2746"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6e0ca24-ef98-4e99-a73a-0a54defcc9f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "20fba43c-c2ad-4a0e-8c0a-db477f63a3ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4ab1dae-b267-4ecd-ad4d-913c1865f589",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50b16f73-2521-4338-92f5-b5c6583317fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "921c1df6-b1e2-4649-9162-70ff4bb108be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05293cd7-0eb3-444e-a94d-28e07fce40a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "588fa713-c242-40d1-b017-99dd6674449e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "162c58c7-639b-4b09-b850-1c3a2e0dced1",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aff4a7f3-2f87-4d57-ba24-d263d3c5d502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a1d340a-735d-40f7-a01f-ea5bd6089dad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cd45a84-d2a0-463d-bdef-982f8170142e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "c06cfeb4-6ce8-4663-a809-e3b57644e2bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14ea9b50-9e61-4e9b-ab59-962eaec0d0ff",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ed60482-6c27-4c8c-bb41-b65777221aec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b24a8bfc-b8a4-4689-b5c8-31b19ec9a085"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8132b2da-90ba-44d1-b6fb-48846e1ece49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "da39c8d9-1df3-4b78-aed6-a70adbd7f291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17934dfb-5b47-4bfe-8426-94548c02aedc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0a962e3-88b3-43ed-9c24-71c0c8195447",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07dfb88f-53ac-4984-bcf8-19cf1cc541e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a3eafc2-b8f0-4815-ba7e-83f09ed4d937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "36b79392-2207-43c5-b486-8e5ab939524d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e34639af-dca4-4032-a3e4-17efae210d59",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29a38c1b-490b-4ae0-a576-f39d4986283b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dda1c77f-8171-4c48-baea-5cbb32cf50ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53f546b4-f20d-43e5-b7dd-b092ba71e1ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ddf575a7-c778-454a-8b66-dc79c2728b69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a280d33-49da-455a-bb39-288272bb6146",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7371cec0-20cf-49ed-aef4-4f485608cd95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf2856a9-be04-4e84-86d9-fe261f0e750c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e43761a-d66a-462a-a8e0-1639ff0f4d10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1e9199e2-1e57-4fa2-92d3-cb8d4db52bed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "205c5596-0dfb-4ade-9100-ec316c012e85",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ef07e31-2ca0-420e-8b2b-ec96f4dfb83b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65ca29c8-47ca-4d5a-8352-29628ab973b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3376f219-513b-456c-b17c-cd8770be3487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d6a7bd28-625a-4687-98c6-041d88f44c06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d889afee-7df4-4d3f-ae85-d66c6d1bf418",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12fd01ee-3b94-4a3d-8fb1-15d9917e5274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e923288-429c-417e-85e2-8456fd57a0cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dfe89a7-007c-4176-aa00-e1cf2b8fce5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "536e608c-1402-42ea-bf95-ba7efef8742c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f22388a8-2032-4a3c-b651-120b42811a70",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0acc9757-d241-45c4-bb09-a0467f3b980c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c5d160f-6dbb-4f0b-9b4d-2893becb6282"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "062a3e78-5caa-462d-a881-48ab8380ea46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c270c1fd-baad-422e-9ed6-dcb7078a914b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bc47f0c-39e9-45a1-9f14-163405ed6a74",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76ad33f0-362a-4674-9780-16eafa384bc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c7b9f93-512f-4650-86ae-b762b04952fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aa5b565-16e4-4084-b59b-19d3e2d65138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "81a50df3-fcd0-4879-9b08-1824898283cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0b724d2-6304-4a98-b522-26da031b5ed2",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e149f55-ed36-46ec-ad33-946aa90e9909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5896eb96-a3c6-4c39-861a-28a503c5be2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9032c9cb-f4d0-4d44-b3e7-a654e64582d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cfca57ff-17a6-4f99-b352-d2dc928481fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36a43c8d-66ac-4901-88e5-7e965d9bc43e",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7751bd3f-4bb0-4bfd-83f6-bcec002fd52c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95e35f7a-c19c-42af-988c-e71c9281b49e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf3b01f9-cef8-4d70-bf91-5c7dc51219ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2bea7d4-c774-45fb-a67d-108b18d51905"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70e8cda7-b113-4833-8b5a-f259632f7b8a",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73d7ac0e-1042-4aa6-9862-23ad59c87c22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d2a5d1b-f6b3-499f-a760-bcf8f360edea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9b81d5d-2fd0-482b-9aae-a1dbb7218793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e0b062c3-659a-477b-b317-6d921d894ae7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de13184d-a0f0-476a-bba0-ebce6650d3f4",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7ff51d3-15da-4253-8308-69d7b8e10dbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "094c36a8-655f-4d5a-8199-8c188668e52e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "387fabe3-b30d-4524-b4ee-fce309460ffd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "34acc474-80c9-4b67-9ff9-fd0c50062163"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdc8f9c8-d343-4e50-95a5-c8787bd796c2",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "536d2607-d1fc-4670-b695-6f66e0a8a7b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "905df467-3ac4-4cae-86c1-c89982318ca2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d3145b2-aa7c-4b1f-a5fd-a8e45ed729ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd498228-1321-4142-9f0c-ea1d2da15289"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d54efde1-7ad1-469f-a3f8-92db84a7f269",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35ca7b92-8997-469e-828a-dbfa7a567a2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ba79743-84df-49a2-92e6-d901c62d8e0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c6e5fa7-69ae-44e4-8a4b-6dcf2e14c661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a55bb5f1-0f21-4df0-affb-e2fe72b0487b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b27bfa4-606f-40a7-be4b-c57e23aef3f0",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65f3446d-3172-4e2b-ae5d-f900f7b4979e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "057b74bc-19f0-4e8b-a511-90583ecb7279"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3990a9c-65ea-4710-a651-4d074dcca65e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a4d5c7d-e2b0-45c7-894e-a55f58097c88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c27a11f0-2bc6-4085-a4ad-a4cf4347440e",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6460f426-ad5d-47d6-a600-118b57902f34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b391265e-a44c-4cde-850d-238a690c70e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20d325e1-5e7a-4015-8782-e5675f09b9c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0375b72-b3e5-46f0-afb6-75e436220a80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9f6fd82-18ac-4581-86d1-ed7116dd4d40",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56162fba-7294-4603-9cd4-b6a34f22e894",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70505b5c-68e2-4592-b6c4-99fe2d84ff6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05225b2b-8e6d-4fed-b149-cab94aaf6458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d45f0d56-132f-4f23-8d73-68333755f222"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d16fef9-3595-4f22-86a0-60b9f73b45db",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a945a93-8560-4361-a831-10d50a3910f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "892b511e-c565-4432-9005-ac20baada170"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e88f0bf-9ea8-4941-a9c2-212a010bc128",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d8f32d93-e9ff-4e86-9ac2-cb0e8e4ecac5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be27245e-6d8e-40bc-b27b-96ea341bddc2",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa961999-2365-40a9-8e7a-375f458db041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9737e93c-1cb8-4f81-aaf5-d97280a8248a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d4e3c91-152a-4373-b76a-70031f4d2896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "53506c8b-da29-4fa7-82c1-554db08664cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb1c3da9-dc26-4df3-89c2-a8004c5b0c67",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e73f0e01-3821-41cd-94ac-d2317d532706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7ab0a62-17b7-4a22-b7f3-3b3951ac33bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7f119b1-c0ea-4677-a4ed-b80b9cdfb5c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "deb89256-d9fe-4e9a-977f-35f06b79f396"
                        }
                      }
                    ]
                  },
                  {
                    "id": "106854eb-a314-414a-9f0b-a7860097cb8d",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5d9f44b-e217-45ab-98d8-959136c1acd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bf2f5d7-a112-4fa4-bb74-6e60b3bcb1c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b525a46-7c4a-492e-a16e-834b0e7a2b96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "036cab30-652e-44d7-9aa3-217c8033765a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "048a28fa-2b6f-4134-879f-d8d3276cc947",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a1416ee-4032-47a4-b5f4-271ac8000be4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "717224ac-ce32-412a-93ee-379b4cfa107d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8de880b7-9f01-4ec8-a536-98d4c9ce3ed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c6cbc49-8f57-49c6-8118-e5e8bf5fa4e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "474757e3-7ff1-418d-b982-f962fb627dc4",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f478f80e-27fe-4026-a849-47d662283e38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5560ab6-e265-4f3a-a963-39e9b7a7fa6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "741fb363-5698-405a-a88f-44b5425b3548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0bca0774-e6fb-413f-a049-394e504744f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d625937c-2f4f-4726-8586-1e3c2667c6e6",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d678fbd2-250a-476c-8864-ab974b9b35fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9edad1c4-3e15-44f3-a063-079e07bd037f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4447e9d1-aa30-4261-a962-5c5d7516b30a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4b8223b5-c977-4fb6-8288-04d8b2e20a50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e73754f-ebaf-40a2-8fd2-408b6470d6ae",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00e73717-ed6a-431a-84a3-69a4cee91e12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa906a81-eb34-4fef-943f-63dc57a32870"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01dfb6ef-bf98-4a68-a519-a77c9b581e3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a2b40d1-a448-46de-930c-5df2ffb76e39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f389751-3433-4b7d-8477-cd67b108fa30",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbbecee8-d161-4f0b-b786-1ee77d7e072d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9190835b-afb2-4db0-a387-e761ee057a3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c83a4f99-f2b5-4403-b448-649b94773131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1373276e-9328-462f-92ea-7afac7ed8511"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3b2c190-1807-42fc-8fe6-60b81d98aa6c",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7099fc95-aca2-49fc-866e-b0ecb2afca5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3b71d9b-b8b0-4a71-af00-9edc33de5928"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e15c0cae-de3d-41bb-8fa3-da777ca3cabe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6178dec5-4395-4982-8541-25f722e682b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "725ba465-1eaf-455c-a5ab-7f89042fc2cf",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a580e2d-2230-4841-97b4-d82b2104b08c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c2b9bf6-bd36-4403-a2ed-55a637d9e54c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8288c184-1163-43f6-ab6a-206e03ac0632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2770032-56b1-47a8-901d-e71d4289dd8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3af7a209-c5c8-4fa9-b136-13d5f9e2d0f7",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "740959dc-e776-433c-b69f-57e4a5e8b59e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbe6a119-0aab-4e87-b78b-76b87eb27ee6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06fb7897-ef64-4313-9f07-f73ba4fecfd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "377f5e4f-1a79-4333-9c68-bd0b766d8841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "004fb750-c0bb-4099-9082-2fe8f0eee87d",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1d06c17-d248-4539-a939-eaac820e1d52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "513f3263-babd-4fc0-bf4a-a0a2d27b66a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83383189-f8bd-4667-bf7a-bbeae74dc95b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "98faf2ef-c2ea-472f-8144-706b207d9d26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9628f0d-5e47-490b-bc6e-9b8011dc4428",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cd116aa-fbdc-49d8-9c21-f202146df639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90ee1f61-a4ce-459b-bf3b-78a12ac42a7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc7b82c6-21ee-4198-b44c-33dbce7aec39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "641b6c10-895a-4ec5-9bf5-73a40a16a1dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce40bd19-41d6-430b-948c-04ab7b31fba7",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "708d2153-b854-42b6-91af-e0fadd8b2bfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20ff26c5-c7df-4639-bc0a-9738f8352f57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18552b53-768a-4987-b053-0ddddb386e77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3532514c-eb7d-46fd-86a8-c46dfd86c003"
                        }
                      }
                    ]
                  },
                  {
                    "id": "735b85b3-10d5-4607-8434-ef6863da44e0",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29301a44-775f-460b-a45b-e7c6e316f41c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbfd85f3-765c-4b9e-bfb7-4cb936ba2329"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc0f467a-af5a-4fbb-8c0f-073d88cde499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b094ef83-d571-4477-8bcd-95b4a8661f94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71b2bd49-b02f-4a62-af1e-1c4d9ccac994",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f877db8e-c21c-4a2e-b80f-45a268731ece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ff58ae3-e335-453c-9459-3da122d1c521"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73602b99-486c-412e-8955-ba1e567f6eb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a8032584-953a-42c6-88b1-940da42ec908"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5db501ca-b74b-444a-8d58-a62a81e4e375",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47cb3038-87bc-4574-9587-99f5bdaad1dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad92ee3e-baed-4768-9ac8-912880e9f7c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f0a56f6-ea18-40f0-ad49-d3305cb8ae86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "4694016d-d1cc-467a-af09-efe83587fcf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8726e799-c62f-466c-af80-d27595c04ed3",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c45693e9-b6f4-4bdc-88f0-fe5813431488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "61f3df43-df47-49dd-a891-0ca307b0c612"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5186577-0c93-46e1-98c3-531ca56088e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ef5094f-e1f9-44cc-9f83-1b4d47eeca2e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "27d2d580-f274-4474-ae9b-baff3cd58b8e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "07e082c6-bdae-4d18-a1cb-9d8625b438ae",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1de4ea7f-602e-4028-9ad4-c558fb7e5385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7e82d0a5-f517-4233-a027-6086fe1bb2d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1592a72-9e11-4ba3-8576-89046d5ff2cc",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "d8adb723-6beb-4693-982e-c0b3c2edd59e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d9b1a69-5af4-4ab3-96fd-25e7db471816",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f0c0b95-e92d-414b-980b-b25cf9a96868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cc488f52-b782-4dc3-a533-23dfe8fe4a78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "430379f7-cacf-427c-8733-f6ef193a8f2f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "2ead7e1e-2d3d-4038-bd81-593ae8318a02"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6f57c2d2-0df2-444d-88c0-c198dd66342d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fef5176c-1562-49ea-9fba-1304742d4b33"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bd89a9ca-12e2-47c4-b856-d32eb210e50b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8f6e4850-bcf2-4c0b-88f0-0fb1efe49792"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "45989c40-2b8b-4b2e-8c0e-7bccf3760e44",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b1e262b4-7fc4-419d-b431-c89d0a5ff875"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "36312409-b3a0-460e-8f6f-81bdcea0cc7c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ca7d5f4e-a8fb-43ef-a6b0-8476a4650c08"
                }
              }
            ]
          },
          {
            "id": "c8d7a92b-0f60-4f63-9065-b6a23942aae9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "66928808-c792-4d47-8ecf-2179c1a59c6d",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ec183d3f-f42f-4ccc-a636-e6f39f7f456d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json();",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0fb7dcdf-800c-4ae9-babb-b57879dab32c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e13974ae-306e-4798-b56f-37ac4b7712ef",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "02669483-13ca-4618-8489-c8459db652db"
                    }
                  }
                ]
              },
              {
                "id": "87fa74a2-9782-4557-b517-01f704ad10a5",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2de0373c-6d85-4fbf-a1f1-73358345345e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "62adf1f8-6ed0-4e38-a14b-50533b784290"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4a255f08-a13e-4df0-bac9-81683a9bf14d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "728ab8a6-3331-48ed-bc5e-f9d6b9508883"
                    }
                  }
                ]
              },
              {
                "id": "d6ec1298-d6d5-474e-b45d-5db6cbf6ecce",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2c04b5c9-89f6-4b22-bb7d-280f58675bfa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9cf151a5-9048-47cd-aad1-d037e15f74f1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "86bc37ae-3b0f-497a-beb8-8c9bcc75cf5b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4438baa7-349c-4085-99e7-c39ddfc69189"
                    }
                  }
                ]
              },
              {
                "id": "427d4a3d-c972-4f7e-b7ed-a35c67e18982",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "11956798-f853-40a1-8d1d-cf1bb00ee1ed",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0b09d43e-2a66-49fe-b974-8e7ca274bea1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "93100ef6-657c-4eca-8933-df73e1c3dd39",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "4beda3b9-d96a-4736-94a5-c15e5631aec7"
                    }
                  }
                ]
              },
              {
                "id": "1f98c826-60fe-43df-8239-46f8ccd2227e",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "65d7858a-3cc5-473b-9516-8e511fefb986",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1a47d859-ed75-4f86-9237-bed65a50b905"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3b71a34c-0e78-4375-94fe-43ace4f22aa0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "b5f9606e-8e8d-498a-be2f-e115a9c1179a"
                    }
                  }
                ]
              },
              {
                "id": "0a7fc917-b3af-4f0e-bc6c-03baf703ed91",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dfeb4d46-e3d6-490f-b0d4-f65c16ceafb2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "30ef9636-5d73-4a66-abf2-cc5a595cdf48"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7c682c8a-1531-402f-a024-5ac2f4d0ba2f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "361bb1ed-987d-4373-a8ee-d401bad5ebfe"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "638846ff-c4f8-47ac-8a68-898af6013902",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "291e2eb2-ac08-46f9-b912-f3a873bddd36"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bd401932-90f1-4139-af46-2a5c23f0e9e6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bf2a9629-c9d7-4d04-951f-0b74f576a910"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d0548e2d-15d9-4b2f-bdb2-5b466242ba81",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "2c540f96-62f9-4ef3-8f75-25462e9d7757"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "129fcf37-6b78-449e-841b-d4186aaae9e5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bd84d9b2-bf23-4836-825f-80e84bc913d9"
            }
          }
        ]
      },
      {
        "id": "fc17bda0-4d6c-434c-b1f9-a1139547e298",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "3600caa9-cefb-4b8b-b6a6-c9b9689d00b0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f4d17f4c-1168-407f-84e7-18ec5c9d1d9a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "138c3ba9-1d03-43c0-9058-01e3c1942def",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81317f1c-cdcf-4455-8da3-17a7e7e8050f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9728a088-0cd7-4555-ba04-57629dcfc38c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fac3db65-2a0e-4b89-950c-d559eacda2cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "60f815f2-c53e-4cbc-8e98-86e121a65fc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "478485f1-2d5f-4714-bcf7-edb8b3c92db6",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1879fde-e1b4-4af8-a354-a611b81ca89f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a340f5e-c246-4c8a-b601-c57d8945a903"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10a3ca1d-d119-4296-9f99-ec920c03b9d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c337ec9-2acd-4353-822f-1141269ff8a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2468b74a-6deb-47e0-bd6a-f555fe55e49b",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc96a09c-935e-47ad-9112-d957eef5aac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb453a55-72d3-4859-a3d2-93730435ee86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e489a491-8e93-4d8c-984b-bf18b7cfefc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec7c52bc-c778-4bad-9f78-cc8b3e6dd2c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eb9b267-b919-42ee-b783-3e6e2f185cb1",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae97958b-6833-42fd-b226-58194b22972f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "925695be-4a86-46d8-90fc-133111103f94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ca8a261-1f46-4c8c-9c0c-4946a70c42c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "81e6c7dc-0d07-429e-ad0f-2d0b43cf50ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dab506d0-ddf8-4089-931a-cf502288937a",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7dc4800-b101-4342-bcbd-d513f90f65b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3509abe-465b-4254-8c0a-981ac0a0eccf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ec97a91-9cad-4bca-80a0-32d06287429f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "55b43524-a1e3-4b75-9c1b-2121c32f22eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d5d4448-b5b1-452f-ab1b-6ad413cc0992",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8efd42b7-c35c-4a98-bf3b-06c6f95dbbce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "400a7097-8494-4c9e-b943-c12683c6dd88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b25d7eb-ae21-4952-8537-0a1e2fb85775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "956e9496-751b-4d60-b417-d3a6c16394f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6092f36-5026-490e-ab55-ec8ca430f480",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20c56876-d54b-47cf-a6f3-889ba43af82f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdd8851d-8ea5-4c2f-8f35-d197b8cef262"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e681690c-bae2-42b6-b114-abdcf1dc9d1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "9853654d-5a4c-4498-8f73-7f01bb3839e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f27ca68-cc33-4fc7-a3e7-782eb87867c7",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2031b80a-8906-4db8-a0ba-5578d81e0136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc7c5deb-b3dd-4e1a-8803-73d343158f63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86177cf5-581f-4cf4-9d6e-9d4b3bd2bc0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4a0cdd5-94ef-46e6-a9a1-fa2efaddf8dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c83bbc15-8699-4c2d-8789-d0a32232dc22",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1004cfa-b71d-4619-9439-5a89c60f40e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65d77afd-e92d-42c0-8317-4f7ccf1e0f71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b15d4eb-a5bd-4bc5-a3b5-ef39980a49f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7af9dfe6-3ebb-4c5f-8892-fe3132474bd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f3e48aa-cd97-4b3d-9a4a-779a2ba0d744",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69f464d1-09f0-4f3b-a96c-b3e3226e1b52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d724da33-4d31-451e-b8de-0ad06f6af9c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26467c96-78dc-4ece-94cb-2f08f1b77370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "35493b26-cc91-4bbc-b395-90d812922147"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8bf5d8e-dd24-4aa9-b555-cd71017a246c",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3acf1b0-3e1f-49f3-bac3-59e4511a325d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "400d4de9-cab0-4699-b5dc-2cdd97fd8a54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58ef052f-b3c3-4536-b4f0-553165a18c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "9c8bd05a-7d6d-4fcd-b39a-94671cbe3cea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f52ce7f-1086-471f-b086-2eb1e613b193",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c33070f8-3c9a-4381-ba8a-9ad27e3ade2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72e7db5c-02c2-4eea-8ef5-bc70f15aeaf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aec2012-2cdf-4d93-97f4-b85f165d138e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "63135514-aeb9-4fb8-9778-f412218776e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70b2b9b2-3e67-4eef-a687-67da40bb55fc",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f111465-f083-4895-8cdc-075933da99ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ebe1fb4-02a6-47d2-95e9-8ca8b5032f20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "662f4a74-2bc9-4858-9eb2-f26bacf9b748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9101860-e41a-4ccc-8df5-05cba8a87f22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06ebeb8d-a785-48de-8285-885ce7878e75",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a911f3c-21f9-47b6-97cd-9b3c69627465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "107efea6-eec8-4ba9-9e69-46e8824a8f38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a273b0b-34eb-46e9-9e25-075eecd50916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "79d33e65-19c2-4c67-91df-2daaeb9f514f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37f06d22-f8a2-4246-a533-08414a009a49",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e522f01-0cfd-4d77-95d2-d220b3c4f744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ef6f263-c124-40f4-996a-d09e134f5b8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c04d0403-1ed7-4b4a-8811-866b7849cc0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b23a9244-47f0-46bb-9dbb-69b6affce925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e53076e-c7a9-4b5c-a0e1-9bb3ba32c353",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0695ac5e-e132-41e6-8e2b-81f689dc4968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a37959e-1213-45b6-8a7c-0e5d50156bb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85fe6001-1956-46a6-8990-5afd415ed3a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "2195ecf7-4384-494e-be27-6691e21232ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cac39b6-5c8a-4904-9f3f-6fcd06997611",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2a5ee48-715a-4d89-a668-75a67e9f6edf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2851eac-de19-4467-8ecc-59227c6ff38a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92dcb2d3-683e-4b94-88ea-bcbcc4a4ca71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "fec2f07a-7394-4a31-a993-b0e7e2ba1029"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2be13d2-f320-4968-adf5-8acb2bafd636",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "255324c9-3f9f-4b93-9738-34b32a1d1e0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb57eb20-4236-4e18-a82e-bd11ff58c195"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96b23c1d-3d74-4a34-96c9-5983569e9247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "604081c7-5bb8-4757-945b-a6ac329667da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c71866e6-0599-4c01-bcd3-561a67e3385f",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abc596fe-0567-40e0-b0d2-99139246e052",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99b806c5-c6db-4a14-bbc7-022931ae5292"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a7db5a9-bc87-4dd3-9d56-a4e44186a458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5648167a-192b-4858-a8c6-d4ab3e52636b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f1704a1-ebea-41ef-979e-13be0904bc05",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adfe4e00-df42-470d-8dbb-df75c4b3f1c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7c867ea-bf8d-4601-b3c6-786a44c39c28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93dc07c0-9a86-49af-8a39-27ab4a4e70f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f91293f-d87c-47dd-9fb5-94a1d85065ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1950bf83-2e4e-4971-8b82-b1848a6854ca",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f124cf36-91d2-4e82-b267-6455cbcb22e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f53dcd4b-65d2-48ba-9fc4-8bc3f52f2554"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eba04aa5-8af6-4663-a24f-3266618c4f3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6eecd338-ad68-4e80-b73e-7d52217fb0b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3412e3b-7544-4959-863b-8c08de96c901",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c5fe0d4-d529-47d3-845a-6d242470c32f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ec3a2a9-c50f-4694-a440-1af245f78ebc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee93ac50-451b-4442-9ae3-cef45e86b4ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc212b23-976a-491e-bfaa-62d896f4dd15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fea75d9-c30c-41ab-b273-5f12438ac258",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d58f791-81f0-4dff-9817-32cbc79d32d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "526f32da-353f-4e20-bad8-7e99620e9062"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e63e2f3c-d65e-450a-b160-283363abbcd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "150343eb-01bf-4ab6-b869-303377263d01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f54fee28-ed7b-481a-9b9b-a242c4428d1d",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96a81c9d-d055-45e4-b7f2-51f319441b2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e60e1231-ddbf-4cb5-a3f5-0e244e9f4430"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e1acaa7-92e9-4b9e-9994-fbf3e8728c3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ed32f80-9010-42f1-a924-48a77f5a315e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80d86cf8-f09d-4d6c-a430-0517eda7614a",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d883acfa-e41c-4461-9ac4-4d8909aa4334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13e033be-b4f6-4f5c-9c64-0b323ec2b1ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cec4f50-64f9-4bb4-90d4-5ea76aac67c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7d1fb7a-eda5-4ca9-addd-df45db280a4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac419c74-63b9-41b5-889c-31c797ff78d1",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be25fc5d-b74a-4707-9471-a7223223d90f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdc30ce7-a338-4fe9-b886-3206b94faca3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b954728b-4861-4bdc-9c5e-bcfb370f114d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f045cd9c-186f-4caa-b49f-bd7cc9f6b800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81287482-93ff-448c-a102-25de81dd9bce",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60853c93-7079-42ff-bf26-5117a193e455",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f33bd95-cd2b-4060-859c-19d238d5cc0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "063033dc-5bf9-461b-aeeb-dd52fa7828cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a290567-e1d6-4b7b-871d-bdbcbecbeab8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10c7f7ce-23da-448f-a091-55eac4c4bbbf",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e4d9bc1-9bdf-4fda-b734-9337892e66e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbc6f394-6152-4ffd-baa4-48b2afb4894c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d43ad8c9-316a-4434-ab48-7f78eb8872a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e861689f-05b0-4f30-84ba-876817937346"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebd43179-29d7-4bd2-99f8-1d934f788e11",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7602ff8-4cc5-4214-b063-6707784208bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d37eb61-bc47-4556-baf0-2130ca206185"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ae27b68-bd6b-44a1-87d0-eb25c54515eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d169215a-e15b-4844-a297-407594afe8a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92e04d4c-7fb2-4c43-83af-2829b73b6a18",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8be22c3d-06ed-4066-adf8-7dd7edb9cdd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2f95a36-a41c-404b-9d31-96aa8cf331c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb94966a-c82a-40a7-a46b-700ea6deb76e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e40e830c-a76c-40df-be0f-c4cbae7ab7ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7dba53c-f79b-4490-ae0d-16418f3ffb4b",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "276306f5-3e86-4f0c-be0b-579d8b73ad9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b0414a4-9b21-4cea-832d-a5fb55eff3a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75586ef0-19d0-4397-8995-fe8956074ffd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b90599c-6c5a-4860-bebf-e6de30275804"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11ac4246-40a5-47e5-8632-46cadeea0c18",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13523b02-bc12-4078-ad42-e03638ac3340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af17c62b-82bf-4069-b4f4-3b87cb9f4762"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98ad7d06-5271-4f05-86da-6769a2c183ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "757effd6-4a03-4cfd-b4fc-d4f259f3af1d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d44f88f3-1531-4ec2-95ef-38abf312b153",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "310c37fb-6e97-4a97-919a-899712235c2f",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a29e329e-d2ba-4cfd-ac12-5512ab500834",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2120ad97-3b5d-46d8-a7ce-8d862b8beb9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2fced57-b69a-498c-9ad3-737734459517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a2c61fa6-8df3-4b74-814a-cb6b44d5bf93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "979b94d7-e475-4c51-939e-209ff9621d75",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e416ab6-f800-44a9-a243-11fd811b7e0e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "8a91e650-2961-489f-a7b5-837bf3b83f1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09510829-398c-4666-b6e8-412b81448a27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4134fa02-73e0-448d-a1c0-1e2fe1aa0e62"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eee7e5e0-a989-49d3-a163-f6c6827812a9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "62df4031-f0bb-440d-892a-0a43e39513ce"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fbc047b3-774b-43d5-b666-36af59f623df",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "74610160-f4eb-4b16-90e1-b105208a4e9d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b174f443-3e49-436c-835d-aaf505bba3d9",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4e2cc8cf-4cea-4bd8-b78e-8dd2d0a58e09"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fe978a74-1954-451a-9a4a-5d05499050de",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0b42ab57-dfcd-45dc-a9f2-9bc9345b8d4b"
            }
          }
        ]
      },
      {
        "id": "3f787876-254f-4f1e-8dce-4fd652d885c5",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "f9e303c8-f36d-41f3-902b-f4fc0ad8d2b6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "903007bd-54e5-4df2-b1d1-c57f4d4ba03a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d78df346-f46a-4935-bafe-3ab5bc813415",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02be02b7-5378-4bdc-a710-a7a11cbd0907",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d5c1de2-9820-4644-ad61-1638f6efdcfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdb6f726-c81f-4f4a-9183-a1f0fe6a5cef",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b2cd836-682a-4fbe-b05a-247bee2625b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "717540fc-be0d-4f9d-a1cf-69d88cc4d73e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28c5afbe-51e7-4e71-b14e-eab1820b66bb",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "609f3776-e9fa-47f4-bafd-499c31c334c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "933196bc-aca5-473d-bf2d-93e074265297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f9fdb58-6d6c-4915-86f7-f1a75e21196a",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a6bf8a-abd7-47ab-8ad3-fcd58bf65017",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05b200fb-6eb3-4efc-a014-30695bcaa4b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4218f0f8-e176-4897-8841-9966975f7d1e",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea7de2ab-e8bb-4109-9d44-473ba1eef341",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a552456-df49-4fca-b9d1-0fb9f63fb7d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5c77dfe-35f4-4554-8121-1a4a05d04465",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f051569-e21a-4227-a0ac-b8f0ef8ed0a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9d54588-8aee-4061-9013-3f3c6533442d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8a3883e-1c3c-4c17-99eb-c2c265e79dde",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96287198-0351-4dd0-83eb-866030b44ea9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51dd8a4f-c8c9-4ad7-85c7-ad3590667b01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5eefd5d-2ccf-4caf-aa5a-bfc02b90a5b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23a585d1-0190-4ee6-b1cd-67a8a5fd918e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77329a5e-d29b-42d8-b9db-f4d4cb76899f",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "973963d5-ed25-4937-9641-99c0916c8d16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52d6e981-3445-4562-b098-ab3ea0c9c40c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd12d8b5-b6e0-43d2-a0c3-925573d77abf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a83728f5-1496-491c-8a26-2baeee960bdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb675c35-2e8b-4241-8861-d2467f1bd554",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "247285dc-0d29-41ac-90d0-a707232985ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d15e96fc-abb2-45d0-ab38-8fd7e76fffab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2a825f1-d9ab-4f9c-811d-e8b89f203733",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eea36a76-27f4-4f1b-89ef-940506faa18e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c27dac1b-1bba-4fad-ad62-b2eead61998a",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba37b1d1-1504-4834-9b77-d827f2219193",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84cb16a1-2f81-45ef-a680-55b7b03ebac2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bcc9121-a72c-45a6-93f7-1c43ec6a5040",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1eee0e25-fcb2-4cc8-8d89-c9afe85a784a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03974331-90cf-4d26-b3a6-fd31ed12cec4",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "430880ef-0c14-4602-9d56-de50e5546051",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5c18688-9e89-431b-878c-ba548a41ef68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d732a15f-84fb-4091-bb0b-d6ec00d32ee6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c747e14-6374-43b7-84a7-961a72f78459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ee2d1a5-7644-43cf-b915-39273a37d880",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac814654-4414-4ce1-9ae5-bd6f343f02ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "400bff39-da2b-44f2-94e6-8353800dc146"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efdd1135-bfeb-4048-a190-e05640c681a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93a35931-a7e7-48df-bebb-e1595305ca1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b47be9d-bd1f-42bc-8db9-06e2f5282a0d",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "167a7349-516d-475c-86ce-76817d0daf25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49fa6696-9a36-4221-aade-41e2f377cb50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfd5e766-62ce-4dcc-9fb3-16f1b2ef194e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1acb1e9d-d23c-4354-a639-13c14c46c196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ccf8689-4095-4826-8feb-382c2f095817",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f879815-5bb1-487d-808a-4e30417918e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5cafe036-e97d-4782-8a03-310b9effa567"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69eda8fe-3978-4924-92b3-dadadfc50b77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f17cd76-a8ca-4df0-aef8-d98aaef092be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a501379-0642-4bb9-8ee9-aa75cfbfb530",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4269c850-c6c6-4b89-8132-cff937640e79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59c829ec-3a36-4287-9e1a-4fb1610557ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b276059b-b36c-47be-9e47-c4d66de47a14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1ce6bea-2066-45bb-9929-d5a96cfba27b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e20c66b-d9fc-40ee-bbb1-8b85a2748ac7",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "945e521f-9e22-4e9c-a4ba-45fbcbe325f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0269a16-d5c2-46c5-82e6-645215a7e7bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "337531cf-cd87-49c4-bccb-1b6741714a84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1d788a1-4cb2-484e-8b2d-6d7a6c8e7b71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21590332-1ffa-4ef0-8159-ff687b15bc43",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e35bb47b-3ace-4449-a105-cf2a83fbed9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62e8f0c4-8a94-4bfd-bf73-42d1756faeac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6869ed24-8bde-4920-acfa-abfd4a0ab8b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c6ee45f-e823-4a3f-afe4-d664be4f8b96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8b6dd18-0d94-4b93-bcae-37de26297ee7",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24498dde-ad5d-49b8-a83a-c0ff94893981",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62df7a2d-2bed-4e2a-841f-366c65eb2cf7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65fdd207-25e2-40f4-b298-92b4dc2851f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dae20625-203d-4fe4-b37e-ac6eb04adc55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62a77caa-967d-4a01-8427-5a6488e23f22",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4d8c64b-5e68-4e16-a0dd-6d530c8767a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87a8026e-f0c6-4dec-9749-32bb90c4af94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29d31920-397b-4319-b41d-17ab809f0a7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e79581a7-8951-4508-8b51-ef71945b4add"
                        }
                      }
                    ]
                  },
                  {
                    "id": "706776b5-bf58-4004-9c18-856849bff803",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c7321fc-75f3-42be-a29a-b8eee11a44d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b060b2c-0666-4c8a-8674-9deeef289803"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efef3554-590b-4fef-96ad-d191de6ecd71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7b530f4-0e7a-4cdc-aa01-0e83ca1ca096"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d1081c8-5baa-4376-ab5d-541f0705a124",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3961c441-bab6-4c64-a417-6a6ebeaf9f98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5bd0b48-e221-46f1-b97e-020f27fd0796"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5dfefe1-ba53-456c-8160-32781b4378a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a756906-92b9-49d5-a2ef-7024c9f1f5c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10ca83aa-6153-481d-b174-dd2bfffd6d51",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cbfbfa0-4cf8-4bf0-a8fc-46a25b68178a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0cf0b2d-5b46-4fcf-b607-5f93aad2f895"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d3ede3b-8a1a-4acd-9c1a-a5cbb51a24ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3cdcf1c-5c65-40f6-8ba5-d3ade628f408"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91c9f69d-4b42-47b2-bfe7-a153e2b3855d",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90ace342-2457-4342-9860-750e9962dd0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a96cac42-b838-4087-b53d-2f8ad48705a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e32765e6-e351-4011-8a52-221f50d92953",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9253d466-aba8-42ef-9a8a-91e5ff680918"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09aa8c0f-efa7-436a-8aaa-c6d93717dc15",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "496f0c07-be34-4cc9-a70d-6906712f31a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3379ad5-f5c8-4dea-823a-0905780f93d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3be7f1b-b939-49cc-bf2d-a2b5d7adb4ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5befa968-86aa-4cbf-a452-929a05c61457"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b89f7ff6-3d9d-48be-9091-caceecb48d0a",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "320277ad-5dc0-46f8-a43d-1beb632cf84e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aca1b016-a0eb-4daf-9c7e-ba8d960df051"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b373c05-cd97-4c4e-9e9e-07d8d2ff60ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c7789f9-3c21-49ca-b420-9ed54201c462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efa04828-e6dc-4662-b9e6-a36d5a1f9a09",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "847c1725-8c56-4ee5-a8f1-73da0dab66e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b7dbb19-c0e1-4a00-9bc4-9a7b5753feef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95ab87bd-1958-475e-856a-0af3756703e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5536f734-5c9a-4122-b28e-00d5f9b8f2c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9f4ef5b-0301-45d7-bf7b-40f9147959d0",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac904754-a87d-404f-a01e-aa09e630db00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb41895b-6494-4c8f-bbf0-bf72833fede5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e30c9983-ee8b-4004-9255-724f7455cfbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82280ded-3369-476e-aaab-f474962f4c88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8796605-9385-4428-9f4c-477dccd66553",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "509c6f98-52e3-425a-841c-6607c19d8b78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7aae7812-9061-45ba-875d-fba857ae0132"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "901f11ca-3e03-4c00-b2a4-8cc1a97626b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dedff78-7900-46a6-bdda-6b678bf71aa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6b16bc9-204d-4124-9060-70864c63a57a",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee4e973c-0112-4710-a0ec-a741466c33f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f388082a-2ae8-481b-b318-73f4c80c7152"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83f2c582-975d-4286-9ea4-77f68d7ac747",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d23a1874-5553-4f29-ae79-99717f79c13a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed8750cc-a809-40e9-8619-25024c88e3c1",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87d29c86-c38d-4d27-ba98-270481123301",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c14faab-26e5-45a7-b2b1-7b588f0a7ebb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "135b1a93-2789-4d5f-8580-73037b71fc61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2520db99-b985-4999-8755-25d136fc2938"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b1f6ed5-d078-46c4-ad54-33c2e7f20e1f",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e2b1ae8-8dbc-45f2-a8ba-0a96ff9a5e4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d916b62-ca86-4ece-9bb9-b02087494900"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a143f436-031d-4f72-a4b3-d376a2f9f5e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "135ede98-48f0-4e02-8ab9-396ee4bae0da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d6e72c2-7565-4e5c-aa73-bb120fc4f75c",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41c47da4-05f7-46c8-bca5-5dc05bab3d84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3cb4fef9-b9b5-42aa-970a-a4613c949196"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00653382-a988-4615-93bf-f8f079c8392a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a63747e-384a-445d-86d6-22e8d2a8db89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03053e9b-fb27-41d9-a45f-e4d366a0a004",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f417aaa6-c3ac-41d2-9166-7fe374c4e680",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48cbcead-fde8-4857-a4e5-97fbdb2fc43a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "245f07b0-6414-41de-a6d9-6c62354ce953",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "779f1e28-f86a-400f-944e-7990a908ab13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "473b637e-86dd-4c3e-8efb-363b8e0f35c0",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "312a5e6b-d321-4885-bff3-f559574279c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a4dc884-c450-43c1-b5de-aa9011e4eed1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f8751b9-7c11-42c3-8221-64b11cd749f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca3d51ae-87d5-49d7-a88a-9a30707523a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ba99cc6-804c-4514-9000-e569d5fcafcb",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b75f0044-f68d-4215-a1c7-a0e92760da90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e684536-39bd-4afa-90df-e680cca5fee8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fd30fa5-b8f9-4f5d-806f-fbf723a89f1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4ec4821-5aef-4753-a405-039afea136a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "658ed9e8-9676-444f-90bb-251493d15241",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b30cd39c-cf0f-443b-972f-1430ce5a1c3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd769224-afc2-4ab3-bafe-fffa5cbcd806"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "202d9f5c-1a00-48b4-87c4-08876434e372",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00b020a6-94f1-4a90-af27-d6949108af86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0d24d5d-1fe8-43b1-888a-2926982c6b9e",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc50abef-e1aa-4401-9868-94fa0ca91ae8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "161e7b52-88dc-4b02-8ecb-41c87dcc854f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2019e7e-850a-43a7-9b67-2fc3f142052a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e97d3cad-d32b-40b1-bab8-9a30fea0ea58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dac704fd-ed47-4944-abb0-db73ab59771f",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fe7484a-0145-44cc-ab0c-277548cc433e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a68c2ef0-524d-44db-adce-f3b57a3ab77c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33d25d3d-cbd7-46ed-a4d1-5013cc8ab3f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4b73566-b57a-4820-96e5-be0975165c08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49404403-cbde-4cd6-848f-941ced0f025e",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63bc8006-a8a5-4476-bd80-8692cf0d01b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e52b923-aa0b-4b70-b9c0-e3537220f776"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b0a5318-546a-4254-892e-57f8ecbe822f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fab56e42-9458-4098-a9ee-36602223a6ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28fc8ec5-5097-466f-af12-eb2a1e202fd8",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2abb72e-ab28-43df-86d8-cdb3d41f6039",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fd09f2d-918f-4f0e-866e-c623215ca3e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09d4297a-1d9a-4e0a-ad3b-494a89c323af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "527a49a1-9854-45b2-a085-f09d4be6b33c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "967e4553-b8fc-4e42-b394-05f93ddc6201",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b994be96-bfab-44e7-a8f3-a2ab44023005",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51dfe614-f8e2-47ed-856c-d46af5f188a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b286c251-ffd3-4968-a66e-8444ca83edbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ec97190-c46b-4d49-9435-8646a182eb62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebc718a1-a69d-4243-b4d6-47f68a69b2d4",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c564abb1-1868-4e64-b476-f6cc5ab7b616",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cce8c3c-8224-4d1c-bcd4-453a351583f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e79548c-6540-40dc-af4e-dde00f02c538",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae8226b4-d4e3-4b5a-8ee5-1dc79fdfcd3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57de9e7c-61b8-49c8-bbcd-b4c7ab6b7fd7",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "268688dc-cfad-417f-b054-14527055a398",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06a728a9-6db3-4cd0-bfe3-86a31451a954"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6bdfc28-4118-4d95-b098-ec425b488cd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbc8aa89-9bf4-48c5-bdc5-c743fa7fa2fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9822924-f71e-4f23-8104-a6d58ea37158",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02e251ac-779d-4d6c-b186-f3a3baa76adf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3c44f7b-8e77-440f-81f3-e12e3eecf7db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "790f524e-72f0-480b-a08f-124a89459227",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4397ad3-b8db-41d9-abeb-861ef9ebf9e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7044cbf1-10b3-4fe0-8821-0055cc658405",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "276feaba-1b49-4e1a-bdea-490c1a416648",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df28e254-bd42-45d8-b3e5-5e960bd92c08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6c51703-4785-4e49-9cd4-9b53696625be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2efd111f-0c63-430e-a26c-e091c5b590a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31681e27-0f9f-4938-b1a1-6d58425e4a6a",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5f80636-b5b5-4c6f-95ca-acd45bcbefbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd24a931-6f2a-4a1c-92a5-7f65321376aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64cd792b-6275-4576-89e9-7bac8b5e9f75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a63788ca-9810-4961-b0c7-d29e090a9716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f28afb9-09b2-418b-9f6f-849908d8e58f",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "547b05ea-cd31-4d6a-9754-e46d34e2ff2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9da8140c-0ab2-44d7-8020-723258d62a4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfdfbddd-4447-48de-b6f5-ee2b9b871374",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c2af38e-4de1-4bea-b600-9f25b5024978"
                        }
                      }
                    ]
                  },
                  {
                    "id": "270d409c-9a0d-4481-acec-69d4f6b4027d",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2af922b-92fe-4994-8d62-98a91ad8bbf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13ed23b4-1836-4328-be68-33beadd14130"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56856591-4e95-4429-9ed9-d7eaf90f0bec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0907017e-02cf-4e7f-9d13-083ba0acba57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bb53b6b-fd94-4470-a925-3d76767b2345",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e91e9cc0-8a83-4f90-a883-064dc544d08d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71ab4ba0-5dcf-4941-8a32-f1bc92f9cb84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "658d840c-d65d-46ff-997f-0b9dc8422f6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19e141ab-6e43-4550-a85a-c8656ca87a83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cd3579a-d9e2-4ce2-9b08-7e0d1506af92",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16aba3c3-357a-483d-a2c2-66f9a52c6332",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb683deb-36ef-45f8-b655-6b713a5e1a6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f31410ec-33ec-4f54-946c-a944ecebb87f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58c05350-3be4-49fe-b8d0-475cda7edab8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa857edc-f84d-4242-826a-4805b7a59aca",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bd52d2b-eaac-4e0b-9ab7-1112f45fa7ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a84c1559-0ff7-462f-96f1-677f773a82f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49b5d3c8-234f-44fc-9b89-27878cd5e753",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3391de6-5942-4c70-8d5c-0bf7efd877f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a201ea9b-134a-4032-b61a-15979cabbecc",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11653dd8-b5c6-4545-8b3b-5fa2b8cc5214",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d054bed-1bc3-4ba5-9a2d-706fe4b48cec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47ff681a-a895-4d99-a6d8-3b7e012f52a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec691fe8-3b91-4992-80a8-c42b04bc81e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd139dfd-3174-4c91-939e-787897f453b0",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6def4795-04c3-414c-949d-b12f74ce44c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ed35c02-597f-405d-8966-4cd3fac5c818"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58674360-c5a6-4844-b350-672e9a3449ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87e4cd16-6774-42da-942f-d472f27c88fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e0d0535-d274-46eb-94b9-8cb280b2542d",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ccf4bef-9935-4a9e-b49e-8f16d05c6fdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "425b5d9d-a986-4719-b475-301afb234c68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49122660-3b6e-4555-8896-8d025755bb4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "472b6a02-494a-4b39-996c-07c4c372a9aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f7cfb6e-25db-4b19-8100-f39805a92ce7",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b0d9826-a9e1-4f4a-a063-1010996cd632",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d68a878-b020-4b9a-b4d0-794da8652307"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "511a80ab-87c3-4c4b-bc16-8d34b812f6a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "267be371-2d77-4b63-906c-6fce3d3e0dc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21b03883-bab4-4192-afd0-735f563fa70e",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39d71073-458b-4176-b007-193973e5e487",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc958a99-4022-4e49-bfb1-b56b189397df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cc7a3e8-5db2-43e0-a857-3d485a7391f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "122b462a-833e-4970-9976-3150728be914"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6f00488-46a3-46ad-b9c9-6f3572b6c3c6",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b06cd367-a41b-40c4-8cfa-af67b4a11c2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e31a876f-be6d-408b-abf9-c9e7a1e3bb3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f798525-cf6f-4804-8179-107185a7fc66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "344e356f-a6d7-43de-8bed-aba2847daa93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84e82c4f-0b5d-402c-8acf-3595df21a5cc",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b99632e-58a7-4410-9dbd-59b262200026",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27c55b44-78d8-4607-90e1-e0078a93ed36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff187100-a7c4-46fe-8e4c-e9d8c980b1fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfe57d73-3820-48f4-9faf-a2d3238aa588"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c40791f1-7de2-4ed1-80b3-a8d31bbf515b",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e711220-901a-4907-a163-47af496fc271",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae76e9d2-05fb-4a2b-b675-5997feb93419"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7518a3e3-7c07-4d3a-9d46-1dd0c2d0e595",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "213f8fa8-2218-4a2b-a249-f7e4021dc025"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dbb9694-fa4a-4b7f-801e-1529e3af75eb",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a51f65f1-9ed8-4c3e-a808-1713791fd6a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb05e0df-27dd-4fcd-a83b-be502a82506f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f43b233-45b2-4349-84ea-191786fdd026",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d9d3650-ee4c-4ff1-855d-6f6d6357cd6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74150d51-c106-4dee-9cd8-e4ff8a82ef95",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5738b4ef-d7da-4c3d-8de2-0b9e6489eab0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8ac83ea-2475-451c-b752-8cd1eebd55c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "946a0ee1-dc89-4558-b811-58b5d77166a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10ccd298-4c46-4967-9c3d-42ec9b5697a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceb5236c-a9b4-4a62-bea5-7c8b4e18f765",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "860d3702-4e9c-4426-ba6f-57ddd9f4a031",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24a695ec-dd36-4bb0-9054-464cc167d71a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7a64488-8dbd-458b-acd1-9c5cb86d4cdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea02012f-3df4-4e0a-89ae-651b5c3415c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ac16436-96c7-4bb8-a5e6-3598a64597bf",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d0fafd2-8c14-4cce-925d-96f9d5037a21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28907f48-689c-4c00-a447-c3ff6b1d13c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe2492cc-f893-45b5-8d4c-623703835e04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecf7e3fe-4ba8-47f8-8e5d-40ab8fedd821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2392667e-4e77-4887-9795-cabb7c226c02",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "242dc1e6-f4aa-44e7-825c-b31341ba2899",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a63129d4-37db-404d-920d-ea5e3e90ff62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5483b613-515f-4c87-bf6c-0dc3b35a77fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0aee290-b7d7-48ab-8fc7-c3e357bf143a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d669de2-6beb-4f52-89e2-ea3360d1d551",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4b069d6-cfae-4cd0-b2de-d7611b976b73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47c8ac68-3e55-49a3-acc5-fae2bc4518fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ee70a98-5c55-47d1-bf70-35bd0d0ca886",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66bd9f28-8129-4856-ab02-50ff273ae3f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "915e29b4-18eb-4ffe-98b1-042bf433f419",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e87b178-4ff8-4458-89cb-a18195fd62c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "777a5e38-f5f0-4bed-84d4-8b03f9de423d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e1b6c29-c814-40a7-9426-7be8fb0d7a65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e1a78be-1c8f-4fbb-b8d9-97259bf87289"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb50b815-419d-43c7-9579-0fcb9684ca89",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94ed1e14-6c90-4270-b76e-3363428d5e31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "487ca410-6a0e-4735-b479-a84ad7202e41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db12d7a2-3446-48a2-b056-319bcf1fa1b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acbc27aa-e4bd-46e8-937c-955cab9b5674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f195313a-8f8b-47e8-966b-4127a9989f52",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e23b8a3a-492e-490a-a220-f37e0d914b64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cdcaa0b5-6818-49e0-9bae-d921788c9679"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70d34ce9-5fed-4daf-a89e-9a375d136261",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc2b2832-b782-4ba1-91a5-14c142ff2491"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2393522c-fd29-4128-b4e5-ce507641634d",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdd0c50b-944f-471f-ad09-3b808f4140c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef5ccf2f-718a-4d86-be45-3da1c890887b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ea390b0-c4d8-4c9e-802c-0451ff779f28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0610c404-111e-4fd6-90ef-a924bed6be6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f531b2df-409e-419c-9ef1-917d7eac5f8e",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ad211a6-32b1-43df-aa5c-59502febe43f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5d80606-4384-4907-9fcd-c8ee4bb53be9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3be0fdd-3154-4d0c-9672-99cb08a20e3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ebf70e5-9c72-4c82-9620-d300819bad46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "341da2cc-a954-4fc8-9e7b-2761fe8687e7",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f33b1607-b806-400a-aaf9-9f75d47679de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d573d12-e3d5-4440-b522-c1a62aaf6d4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e4c2ddd-fd45-41f8-a76a-574feef514d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7f0b744-de6b-41aa-ac87-1c74be152e1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0654254e-5144-43f4-8482-a5bc248f77a9",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc97ebc3-c90f-4091-bb7c-4fbac7dca002",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bee0aece-ab41-420b-8a8b-50ffd6ec06a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0415f02a-b3ee-4230-8acc-ae855a2b5929",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0b1273d-f1a7-4e2d-a131-cf8f60aba162"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af5272d8-6ba0-4d22-a37c-babecfd14785",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03d5ceb3-0c3e-46b8-ad10-2c471338ecbc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "771f0162-931e-495e-92d6-80ee211d3892"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78920127-459c-44bf-be0f-f0c629b163f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4b4bdfb-4420-4e0c-9dfa-f3d9949bd727"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8cb2ce8-4c84-4ac8-9225-8cb5d6035e2c",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cd90c6d-a231-4410-83fc-87b1c37ac270",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a50740db-ba79-4ec6-be68-477b0a2ee415"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da437d26-db92-4f11-acd2-736b2b5b92fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc074a1a-a432-4e8b-b83f-8cb9efa5eaa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2be65c2d-9e39-46c2-8a20-d3d32933d4e8",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9df0af67-9180-45e0-95cd-e92ca0cf6c61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a237762-8041-4103-bf16-7827bef56268"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13728fe9-145e-4387-a950-1fd19c849dc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ab94b64-e8dc-4cc2-8c82-c1545b40a4af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5933238e-d54f-445a-a75e-26ac21694bf7",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec005d14-1122-4aa7-9b37-506650437a8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30b8f62a-9787-455e-952e-015bc6297f97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e931b398-7876-4d68-834c-48f145584aab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b08fb05-017e-445a-a17a-4c6174d9d562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db3b1c6e-4228-41df-844c-b6e45847e1c3",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16584d28-2ac2-413a-b96a-81a17d6173f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "727252ee-f7e3-4c8a-96c8-e8553c970e44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7378c85f-eb2c-4bf9-a0b2-1010dd6bf816",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c22d75b8-bee7-45ef-826c-598d4bab29b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "629030e9-fd4a-4ffb-96c8-838c5decfc8d",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12cf5a0c-0e6d-488d-88da-a060ca851fb6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9d12129-2628-4095-aa00-c92d2b0e09b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "853c72c5-acd4-4cb2-ba25-aa7c80bfe5ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51388f93-c585-4ff2-adef-9fb45b4d5053"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65e14331-6370-4cb1-8954-4ed44f599647",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eb0e58c-c550-4ebd-9882-34580bb6a4f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27a4833c-7a4f-44d0-9ce9-9dbb9d8f1456"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b8b2fa7-eba8-4d61-9a2f-0728c35a45eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ee219f0-2ed8-459c-acc0-30e8cd893968"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26e84a0a-8baf-454b-ab40-e639faecbfa1",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84c7a1fd-dedc-44ca-a097-a206d9d62c5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9023775-c1dc-470b-a60e-8d6af30a74f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "381ea02e-ee0f-456b-9ea2-d0e6ea9e7b19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1aa33548-716c-417f-b746-d0ad5dda62c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15d0f64b-2766-4861-87a5-1aece1622236",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99e3ccd0-5225-4e56-a03a-9f2e86c108f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a10227d-da38-46ba-9b6c-c6e6a783c84a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dfb2265-b7bb-401e-b49e-87f0c67dc31f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa03f97b-6436-4e27-ae0c-6aee996e154f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cb0e22a-dae6-4265-a4ec-e103dc534271",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af6daeb0-10d5-4d27-91b3-c376ed941387",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62a591d0-23a3-44ee-858f-f8def1f90f14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "daf792d9-0bbb-4dcb-bea6-65250ec24899",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78004c7a-5d5d-411a-8c8c-3b6ef82b9b9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc73121d-c450-49af-b73d-5eadaf4ceb0f",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdd0e014-738f-4232-a48c-8a6e3783e948",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f3c3d9f-6cfe-47c9-baeb-dda6ec8a9678"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aec21785-b608-4479-b46f-352b3a94abe9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b97d148e-09cf-40c9-8143-bbbec1cb7757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "603375bd-56cd-4cd6-a53a-9dff12250f1a",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f975e9e3-097d-4ae4-b6a8-223f687b9d78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd4e7f19-4a7e-4a86-8496-5c6216b86644"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f122e162-bcd1-4d29-b5fb-2010be242d2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3073dfd-5c3a-4950-aa83-5c0184ab1f92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3cd01b3-5959-4ba9-9f16-71523a72baf0",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09409f7a-d56e-4955-8bb8-f009bbd05dd2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b349af23-fac4-4ed4-8449-6c53d28c0842"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1572a969-0f2e-4f0c-a2aa-7b843c211992",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3673daf-5c96-46d8-94c0-18274ce62c82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07566672-bcaf-4139-bc5a-8793ea5eb061",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1799cd8c-45ef-48ef-bd55-4a204c58cef9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "007efd49-340d-4a18-a5c0-626e107fbf1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a11bbe7-0125-4818-beba-eabb01c301dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5489616b-7270-4ff1-9d4f-0cababa1bb92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd2ff773-1552-47af-a029-3229195c5e3a",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "207bc910-9000-4bd1-ad89-7574df4b4fbd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d8bb6cb-95c5-4750-b597-4fe19b52188f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb102fb4-42f9-43bc-8c64-d07fcee63a8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9139dae7-19c1-4fde-bf89-119142435a66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "666c1592-764a-4aef-8e14-58567ee67e85",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64858586-b888-4c70-b694-ac806c7bde14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a948f9f9-39a7-4abc-beea-4d2edab3250d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39a49337-d446-4e18-b5a5-15e50faca76f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dbc10d2-fdbf-491c-9f73-e37364b31cab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "910b03a3-af17-46fe-a371-befd44234769",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccb96fde-8ec7-4cfa-9756-b8bf2bdf2882",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e99a68c1-748d-4598-8153-b3c35193da1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a2ac1da-1261-44dc-869c-2fc4be8871d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5534f69a-cdc4-495e-9430-c511f5374456"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4aa8dd0-7a06-4ab7-858b-c5176e64f86e",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26a60b8e-c5bb-4be4-a04b-52e37a27bf9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d882cebc-5b33-4e2c-9d07-4aefc5ada19a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "677e894f-9fbf-4ae7-95ba-9797474a6bcf",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c737fac-58c4-4b08-88ca-de0447742fa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0f261ec-d576-40a4-ab38-ccd27d662971",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b97501d-a186-4cf3-a20d-14939fc0554c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c82c651e-ece3-4b36-9dd5-1f40f46b7d82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7e3e6eb-423b-4f5f-9a4a-75fbcea721d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6abe180-a27d-4d00-8560-7229584ac7b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aae45f3c-6b13-4c8b-83a6-c6b4950b9883",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e1039b7-17b2-49a2-99a0-5ae73ff4e115",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df559e03-33fe-4664-8e2a-f6e02a35a0a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddb1b91a-f064-48ee-bc5d-a2d4aa2145bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83a47bb5-cb58-46da-a2cd-2ced35f22f26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b88eeaf-547f-44ab-abca-0a993c0a34e9",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80b66811-ea71-42e2-9e05-c9e7195e0423",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab9c85af-db18-4eef-8dc7-63e8b00a7ac1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06ec7f55-d561-4184-bb9c-87769c9d8129",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d3a222e-41a7-4cbd-981e-ab6520cc3ab3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aeff76b-c975-491e-ba16-fced9d9d256b",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb8cfab2-e92b-4947-a020-741f38909621",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0723f758-ac37-41eb-a4a8-71bd5163d6c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab9aac0d-2e71-4e8e-879f-ce15777a269e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d7ec0c8-422c-42db-bfea-0b6437c59e61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15e11cf2-4b51-4743-a98e-71d36125d230",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81fe7460-2e77-4550-9309-590a88922b63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1e3ae92-735b-4b14-8d1f-018a14d7e80c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbc3f0c1-a784-48c1-bcfb-2b502ccc4069",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fd5426e-18d0-4081-a69f-bd1e436175bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f6ccdf6-1b12-4858-adf8-d4d50f1e9694",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd933087-4940-492b-a386-1a2f8b8679df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c678b1d1-a704-4c67-9fae-8fbbebf86460"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75c9e215-a6e4-470f-ad89-48cb9bc7403c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce9246ce-c314-419f-8682-625dc4628615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dd175b0-2832-430c-9628-0589cbaa5a89",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2b524f9-c824-4cdf-b38b-4ccd226772dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4b9593d-2d96-490c-9e73-6ec716458a3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d33efc01-6a1a-4204-80b9-4a0f014e02f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e55555f-c036-4bb2-a037-3e3588ee876b"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5ff1826c-75e8-47e5-9334-f1cad2f1d9d3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6cdea17e-ae9d-4ddd-bea0-9f66bb9c446d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cc1c4b51-883d-4a2b-b858-56b81b181462",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dd8c8a40-33e7-419e-b9d3-b8e315092ff1"
                    }
                  }
                ]
              },
              {
                "id": "93d1310d-9764-441e-8a54-4a6f99436d6e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d6aab581-0fa0-43be-9e2c-5955b900bb18",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2d28fbd-d0e3-4393-8efb-7c0157379111",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "71d7d0bf-ab37-450b-adac-ea41401ef809"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a09cf293-5227-4273-9d5b-162371195e8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9a905861-385f-4f6f-942c-8ce260895e2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec87e952-e676-42cc-90f7-d67055d400be",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37549991-3464-4850-b9fd-7e3920acab4c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "798ecdb3-8d9a-4dc5-9872-45e20411089c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "918ab8f9-7f26-4f6c-899d-f3d662477e16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6d617f61-bc79-4be6-9de6-d33723726f09"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f87b4ff6-4414-42b9-9fad-41fd58a44802",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4afa21ae-1f15-44a7-9bb2-b585fcd03931"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e3720478-7817-408a-a727-2308844baf71",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "74ee3244-9210-44ac-8675-e16cd7011b3e"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "991bba6f-b5bf-4e95-9978-22b8ba0d5371",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8b5de871-bf8f-4d0d-97fb-cd0b8b3bc7ff",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "75c8b108-9297-4a16-9b66-9a8c42e71e32",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "74baa835-6716-4215-bf96-c54a12493beb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7d10e9d1-16b8-4153-9335-6738176a2583",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "240f5ed9-e6ea-4e19-b94b-6321f84cb238"
                    }
                  }
                ]
              },
              {
                "id": "c218249d-9c55-4b1b-9c5b-50a24f9df1c2",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "079cdd13-02e2-4e5b-b5b4-7af9d34ad955",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f75e1cfb-bb12-46f7-891c-bbd55bcb1fe9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7f8cfb93-8881-4a94-b120-f190c8ede1a1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9a1348d5-546b-4e55-b919-304d63679352"
                    }
                  }
                ]
              },
              {
                "id": "7e991de9-dd19-4646-b5bd-5949c67bd906",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c3ade72d-b877-465b-8807-6bf573306f1d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "11b36b5f-2ca7-46ec-bfd7-beb217e5141f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9a9380e1-2246-41f5-b7d2-4f4ebb0b2646",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "78e82f1d-dcdc-483e-acdf-963ddbfcadc5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e6351100-ca07-4775-89e0-30d8c6547937",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "88128ffa-959c-4609-bb84-0435898241da"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "62e8d220-e8c4-499c-afbc-829df0505b68",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "66e638a4-d636-4a23-8f3b-91269a73edb7"
            }
          }
        ]
      },
      {
        "id": "6738e352-f8b8-48c2-b42e-355786ffdcb2",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "65db36b4-8f2b-493b-bd86-d764bc9c7719",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9f4561b5-2a9f-4d32-a841-9f9cc09b3310",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "319e8262-9dd8-43dd-98da-7f6ff1b80b12",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b4c228c-f685-4fa8-8d9a-6401a5ae8f41",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "9e7c4f7b-5da7-40bd-8d98-d912c175cec6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ab52b16-c8d2-4d53-a939-af95ea6ef3bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c7509773-2d76-4b5d-9760-168edb284a36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e842d510-0392-4387-805d-80384a3098c1",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "608b4e7c-67e6-42db-a6c4-30a4f9b9e51a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1e0d90ff-0ee1-4c01-ba11-1fd2cfb3bb76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e67e3e4-fc32-47a6-84a6-ebfa884b2ac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7c4e64d7-d76d-46d1-97a7-f0668f96e4f5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3b4e0309-6259-4b0d-b119-af7fc138965a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "24584e8a-385f-485b-8540-d4a25a9aa077"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dac9f6fb-435c-4b1d-b7e6-afa8c7c080c0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a9f83a09-fe4c-4c11-8f12-3d808e73ebfe"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "80ff1662-4299-443e-8c29-e865df82a75b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d71a7ef3-9f1a-4416-becd-00ebe070fc18"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1f251bc8-57e7-43aa-b22a-25bbc3357a3f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5b8f2661-7172-4e37-9faf-54ac7314d942"
            }
          }
        ]
      },
      {
        "id": "ce55f9b1-bccc-413c-9055-9a8938137254",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "e8a0092f-2e82-40f9-94bd-c8e0ba0f5b1d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "682ef5a8-b294-4e9a-aea3-de58a81c3df0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c44eaebf-383b-4a3a-89ef-b4d79a22fb82",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0b66736-5960-4dbb-aed6-6c3a872d3c78",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e90b6d1d-be7a-4b21-8f5b-10578fe3447e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40c60f44-33ef-464f-b820-9da40e8e6a55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7f90df46-66fa-41b2-adcc-86628e66527a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6199f9a-5ae0-4c2d-ac59-eec03e5d3b0b",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8ff9696-a20d-45a9-8b0a-0187b3b69e31",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "7883d035-7160-4c26-8d05-982cb6082256"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a00235ef-7f6e-4ca7-a6d9-e09dd5ce60b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d5990b5a-8478-4784-baff-e92af8a73e97"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "59887000-863a-4f8c-ad66-74b0e1be2ade",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b1823e8e-ef1d-4adf-afeb-692a9895b46c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "51245536-14c2-4c4f-984a-f0a78dfb8d14",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "37daebcd-383f-4f0e-84b0-b79fcdbbf0ac"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cd817936-e942-4568-9009-c24ef290b31b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "691d1c25-d765-4d13-89e8-26f67afac421"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b4f18321-a605-45e1-8e3e-8e8931a94cd0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2b8f4b92-82bc-4fd9-af43-26d487c2db09"
            }
          }
        ]
      },
      {
        "id": "9beaba89-d6e0-4126-8578-16c8f80f4cc6",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "4618bf4e-8b30-49f3-8644-75e4fa08e913",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bc588435-93df-471d-b8d7-bc6adb9e491a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5a03dd72-edf1-4515-8007-1df921579e1f",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fe10b62-8e0e-4b68-a98d-e1f7a1764105",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "7b6d8f2a-adaf-477e-b2e2-0d753fa0da04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c062c08b-d808-486c-8d4a-494742eaafa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fdb725aa-3d1a-483b-b26a-da164dd9dc83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b0f4ebb-9b95-471f-8da6-6e541c2094f5",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54459483-cf2b-4819-9244-2c4716726b86",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "fab0ddd8-5032-43d2-aab9-87143038bd52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60f08a59-7656-4ef5-8644-41c4d9282c34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "11aa286e-03f3-4bd7-a12e-21c4e422a93c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "edb02a02-8f08-4560-931d-20ae515d5823",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a14a7b49-a15f-4a26-a210-7c900835ceaa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f6b42361-749a-4ca6-a1d9-8a3910a05967",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "afd98a57-2976-4a37-899c-e7a46e47971e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bd154b82-dcf2-4b1b-a344-c932bab8e821",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d501f7a8-a058-4b5e-8159-a6875f85c326"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d16b83bb-4650-4226-8b2e-5fee9df0e4ff",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c46722ee-b13c-4ed5-9d57-8c5a699e283e"
            }
          }
        ]
      },
      {
        "id": "f72ceff9-f7f4-4852-b050-73440ce44ec5",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a2bcb585-514a-4ff2-83d4-9a748089f19f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6f5c611f-dc67-4de1-ab00-a63cdaa32ed7",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "66a0cba0-5dfc-4f93-9299-668ba0fb88d5",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a102ec70-9ffd-422d-b9b2-8f0bc6a4980d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1db46107-3973-410e-9bfd-e52d4e5ab575",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 505,
        "pending": 0,
        "failed": 86
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 255.91153846153858,
      "responseMin": 20,
      "responseMax": 3270,
      "responseSd": 483.9087921268152,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1666054800754,
      "completed": 1666054878664
    },
    "executions": [
      {
        "id": "3948e2cc-fe5c-481f-85c4-484d68f74091",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c1556e23-127c-4011-9a7c-fb7f0e734fdf",
          "httpRequestId": "54d70388-42d7-434f-a589-4c5ffabfb577"
        },
        "item": {
          "id": "3948e2cc-fe5c-481f-85c4-484d68f74091",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "1d8ddfaf-3278-40d4-8981-8cef21a4ed3d",
          "status": "OK",
          "code": 200,
          "responseTime": 111,
          "responseSize": 0
        }
      },
      {
        "id": "e967f2ab-9f10-4154-aa65-e617dbfdff4a",
        "cursor": {
          "ref": "d1c199f3-9d8a-4618-bd22-6e4246d95af8",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "56003f76-0c79-4309-b024-0ec4d205b31c"
        },
        "item": {
          "id": "e967f2ab-9f10-4154-aa65-e617dbfdff4a",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "6336d1d4-4914-437a-9c0c-c696e962199d",
          "status": "OK",
          "code": 200,
          "responseTime": 20,
          "responseSize": 0
        }
      },
      {
        "id": "bd9515d8-ac82-4dc9-b794-c777368e320d",
        "cursor": {
          "ref": "a1dcd37b-e69b-45e6-a75e-e2d75b746605",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "5169c5e8-018a-49bc-be79-7cf7781ea677"
        },
        "item": {
          "id": "bd9515d8-ac82-4dc9-b794-c777368e320d",
          "name": "did_json"
        },
        "response": {
          "id": "d91b3ff7-fe01-491e-bd77-d117ee9cc615",
          "status": "OK",
          "code": 200,
          "responseTime": 2287,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f871c61-6021-46a5-8c04-139a1687a193",
        "cursor": {
          "ref": "001e5d9b-ea5e-4984-afd1-569ade0a8b0e",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "287a912d-e3d2-469c-87c4-b11cfeaf5a5c"
        },
        "item": {
          "id": "6f871c61-6021-46a5-8c04-139a1687a193",
          "name": "did:invalid"
        },
        "response": {
          "id": "6724053a-68bc-4591-8ea0-0d3c076c7b49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f871c61-6021-46a5-8c04-139a1687a193",
        "cursor": {
          "ref": "001e5d9b-ea5e-4984-afd1-569ade0a8b0e",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "287a912d-e3d2-469c-87c4-b11cfeaf5a5c"
        },
        "item": {
          "id": "6f871c61-6021-46a5-8c04-139a1687a193",
          "name": "did:invalid"
        },
        "response": {
          "id": "6724053a-68bc-4591-8ea0-0d3c076c7b49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59a22e68-5aa2-4fdf-a091-96664de8afbc",
        "cursor": {
          "ref": "c58ff7e7-cd79-416d-bda2-e12fd5a8b995",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "941963ce-0e98-44af-becc-2373a7a513ec"
        },
        "item": {
          "id": "59a22e68-5aa2-4fdf-a091-96664de8afbc",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "5540e72a-bb3a-40d6-b1c7-849b86d7abff",
          "status": "Not Found",
          "code": 404,
          "responseTime": 541,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15bc8194-d11d-4f2b-a833-bb9851478b01",
        "cursor": {
          "ref": "dd8e6a63-4855-4fdf-b1e5-1e3bbf55b46d",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e02ffd87-2363-44bb-88cb-186387159620"
        },
        "item": {
          "id": "15bc8194-d11d-4f2b-a833-bb9851478b01",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "7f1338c6-9cab-404a-b92a-ed3e4d3aec11",
          "status": "Not Found",
          "code": 404,
          "responseTime": 53,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb3d704f-beaa-4505-b13b-5688b4f15521",
        "cursor": {
          "ref": "ca40764c-1439-4027-a12c-fb754859f8a9",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "1b2b0a27-4660-43e1-b6e0-61846dedf610"
        },
        "item": {
          "id": "fb3d704f-beaa-4505-b13b-5688b4f15521",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "c8e741b9-ab0c-4c80-af3f-3782befa1bbf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 196,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e70fe0b3-27b5-47e7-be36-1c5d99d3d292",
        "cursor": {
          "ref": "f1174e4c-c89f-4bfe-8813-a9cadc54bcb5",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "4e701130-6f2f-4374-807a-2f6ca98e6d1f"
        },
        "item": {
          "id": "e70fe0b3-27b5-47e7-be36-1c5d99d3d292",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "1fdb9434-0624-49f7-9aa4-4ca27b01476a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 70,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e70fe0b3-27b5-47e7-be36-1c5d99d3d292",
        "cursor": {
          "ref": "f1174e4c-c89f-4bfe-8813-a9cadc54bcb5",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "4e701130-6f2f-4374-807a-2f6ca98e6d1f"
        },
        "item": {
          "id": "e70fe0b3-27b5-47e7-be36-1c5d99d3d292",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "1fdb9434-0624-49f7-9aa4-4ca27b01476a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 70,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03dd6e6a-c619-4dce-9a50-f8611a2c094d",
        "cursor": {
          "ref": "42572f11-fc20-425b-a343-6d8d7650fa6a",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "97498622-0a94-4d92-92f0-2ce823ec3305"
        },
        "item": {
          "id": "03dd6e6a-c619-4dce-9a50-f8611a2c094d",
          "name": "identifiers"
        },
        "response": {
          "id": "d3ea42f5-3a72-4b71-80db-a9a7c66eee7a",
          "status": "OK",
          "code": 200,
          "responseTime": 324,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5115fbe2-4c3e-4318-89ff-3e62e19e20ef",
        "cursor": {
          "ref": "b8299f62-4a02-4588-b51c-cd06312ff247",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "cc040e0d-2ac2-4ad7-933b-bd38d2828214"
        },
        "item": {
          "id": "5115fbe2-4c3e-4318-89ff-3e62e19e20ef",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "1bc1eabf-4643-4014-b5e0-2f4172ff9243",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5115fbe2-4c3e-4318-89ff-3e62e19e20ef",
        "cursor": {
          "ref": "b8299f62-4a02-4588-b51c-cd06312ff247",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "cc040e0d-2ac2-4ad7-933b-bd38d2828214"
        },
        "item": {
          "id": "5115fbe2-4c3e-4318-89ff-3e62e19e20ef",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "1bc1eabf-4643-4014-b5e0-2f4172ff9243",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af50e412-50d3-42cc-ade2-a2dbac183ba2",
        "cursor": {
          "ref": "6565c791-99a7-4719-8548-bed0bda49077",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "60417228-a7db-49b1-af1a-9b6c84149a37"
        },
        "item": {
          "id": "af50e412-50d3-42cc-ade2-a2dbac183ba2",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "901dbf7b-14f8-49ba-b825-79c2728e6ab9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df5731c5-2be3-4e54-9595-caab0b8e37a4",
        "cursor": {
          "ref": "9b6fb025-fb01-47ca-a65e-607f0e2c5cb0",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "cb3a8b85-7cce-4f61-9cde-8cb3cb41a98d"
        },
        "item": {
          "id": "df5731c5-2be3-4e54-9595-caab0b8e37a4",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "dcc6ae9f-f0fd-4478-8d9a-f4bbcdaba2b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4932431-3e63-450a-a48f-1cd4f0f775b5",
        "cursor": {
          "ref": "e656958b-51f1-475e-9a02-32da925f420d",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "5af7e302-a838-483b-b1dd-a3454dc8c6be"
        },
        "item": {
          "id": "c4932431-3e63-450a-a48f-1cd4f0f775b5",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "cacff0bc-7e0a-47e4-9c80-20818e6d6b29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55c84b45-554f-4f9c-8a1b-bdac2ac60ffd",
        "cursor": {
          "ref": "1fab65dc-4195-46cd-82c1-067b1ea74dd0",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "4e357925-fc6e-4f22-9e15-b21d0c0db308"
        },
        "item": {
          "id": "55c84b45-554f-4f9c-8a1b-bdac2ac60ffd",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "ae60aedb-abc7-47d7-8e0c-039a4326b897",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 135,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05a0190e-c366-46fe-9f06-165a1ed7c794",
        "cursor": {
          "ref": "22269abb-ff59-4457-8ba8-fa4d8af0807b",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "c8c9401d-1a8b-4f2c-8802-d0816529a9c9"
        },
        "item": {
          "id": "05a0190e-c366-46fe-9f06-165a1ed7c794",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "7a75f2d8-9880-410e-9cc1-4bd2d551636d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 165,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c818747b-1376-44b4-8790-3672584ce040",
        "cursor": {
          "ref": "b602cd7e-d6ea-4c5c-86b2-bc217801f0cb",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "325ae573-fa0f-4e28-a402-0f3f6d2f3aee"
        },
        "item": {
          "id": "c818747b-1376-44b4-8790-3672584ce040",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "c1a57135-47ba-4da1-ba88-33bbcc586eef",
          "status": "Created",
          "code": 201,
          "responseTime": 3252,
          "responseSize": 537
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "5a1f7cd4-37da-48d4-81f3-e286a0c3ed79",
        "cursor": {
          "ref": "bdd615ab-4cfe-48e7-933d-cfc967982dd9",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "f4ff89f7-1cce-4d42-926e-4443b4ed67e4"
        },
        "item": {
          "id": "5a1f7cd4-37da-48d4-81f3-e286a0c3ed79",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "5b50e991-fce0-4327-ac7f-896a6e92f26a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42dc2ae3-dee0-4db5-983a-f5e94fdfe050",
        "cursor": {
          "ref": "8d61d430-8211-41cf-8824-16bb0b302770",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "a6efac66-0066-40f0-bfeb-5113b98605f3"
        },
        "item": {
          "id": "42dc2ae3-dee0-4db5-983a-f5e94fdfe050",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "2cea34bd-d31d-4e25-9f9f-3fd5f9e5bad4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "100f1752-b1fb-4f16-9c21-1100312c60ca",
        "cursor": {
          "ref": "50cfbad0-9dc8-4263-b999-08860e262040",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "00ce0571-fef7-49eb-88e4-7f95e21e1203"
        },
        "item": {
          "id": "100f1752-b1fb-4f16-9c21-1100312c60ca",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "6540d26d-0818-481b-8c91-8be07e44a614",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "751ca324-28a2-4520-9000-885c6743f3c0",
        "cursor": {
          "ref": "658726ef-003a-41e5-9e42-62ea73c6b25e",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "ddfc10a5-a45d-4707-b137-9c6de35cd161"
        },
        "item": {
          "id": "751ca324-28a2-4520-9000-885c6743f3c0",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "eef0e350-899a-42dd-921d-d21b9898d2eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "698bf413-39af-4822-9f92-e88274df846f",
        "cursor": {
          "ref": "908f978c-7aff-4156-8f13-dafe9dd2a90f",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "764cde55-c9b2-4280-bb21-2cde864111a5"
        },
        "item": {
          "id": "698bf413-39af-4822-9f92-e88274df846f",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "74d877e4-153e-41ce-aaa0-4e008d91d7df",
          "status": "Created",
          "code": 201,
          "responseTime": 2044,
          "responseSize": 584
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "9ca6ede3-3039-49b4-8351-696ca4f0e2ad",
        "cursor": {
          "ref": "68381c99-44f4-4f15-a42a-136dae40241c",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "6bb4868a-31f2-49e7-be41-f6b08bb0c655"
        },
        "item": {
          "id": "9ca6ede3-3039-49b4-8351-696ca4f0e2ad",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "ce6ca0bf-1f67-4bfe-9c10-b433f59bb0bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dedaf223-c430-4cd6-b0bc-7ffd356024b5",
        "cursor": {
          "ref": "fe1529a5-586b-4cb7-887d-e0518b3da5e3",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "882c7133-7537-4e6f-a872-c0a977b4c988"
        },
        "item": {
          "id": "dedaf223-c430-4cd6-b0bc-7ffd356024b5",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "86b940e0-dd64-47d7-ac62-887791261b61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 137,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85a46ed1-49a3-44e6-a6b8-5b749d3c0feb",
        "cursor": {
          "ref": "61bb05f7-4789-4d0c-8f5c-850bad97b61c",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "44b2dad1-b43f-404f-bf6d-09c45d7521d6"
        },
        "item": {
          "id": "85a46ed1-49a3-44e6-a6b8-5b749d3c0feb",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "6ffc1ec1-2f15-4bf1-9ab6-726f3c8a8440",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 250,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "573c996b-6db4-4070-a6dd-b0a1e7ff33f8",
        "cursor": {
          "ref": "40c490b4-8ff7-4999-8d53-e474f431b9e3",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "b7e54a79-566b-4d9f-a0d1-26dbd978ad60"
        },
        "item": {
          "id": "573c996b-6db4-4070-a6dd-b0a1e7ff33f8",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "b9aad17d-4092-4cad-a6c0-3ccc6da1cbd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d80ae488-b3f9-4ad9-807c-268140b1c0a1",
        "cursor": {
          "ref": "9674620c-0bcd-436d-a166-09a7d2511c46",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "560ab31a-9f78-4518-8023-fbf4ec4900ec"
        },
        "item": {
          "id": "d80ae488-b3f9-4ad9-807c-268140b1c0a1",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "3b4543f9-501d-4473-8b7f-5e3d7d652a21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5c1ed6f-edb9-43eb-98a6-d7e17e4f8fbe",
        "cursor": {
          "ref": "954ad654-9743-43ee-a28d-2248b13ea18c",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "220822c0-87ce-4461-9977-f1f352af75ed"
        },
        "item": {
          "id": "d5c1ed6f-edb9-43eb-98a6-d7e17e4f8fbe",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "91158230-25de-4fcf-bc08-8e06f2d7b1a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4d9cda8-cb19-4012-98b7-c2b34d46ed01",
        "cursor": {
          "ref": "71e77548-fbb7-473e-8a86-c49500ecf70d",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f8cc86b2-4755-45c9-aba5-6c3bf072e55d"
        },
        "item": {
          "id": "f4d9cda8-cb19-4012-98b7-c2b34d46ed01",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "f24eb33f-ef79-4e15-94cb-3d4d568356fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7e96d73-59a8-4c16-a732-fcaa7c2d9d60",
        "cursor": {
          "ref": "66e9e750-b1db-454f-836d-803ad4a33f47",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "a1772b4e-7740-437a-865d-ec5f8d6a3dca"
        },
        "item": {
          "id": "e7e96d73-59a8-4c16-a732-fcaa7c2d9d60",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "5fbef328-eb58-4bc6-8c73-b62f2dba2d2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60cea501-9467-4b2f-847a-ec9d352c1e0d",
        "cursor": {
          "ref": "c8111c20-9c7a-4267-b98b-47b0146b2f6d",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "8bc3fe45-fb65-40ec-bc30-5312cd2087e5"
        },
        "item": {
          "id": "60cea501-9467-4b2f-847a-ec9d352c1e0d",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "48519ff5-8684-42c7-8193-8342eee56035",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 139,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6450a185-3b24-4399-b265-f4e4ac48eb3d",
        "cursor": {
          "ref": "c849a475-0c88-499a-9321-4c794a8d7be2",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "aa0c9138-5147-4654-8bcc-c73a86cdb3ea"
        },
        "item": {
          "id": "6450a185-3b24-4399-b265-f4e4ac48eb3d",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "85c081ae-4ca3-4830-9ae7-20ac6f2f641b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b296acf8-8d41-44d0-8975-28c79bd8f8d6",
        "cursor": {
          "ref": "7ad96a84-b59c-4fd9-b236-a2ee2b162368",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "30032077-9819-43b7-b271-98e2f3076447"
        },
        "item": {
          "id": "b296acf8-8d41-44d0-8975-28c79bd8f8d6",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "37c5edfb-2276-499c-ac33-22fe20eba635",
          "status": "Created",
          "code": 201,
          "responseTime": 946,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "f1ae088f-a330-4c24-8e45-c5ea10309d78",
        "cursor": {
          "ref": "c6ae866e-f5a4-4302-871e-fb58938aa126",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "a6ffb4ea-682b-4342-b5cc-fcb918fb16cc"
        },
        "item": {
          "id": "f1ae088f-a330-4c24-8e45-c5ea10309d78",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "ad41c5d5-aeb4-437a-99f3-68b4bb9581cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0487e577-6ecd-454d-b954-5994fad8b6ef",
        "cursor": {
          "ref": "9699906c-11ac-4c8c-a779-baed0ba4b301",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "09aaab20-c523-46f3-8324-f00a30c4ec58"
        },
        "item": {
          "id": "0487e577-6ecd-454d-b954-5994fad8b6ef",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "74f8463c-5855-479b-b448-466903128312",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f246e5b6-7362-410d-88dc-5e39afaa801a",
        "cursor": {
          "ref": "9b583ad1-d68e-45a4-83f3-926ebe94d560",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "9e83c2c4-84e7-476a-a011-6133419eb5af"
        },
        "item": {
          "id": "f246e5b6-7362-410d-88dc-5e39afaa801a",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "ab37841c-c1de-4bb6-b504-1dd6142b11bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93472cdd-2bc3-4c5a-b3eb-eb2005fd8bda",
        "cursor": {
          "ref": "b42dd1ab-c3fc-4315-86a3-f7e68ba6d4c6",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "885a5640-adc5-4661-991e-f44cd2671305"
        },
        "item": {
          "id": "93472cdd-2bc3-4c5a-b3eb-eb2005fd8bda",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "6fb31890-9d6d-4c2d-a70b-4903221a4ede",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d1afdc2-313b-41b0-87a9-d3e68b3537e6",
        "cursor": {
          "ref": "c8776c8e-6358-40ab-b5ef-98413f7f1d1f",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "e4d781c3-938e-4efa-85f0-77aa359522a5"
        },
        "item": {
          "id": "3d1afdc2-313b-41b0-87a9-d3e68b3537e6",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "657b54a2-a61c-4eff-8ebb-8694dc8ce4fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a23552b-92b7-4241-bb1f-011d428e4b62",
        "cursor": {
          "ref": "e8e837fc-9a25-4723-9bd2-c5700ccedcd9",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "3f9082fe-d9e7-4592-b1ed-454097298b46"
        },
        "item": {
          "id": "5a23552b-92b7-4241-bb1f-011d428e4b62",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "da06d75e-a668-4b43-9b01-9b013a6bc032",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "657f355e-2a58-451f-b80b-f6ae8d1d7739",
        "cursor": {
          "ref": "0677715a-8b01-4f88-b5c6-6710d4ba4023",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "8aa72d09-3fef-48d8-81c3-1878033b4b95"
        },
        "item": {
          "id": "657f355e-2a58-451f-b80b-f6ae8d1d7739",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "6640e6b8-6246-43a5-a9bc-5fa1ce3e4be1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6270b10-f26b-4678-b5d9-5545376ae8be",
        "cursor": {
          "ref": "645e8c73-8bb0-49cb-bfe6-3f910198531a",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "e9f34aae-179e-40d5-a4b0-4851fe16aafb"
        },
        "item": {
          "id": "a6270b10-f26b-4678-b5d9-5545376ae8be",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "a1fc9030-0c2e-4035-8d8b-42504eb3fe39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3da7d257-55c4-471c-8087-3e277890652a",
        "cursor": {
          "ref": "cab823a3-da37-4894-9348-64cc68f11b86",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "1a8c3ba0-2805-42ff-83a2-fcb0b332b29a"
        },
        "item": {
          "id": "3da7d257-55c4-471c-8087-3e277890652a",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "26413b3f-f02b-49f7-bb70-b996a6b4f8a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8ef8c09-2148-4889-b3db-464caeee5ca4",
        "cursor": {
          "ref": "43b407b5-a849-4b45-8fed-1fcccd4cfd94",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "8d5483d1-c3a6-4df7-a912-eb51f95d04c0"
        },
        "item": {
          "id": "b8ef8c09-2148-4889-b3db-464caeee5ca4",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "fa33528a-de53-45c7-81aa-7d3f090085d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee6a5563-12c1-467b-a1ab-04aca8032d10",
        "cursor": {
          "ref": "20aca99c-f25d-4ba6-90b9-f3da6846afad",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "0d30d89d-4583-4707-867e-84d49706bd51"
        },
        "item": {
          "id": "ee6a5563-12c1-467b-a1ab-04aca8032d10",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "75bb5c98-63ba-4dd7-b875-ef51671fdeab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2907e82d-3d4c-44ba-8f7e-aeced896225e",
        "cursor": {
          "ref": "896b5d47-830c-4aff-a147-2b555d6b7b3e",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "0c1c6d00-543a-4c17-9850-039b56bda3d3"
        },
        "item": {
          "id": "2907e82d-3d4c-44ba-8f7e-aeced896225e",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "00649980-eaed-4ade-a7b1-3611e55eaab3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44fcaef1-ef7b-4e0c-9ce0-918e47aeebc9",
        "cursor": {
          "ref": "550e89e0-09fd-4948-841d-24717be90b86",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "b3d7aa81-7ccc-4612-9000-6f1472178ae6"
        },
        "item": {
          "id": "44fcaef1-ef7b-4e0c-9ce0-918e47aeebc9",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "0415b35c-9a59-4ba9-88b6-b1a3260e7606",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 775,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "d5f18a16-0727-4bbe-be95-0e73ac3e718a",
        "cursor": {
          "ref": "45e3d66f-7b6c-44f4-9856-84ae6b88b304",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "734c94e6-865e-43cc-b016-f35ad49e3d5c"
        },
        "item": {
          "id": "d5f18a16-0727-4bbe-be95-0e73ac3e718a",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "e9506ef2-033c-4380-9df3-3d2404e883f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36ef76d6-6fcb-4e5f-8eca-0dbdd2240a09",
        "cursor": {
          "ref": "0551af6a-558e-496d-ac93-1f644295e607",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "3dc24f4a-48d4-46bd-8c7b-02dbde2ca54a"
        },
        "item": {
          "id": "36ef76d6-6fcb-4e5f-8eca-0dbdd2240a09",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "46a0e01a-d399-4c36-81c5-628b750c5f8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7abb29a-cbe9-48f6-9538-8b2be94695c2",
        "cursor": {
          "ref": "30d3236d-4052-4587-9998-b865adf6058c",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "82eca588-234c-42ec-8adb-6ecbee2cd4fd"
        },
        "item": {
          "id": "e7abb29a-cbe9-48f6-9538-8b2be94695c2",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "6a7681bf-e699-4943-a157-97002638898f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "885429fe-fde5-4293-8a7e-d3dd30cd9d0e",
        "cursor": {
          "ref": "ca2203a1-b860-4308-b5a5-d0940639e7c5",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "79fb2285-8b71-44cf-9665-fbb1c0cbd088"
        },
        "item": {
          "id": "885429fe-fde5-4293-8a7e-d3dd30cd9d0e",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "1d72e55f-f814-4c93-9347-16e6e363961a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38353fa2-859b-4071-af42-4f93f5c38b5b",
        "cursor": {
          "ref": "248eee22-3006-4faa-977e-b5ee85e31058",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "310a7325-ca2d-4f06-94bf-bc7e4b11f195"
        },
        "item": {
          "id": "38353fa2-859b-4071-af42-4f93f5c38b5b",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "ee64dca3-19bb-4529-859a-23735d43053c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9923d166-601e-4b2c-ac1d-fee31e98b640",
        "cursor": {
          "ref": "883154e7-b139-49e5-9138-e1fab660920e",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "9f6e6789-8499-44ad-8b0e-3f9774329fb6"
        },
        "item": {
          "id": "9923d166-601e-4b2c-ac1d-fee31e98b640",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "3e2f5929-e5d0-4a47-bdc2-437cddda4e83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 141,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bb26cc2-b741-476b-8d93-94cee63eb370",
        "cursor": {
          "ref": "5862d44e-9523-44d3-b092-5b1aaac6e509",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "a7f8b45a-e52a-4342-be6c-edb58e1d9dc9"
        },
        "item": {
          "id": "7bb26cc2-b741-476b-8d93-94cee63eb370",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "da844909-8376-4768-8b69-a68885092994",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 486,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "e9d80bdd-bf58-4f2d-b4df-e8aa5bec034d",
        "cursor": {
          "ref": "4d85832f-ae97-4e2f-9e32-65d80666a3f0",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "07627249-b199-4fc6-a902-802c91799702"
        },
        "item": {
          "id": "e9d80bdd-bf58-4f2d-b4df-e8aa5bec034d",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "6d401e84-9ccd-4073-909e-8571f970e3ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cda63f09-30a6-4ee4-94a2-b17d16a35e9e",
        "cursor": {
          "ref": "152a6942-6f36-40f8-b9d9-8096ca78b973",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "643e8c5c-64f5-4d09-829b-30628b2cfc0e"
        },
        "item": {
          "id": "cda63f09-30a6-4ee4-94a2-b17d16a35e9e",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "75b9ca04-7939-440f-ae8b-2f3fb440b352",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00589614-5b00-482e-ba8b-72d60067178d",
        "cursor": {
          "ref": "54cd4a77-c6d3-42b7-b906-24e59746c0e4",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "3dee17eb-314f-428a-9ef6-fe02ba2250e0"
        },
        "item": {
          "id": "00589614-5b00-482e-ba8b-72d60067178d",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "469471a1-e25c-4937-8899-24cb3ae0e893",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99864e7e-a2a6-4ec0-8be1-3e08f50be4f1",
        "cursor": {
          "ref": "641aff58-dd1c-4b90-b9d3-b36c7c5395be",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "f63fce9e-cc9b-43b8-beb0-f54cd6bb6283"
        },
        "item": {
          "id": "99864e7e-a2a6-4ec0-8be1-3e08f50be4f1",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "b806fb4a-8524-473b-a696-76671194b3c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95ca11d9-ed13-4614-88c6-7e0b6441d752",
        "cursor": {
          "ref": "5e80f06a-a846-4588-99ac-c4b35f9c40b3",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "76f8a1cc-6c91-4276-9f15-339a67148f67"
        },
        "item": {
          "id": "95ca11d9-ed13-4614-88c6-7e0b6441d752",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "27916e44-e0b0-4704-b910-3aa2d0083675",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31505eeb-dd45-444b-8ce2-55e6c89ad7db",
        "cursor": {
          "ref": "8bc69d38-28f6-4325-8033-351942c0ccff",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "ed05cf66-652d-4ceb-a7f2-4785284b4314"
        },
        "item": {
          "id": "31505eeb-dd45-444b-8ce2-55e6c89ad7db",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "0f6b1a80-dd78-4a3e-9e79-8d43699a9cc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a326cad-0087-43e5-826e-9d83804cfc8c",
        "cursor": {
          "ref": "726b87d4-bf1b-4dbb-ad60-8fe5e10e0442",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "461b81c6-c72d-41af-ae9c-602886524de2"
        },
        "item": {
          "id": "3a326cad-0087-43e5-826e-9d83804cfc8c",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "dfda699f-afee-4ca0-82eb-33d8e78a9cc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a7fbb40-1e67-4876-bafa-272d244cb89e",
        "cursor": {
          "ref": "15855dcd-224d-49c3-b23c-ace8a006ef09",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "f479e150-fe89-4ff4-8c9d-d5981f1744cc"
        },
        "item": {
          "id": "8a7fbb40-1e67-4876-bafa-272d244cb89e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "fba204e9-57e1-466d-94aa-9b485a8a9e32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46319bf2-4e42-4fe5-b5fe-22f048b8b867",
        "cursor": {
          "ref": "d9027327-df84-46e9-be42-68ce923bc37d",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "3f37d797-2a19-41c6-b4ae-2c26c7cd7d49"
        },
        "item": {
          "id": "46319bf2-4e42-4fe5-b5fe-22f048b8b867",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "d4196ab4-693e-4686-9e79-26f1211032fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5b463dc-a0c2-4e65-b2c5-7133a0f054fa",
        "cursor": {
          "ref": "1ac99292-b13b-46f2-88a3-b0d65db8f98c",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "fe5785bd-8554-4ba1-92d4-adbd03aafd9d"
        },
        "item": {
          "id": "a5b463dc-a0c2-4e65-b2c5-7133a0f054fa",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "d343229d-7b5a-4777-832f-ae27ff7dc436",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47404dff-bb44-4319-92da-d287951d3001",
        "cursor": {
          "ref": "3c417092-eec1-4e0c-83bf-c0303effb170",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "191af9c9-830b-4e08-a2e9-c5d080659464"
        },
        "item": {
          "id": "47404dff-bb44-4319-92da-d287951d3001",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "23f73910-f07b-48e4-a842-1e822405abd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4ab1dae-b267-4ecd-ad4d-913c1865f589",
        "cursor": {
          "ref": "1270ac9e-57f9-4bcd-8219-11be3ca8567e",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "74d0b17e-adfc-4286-9c7d-3b4c7bc20695"
        },
        "item": {
          "id": "d4ab1dae-b267-4ecd-ad4d-913c1865f589",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "49687e6f-c7a4-4d4d-aa9f-1a1e158ffee8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "162c58c7-639b-4b09-b850-1c3a2e0dced1",
        "cursor": {
          "ref": "fc432ab6-72cc-4a57-bed9-122e75686596",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "ee4d0d55-8f12-453d-9cf7-00b4d7801227"
        },
        "item": {
          "id": "162c58c7-639b-4b09-b850-1c3a2e0dced1",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "500b086d-6fbe-468e-bc4d-157e9335ded8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14ea9b50-9e61-4e9b-ab59-962eaec0d0ff",
        "cursor": {
          "ref": "e4b117fc-f859-4c99-82f1-8f24339a2379",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "b6bcb2a2-99e7-4aea-b496-f9ab0f61c6a7"
        },
        "item": {
          "id": "14ea9b50-9e61-4e9b-ab59-962eaec0d0ff",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "1f4f687f-37b2-4400-84b4-2c7ac3dab66f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17934dfb-5b47-4bfe-8426-94548c02aedc",
        "cursor": {
          "ref": "a71b02a1-d097-441f-a999-a6d5832987fe",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "c10a23df-eae9-49e7-a17c-e09a08db64b0"
        },
        "item": {
          "id": "17934dfb-5b47-4bfe-8426-94548c02aedc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "d8a25496-aae2-4276-8f73-ddf08c693f28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e34639af-dca4-4032-a3e4-17efae210d59",
        "cursor": {
          "ref": "2cefa0a3-dd32-47f9-a19f-6e1b4e06b470",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "6d134648-357d-4633-a192-a105ed2d807e"
        },
        "item": {
          "id": "e34639af-dca4-4032-a3e4-17efae210d59",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "a5fb08c9-7648-4af6-a8b9-cf03decb4cc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a280d33-49da-455a-bb39-288272bb6146",
        "cursor": {
          "ref": "b07a58e4-c174-4ebf-9aaf-636e4433ac19",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "e21758ca-c4de-4366-b3d7-84706361468b"
        },
        "item": {
          "id": "2a280d33-49da-455a-bb39-288272bb6146",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "0a68391c-0476-44b5-ac83-fe9f3bd0f0af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 927,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "205c5596-0dfb-4ade-9100-ec316c012e85",
        "cursor": {
          "ref": "74889469-a353-473d-a809-248d8bf48a65",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "abd12d5e-7b51-478d-a93b-a4dc0a8b2593"
        },
        "item": {
          "id": "205c5596-0dfb-4ade-9100-ec316c012e85",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "cd5a2e98-ebff-4046-ab24-718320e67cc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d889afee-7df4-4d3f-ae85-d66c6d1bf418",
        "cursor": {
          "ref": "f7191640-95b9-4282-ba6f-7dd350a5042a",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "0dc2fb9b-f589-4aac-8f36-2f33f1d93921"
        },
        "item": {
          "id": "d889afee-7df4-4d3f-ae85-d66c6d1bf418",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "5fbe5f78-57b9-4b1c-88d0-1e16b9fdb37b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 130,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f22388a8-2032-4a3c-b651-120b42811a70",
        "cursor": {
          "ref": "6ecb8a8b-8704-4394-bb64-ac4c85ce6744",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "74224fe2-0f44-4fa7-a133-498a8552b0ad"
        },
        "item": {
          "id": "f22388a8-2032-4a3c-b651-120b42811a70",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "ac03e95e-857f-4412-8d29-627c4a69d64c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bc47f0c-39e9-45a1-9f14-163405ed6a74",
        "cursor": {
          "ref": "4be25907-7fd4-4db9-a2b2-58b421bc6360",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "81b0a58e-1bc0-4bcc-8e20-d3e52bce38b7"
        },
        "item": {
          "id": "2bc47f0c-39e9-45a1-9f14-163405ed6a74",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "babbe6c1-a8c1-4cc5-849a-e80b8a6d04c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0b724d2-6304-4a98-b522-26da031b5ed2",
        "cursor": {
          "ref": "9cec5a0b-6796-490f-a401-a98cd7bcb31a",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "9c8aaf9d-3d27-4b72-97c2-62071fe68a49"
        },
        "item": {
          "id": "d0b724d2-6304-4a98-b522-26da031b5ed2",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "1f8b4759-faa1-4752-bb13-23f78a8c377f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36a43c8d-66ac-4901-88e5-7e965d9bc43e",
        "cursor": {
          "ref": "0877c7fd-9c9a-4878-8e96-1c4e49b8e38c",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "e07bec76-6f20-4ebd-b2fb-3f75d4a4aef0"
        },
        "item": {
          "id": "36a43c8d-66ac-4901-88e5-7e965d9bc43e",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "fef296c0-a5c7-4e1a-a7de-37de9a4697b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70e8cda7-b113-4833-8b5a-f259632f7b8a",
        "cursor": {
          "ref": "73b9bd2d-4c35-4b24-961d-095045b8c453",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "29ce10e4-f0d0-4bb6-9158-b5282ec2fef2"
        },
        "item": {
          "id": "70e8cda7-b113-4833-8b5a-f259632f7b8a",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "9bdf58c0-eb25-4f91-a8b4-65cd70cb6d81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de13184d-a0f0-476a-bba0-ebce6650d3f4",
        "cursor": {
          "ref": "eafac27b-4eb0-4f2b-94ab-88d0199acb98",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "47deda75-a93c-4169-b95b-cf362b6b34be"
        },
        "item": {
          "id": "de13184d-a0f0-476a-bba0-ebce6650d3f4",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "cb92711c-0fc7-4123-aee9-50604324df1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdc8f9c8-d343-4e50-95a5-c8787bd796c2",
        "cursor": {
          "ref": "3780437f-15f4-4f43-9b27-02f0cd8d130b",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "db39ca87-500c-4afa-aaac-52d585f461b1"
        },
        "item": {
          "id": "cdc8f9c8-d343-4e50-95a5-c8787bd796c2",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "a7bd0f68-f972-4d04-a7c6-944a05db9f52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d54efde1-7ad1-469f-a3f8-92db84a7f269",
        "cursor": {
          "ref": "223d3b07-0ad7-4d85-b125-3986c567b34b",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "e07cabdb-eb98-4f99-8e6b-9fe4a524c644"
        },
        "item": {
          "id": "d54efde1-7ad1-469f-a3f8-92db84a7f269",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "aae72fa8-48b2-4af1-b118-4aafb03486a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b27bfa4-606f-40a7-be4b-c57e23aef3f0",
        "cursor": {
          "ref": "e3bca0a1-bedd-4ea9-910e-33b8b2b5a40d",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "3da862be-045e-4f5b-9963-b47c2504b8f0"
        },
        "item": {
          "id": "1b27bfa4-606f-40a7-be4b-c57e23aef3f0",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "7444ff2e-8525-49e0-be95-ef17e21e423f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c27a11f0-2bc6-4085-a4ad-a4cf4347440e",
        "cursor": {
          "ref": "c54b9e04-8244-49af-926d-9c8ea6380ac4",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "d2b086bd-9b5e-4761-bdb9-ab6286a1604c"
        },
        "item": {
          "id": "c27a11f0-2bc6-4085-a4ad-a4cf4347440e",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "f503c1ec-6b01-473a-bdf2-b99450c3d3cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9f6fd82-18ac-4581-86d1-ed7116dd4d40",
        "cursor": {
          "ref": "402e87c3-964b-49cc-b33b-5c2bd070aae1",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "bb70efc0-95d9-45f6-85c2-271e73f458db"
        },
        "item": {
          "id": "d9f6fd82-18ac-4581-86d1-ed7116dd4d40",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "a8fd1ad5-8381-4895-837f-f8fcc04ffb66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d16fef9-3595-4f22-86a0-60b9f73b45db",
        "cursor": {
          "ref": "d955295b-a553-4c13-8296-ad9b10350124",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "999c79f6-436e-4204-b057-b6c958cc03e3"
        },
        "item": {
          "id": "6d16fef9-3595-4f22-86a0-60b9f73b45db",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "b299d4f7-e5f8-417f-84f2-1ac0303d9086",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 788,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be27245e-6d8e-40bc-b27b-96ea341bddc2",
        "cursor": {
          "ref": "ffe980a3-20a9-46bf-bdc7-5e05d06a3538",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "10d2ae18-69a0-4acf-9ef2-f651fa702756"
        },
        "item": {
          "id": "be27245e-6d8e-40bc-b27b-96ea341bddc2",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "c4ea03cf-c7b5-45b3-b669-ba3c3894d07a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb1c3da9-dc26-4df3-89c2-a8004c5b0c67",
        "cursor": {
          "ref": "13084c62-5413-42d1-9dd2-085247a5f17a",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "5d847a2d-3c44-4001-b9d0-926dc6872ba8"
        },
        "item": {
          "id": "eb1c3da9-dc26-4df3-89c2-a8004c5b0c67",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "9bb42c24-da84-4b8e-a895-9f2c9af2f948",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "106854eb-a314-414a-9f0b-a7860097cb8d",
        "cursor": {
          "ref": "6c544c0e-d8b0-4ee2-be0d-2e5ccd5dc764",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "9bccbb43-abd5-4b21-aa75-6cc6d9325998"
        },
        "item": {
          "id": "106854eb-a314-414a-9f0b-a7860097cb8d",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "b61baba4-fec1-4e93-990f-c13610902086",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "048a28fa-2b6f-4134-879f-d8d3276cc947",
        "cursor": {
          "ref": "ca19676e-b54f-4e28-8f9d-e31aaf37f5e9",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "e0832211-06f8-4c01-9931-71b6247058d9"
        },
        "item": {
          "id": "048a28fa-2b6f-4134-879f-d8d3276cc947",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "5295bced-54dd-46e3-aa9c-03fa63aff011",
          "status": "Created",
          "code": 201,
          "responseTime": 793,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "474757e3-7ff1-418d-b982-f962fb627dc4",
        "cursor": {
          "ref": "d4a8f59d-36a8-4719-ab95-d1ea147e4008",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "4e72e0ba-1517-4a7d-b6d0-d29567dc592e"
        },
        "item": {
          "id": "474757e3-7ff1-418d-b982-f962fb627dc4",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "5b530528-548f-4ad1-9603-75ec015d3815",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d625937c-2f4f-4726-8586-1e3c2667c6e6",
        "cursor": {
          "ref": "e5bcaf60-acb3-4957-8f38-dd2dd8aeea28",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "1d28ea35-d7f1-41c1-ad8d-bff55b3661d0"
        },
        "item": {
          "id": "d625937c-2f4f-4726-8586-1e3c2667c6e6",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "4a089c24-9381-4746-9f79-2ac40a325202",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e73754f-ebaf-40a2-8fd2-408b6470d6ae",
        "cursor": {
          "ref": "76a276a5-3416-4f25-bbd9-2f918c4e4a0e",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "63d7f784-462d-41f5-a70d-565a0e8e1546"
        },
        "item": {
          "id": "4e73754f-ebaf-40a2-8fd2-408b6470d6ae",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "7b7f7652-0baf-4f65-96f1-5d9fd2db03dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f389751-3433-4b7d-8477-cd67b108fa30",
        "cursor": {
          "ref": "d60178e0-add5-46a4-81be-85749e4ae14a",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "13d8c36d-9d05-4317-9b9a-717380227bfd"
        },
        "item": {
          "id": "5f389751-3433-4b7d-8477-cd67b108fa30",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "544ae0b0-0628-42d2-be5a-544c403fa92e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3b2c190-1807-42fc-8fe6-60b81d98aa6c",
        "cursor": {
          "ref": "4ce9325c-15f5-4956-bd97-54e292721349",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "cbcb0def-705e-43a9-a049-336206176934"
        },
        "item": {
          "id": "c3b2c190-1807-42fc-8fe6-60b81d98aa6c",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "f7de4bb6-7c94-42d5-905f-20a1f7e49b08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "725ba465-1eaf-455c-a5ab-7f89042fc2cf",
        "cursor": {
          "ref": "dd9873dd-3613-4593-85b3-2191bb37a25b",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "4ad2a342-6f6f-4c91-a425-12577463f730"
        },
        "item": {
          "id": "725ba465-1eaf-455c-a5ab-7f89042fc2cf",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "6e18cd2a-16d2-419b-aad0-2b30bb4e5c69",
          "status": "Created",
          "code": 201,
          "responseTime": 2358,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "3af7a209-c5c8-4fa9-b136-13d5f9e2d0f7",
        "cursor": {
          "ref": "c3e8eb21-1ce5-48de-ac9f-091f2ff945f7",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "a0dd94ac-370a-4c95-8e30-4251da4df907"
        },
        "item": {
          "id": "3af7a209-c5c8-4fa9-b136-13d5f9e2d0f7",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "e58b2e15-774f-48cc-9a8f-2076c2810213",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "004fb750-c0bb-4099-9082-2fe8f0eee87d",
        "cursor": {
          "ref": "4a7d978b-20f6-41d5-b00d-c2ebcb231ea9",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "d3eae8d1-eb54-48ef-8731-d9940be8b9aa"
        },
        "item": {
          "id": "004fb750-c0bb-4099-9082-2fe8f0eee87d",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "49ba4709-b42d-4dce-82f6-c4db88719191",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9628f0d-5e47-490b-bc6e-9b8011dc4428",
        "cursor": {
          "ref": "93ea9113-d5e7-435a-bdcc-c2ab9e6ee91b",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "33fc4182-6e4a-4176-8cc1-15c6a2e8be33"
        },
        "item": {
          "id": "a9628f0d-5e47-490b-bc6e-9b8011dc4428",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "2b245e9d-ff98-49e4-ab58-d60d36bc6fed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce40bd19-41d6-430b-948c-04ab7b31fba7",
        "cursor": {
          "ref": "2e74e3ef-c2bc-4cd0-9a27-b1bfd82f5c68",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "ed42b4c9-1ff0-44ab-b827-5d92404c234f"
        },
        "item": {
          "id": "ce40bd19-41d6-430b-948c-04ab7b31fba7",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "0188c351-d7cd-4b2d-a72c-aa139e48c2f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "735b85b3-10d5-4607-8434-ef6863da44e0",
        "cursor": {
          "ref": "9a5355a1-41bc-4a51-bcd3-d6140f92ce74",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "8bbe768f-d5dd-4cb7-aa47-5539c8638900"
        },
        "item": {
          "id": "735b85b3-10d5-4607-8434-ef6863da44e0",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "3e8e601d-25c5-4ad6-a049-9c488f455284",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71b2bd49-b02f-4a62-af1e-1c4d9ccac994",
        "cursor": {
          "ref": "11727ad5-a055-4083-9691-2144d6897b7f",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "21e2e668-06a8-48f2-80ba-d49e20ab29fc"
        },
        "item": {
          "id": "71b2bd49-b02f-4a62-af1e-1c4d9ccac994",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "e848e544-b4d9-4f7c-9c28-07bf034da07e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5db501ca-b74b-444a-8d58-a62a81e4e375",
        "cursor": {
          "ref": "30aeff5b-0362-4b9a-be31-9e610d544f4f",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "95b76a7c-fc18-445d-9a31-7f9742f159a9"
        },
        "item": {
          "id": "5db501ca-b74b-444a-8d58-a62a81e4e375",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "6bc0e3d2-3668-4f68-905a-6f14e57c75d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 161,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8726e799-c62f-466c-af80-d27595c04ed3",
        "cursor": {
          "ref": "2b00f2fc-ac8d-4c5a-8cd0-410365093bb2",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "b3a5a525-b5c8-4455-ac4a-5171a6489e35"
        },
        "item": {
          "id": "8726e799-c62f-466c-af80-d27595c04ed3",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "ce3e5af2-7cd2-4893-a2f3-7654e56adb42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07e082c6-bdae-4d18-a1cb-9d8625b438ae",
        "cursor": {
          "ref": "9bbcf6b3-8bb4-4aec-ad1b-2b5c362e0490",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "03a946ce-c658-4027-b202-c89c0f8e0563"
        },
        "item": {
          "id": "07e082c6-bdae-4d18-a1cb-9d8625b438ae",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "4fe7f3d6-28d0-4ecd-804b-785b4aafa83d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "9d9b1a69-5af4-4ab3-96fd-25e7db471816",
        "cursor": {
          "ref": "033c724e-c79d-4fb0-a28a-42d584cd0dc6",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "a02d369c-55f1-410b-b30b-541efc0ff7f4"
        },
        "item": {
          "id": "9d9b1a69-5af4-4ab3-96fd-25e7db471816",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "37bda8f0-df89-4275-bf10-04824356f365",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 139,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "66928808-c792-4d47-8ecf-2179c1a59c6d",
        "cursor": {
          "ref": "8e5d5b08-b9e0-4522-9efe-77a9c75e329a",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "176ffd42-4e75-4b82-a2a5-c17fd84d4460"
        },
        "item": {
          "id": "66928808-c792-4d47-8ecf-2179c1a59c6d",
          "name": "credentials_issue"
        },
        "response": {
          "id": "20604097-b7bf-49d2-a0b1-4462f4d8ad45",
          "status": "Created",
          "code": 201,
          "responseTime": 842,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "87fa74a2-9782-4557-b517-01f704ad10a5",
        "cursor": {
          "ref": "ecb9cfca-6d4a-4e62-96c3-21be67ace198",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "ff73016b-0eda-4ca6-a966-e85a1de99503"
        },
        "item": {
          "id": "87fa74a2-9782-4557-b517-01f704ad10a5",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "1be888fb-3b15-4270-8203-f82fbf3744e0",
          "status": "Created",
          "code": 201,
          "responseTime": 501,
          "responseSize": 591
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6ec1298-d6d5-474e-b45d-5db6cbf6ecce",
        "cursor": {
          "ref": "e5bc9d92-b435-4711-878a-1be995dcb54f",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "b9b2d31e-2c94-4450-bbaf-541c7e4f6103"
        },
        "item": {
          "id": "d6ec1298-d6d5-474e-b45d-5db6cbf6ecce",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "0d978864-48e6-4d08-9ad7-29ccf049568e",
          "status": "Created",
          "code": 201,
          "responseTime": 711,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "427d4a3d-c972-4f7e-b7ed-a35c67e18982",
        "cursor": {
          "ref": "5a9a1a9c-e49e-4f28-ad90-de6781544ef2",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "3f6a6eb6-9b4c-48c8-84e7-e351c6944a79"
        },
        "item": {
          "id": "427d4a3d-c972-4f7e-b7ed-a35c67e18982",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "af29db34-f36c-4902-964f-e71c27c306c9",
          "status": "Created",
          "code": 201,
          "responseTime": 464,
          "responseSize": 560
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f98c826-60fe-43df-8239-46f8ccd2227e",
        "cursor": {
          "ref": "0f72e215-742c-4440-aba8-450ce111a763",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "5ccf835a-3599-4168-8a78-75b770d1e344"
        },
        "item": {
          "id": "1f98c826-60fe-43df-8239-46f8ccd2227e",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "7abee14c-9247-428c-9241-2a0023acd473",
          "status": "Created",
          "code": 201,
          "responseTime": 737,
          "responseSize": 528
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a7fc917-b3af-4f0e-bc6c-03baf703ed91",
        "cursor": {
          "ref": "381a9184-8850-4fef-a058-80e5658c8fde",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "f83e43e1-171f-40e1-83dd-6a6f722c4f36"
        },
        "item": {
          "id": "0a7fc917-b3af-4f0e-bc6c-03baf703ed91",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "a6e08093-d00f-4ad7-a407-20de2ae1b9f7",
          "status": "Created",
          "code": 201,
          "responseTime": 592,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "138c3ba9-1d03-43c0-9058-01e3c1942def",
        "cursor": {
          "ref": "cc158c80-1a96-4801-9662-8a627983b266",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "12d40545-aa7e-4eb5-bebe-8d83ec1617a2"
        },
        "item": {
          "id": "138c3ba9-1d03-43c0-9058-01e3c1942def",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f6f475d6-7bb8-476d-aae6-23b24ae14701",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "138c3ba9-1d03-43c0-9058-01e3c1942def",
        "cursor": {
          "ref": "cc158c80-1a96-4801-9662-8a627983b266",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "12d40545-aa7e-4eb5-bebe-8d83ec1617a2"
        },
        "item": {
          "id": "138c3ba9-1d03-43c0-9058-01e3c1942def",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f6f475d6-7bb8-476d-aae6-23b24ae14701",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "478485f1-2d5f-4714-bcf7-edb8b3c92db6",
        "cursor": {
          "ref": "6c82f658-91b5-41ee-8a61-e918fc3ede9f",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "c6ea47be-79c4-421f-9104-8076ed54cd5a"
        },
        "item": {
          "id": "478485f1-2d5f-4714-bcf7-edb8b3c92db6",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "201820dc-5f13-4de1-b2ff-2797ee310fe3",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "2468b74a-6deb-47e0-bd6a-f555fe55e49b",
        "cursor": {
          "ref": "915373a3-0b01-4674-8a71-5efe5d56c721",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "7e73edaa-276b-4bea-9eac-672c74abbfca"
        },
        "item": {
          "id": "2468b74a-6deb-47e0-bd6a-f555fe55e49b",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "a5fb8dd3-eb3d-4e13-8e9b-cbe0a90d9500",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "5eb9b267-b919-42ee-b783-3e6e2f185cb1",
        "cursor": {
          "ref": "8185aa7f-2b6c-4ff1-8207-3fcdb436a467",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "66c1a779-eeec-4056-8c67-d4f09a4a286d"
        },
        "item": {
          "id": "5eb9b267-b919-42ee-b783-3e6e2f185cb1",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "284a0e89-a1d6-48c3-bc3a-2b2daa0db5e1",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "dab506d0-ddf8-4089-931a-cf502288937a",
        "cursor": {
          "ref": "1688ba59-2aa0-4931-84e1-76a8d2426467",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "8b7ada02-1d21-40dd-a5b7-4bff4c1f5be4"
        },
        "item": {
          "id": "dab506d0-ddf8-4089-931a-cf502288937a",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "c5e6299e-6571-4692-aecf-d1b83c973ead",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "0d5d4448-b5b1-452f-ab1b-6ad413cc0992",
        "cursor": {
          "ref": "1f45511f-fe53-4aa9-b479-e51ce7c21c6b",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "466159c0-87b5-4b02-80e7-25144788852c"
        },
        "item": {
          "id": "0d5d4448-b5b1-452f-ab1b-6ad413cc0992",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "cb87a0d6-6695-4b97-a7e7-f7f6aa2a5c0e",
          "status": "OK",
          "code": 200,
          "responseTime": 55,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "b6092f36-5026-490e-ab55-ec8ca430f480",
        "cursor": {
          "ref": "537b0e66-513c-4e69-bb6b-98061ce80fa8",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "779a9c10-1c6d-4654-8e4c-caac561e6039"
        },
        "item": {
          "id": "b6092f36-5026-490e-ab55-ec8ca430f480",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "9fb6a55d-1246-4490-9bfa-c3da94dd0145",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "5f27ca68-cc33-4fc7-a3e7-782eb87867c7",
        "cursor": {
          "ref": "d71d2d6e-0875-49ec-8c02-a325c4d24129",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "5d95faf3-3c24-4b31-b154-2958a63a51e1"
        },
        "item": {
          "id": "5f27ca68-cc33-4fc7-a3e7-782eb87867c7",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "29b38310-2315-4184-87a6-b79f5f5c606d",
          "status": "OK",
          "code": 200,
          "responseTime": 56,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "c83bbc15-8699-4c2d-8789-d0a32232dc22",
        "cursor": {
          "ref": "e96492e1-5c7d-4736-8f25-03692ab495bf",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "33711e3c-4639-4ac1-9eb1-eb0cdcb5567e"
        },
        "item": {
          "id": "c83bbc15-8699-4c2d-8789-d0a32232dc22",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c062e63f-6be2-460b-9b24-2f30655c5ff5",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "2f3e48aa-cd97-4b3d-9a4a-779a2ba0d744",
        "cursor": {
          "ref": "5f75e4ad-1387-403f-a856-c4ada4b87a56",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "848c9941-1ecf-4d13-ad98-a310c5070d2b"
        },
        "item": {
          "id": "2f3e48aa-cd97-4b3d-9a4a-779a2ba0d744",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "7cea5316-5dad-4148-bbc9-bd7de4c725a6",
          "status": "OK",
          "code": 200,
          "responseTime": 313,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "a8bf5d8e-dd24-4aa9-b555-cd71017a246c",
        "cursor": {
          "ref": "442bb25f-129c-43fd-8c91-79d57851abdd",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "1205268f-88d0-43f4-a607-16976cbbcac9"
        },
        "item": {
          "id": "a8bf5d8e-dd24-4aa9-b555-cd71017a246c",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "6daf87b9-9c4c-47f8-ac0e-f02895505e23",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "0f52ce7f-1086-471f-b086-2eb1e613b193",
        "cursor": {
          "ref": "73c19046-db1b-4ea4-b567-4c0acd18bf76",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "d4d600ef-e418-4493-bb97-eabc7a1ba098"
        },
        "item": {
          "id": "0f52ce7f-1086-471f-b086-2eb1e613b193",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "8c7e9f86-a1f4-4190-bd21-740163693bb0",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "70b2b9b2-3e67-4eef-a687-67da40bb55fc",
        "cursor": {
          "ref": "2c52ede9-0983-4305-acb7-d8084b8aed79",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "3dbb784d-c2bb-4497-9b64-cb25906e3d1f"
        },
        "item": {
          "id": "70b2b9b2-3e67-4eef-a687-67da40bb55fc",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "60ecdd47-a43a-40c9-bffe-edd60841e035",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "06ebeb8d-a785-48de-8285-885ce7878e75",
        "cursor": {
          "ref": "74ef62dd-c65b-44df-8e45-5e456c5f5705",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "eb3ac090-c49d-4451-a56d-fca9ef033f38"
        },
        "item": {
          "id": "06ebeb8d-a785-48de-8285-885ce7878e75",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "87a1cd19-96ea-4174-aaae-0828e4545f50",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "37f06d22-f8a2-4246-a533-08414a009a49",
        "cursor": {
          "ref": "a341a673-fece-488c-9d6b-e3fec783a209",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "cedc714d-d930-4250-82bc-2d27cc4ed425"
        },
        "item": {
          "id": "37f06d22-f8a2-4246-a533-08414a009a49",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "9ffdc517-5108-451e-8b7c-d7fd66bb9bc0",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "6e53076e-c7a9-4b5c-a0e1-9bb3ba32c353",
        "cursor": {
          "ref": "351e2533-322e-4d3c-afb7-0e1877b17db2",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "09629baa-bdee-4718-937c-4795e15e2fbf"
        },
        "item": {
          "id": "6e53076e-c7a9-4b5c-a0e1-9bb3ba32c353",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "77a67231-4be5-416e-87f1-551333c77dba",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "5cac39b6-5c8a-4904-9f3f-6fcd06997611",
        "cursor": {
          "ref": "d24477a0-8cae-419d-87bd-f5de21083d8f",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "9f79b0ee-98b7-4cff-b675-1e438d9f9e3f"
        },
        "item": {
          "id": "5cac39b6-5c8a-4904-9f3f-6fcd06997611",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "4442a482-295e-4799-9611-6a8d2da3450b",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "d2be13d2-f320-4968-adf5-8acb2bafd636",
        "cursor": {
          "ref": "b2564943-b6cd-4f5f-9b68-aa45f4ce9b51",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "ffab9473-8ae3-4377-9fd7-e43bd8d78286"
        },
        "item": {
          "id": "d2be13d2-f320-4968-adf5-8acb2bafd636",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "324b544d-d1fd-4a23-8266-6784c744f368",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "c71866e6-0599-4c01-bcd3-561a67e3385f",
        "cursor": {
          "ref": "fa53145f-eaa2-42b9-8674-87ad70feb228",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "7e05b8e2-b999-465e-8cb5-e33a7784194c"
        },
        "item": {
          "id": "c71866e6-0599-4c01-bcd3-561a67e3385f",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b463ec47-c61c-4457-9b8f-69b1fd3d18aa",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "3f1704a1-ebea-41ef-979e-13be0904bc05",
        "cursor": {
          "ref": "3e25a630-81df-4c9f-b9c3-e71827dc786b",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "22424a48-3fe0-4596-bc16-d92199891847"
        },
        "item": {
          "id": "3f1704a1-ebea-41ef-979e-13be0904bc05",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "50df04a9-a5db-4b6e-b253-c8c27656a2a7",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "1950bf83-2e4e-4971-8b82-b1848a6854ca",
        "cursor": {
          "ref": "486eaa2d-f863-4585-9048-74e46ed2cb10",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "89ad103b-bc25-4bb1-b4f1-b3b3c8cb0da7"
        },
        "item": {
          "id": "1950bf83-2e4e-4971-8b82-b1848a6854ca",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "23520ca5-a5b0-478c-8fed-1829f17fc25c",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "c3412e3b-7544-4959-863b-8c08de96c901",
        "cursor": {
          "ref": "81bb37b7-61c6-4c6d-a073-766c2d51a104",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "829d3362-8cd7-4645-b6e6-9a031db161a1"
        },
        "item": {
          "id": "c3412e3b-7544-4959-863b-8c08de96c901",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "0b69bcf6-0c70-4ce3-bb9e-0c31174d6dba",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "4fea75d9-c30c-41ab-b273-5f12438ac258",
        "cursor": {
          "ref": "01267771-7b41-4b00-bb82-68bce2c0ff73",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "86e95afc-df79-44b6-8672-78afe4a04ac3"
        },
        "item": {
          "id": "4fea75d9-c30c-41ab-b273-5f12438ac258",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "bae4fcb4-bfe5-4c58-a5bf-cb0a3a68f794",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "f54fee28-ed7b-481a-9b9b-a242c4428d1d",
        "cursor": {
          "ref": "c9c0463f-9b4a-4c75-ad52-cd9864d48986",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "c074e7cc-08d4-4ba5-bc74-725a35df5d5f"
        },
        "item": {
          "id": "f54fee28-ed7b-481a-9b9b-a242c4428d1d",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "eaf0f37f-a404-4e5f-b265-9d1113c96eb5",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "80d86cf8-f09d-4d6c-a430-0517eda7614a",
        "cursor": {
          "ref": "dec15474-becb-443d-bf92-36d5ef5f76ce",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "1029dfed-615e-473b-86f8-4dac3aedc5f8"
        },
        "item": {
          "id": "80d86cf8-f09d-4d6c-a430-0517eda7614a",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "0e2480c6-dcbd-4e38-b249-157efb8fac8d",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "ac419c74-63b9-41b5-889c-31c797ff78d1",
        "cursor": {
          "ref": "a43c9227-de85-45af-bcdd-505a16a0501b",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "45800193-8f6a-48e3-9b39-e35de0ef3f66"
        },
        "item": {
          "id": "ac419c74-63b9-41b5-889c-31c797ff78d1",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "be677206-98ce-419e-9878-6c3558c04602",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "81287482-93ff-448c-a102-25de81dd9bce",
        "cursor": {
          "ref": "1530c3ca-de61-492b-8b7d-f8a9b747500f",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "d698221e-cb0a-4d2b-bc4e-825148bb6945"
        },
        "item": {
          "id": "81287482-93ff-448c-a102-25de81dd9bce",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "6a8bfa96-3fb8-446c-9911-9f70d9d93192",
          "status": "OK",
          "code": 200,
          "responseTime": 178,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "10c7f7ce-23da-448f-a091-55eac4c4bbbf",
        "cursor": {
          "ref": "9a2bb243-ef92-4346-b6d5-603aa0558659",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "b3b443a5-e26d-4d83-b0ca-b7130658fc42"
        },
        "item": {
          "id": "10c7f7ce-23da-448f-a091-55eac4c4bbbf",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "aa9e47e2-8569-4953-848c-87ab7de3a655",
          "status": "OK",
          "code": 200,
          "responseTime": 99,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "ebd43179-29d7-4bd2-99f8-1d934f788e11",
        "cursor": {
          "ref": "89703f5b-f85f-4bba-aca7-631ced429d97",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "dc3edc16-5169-4c96-b1c2-7a2589aaec83"
        },
        "item": {
          "id": "ebd43179-29d7-4bd2-99f8-1d934f788e11",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "4d82e756-ecac-481b-bf85-366e68c0571f",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "92e04d4c-7fb2-4c43-83af-2829b73b6a18",
        "cursor": {
          "ref": "9fa0cb78-b868-4653-9d25-53f2e0b3c1e0",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "d3857ede-cad8-4487-aa4e-1afbe30c1c31"
        },
        "item": {
          "id": "92e04d4c-7fb2-4c43-83af-2829b73b6a18",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "b7a5912e-cbb7-4fb8-942d-a935da40bbf0",
          "status": "OK",
          "code": 200,
          "responseTime": 57,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "b7dba53c-f79b-4490-ae0d-16418f3ffb4b",
        "cursor": {
          "ref": "2b63d02d-dd4f-4c05-980e-b36e2787d72c",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "4aa46a89-9b24-480d-ae80-7caa419a10e9"
        },
        "item": {
          "id": "b7dba53c-f79b-4490-ae0d-16418f3ffb4b",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "0467318c-94a2-42f2-b37b-bf527b78392b",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "11ac4246-40a5-47e5-8632-46cadeea0c18",
        "cursor": {
          "ref": "12415c47-2900-4d91-af2e-52911ae3357b",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "e1d2c5b3-b6e7-4ca5-9eeb-c8d4d43189ea"
        },
        "item": {
          "id": "11ac4246-40a5-47e5-8632-46cadeea0c18",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "fefdf577-e93c-46d6-ae8a-08924ffce28b",
          "status": "OK",
          "code": 200,
          "responseTime": 151,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "310c37fb-6e97-4a97-919a-899712235c2f",
        "cursor": {
          "ref": "4d1e16d2-ab7a-4d02-a498-7b67a9a6fbf7",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "1e9783b3-3dde-4373-9a7b-c1678bf74027"
        },
        "item": {
          "id": "310c37fb-6e97-4a97-919a-899712235c2f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "6bd260ee-1951-4708-a511-ead77011f949",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 276,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "979b94d7-e475-4c51-939e-209ff9621d75",
        "cursor": {
          "ref": "322f3395-fb26-4f30-92a9-77ae3a907488",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "619e85b5-fbbe-447c-aa6a-54852c7921ca"
        },
        "item": {
          "id": "979b94d7-e475-4c51-939e-209ff9621d75",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "d656b8e1-b068-4357-a06b-16a8826cdb86",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d78df346-f46a-4935-bafe-3ab5bc813415",
        "cursor": {
          "ref": "bc7f3dbe-8e22-4178-a852-39dde2b28524",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "ffbec5d2-fc21-4329-9f9e-d1b94de0b90e"
        },
        "item": {
          "id": "d78df346-f46a-4935-bafe-3ab5bc813415",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "d70175f4-23bf-4151-96d6-d07715496c84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d78df346-f46a-4935-bafe-3ab5bc813415",
        "cursor": {
          "ref": "bc7f3dbe-8e22-4178-a852-39dde2b28524",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "ffbec5d2-fc21-4329-9f9e-d1b94de0b90e"
        },
        "item": {
          "id": "d78df346-f46a-4935-bafe-3ab5bc813415",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "d70175f4-23bf-4151-96d6-d07715496c84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdb6f726-c81f-4f4a-9183-a1f0fe6a5cef",
        "cursor": {
          "ref": "8e6fc5e0-858a-4840-aad4-5e42b756d6ae",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "3d6896f3-8f96-428f-8697-a07092a8f4a9"
        },
        "item": {
          "id": "cdb6f726-c81f-4f4a-9183-a1f0fe6a5cef",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "c48c84b4-8dbb-426c-8b56-70060564d3d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28c5afbe-51e7-4e71-b14e-eab1820b66bb",
        "cursor": {
          "ref": "d42bab80-aed4-40f8-adcf-8d7b49e3b463",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "4263eb9e-6d08-4fc2-9f68-7e93a823c3e6"
        },
        "item": {
          "id": "28c5afbe-51e7-4e71-b14e-eab1820b66bb",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "eb1fe298-4662-4d00-804d-f21ce0bef114",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f9fdb58-6d6c-4915-86f7-f1a75e21196a",
        "cursor": {
          "ref": "f005cf9a-5351-423d-8b77-d09217d0acc0",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "240d9a49-c803-418d-a20b-6feadc58c220"
        },
        "item": {
          "id": "7f9fdb58-6d6c-4915-86f7-f1a75e21196a",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "50921f90-af06-41cc-8f69-df5746cb94c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4218f0f8-e176-4897-8841-9966975f7d1e",
        "cursor": {
          "ref": "18a4b658-0346-49df-8c93-02118f471391",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "c1d39bf4-9b27-4069-a525-090590b35018"
        },
        "item": {
          "id": "4218f0f8-e176-4897-8841-9966975f7d1e",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "8790f9ef-1d63-492a-9d02-8111dbaccf98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5c77dfe-35f4-4554-8121-1a4a05d04465",
        "cursor": {
          "ref": "be2b654b-3634-465c-9afb-4d7a18581da0",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "0077e51d-12f6-4632-8987-162ba16011de"
        },
        "item": {
          "id": "e5c77dfe-35f4-4554-8121-1a4a05d04465",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "b9ae7b0f-0f8c-457f-b96e-9a9d79e03731",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8a3883e-1c3c-4c17-99eb-c2c265e79dde",
        "cursor": {
          "ref": "34771cec-407b-436b-935b-6283047e40a8",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "7c16cc4a-e0a4-43ee-bae4-dc68856dd7b4"
        },
        "item": {
          "id": "c8a3883e-1c3c-4c17-99eb-c2c265e79dde",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "4d441f81-1009-419c-a997-a8446ce84788",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2112,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77329a5e-d29b-42d8-b9db-f4d4cb76899f",
        "cursor": {
          "ref": "08775cfc-d562-4890-8574-feb1ec33e925",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "dc660da8-b6e4-4ed0-8d89-cb6fad0c29c5"
        },
        "item": {
          "id": "77329a5e-d29b-42d8-b9db-f4d4cb76899f",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "ccde4d50-8bb4-457d-9869-0ba6d45d8aba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb675c35-2e8b-4241-8861-d2467f1bd554",
        "cursor": {
          "ref": "32fd2ec2-755a-46a0-9d9b-a803aa4db28c",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "2c43958f-ffef-4be1-a248-85a4b31a4cea"
        },
        "item": {
          "id": "eb675c35-2e8b-4241-8861-d2467f1bd554",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "d84fe670-97f0-4e90-9bb8-dd6e86f66eae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c27dac1b-1bba-4fad-ad62-b2eead61998a",
        "cursor": {
          "ref": "6759046b-5b3a-44d6-8c23-bcaea8184720",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "fe5d621b-8177-4dbc-99c3-4324510a78b5"
        },
        "item": {
          "id": "c27dac1b-1bba-4fad-ad62-b2eead61998a",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "82c71b59-53f1-42c9-b896-f5d88927fa8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03974331-90cf-4d26-b3a6-fd31ed12cec4",
        "cursor": {
          "ref": "3d8c092f-9af1-4255-9b12-bb0ca6e675af",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "eba6c1a0-d20e-4790-a863-6cccb1a6d4d3"
        },
        "item": {
          "id": "03974331-90cf-4d26-b3a6-fd31ed12cec4",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "a5178e9c-7305-4213-8f54-6199cab6400a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ee2d1a5-7644-43cf-b915-39273a37d880",
        "cursor": {
          "ref": "e1698908-6411-4b5a-bbc3-da34c1125be7",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "c675bd16-9f14-44b4-b3b4-f6fe6d1341e6"
        },
        "item": {
          "id": "0ee2d1a5-7644-43cf-b915-39273a37d880",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "f1eb0ce0-f8b6-47ed-b024-2ddeb7fdc2b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b47be9d-bd1f-42bc-8db9-06e2f5282a0d",
        "cursor": {
          "ref": "5167d309-6f49-44f6-b85a-eb7c4d57dae0",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "80cec838-4e2e-4672-a3d3-00aedd097c2a"
        },
        "item": {
          "id": "5b47be9d-bd1f-42bc-8db9-06e2f5282a0d",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "59278cdb-060c-45e6-916b-5e067c14dfed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 202,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ccf8689-4095-4826-8feb-382c2f095817",
        "cursor": {
          "ref": "42c5ea7c-2afa-4c95-9a6f-703ae17616fc",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "29b7e5d0-213c-4a8d-a896-4abb95e55314"
        },
        "item": {
          "id": "0ccf8689-4095-4826-8feb-382c2f095817",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "8de345f5-76fa-41b6-9026-e9c975ee3195",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a501379-0642-4bb9-8ee9-aa75cfbfb530",
        "cursor": {
          "ref": "f1f10435-2fea-4289-a2c1-7a5c39fbd4e7",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "ef25fad1-1ef3-49e4-ab3a-2a95738faca0"
        },
        "item": {
          "id": "6a501379-0642-4bb9-8ee9-aa75cfbfb530",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "706eb3db-f617-451d-ab49-3e2d62daf747",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e20c66b-d9fc-40ee-bbb1-8b85a2748ac7",
        "cursor": {
          "ref": "43e3fec6-edf9-449f-84cf-e230985653d8",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "828dc387-1a83-404e-9881-ffca8bcfedbb"
        },
        "item": {
          "id": "0e20c66b-d9fc-40ee-bbb1-8b85a2748ac7",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "fcb0cf1c-f95d-49ca-915a-e48b5e9ed035",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21590332-1ffa-4ef0-8159-ff687b15bc43",
        "cursor": {
          "ref": "0edc55a1-e0bf-481f-8ca6-d8f7ec3080a1",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "5336844c-a196-4d3d-bb10-6c0f66d23c9f"
        },
        "item": {
          "id": "21590332-1ffa-4ef0-8159-ff687b15bc43",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "e6367eb6-2409-436d-b0a6-343d86924070",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8b6dd18-0d94-4b93-bcae-37de26297ee7",
        "cursor": {
          "ref": "438efb4b-c6e3-417d-821c-304c1ade19c0",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "19f3db8e-ae37-4a9e-a3f1-9b0826de0620"
        },
        "item": {
          "id": "c8b6dd18-0d94-4b93-bcae-37de26297ee7",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "8b5d5525-d2b7-486e-88d4-de174a8f3c67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 911,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62a77caa-967d-4a01-8427-5a6488e23f22",
        "cursor": {
          "ref": "3681303d-cadd-45f7-bab6-d865b3077918",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "f52c0c62-d5ee-4fd1-b9a1-9fc3ef46e8b0"
        },
        "item": {
          "id": "62a77caa-967d-4a01-8427-5a6488e23f22",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "5e742ca8-04a6-4243-85a2-10e151e1b325",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 853,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "706776b5-bf58-4004-9c18-856849bff803",
        "cursor": {
          "ref": "ea38dbd0-4577-4804-852a-01752ce4f8d7",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "b6d0ab86-1de9-4153-adbf-fcaafa69eb6d"
        },
        "item": {
          "id": "706776b5-bf58-4004-9c18-856849bff803",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "2b133577-f97a-42ee-952f-dabbba955f59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 560,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d1081c8-5baa-4376-ab5d-541f0705a124",
        "cursor": {
          "ref": "929775d5-bb04-40f8-b19d-434d0fb360c0",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "107e95bc-fb65-4fd8-b84e-35652d653161"
        },
        "item": {
          "id": "9d1081c8-5baa-4376-ab5d-541f0705a124",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "3a435a6a-94c6-4e11-ae28-287d406c2d06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 379,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10ca83aa-6153-481d-b174-dd2bfffd6d51",
        "cursor": {
          "ref": "ba95c1f5-b3d4-49f6-9546-809f8e03813d",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "8aabb7c2-f941-4d4d-a102-0e7b9ef622f5"
        },
        "item": {
          "id": "10ca83aa-6153-481d-b174-dd2bfffd6d51",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "b35d4a24-197c-4d13-8585-1045c104856a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 330,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91c9f69d-4b42-47b2-bfe7-a153e2b3855d",
        "cursor": {
          "ref": "8b4c5bc7-77b3-4867-b1b2-7a010ca6e6e9",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "df9c65b2-224e-452f-bf8c-7ce2a736dfaf"
        },
        "item": {
          "id": "91c9f69d-4b42-47b2-bfe7-a153e2b3855d",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "d6d5f165-0c86-4920-8517-b450165b820b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 264,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09aa8c0f-efa7-436a-8aaa-c6d93717dc15",
        "cursor": {
          "ref": "2b929253-82d3-4986-b8ae-5f6336d3d646",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "d2e1f3a9-0ec1-4c4d-9713-f21c66020f71"
        },
        "item": {
          "id": "09aa8c0f-efa7-436a-8aaa-c6d93717dc15",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "25e26af4-543c-4c87-a3ad-bf5a728dd0ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b89f7ff6-3d9d-48be-9091-caceecb48d0a",
        "cursor": {
          "ref": "b3ab52e0-a493-435b-8fa0-e2e590a36681",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "b62996d3-eca4-406e-a943-38705ad56ae7"
        },
        "item": {
          "id": "b89f7ff6-3d9d-48be-9091-caceecb48d0a",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "2e839fe3-dbd9-4822-a945-2b12c9007e4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efa04828-e6dc-4662-b9e6-a36d5a1f9a09",
        "cursor": {
          "ref": "c5e9814b-6d7c-4cd0-8dd8-7d1a12d90479",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "9dbca864-5848-4e94-bf16-1834c7d5c838"
        },
        "item": {
          "id": "efa04828-e6dc-4662-b9e6-a36d5a1f9a09",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "e2cdbe4a-df9a-48f9-9e01-68d4aee434ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1809,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9f4ef5b-0301-45d7-bf7b-40f9147959d0",
        "cursor": {
          "ref": "1c55cf91-921e-4c28-bcb1-cf296cdf06d3",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "c07fb3d0-7d10-4a1a-a59d-ae3f823e9623"
        },
        "item": {
          "id": "a9f4ef5b-0301-45d7-bf7b-40f9147959d0",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "8f62a4be-48cd-4ed4-8e3a-09d1c6b26eba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8796605-9385-4428-9f4c-477dccd66553",
        "cursor": {
          "ref": "2979a228-69ab-4c8e-a72c-7cc3fb3f8cf6",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "279d2bfc-af9b-4e9a-a558-06ed44dc875c"
        },
        "item": {
          "id": "f8796605-9385-4428-9f4c-477dccd66553",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "b64625c3-4a9a-41a0-a920-ddccddb9dff3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6b16bc9-204d-4124-9060-70864c63a57a",
        "cursor": {
          "ref": "6bc7b179-98db-4b71-bf26-7824f435cecc",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "cccd7c70-1f66-451e-8e88-d762fba214e0"
        },
        "item": {
          "id": "a6b16bc9-204d-4124-9060-70864c63a57a",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "72480e53-d4f6-4619-8f25-fd22f98abfb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 400,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed8750cc-a809-40e9-8619-25024c88e3c1",
        "cursor": {
          "ref": "c6296215-f55a-4a4b-b90f-63ccc4055173",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "e612ac4d-ac4c-4408-97d4-3e77a22bbdeb"
        },
        "item": {
          "id": "ed8750cc-a809-40e9-8619-25024c88e3c1",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "5f4397fc-8334-4394-9590-4b58db3ae195",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b1f6ed5-d078-46c4-ad54-33c2e7f20e1f",
        "cursor": {
          "ref": "ce1f58b3-6de0-4161-9dc7-05cac7809d43",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "9246ca6a-1e38-41ab-a923-7d4603318d40"
        },
        "item": {
          "id": "6b1f6ed5-d078-46c4-ad54-33c2e7f20e1f",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "8983ba00-0cbd-4d41-a709-39b9c32048d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d6e72c2-7565-4e5c-aa73-bb120fc4f75c",
        "cursor": {
          "ref": "52207c0e-47b3-4cfe-bcdc-9b961072a7f2",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "ecea743f-d4b0-423b-b6fc-9d0da8890a86"
        },
        "item": {
          "id": "0d6e72c2-7565-4e5c-aa73-bb120fc4f75c",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "bac64aec-3b1a-44dd-bf04-8a1c7495625f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03053e9b-fb27-41d9-a45f-e4d366a0a004",
        "cursor": {
          "ref": "dbb75de7-3143-4530-a5b5-feb8b02d536a",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "b7dd5217-76e9-4526-bb8a-36995d3bfd56"
        },
        "item": {
          "id": "03053e9b-fb27-41d9-a45f-e4d366a0a004",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "7bdb0020-ce1b-4c27-ad66-7e093f708a00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 985,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "473b637e-86dd-4c3e-8efb-363b8e0f35c0",
        "cursor": {
          "ref": "0b78288b-a434-43ee-be1e-48044db09682",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "62aa0bcd-aadb-4c3b-928b-e044651d0ace"
        },
        "item": {
          "id": "473b637e-86dd-4c3e-8efb-363b8e0f35c0",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "c4502f71-7b44-414e-9410-b2cd5020c1fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ba99cc6-804c-4514-9000-e569d5fcafcb",
        "cursor": {
          "ref": "9b56c6f4-416c-4ca4-adab-755180072885",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "67f02ef3-e063-492d-9951-d010dbda82c4"
        },
        "item": {
          "id": "5ba99cc6-804c-4514-9000-e569d5fcafcb",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "2e9ce428-9376-44cb-92ea-4854da1105c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1081,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "658ed9e8-9676-444f-90bb-251493d15241",
        "cursor": {
          "ref": "ece2ab75-50d1-4de7-b6fc-db129172fd10",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "8dce8c5f-f6bd-473d-8d08-6c480531ced6"
        },
        "item": {
          "id": "658ed9e8-9676-444f-90bb-251493d15241",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "b9fe57b7-0570-4000-8e95-27be9a271b47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 421,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0d24d5d-1fe8-43b1-888a-2926982c6b9e",
        "cursor": {
          "ref": "edbdc000-5cc3-4a47-bf24-78b574448764",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "ff8db284-2380-4fb5-8608-5292538200c1"
        },
        "item": {
          "id": "a0d24d5d-1fe8-43b1-888a-2926982c6b9e",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "e028af8c-b05a-4ef1-9f2d-45f908c00aa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1625,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dac704fd-ed47-4944-abb0-db73ab59771f",
        "cursor": {
          "ref": "cfd9ac34-6621-408b-ad6a-5677d28b9362",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "19d83383-baee-44c5-8bd4-55679a0908ea"
        },
        "item": {
          "id": "dac704fd-ed47-4944-abb0-db73ab59771f",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "6b966506-ae5c-403d-a628-c5d398c9cb4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 690,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49404403-cbde-4cd6-848f-941ced0f025e",
        "cursor": {
          "ref": "4069ffd8-04eb-4c1e-bf75-48e960b153c2",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "5ade1620-95a5-4570-8cdc-a8aa23a5e05e"
        },
        "item": {
          "id": "49404403-cbde-4cd6-848f-941ced0f025e",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "2c38cb11-95e8-4cc1-8a4a-0396153ed580",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 422,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28fc8ec5-5097-466f-af12-eb2a1e202fd8",
        "cursor": {
          "ref": "f2dd612e-3f45-432c-bbfb-e5fb83411b85",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "2a0037c1-78ea-456e-97d5-2414b3d47677"
        },
        "item": {
          "id": "28fc8ec5-5097-466f-af12-eb2a1e202fd8",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "d860e2ca-94d4-4921-a930-3da366080963",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 430,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "967e4553-b8fc-4e42-b394-05f93ddc6201",
        "cursor": {
          "ref": "4b5352c3-0711-4295-8429-0b7e46e6326f",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "2f2d4e1a-278a-4773-9a4c-92c2fd4f492a"
        },
        "item": {
          "id": "967e4553-b8fc-4e42-b394-05f93ddc6201",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "2b47b6d2-12fa-4203-a003-a2fe8c546af3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 514,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebc718a1-a69d-4243-b4d6-47f68a69b2d4",
        "cursor": {
          "ref": "016a972e-fca1-4363-ab68-e597a50c7664",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "e8cdcbf2-75ad-42a7-891a-d1fbe1accec7"
        },
        "item": {
          "id": "ebc718a1-a69d-4243-b4d6-47f68a69b2d4",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "85e49a1b-5201-421f-8865-67014f9a9d7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 761,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57de9e7c-61b8-49c8-bbcd-b4c7ab6b7fd7",
        "cursor": {
          "ref": "fae607e8-c7ff-4fd3-99a5-6aa9b443b4f9",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "ffa69001-b54d-4e1d-b6ba-408c3e895fac"
        },
        "item": {
          "id": "57de9e7c-61b8-49c8-bbcd-b4c7ab6b7fd7",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "82be6a53-d456-4717-9d9b-91d720371f66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 323,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9822924-f71e-4f23-8104-a6d58ea37158",
        "cursor": {
          "ref": "ec4a82e2-f6ac-4f0c-b064-3ba96707627d",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "b82c5c10-44e6-47c0-9367-81b60a59f984"
        },
        "item": {
          "id": "a9822924-f71e-4f23-8104-a6d58ea37158",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "bb1853bd-fe83-4ce0-bbea-383376992932",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 468,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7044cbf1-10b3-4fe0-8821-0055cc658405",
        "cursor": {
          "ref": "08fbbdf8-3292-4c75-83fb-86f6be038014",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "8ee345f1-604c-45d6-ab08-9ac4ba24a787"
        },
        "item": {
          "id": "7044cbf1-10b3-4fe0-8821-0055cc658405",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "1902762a-85ae-4f08-9ae1-135ac364d91c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 621,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31681e27-0f9f-4938-b1a1-6d58425e4a6a",
        "cursor": {
          "ref": "00eb4951-0133-4c9f-8a59-ff1bd1f4bc17",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "aea851fe-0173-4d35-aaee-ff6f0eb25615"
        },
        "item": {
          "id": "31681e27-0f9f-4938-b1a1-6d58425e4a6a",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "75b481c0-8163-475d-9bc9-240712114957",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 357,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f28afb9-09b2-418b-9f6f-849908d8e58f",
        "cursor": {
          "ref": "00092948-6987-400e-8218-4a3885fd2f3a",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "a45b0295-2a85-4c1b-98c8-86b6d0afde54"
        },
        "item": {
          "id": "4f28afb9-09b2-418b-9f6f-849908d8e58f",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "88b058b3-a140-42dd-b0af-4cb314105188",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 641,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "270d409c-9a0d-4481-acec-69d4f6b4027d",
        "cursor": {
          "ref": "e6f6d612-283f-49a1-8f5e-631f7c904d38",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "0dfd1ffb-9862-420d-8dad-36e21191e3fb"
        },
        "item": {
          "id": "270d409c-9a0d-4481-acec-69d4f6b4027d",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "4752d736-c7e8-4aa9-9238-23354a408204",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1308,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bb53b6b-fd94-4470-a925-3d76767b2345",
        "cursor": {
          "ref": "4cf1cab3-9fb9-4ab9-8ca3-657b400b8310",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "d0211764-5dcb-41c4-9a48-01fc7d9bf1aa"
        },
        "item": {
          "id": "9bb53b6b-fd94-4470-a925-3d76767b2345",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "a965b014-42a0-4453-9211-4fb41433321c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 320,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cd3579a-d9e2-4ce2-9b08-7e0d1506af92",
        "cursor": {
          "ref": "5d05f98a-eaaa-4c50-bd8f-503a72e365a9",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "024fe287-62dc-4489-84ac-e663b7b736fa"
        },
        "item": {
          "id": "8cd3579a-d9e2-4ce2-9b08-7e0d1506af92",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "d683693c-9fd8-4af0-8f9a-d4658cb75a8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 619,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa857edc-f84d-4242-826a-4805b7a59aca",
        "cursor": {
          "ref": "bee8f6ca-70f4-4629-b080-e3872ca974b3",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "70dcae52-005c-476c-a8f6-0b746f2e0cf7"
        },
        "item": {
          "id": "fa857edc-f84d-4242-826a-4805b7a59aca",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "b85eaa42-a387-47ad-bf39-fc7ec95aa87f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 402,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a201ea9b-134a-4032-b61a-15979cabbecc",
        "cursor": {
          "ref": "eb028bf5-7d2d-4f1c-b4a9-3c1f0ec90535",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "26158afe-4407-4923-b767-2e4b2b512e05"
        },
        "item": {
          "id": "a201ea9b-134a-4032-b61a-15979cabbecc",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "e97d68cd-3d44-4cf9-85df-3fe4159bff96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 523,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd139dfd-3174-4c91-939e-787897f453b0",
        "cursor": {
          "ref": "205033b8-cd43-4d09-8d9d-70251cf45f68",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "260880e8-338c-419d-8684-0896af8923fc"
        },
        "item": {
          "id": "cd139dfd-3174-4c91-939e-787897f453b0",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "b576e477-4ef4-4a3d-91f3-d15d09c31bae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 873,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e0d0535-d274-46eb-94b9-8cb280b2542d",
        "cursor": {
          "ref": "846ed8fb-1971-49d3-96b5-1525e73d0cdd",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "947d9d45-f85c-4e4e-8607-639248781678"
        },
        "item": {
          "id": "3e0d0535-d274-46eb-94b9-8cb280b2542d",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "a15b9bee-a3bf-40bd-aabb-88f7ff49c09d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f7cfb6e-25db-4b19-8100-f39805a92ce7",
        "cursor": {
          "ref": "37f67b46-3593-4aa2-a12c-3a2a772c6d65",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "cff977c3-6cf9-4e1a-b9db-dd2b69c17092"
        },
        "item": {
          "id": "6f7cfb6e-25db-4b19-8100-f39805a92ce7",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "33ef1731-d7e8-48c9-99e0-4da122aeafd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21b03883-bab4-4192-afd0-735f563fa70e",
        "cursor": {
          "ref": "269eddad-07ff-44c8-a749-4310b24440f1",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "8de7c445-1bd8-43a3-a567-4bddb5de1e60"
        },
        "item": {
          "id": "21b03883-bab4-4192-afd0-735f563fa70e",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "2dfd0725-1528-48a1-81eb-1e6703bd1459",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6f00488-46a3-46ad-b9c9-6f3572b6c3c6",
        "cursor": {
          "ref": "bbeb0c03-81ea-4fcd-939d-1401d53f8e5d",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "e4bd15c0-746e-44b7-9d29-2d93922cced1"
        },
        "item": {
          "id": "b6f00488-46a3-46ad-b9c9-6f3572b6c3c6",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "6bd76981-2c02-499f-830f-2da10380c22d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2016,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84e82c4f-0b5d-402c-8acf-3595df21a5cc",
        "cursor": {
          "ref": "2738901c-6692-4084-beeb-e7a5b7aa9ac7",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "a95e6200-5145-422f-abdd-f511420ceff3"
        },
        "item": {
          "id": "84e82c4f-0b5d-402c-8acf-3595df21a5cc",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "e2509535-6480-49fe-90ed-b768391b713e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c40791f1-7de2-4ed1-80b3-a8d31bbf515b",
        "cursor": {
          "ref": "0a81d80a-6270-40cb-9346-b20d056a4a5c",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "c6a20d69-74ad-4750-ae22-e7c12e7f34ce"
        },
        "item": {
          "id": "c40791f1-7de2-4ed1-80b3-a8d31bbf515b",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "45711efb-8e4d-4191-be2e-73b2f5edd626",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dbb9694-fa4a-4b7f-801e-1529e3af75eb",
        "cursor": {
          "ref": "5c629c48-ad96-4711-ab6e-212c33138961",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "faf9cc9e-cf62-4be9-a977-3e7d04e612ed"
        },
        "item": {
          "id": "3dbb9694-fa4a-4b7f-801e-1529e3af75eb",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "5b3fe685-e4be-4705-8c1f-3af053170e81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 153,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74150d51-c106-4dee-9cd8-e4ff8a82ef95",
        "cursor": {
          "ref": "818c4de3-c4d1-402c-91f4-63e99462ef33",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "6d7aeb55-1660-4516-a1d3-c656860b7fed"
        },
        "item": {
          "id": "74150d51-c106-4dee-9cd8-e4ff8a82ef95",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "789147dd-74cd-4cd1-b4b7-49963b3269d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceb5236c-a9b4-4a62-bea5-7c8b4e18f765",
        "cursor": {
          "ref": "bdc2996d-3631-4335-aa40-653088bfdea9",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "5baff766-2ab4-4e27-b68b-f336bd933d2c"
        },
        "item": {
          "id": "ceb5236c-a9b4-4a62-bea5-7c8b4e18f765",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "b14132c8-cc6b-487f-877f-9c32df39310c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 610,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ac16436-96c7-4bb8-a5e6-3598a64597bf",
        "cursor": {
          "ref": "9054406d-2cff-4aa4-a535-395f97de8441",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "e256a0a3-8a51-4367-a101-06aacf8aec02"
        },
        "item": {
          "id": "5ac16436-96c7-4bb8-a5e6-3598a64597bf",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "a255638b-0065-4566-9f5e-6e79e34a7af8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2392667e-4e77-4887-9795-cabb7c226c02",
        "cursor": {
          "ref": "d894d22e-dbbf-4777-bec1-f8fea8c95402",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "c2a01b30-b5ba-4d19-82e2-d59460caba3f"
        },
        "item": {
          "id": "2392667e-4e77-4887-9795-cabb7c226c02",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "e28d382b-bfb0-40fa-bee4-d633a0319b85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d669de2-6beb-4f52-89e2-ea3360d1d551",
        "cursor": {
          "ref": "a2a5e604-3424-4307-977b-d987e2168054",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "9e9e20f9-1c7c-4d17-8bbe-b562b723099c"
        },
        "item": {
          "id": "9d669de2-6beb-4f52-89e2-ea3360d1d551",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "6996120c-2094-4382-815e-69fb312f1683",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "915e29b4-18eb-4ffe-98b1-042bf433f419",
        "cursor": {
          "ref": "12dd03e8-784b-4613-a1d9-ee5da4edf97e",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "01d73321-aabd-4cba-801b-ea543f443ef0"
        },
        "item": {
          "id": "915e29b4-18eb-4ffe-98b1-042bf433f419",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "f3623fac-e3c7-4f67-8223-1e0e94e3b5c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb50b815-419d-43c7-9579-0fcb9684ca89",
        "cursor": {
          "ref": "8949ee5b-dd55-43b5-9cf2-26b847769977",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "eefea5e6-5809-44e9-b42b-9b4e2a061035"
        },
        "item": {
          "id": "eb50b815-419d-43c7-9579-0fcb9684ca89",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "77708ae6-8117-4e43-baa9-370eee53c963",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f195313a-8f8b-47e8-966b-4127a9989f52",
        "cursor": {
          "ref": "330136ff-c363-4f4e-aa67-565a4e6ae377",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "9a862e65-590f-4496-9efa-278039f1bc0d"
        },
        "item": {
          "id": "f195313a-8f8b-47e8-966b-4127a9989f52",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "5f29af66-f214-47df-966e-16dc7c4e358f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2393522c-fd29-4128-b4e5-ce507641634d",
        "cursor": {
          "ref": "0dcc93db-3ffa-4bee-8126-fec4dbfdd230",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "aaf8ac6a-9e76-480b-842b-45705d2d42ec"
        },
        "item": {
          "id": "2393522c-fd29-4128-b4e5-ce507641634d",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "6ca594a6-a270-455c-a0c2-e52c0864d9b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f531b2df-409e-419c-9ef1-917d7eac5f8e",
        "cursor": {
          "ref": "093aabaf-5612-4e5f-95b5-0691d8e57b6e",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "76acaa3f-cb33-4dce-b7f4-34a17c9ec76d"
        },
        "item": {
          "id": "f531b2df-409e-419c-9ef1-917d7eac5f8e",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "3f7af62c-83ee-4a89-a183-3c8195014449",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "341da2cc-a954-4fc8-9e7b-2761fe8687e7",
        "cursor": {
          "ref": "d83f43a1-ab66-4491-8afc-706268bab160",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "c91861fe-9511-4879-b180-bba850499148"
        },
        "item": {
          "id": "341da2cc-a954-4fc8-9e7b-2761fe8687e7",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "b94da73c-3cfd-4957-b9ab-f8ec1d3ec9ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0654254e-5144-43f4-8482-a5bc248f77a9",
        "cursor": {
          "ref": "1184bb1d-6894-4122-98fd-41a2e4d4dcb9",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "caa7ddf2-c2fd-4f0a-a198-7f6aee6c533d"
        },
        "item": {
          "id": "0654254e-5144-43f4-8482-a5bc248f77a9",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "27bb051a-7c31-4d48-952f-8a49111f20b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af5272d8-6ba0-4d22-a37c-babecfd14785",
        "cursor": {
          "ref": "fcfc64f4-766a-41de-83c6-4a0a19d51b00",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "41d2a9f6-17e9-4273-8994-7f9f90602cd4"
        },
        "item": {
          "id": "af5272d8-6ba0-4d22-a37c-babecfd14785",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "adf078f1-74ba-46f4-9165-ca7a80524227",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8cb2ce8-4c84-4ac8-9225-8cb5d6035e2c",
        "cursor": {
          "ref": "bd0f1337-d13f-4376-89da-43fce6d5fbed",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "a0485f07-cd0f-4d61-8fec-51e7994d880a"
        },
        "item": {
          "id": "f8cb2ce8-4c84-4ac8-9225-8cb5d6035e2c",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "8108ceb3-d5a0-4e0e-95d2-6eda6083fce3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2be65c2d-9e39-46c2-8a20-d3d32933d4e8",
        "cursor": {
          "ref": "c0de3de1-f502-43be-90bb-35836b63ed16",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "7c8b2b1d-c452-41ba-9b11-1288561e23ad"
        },
        "item": {
          "id": "2be65c2d-9e39-46c2-8a20-d3d32933d4e8",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "d01be747-0e5b-41c2-89e8-585daaa14fd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5933238e-d54f-445a-a75e-26ac21694bf7",
        "cursor": {
          "ref": "ae88fb0e-d82a-48b6-9bc7-c4b05ce69296",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "eee05e58-d055-4721-af6d-81c38becf968"
        },
        "item": {
          "id": "5933238e-d54f-445a-a75e-26ac21694bf7",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "fbb05416-f512-4a70-b06a-2cf587941809",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db3b1c6e-4228-41df-844c-b6e45847e1c3",
        "cursor": {
          "ref": "cb8f6054-c537-4606-8ed0-ea9fca93677c",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "889ace11-846f-4208-8f3e-65781ff8c005"
        },
        "item": {
          "id": "db3b1c6e-4228-41df-844c-b6e45847e1c3",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "6ceecf11-73bc-4268-8e55-9e1e5db9fcac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "629030e9-fd4a-4ffb-96c8-838c5decfc8d",
        "cursor": {
          "ref": "10427ef7-6ea5-40d4-9a0a-962ec031c09c",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "ccdb4ade-c937-4ca7-a495-c957fa8ca423"
        },
        "item": {
          "id": "629030e9-fd4a-4ffb-96c8-838c5decfc8d",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "417b8c34-1f55-48d1-a06d-b6f5a2653bbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65e14331-6370-4cb1-8954-4ed44f599647",
        "cursor": {
          "ref": "9df4de9b-cb5d-4548-b740-677999f71da0",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "b60e9142-012d-4cd6-a453-7aebfaacfbbf"
        },
        "item": {
          "id": "65e14331-6370-4cb1-8954-4ed44f599647",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "871630f1-bcf5-4b1d-b095-6f4aeb11989a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26e84a0a-8baf-454b-ab40-e639faecbfa1",
        "cursor": {
          "ref": "e6de1165-a150-45a8-9046-f5df41a6eec2",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "cbd37077-a9f6-4859-abb6-acc9cc6b044b"
        },
        "item": {
          "id": "26e84a0a-8baf-454b-ab40-e639faecbfa1",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "da49a9a5-4818-4de6-bb14-c103fb99b765",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15d0f64b-2766-4861-87a5-1aece1622236",
        "cursor": {
          "ref": "8380ac4a-6ff6-4efd-a3ad-ceaf6542aeda",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "2b5a7da2-f7e3-4e89-964a-ea58a6886730"
        },
        "item": {
          "id": "15d0f64b-2766-4861-87a5-1aece1622236",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "8358bed9-ead2-4b8a-9158-b732e413c076",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cb0e22a-dae6-4265-a4ec-e103dc534271",
        "cursor": {
          "ref": "d30d1e22-4518-41c9-937b-0ab1a408fad0",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "80d3a772-988a-42c0-9e10-6f9b0b121ffd"
        },
        "item": {
          "id": "1cb0e22a-dae6-4265-a4ec-e103dc534271",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "5f3d085f-11e9-4e4e-b098-8db9ababca1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc73121d-c450-49af-b73d-5eadaf4ceb0f",
        "cursor": {
          "ref": "a0afcfae-29b3-4185-ad62-ac330afc6b40",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "7054fcca-8e23-4496-8e04-00ae2f9480d8"
        },
        "item": {
          "id": "fc73121d-c450-49af-b73d-5eadaf4ceb0f",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "b02c53fb-8344-4702-a0cd-dd41d0ecf5f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "603375bd-56cd-4cd6-a53a-9dff12250f1a",
        "cursor": {
          "ref": "05ba431a-63c7-45be-be11-89f1d964528b",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "2eb13162-641e-4257-b46d-a738b10b00c7"
        },
        "item": {
          "id": "603375bd-56cd-4cd6-a53a-9dff12250f1a",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "367dacf3-5da0-45f8-bb76-0a0a4e9831ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3cd01b3-5959-4ba9-9f16-71523a72baf0",
        "cursor": {
          "ref": "1b70b9ce-f3cc-4504-8e30-992e45ba4876",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "90529551-c58a-42c7-8cda-95e59a5662a6"
        },
        "item": {
          "id": "b3cd01b3-5959-4ba9-9f16-71523a72baf0",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "f66c24e3-e6f8-4e9b-bb34-1dd77c731aff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 225,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07566672-bcaf-4139-bc5a-8793ea5eb061",
        "cursor": {
          "ref": "a66b349f-221f-46b4-86ae-f4df56dc87e1",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "5f38f9ca-5f30-4f16-96f7-a61f47317e64"
        },
        "item": {
          "id": "07566672-bcaf-4139-bc5a-8793ea5eb061",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "65e76c41-ca83-4fb2-a88d-cb71dbc1fbbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd2ff773-1552-47af-a029-3229195c5e3a",
        "cursor": {
          "ref": "63776b14-43b8-442a-8c3d-78da3cbc475a",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "762bdea8-9244-4a17-9e8b-36885636c25f"
        },
        "item": {
          "id": "fd2ff773-1552-47af-a029-3229195c5e3a",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "0c48f656-9200-44c4-9737-b9d17390627c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "666c1592-764a-4aef-8e14-58567ee67e85",
        "cursor": {
          "ref": "c7cb1d16-8a08-490b-b138-9ca028c3c83f",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "9af2eace-bb7e-4990-b49b-7dae7dc8ab0d"
        },
        "item": {
          "id": "666c1592-764a-4aef-8e14-58567ee67e85",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "cf6cd161-e673-4d8a-9bdf-cfdea341a517",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "910b03a3-af17-46fe-a371-befd44234769",
        "cursor": {
          "ref": "a2bf9686-44a2-4bbd-a5f6-1e343e4c6fe6",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "1d4c2bca-0e93-4c1c-91f4-99bf88f79b68"
        },
        "item": {
          "id": "910b03a3-af17-46fe-a371-befd44234769",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "3da1d9b7-42e9-472c-bd67-2026d061b639",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 281,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4aa8dd0-7a06-4ab7-858b-c5176e64f86e",
        "cursor": {
          "ref": "563a351b-4636-4071-8e5c-b466906b0f36",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "37c2929e-2fa4-41e3-87b0-1edab2f8187c"
        },
        "item": {
          "id": "f4aa8dd0-7a06-4ab7-858b-c5176e64f86e",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "060e91ea-2777-45bf-a3a4-35d8cd6d43f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0f261ec-d576-40a4-ab38-ccd27d662971",
        "cursor": {
          "ref": "82ca0625-2747-4586-b4d4-2cb0bce9a78b",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "e060e562-4a2a-4e3a-9509-9546a8d64b88"
        },
        "item": {
          "id": "a0f261ec-d576-40a4-ab38-ccd27d662971",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "5018755c-82e0-42a1-8160-56f84f061fa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aae45f3c-6b13-4c8b-83a6-c6b4950b9883",
        "cursor": {
          "ref": "0359645d-78da-4cc4-8218-7bc755039f66",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "6efb6d77-2e17-4df0-82dc-c0d736c35bcd"
        },
        "item": {
          "id": "aae45f3c-6b13-4c8b-83a6-c6b4950b9883",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "9ba04c38-4a30-4e93-98a4-428e638e3870",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b88eeaf-547f-44ab-abca-0a993c0a34e9",
        "cursor": {
          "ref": "92d7ed5a-6b13-4524-9c2f-ca81ac2ecb41",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "fc0e8e8d-a9ba-43d3-bf14-84be151626c0"
        },
        "item": {
          "id": "1b88eeaf-547f-44ab-abca-0a993c0a34e9",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "22362cec-07b3-4d4f-8ad6-0539db9e110a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aeff76b-c975-491e-ba16-fced9d9d256b",
        "cursor": {
          "ref": "644271ef-75cf-40ac-b95b-3093cb075ad2",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "33aefa23-8859-4921-8755-a6e117dd7aa5"
        },
        "item": {
          "id": "0aeff76b-c975-491e-ba16-fced9d9d256b",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "5545025d-2cbb-410e-93a3-b9e69fa6d812",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 471,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15e11cf2-4b51-4743-a98e-71d36125d230",
        "cursor": {
          "ref": "9bd76605-b44d-4fef-a115-3ddae17e6278",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "35d5e298-79db-48c3-a386-cc4af1839c81"
        },
        "item": {
          "id": "15e11cf2-4b51-4743-a98e-71d36125d230",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "ab2a9e67-3ac0-4a67-bd85-d78625cb509e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f6ccdf6-1b12-4858-adf8-d4d50f1e9694",
        "cursor": {
          "ref": "9494d00f-38bc-4868-8bea-f772ac036d93",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "b2962209-f991-4246-aa0c-3900c880da57"
        },
        "item": {
          "id": "3f6ccdf6-1b12-4858-adf8-d4d50f1e9694",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "279e41c5-074e-46b5-867e-a1cd30f5e430",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dd175b0-2832-430c-9628-0589cbaa5a89",
        "cursor": {
          "ref": "07cc8fe7-3222-451f-8a1d-198abce4e6de",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "90a01d94-a600-40ed-a1ba-7474d25dc05e"
        },
        "item": {
          "id": "3dd175b0-2832-430c-9628-0589cbaa5a89",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "98fcd66e-7d13-4472-ad33-6b7b38ddca32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 131,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6aab581-0fa0-43be-9e2c-5955b900bb18",
        "cursor": {
          "ref": "dd04a4b4-153a-4372-bce7-93d9aa8bad7b",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "850d92e2-ec9b-4e02-8825-fe8781598675"
        },
        "item": {
          "id": "d6aab581-0fa0-43be-9e2c-5955b900bb18",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "674db2dd-3aac-4440-9d7b-c8d57e43b154",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 132,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec87e952-e676-42cc-90f7-d67055d400be",
        "cursor": {
          "ref": "92e36c33-f67d-467d-ba44-da7471db6e9e",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "c78b55cb-b5c1-4536-aafc-49c3d98d5ab2"
        },
        "item": {
          "id": "ec87e952-e676-42cc-90f7-d67055d400be",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "e438aa52-546a-4ee1-92f1-77b05465486c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 413,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b5de871-bf8f-4d0d-97fb-cd0b8b3bc7ff",
        "cursor": {
          "ref": "85c7c39e-e959-49f6-ae13-ecc9477755f2",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "56c7a2a3-82e2-4e43-b314-5a609d23c8a9"
        },
        "item": {
          "id": "8b5de871-bf8f-4d0d-97fb-cd0b8b3bc7ff",
          "name": "credentials_verify"
        },
        "response": {
          "id": "2900be4c-feef-4051-b2f4-dfa0de4e9d28",
          "status": "OK",
          "code": 200,
          "responseTime": 3270,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c218249d-9c55-4b1b-9c5b-50a24f9df1c2",
        "cursor": {
          "ref": "26efb0f2-a02d-4d85-8311-9425c2c48fe8",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "dd5f6176-7eb5-440e-a8ac-1868bbf5b04d"
        },
        "item": {
          "id": "c218249d-9c55-4b1b-9c5b-50a24f9df1c2",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "49ca3760-be84-438c-92ec-69316913932f",
          "status": "OK",
          "code": 200,
          "responseTime": 2490,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e991de9-dd19-4646-b5bd-5949c67bd906",
        "cursor": {
          "ref": "f23e348c-8787-4e3b-9c7b-7eab22ce81e3",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "96940650-8fc0-43f6-a6c4-cf4b7b6d92ce"
        },
        "item": {
          "id": "7e991de9-dd19-4646-b5bd-5949c67bd906",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "b22a181d-ffdf-4550-8731-a7b99c9d94cb",
          "status": "OK",
          "code": 200,
          "responseTime": 604,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "319e8262-9dd8-43dd-98da-7f6ff1b80b12",
        "cursor": {
          "ref": "1702b411-3282-4c6d-bbb7-8e28704e9376",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "4855511f-5df8-4ce6-b87c-a38c95d3f133"
        },
        "item": {
          "id": "319e8262-9dd8-43dd-98da-7f6ff1b80b12",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5abf3ffe-0e8b-4e8f-91ef-ad0bdbeb115a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 103,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "319e8262-9dd8-43dd-98da-7f6ff1b80b12",
        "cursor": {
          "ref": "1702b411-3282-4c6d-bbb7-8e28704e9376",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "4855511f-5df8-4ce6-b87c-a38c95d3f133"
        },
        "item": {
          "id": "319e8262-9dd8-43dd-98da-7f6ff1b80b12",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5abf3ffe-0e8b-4e8f-91ef-ad0bdbeb115a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 103,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "319e8262-9dd8-43dd-98da-7f6ff1b80b12",
        "cursor": {
          "ref": "1702b411-3282-4c6d-bbb7-8e28704e9376",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "4855511f-5df8-4ce6-b87c-a38c95d3f133"
        },
        "item": {
          "id": "319e8262-9dd8-43dd-98da-7f6ff1b80b12",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5abf3ffe-0e8b-4e8f-91ef-ad0bdbeb115a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 103,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e842d510-0392-4387-805d-80384a3098c1",
        "cursor": {
          "ref": "55817a55-7b86-43c3-bf3f-9a3a0a14134e",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "f7dd3f36-d8f5-4670-946d-df6adb5b6e9d"
        },
        "item": {
          "id": "e842d510-0392-4387-805d-80384a3098c1",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "529e0579-755c-458d-863a-c62509c05084",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 55,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c44eaebf-383b-4a3a-89ef-b4d79a22fb82",
        "cursor": {
          "ref": "9171e8b0-f988-4e63-a8bb-03f8f2801cb1",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "8f8219e1-8fbb-45ea-9a2d-a07e3da9d812"
        },
        "item": {
          "id": "c44eaebf-383b-4a3a-89ef-b4d79a22fb82",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "6d1fe165-c264-4295-8eff-e185c372a86a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "c44eaebf-383b-4a3a-89ef-b4d79a22fb82",
        "cursor": {
          "ref": "9171e8b0-f988-4e63-a8bb-03f8f2801cb1",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "8f8219e1-8fbb-45ea-9a2d-a07e3da9d812"
        },
        "item": {
          "id": "c44eaebf-383b-4a3a-89ef-b4d79a22fb82",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "6d1fe165-c264-4295-8eff-e185c372a86a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "c6199f9a-5ae0-4c2d-ac59-eec03e5d3b0b",
        "cursor": {
          "ref": "db33b5e1-977f-4ee8-bdfe-be49d0fcb7c4",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "34e74714-6126-4c1b-aee2-d403902d3d86"
        },
        "item": {
          "id": "c6199f9a-5ae0-4c2d-ac59-eec03e5d3b0b",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "6f95bf00-14cc-43e5-b6bd-33a68defac0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "5a03dd72-edf1-4515-8007-1df921579e1f",
        "cursor": {
          "ref": "09c6293e-a3ee-46e8-b45a-a833a1de6818",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "803d035e-3b59-4f59-873c-d1e4e60e86a8"
        },
        "item": {
          "id": "5a03dd72-edf1-4515-8007-1df921579e1f",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "efc30e66-607d-4617-a8b8-b9fa5c743aa8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a03dd72-edf1-4515-8007-1df921579e1f",
        "cursor": {
          "ref": "09c6293e-a3ee-46e8-b45a-a833a1de6818",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "803d035e-3b59-4f59-873c-d1e4e60e86a8"
        },
        "item": {
          "id": "5a03dd72-edf1-4515-8007-1df921579e1f",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "efc30e66-607d-4617-a8b8-b9fa5c743aa8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b0f4ebb-9b95-471f-8da6-6e541c2094f5",
        "cursor": {
          "ref": "cd19c734-0928-4deb-a3e7-c3892e4a7166",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "a8580b27-1359-41bb-9190-4fd4e8e5c340"
        },
        "item": {
          "id": "3b0f4ebb-9b95-471f-8da6-6e541c2094f5",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "50e3307e-ab80-4059-be90-d9631bf075e6",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 44,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}