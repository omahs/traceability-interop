{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "667d16cc-7555-42ca-a481-ee3b417c3ac1",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "75a55b69-9a19-45c4-98a0-0a482247d667",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5e77d982-b217-418d-b51d-e9ee686d8903",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d5de231e-4ee3-4c5e-aa63-cca144f999f1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "523706e4-dcbd-43a4-96f8-c32e4881fd2d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "8c5a4a1c-7ea8-4b3f-9bf7-d35cd06b2134",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "f5f7d57d-a0a3-4c18-94cb-c8bc4ba14dac",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e0c8722d-83ef-41e4-bc71-6db2a9778789",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3ff7c603-3276-4760-b42b-4c47ba519944",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95857cbf-5727-448c-bd2f-bf6086727712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "588717a7-a7e2-4c33-a2a0-b2468ae75449"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7af3fde9-3f5f-49b9-af51-6a2e98920196",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d34f7e1-9b5e-444b-8447-762f13b514c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c7cf222d-2e09-46ea-843f-d6b4a79b8017"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5d41065-5fad-4156-9d78-411bd7fc69f0",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "947e8935-f38c-4f44-8807-06daac4662d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8b38ec51-28ba-4f9f-96ac-d66e1990fe94"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "30fa9025-8601-4853-95f8-04a6b2b1cb1e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6fcfa1d5-f295-437f-903f-93524db6e480",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a48f8598-68b9-4b45-be21-66daa38fbda3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e6129e43-ca2d-48f1-bf11-1615bfd00cd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1065bf4c-8cdf-4234-bbd6-86be904d76f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d50b9c17-228b-4410-af9e-4fe99d58013d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac6edf5a-2445-45ce-93ce-5d9cdd32ea4f",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d11e8a5-62cc-4c78-98fb-09dfea4f2a2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9acd52c9-9e39-4875-949d-0c7cf5e00f72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39701152-78a9-484a-addf-53a7f730f199",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "2e20d3b8-de9d-4a92-97c0-450a6e54fea3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e6817bee-8125-44c5-9f8b-0bab79070771",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8db44d54-48bc-4e02-8a48-601b9fadc25b",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "81f46aa4-4f91-42c7-8184-602d77b1657d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "f8adc9ef-2942-40e3-a7dd-f54da3518582"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a3a38485-5e46-4f85-baa3-15875d17a2f7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "0dcc49a3-f9b2-4d31-b789-71f5e6bcbc22"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "70333c7b-95d7-47a7-a778-4f866679fd54",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "eabbf666-fcfa-42a7-98b9-a65ec00faae6"
            }
          }
        ]
      },
      {
        "id": "8ee939eb-3e54-405e-b171-b68c8654612a",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "f03e859b-65e9-4246-bccf-5e43081a9c07",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f3de4763-6f56-4a8c-a1d1-0d49b7ac0475",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "274dd575-d704-44fa-adcf-679645d85f44",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e00d47e1-fe5a-4e32-95ed-3f12f0e1381b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53ac163f-bf20-49cb-95e2-008ac3d26641"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "973f0751-b894-4681-a03a-b238b6a8da6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a32e289d-e16f-41f8-abd3-1509ae75be29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "805af597-7e77-498f-885d-4bb2b23dbaee",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a183ca4-1b3e-460d-9358-a057f8da86ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "106ec88f-a998-4bbc-9fd4-f2f49170220c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c8569d9-86d8-4d2e-9547-8a9a903b8218",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a527493-6b7e-45c5-9ddf-0fdc3c9d0be7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e9d21cb-444e-4b93-91ef-fd3bf65582ae",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ec2261f-8833-49ec-b28c-02541fc94430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84de5d4f-61b9-42cc-8193-b8f6dd42f50c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "950871d5-4e48-4916-9bfb-aaae8e51fab0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2487f7d-496a-47ee-a1bb-a55c7c974db6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d619a491-5e12-47f5-86d6-dcdc72797dd1",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65280d63-94a9-4df4-bb17-b3b66e034f8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16901df8-2503-4d46-809e-50709e4b23d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e71aca3-c146-43d1-949c-ef31a85dbd52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5fc970a-c768-4cd3-997b-e34ad69b20e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cab69bee-f59c-4356-945a-84ccc058b2a0",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3767de4e-74e1-4872-9b73-16a12bb5a438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a10c417-96ca-4e88-9067-adb91724fa69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7af46b0-0939-410e-877d-5234d151d686",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2191edda-d18e-4aca-870c-7a44ffb3e169"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d74081b1-f1d9-4b0d-a526-e20c8b562d9c",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66558cb3-dd2d-46c5-ab68-1f1ce02c39ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8cef300-ff8d-41e6-8f94-dc3b525ac078"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8e2124b-672e-4bc2-871d-3aedeeb2f39d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "630f87c6-5186-4bb1-9f84-a0e12e521203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c437032-3c4a-4358-a7fe-fdaaf03b1d4a",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "730a310a-d9dd-4c2b-a1f8-be939350e41d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d748d8f7-8b48-42b3-b86b-0df29ca9e3b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1c48be5-4ab4-4fef-86ff-1c5fb6261c27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32c209fe-c75a-4791-a0f5-6d7355f01ee6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "478cf6e4-5235-4862-af87-152bc854948a",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77adf435-a5bd-433b-8c87-8e54231e8e02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7459dbb5-f371-4c11-8d73-58f7e1ac09d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da04dbe8-e340-4595-9d40-e886a6f73bba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5ba5460-32c0-4603-a1d0-8a70f0fe6ab4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba3cb9e9-9d40-458c-ad8e-68e4aad915a0",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d015faf6-2956-4a12-96ac-ae4e9bd7dd15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1672da9a-e3a0-4107-b73d-7d0d37c6d137"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57325c54-e77c-487e-a1e6-44cc5c2b0845",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fa8f9aa-0bc5-46ea-91b8-20f30b3abacc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "674a4382-dbfb-4263-8e41-eca00ef9f27f",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d70ac56-6736-4fe8-a7b1-8c50aafa6015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bf6e452-6d98-4536-ac55-f24764ff6458"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7deb4f9b-125a-47c5-8935-a91123ddb19c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84160288-b58e-4c31-b550-5ac6ad442dce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7d84a81-394b-4a68-b24c-4a938d2c9493",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d985b27-a9b8-4c28-b419-ec05ee9a32e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36d3210a-ac17-455a-a960-92005bb93a39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16c56eaa-9e79-439e-8774-7249b2e78999",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "44a9f92e-8ec5-458f-81d8-7ae323b8972e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c764075a-2528-4d25-85e6-9e68230425a5",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1e042f1-dc06-4522-8642-bb141eed8c04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3d9e130-ce1c-433d-8bf4-eb476f5009ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "565d1e3e-c811-4514-b2a8-8d4bd5807811",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "2aeecb99-d4e5-4434-a644-b2380257ba4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5acb38a4-1315-4a46-8413-73b6966b0b07",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32004057-a7e7-4cda-860d-fdbe5a232d7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2b4e033-69ab-4948-bc77-ca925e1bc1ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b003ed0-a5c9-46ba-9982-d0d761ac905e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c9e68f1-f6cb-4d5c-b8b7-20379fab9ab1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1236578-d80f-49f8-a4ad-e6b14685eb0c",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aa02218-7903-4c4b-8e10-38a6cad94055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "390cfefc-d5ec-4c70-926f-b7e9ddb9fb50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61e9a639-2b9b-4af4-9bb4-93af625f6761",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1291c80-2e2e-45df-b820-137094a06fc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d0d46fa-875a-48f6-9558-e2a5a3d4898a",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3dc44d5-2bf6-40e2-acb4-bb5358a950b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1cbde9c-c037-435d-b56d-a2d6518b3df3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7c5c17c-28cc-42f0-a2d5-8f63a0f0db80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "89dc8b86-fca6-4805-95e1-8618609ae211"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c25f52f3-b653-49e3-a921-bdc7ecb68c9f",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "713f295f-5dc6-41bc-8869-8f870b5747e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcf2ee08-3273-4a04-b23a-67b8879fa618"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "544455d1-1ffc-46c4-a216-fb0495b4624b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "d8a03825-4722-4dd5-b8a4-745b2c8a306e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "913098fd-842c-4bcc-803c-ac100e6d08a5",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b75a26e-43da-46ef-86ae-6e655aeee6fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "791d6525-cab2-443b-bdaf-a540e4a08fac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96614fd2-7c84-4215-b2d2-835bc60ab94f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37c29aac-5c49-4d44-aa88-a5461433786a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5713bca-a189-4d14-b1e7-d6f7a6907c24",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94b03be9-7b28-4c8c-b314-674a02dc4251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "164b2fa8-86c5-4ed6-88f2-d68dca290b28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7866f38f-d31f-4566-98bb-8acadc14c6b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd66794b-38fd-4d77-8610-7c254b77cac2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9d44c42-32cc-4031-8d29-9680c02bdcb0",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2e45720-bbc6-4e71-8a44-a1a6d60cb39d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97cefcfe-8990-4eda-bb46-4c45ac2d5bc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e1a3086-071f-4927-abf4-9bcd88b63a94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8cda5de-7bc8-4282-ab6c-a68d657fdcfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ac8ce7b-073f-4be6-b016-2e31af8d2749",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "306ca6a4-ee13-449e-9d79-f69a6e183fe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06725cff-0bed-4e75-afc1-e7c8f20195f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "739b304c-c6cc-4552-88b5-8b63dfe815c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b149cfa7-841f-40c3-9b2c-dda13bbe9eb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfa4ea20-73d0-47bf-bff7-8936169318c3",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9bc0a69-ea09-490b-b9fe-152b986d9af6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e554d33a-9630-4a23-bb29-3d8b9612bfe2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f8d2e65-99a0-4813-b6b3-fcecdca67c29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be an object",
                            "rawBody.credential.credentialSubject = \"did:example:1234\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "927f7d11-43e1-425e-977e-3f33fa54c60e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e31f2f31-644f-43d0-8701-c93f587b1fe9",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef27d6f1-6de1-4121-b0cd-87f885e037f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "859b4349-9477-41e4-9f85-6034f1df75d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91f6af03-3f0d-4a26-8d2b-807e253d1248",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"did:example:1234\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d67f151-5a80-47f6-be5d-db74fab1e9ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe79aed4-f0cb-433d-9fd1-d72b258dc9c2",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2ae46bc-e5eb-47b8-96e2-378a73752135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94106722-bd02-4224-8f9e-2e4b0d080f46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0c1cc4e-f5fa-44c2-87ca-9046ed5f6008",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2a1c7f7-f9fc-4d18-88ce-b08d2d011aa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c291755-4092-4ebc-870c-9eb7fb2e46b9",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d401c19f-8585-493b-8e45-db2d6143a221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87f59e19-732b-4a75-93d6-04b856dff92e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d320acfa-f8a7-4951-8029-5e2a278224cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82535f0b-a827-48c5-a7db-d141459ce2ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d32bd588-9ea1-45b3-9d9d-4306e91670ea",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "094b73f4-4e15-40a2-b6d0-ca5f9384b7c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc4df0ea-9b7a-4f8e-8cc8-41ba002096d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "017080c2-19f0-4e4c-8c95-53f952b3bf30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffdbff10-2861-4899-87a6-fb893e978dcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f69dda98-4b11-49e8-99b7-b433c7a6a9d3",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "861d8735-aa0e-45e5-bd46-c9571d5e2b75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c412bd61-9804-42f1-8718-969573cb4f49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93eb374b-e941-4057-987d-1d7ee4e79e5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8160c8d9-91c3-455f-8160-a84b6827b79e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5f530bb-d4e2-4272-970a-297344e1cbcb",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b812342c-4f1f-4fe6-8c16-b0ccf11bde67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6741627c-c9b5-4fec-b308-8e00630594a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78e0ca8d-9cfd-4d4d-9725-11a5b922d569",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33f3b7e4-8174-4a13-9e0d-cd4df6e3fc6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71d2e987-5177-486c-ad35-c7072c31d724",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0db1ae35-26d0-4716-a872-ac67cc281fb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c98a58d7-e819-43ac-af93-531c998f53c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8581fe3f-456b-4f15-876f-ea0fc457ffd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a33b662-543c-49d9-9858-4b5d19535ecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5158d8f3-18c6-4c3a-ad3c-94f0f1fbda17",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4bb044c-1817-4fb3-b09d-568465780ee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32938968-53eb-4d3c-9d77-913517641396"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b7eba7b-6a02-4ca4-ab9e-b134afa44396",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0e8b4a0-2aed-4296-8988-905e490750b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "583b29d4-b982-432e-a16a-56601f579362",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c5bc7a3-bfbe-4510-8130-5a9b2955aa4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f27e8e4-2f24-486a-92e6-7672f11a19bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23f6d275-8a3e-4073-91ae-292fa0c16d86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fafd8760-a6d1-4fc7-914a-1770516e88b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3560ccbc-8f5f-4660-8dbf-21835e6414a2",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f74a2a3b-0a84-4932-bbad-d4ca38ccd09b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "509cfe10-163b-4cb0-b374-10c91db241c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d98faaba-6706-4533-8265-00224058b6b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "431fa39b-8713-48b2-9b32-c4a4dadd8576"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fe72db72-7119-4ce3-9130-9ebd600d5422",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b072c2cb-5998-422a-a937-b55429076322",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e679215c-6cb4-495d-9b76-b75fc71440f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "85e04212-6024-4d04-a0e5-c1f159c850f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e0ab7d6-29af-4696-bd7d-c3455bd796f8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "8cb9c562-9b99-4c23-a0b0-f231bd3f4443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58cb782b-604a-4b50-b15b-5d2c6951683d",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c7d64eb-0864-4a9a-990b-0e75128989f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7c292b29-8e56-4c99-8a62-044018293c55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "380dac99-f45f-4672-b0af-8609133c64d3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "27a5c324-e2a1-4f6a-9f3c-59c19e4fa963"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "84cd7d3f-c101-4836-aa31-e08d69270518",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7da0c3b1-864d-432f-b621-0487ba8bf6da"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d8962ad1-5400-41cc-896d-28a8403a60f3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "92e45fb8-c165-4646-98c3-c3595274be6a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "44b7f29c-827b-452a-a963-8db2ce180aa5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1b72eb55-e980-4ec5-a29d-a41cafd9b8b8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3c1ff6cd-64d7-4b8e-a12a-e47b73de13df",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fecd4a2b-8bbf-43dc-99be-9a4529e88fcb"
                }
              }
            ]
          },
          {
            "id": "40bd5a0b-0091-4c5d-b634-e3c51b9b864b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8b50e773-66f7-427f-91de-d68eb355256b",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5d438b5c-ca75-4d4c-9f15-9430a0b3aeca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cc12258e-b157-4b3d-8426-efdadbf10bc1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "605f6acd-3ba0-430b-9bbe-46588901527d",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "97e6197b-0614-46d0-8bd5-1966b521f11f"
                    }
                  }
                ]
              },
              {
                "id": "b5e0f7ea-c20d-4599-bfae-6f092772e7f7",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b2dd8fe9-ec10-4207-a0b2-d8067d4de42c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bc062abf-1fc4-46e5-9e08-29fc1329c03d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bdcfba4b-3538-4864-b5a8-b098933a090c",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "04eef286-2965-41f1-bedc-ad8cce078e2f"
                    }
                  }
                ]
              },
              {
                "id": "831ac785-7b79-4e79-8368-6dab07d4550d",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3f7fc79f-fcc4-47dd-9c3b-7dc86b436f6d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4a22d7fc-1ce9-4b85-b78f-c63e8a80fd79"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9e856c5b-1b11-4420-99bb-32c8fd88b2a8",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "7027aa85-334c-48e4-be82-4112f6124a0a"
                    }
                  }
                ]
              },
              {
                "id": "f2d692e5-266c-487e-b430-e1aec1efcb6a",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "29d65b5d-e15b-422b-ba55-38d0ea75a6ff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6ba01892-0bb8-4188-b800-3e4a373cdada"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a234134f-9dde-4a1d-87e6-305a7d2bbc50",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "08b5049a-ec98-40b3-8b14-9996fecbddef"
                    }
                  }
                ]
              },
              {
                "id": "5d440517-4a6a-45da-9641-e3fb764b0372",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a1769271-01db-4695-8ce0-d032cde0b3b4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a597c587-e6b3-4152-9b46-e35010df6a88"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "868b17d7-2f3c-4393-b304-8b75a0d5fbc1",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "2d6fec40-25f1-413f-b527-a33d4cb0e9f7"
                    }
                  }
                ]
              },
              {
                "id": "ba447e6b-71bf-4b68-a451-920ffbf59e80",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "928d4bf5-8b5b-4a37-9f94-77f5d58e72a6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a553a65d-40f9-47e4-9412-2322c9aab934"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "04c36f07-6606-452d-b504-c0f7d397f396",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "a8c3387e-a692-4598-9475-c5ef6c53fdc3"
                    }
                  }
                ]
              },
              {
                "id": "0dd63431-242e-4500-af76-89da641d76d7",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f521b8e7-fbcc-4e20-8a69-5ecef59d03c6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c1fe9db8-4dde-4609-ace0-48fe237a4c13"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a9f0f9ad-0137-40de-ba6a-e3511adba586",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "5afb5541-287b-4ff4-a70a-1c8d87026c85"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6648d39b-4fa5-4247-a96a-781cb2585e6b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a6027c91-670f-4593-ada5-e4a14b458e5c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "dd772621-66d1-49cc-aeb1-d87f51e40b8c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "db140220-02ac-43d2-9d97-6ca9bda0908e"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5d87f298-a983-4820-ac21-52b1ee787398",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "e121cbd9-1de2-477d-b98c-d5260f306833"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a0ba0d25-4c73-4db9-88d2-17caf449582d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "534ce650-0822-477f-8ba1-0068068960b5"
            }
          }
        ]
      },
      {
        "id": "25481837-3ce8-43a3-983f-c9781cf74fb0",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "d65e680c-f55c-4e87-9edc-0a9be26fbea7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b075568b-32ed-456d-803c-030145d5e057",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fff61ca1-2453-4a74-9f88-ab88b9f08da0",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01e8a2d2-f2f2-489f-87a1-366e580a72de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "098b7e78-fdcf-4cf7-9809-16ddbf791f42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a27ab8a6-f51d-41ac-934c-461ae7699755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "97a76607-55c5-4748-b9d6-f690b80ee203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7736eff-92b2-4e9d-b0b0-5132dcdcfede",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ed9347b-cf9e-48cb-8a35-af6c156872fc",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "409e9bb5-45be-46c3-91c9-71dc4b26ebc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5b672ff-73cc-447e-9453-9950047e563e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "430d1178-f3b9-4a02-b064-da3943bf86a0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "39003523-3d52-4cb8-9015-15340c75a36b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2adbdda4-cbb4-4a94-a373-bccda1ff6581"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "88b1cfc3-d081-443c-902e-20ccf57a1740",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "76559d20-60aa-4cc0-9c24-abfe0599ee83"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4b1e945d-47bd-4470-94f3-82b1a9582b66",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "01ac83fd-47fb-4363-94ca-381dfd485fb9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4ab3dcee-3dc8-4fde-be51-bafb9cf3f0ec",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c2d8e14c-4f0e-42a5-9ea1-bae9ce9c4877"
            }
          }
        ]
      },
      {
        "id": "6acffa7d-e934-408c-a94b-90b82e4ecd57",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "2dcf6f13-8bc6-42f5-a685-a94a7f00b511",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f69c3ab2-0853-4d7a-8a21-27f436b1fa88",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f098d532-72d6-4471-b68c-adb8209e36a8",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e5cbe8e-4a7a-4a22-a95a-c5c2c379ecbf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d1e02ad-0bd5-472a-adcc-c6e0dde0d867"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90b23b63-3fc4-4a51-8b26-620db48f8f3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "471d0716-1924-4b9a-877b-3601c7e0c3cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a1c02bf-4e18-480d-b809-6910daa68fbc",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a6358b4-d1ba-41b5-8dc8-b8b95a114bee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35ca91d9-3876-49f8-928b-13bf8341830d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a51294af-42b4-44f5-8c38-77479e9ed025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c7e4411b-f351-43ce-8531-a0196fa503d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bb70f26-3b61-48e6-b077-a3ee1cb62f2a",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "793614a4-eeea-4c4e-b723-470ad7bfb365",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24f5a311-fe74-4b88-b749-34444e29ec8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8c08e36-3926-4433-947d-736620286fc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ffc4727b-03a6-4b40-ab4a-95a5385854c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc2b99c4-4d08-4683-95da-c063236585ac",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fa143c0-063f-42f4-b4b0-d92c33424b12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9906c94d-afc9-469c-8da0-1fca46bfe253"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa586bfc-b22a-4d65-804e-806bf50b51b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "15b8b17c-7120-4513-919d-c11f4c227de3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ef49846-56bf-418e-aab9-ebd25c4af135",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24631e5e-0a88-44e1-9bcf-891b8321408e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7f28651-e729-4152-bdae-1f36fdded912"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aeb8a9b-bc78-441e-91ca-3a476c557a66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e24cf82f-7443-45ef-9dac-5e6ba18c17f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f651b67d-27cb-478f-bb19-e85891bbab35",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5c482c5-d88b-451f-9161-7d4fee747160",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5197bee5-a39a-4870-89ea-b3d0631c20e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57ea5738-d7bd-4d90-95c1-663d829c2fed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "54a009f9-3efd-40fb-89ee-2806e1bfdb60"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "683bc041-d3e7-4fe2-80be-12d56ae46225",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a280145d-61f8-49e2-9e78-57f16d560a7a",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "339d4aa7-2107-4ed1-8e67-422452f2a6ba",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "8b949ba6-37c1-4782-afac-459174a441a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2996e9b-d302-461e-9a1c-e25f6977383b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "68ab4130-141b-4a16-9cbf-95e5b97a9869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2eac7c6-204f-4c8e-a929-a2137532098c",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae654cae-c180-4dba-b192-c426a6794e10",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "1b818d7a-651e-488e-b9c1-7499fa354068"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b768d5c-191b-47fe-9c7e-af2c367d8bee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5420b875-a41d-4008-9065-bb619921a520"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "00dc76e3-9f67-4f1a-8098-0b501ab4d731",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "458631b9-0991-45f6-81bc-9cc008370f6a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "688a043f-fc35-4634-b686-dd99f48afffb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1e9363bf-059a-4e19-8b3b-a8cdabc26cf7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0db06a20-3127-45c3-bb52-77662367923c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"dummyVC\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": \"did:example:123\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "3f59cd2b-84f3-4538-9852-2d1ecadb87ed"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "358f41ea-1fe9-4e07-a140-f8dbe7d28c00",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d2af0923-4033-485d-a4af-330a8d8ea24f"
            }
          }
        ]
      },
      {
        "id": "c78dc30d-5e49-4a1f-b6a9-926bdc0aaca7",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "377daaf2-783e-44a3-9de6-d63134a989a6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "73889082-6aa1-429b-a0ea-909fa183a882",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2fe4ec4d-d5a1-4cc0-b209-c6c8faa089c3",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cfeeaac-7256-43b2-89bc-8fefd2acc97c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b91ce648-d717-4162-90b0-5204ee7ecb05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cee79001-2319-4af3-b9a5-7cf384c54faa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a1630a6f-f657-4d2a-a270-2372d87b535b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "573e5ee1-bab2-4d7b-8551-91c467890d07",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fca10ea2-7f7c-4c88-aa9d-41c8c5d916c0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "e011dd91-c7f3-4402-a315-596992fecc91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9c5033e-de2f-4bcb-a96c-22270eba8e74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "da8632de-a1b5-4aeb-8844-764d849457d7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c4b235e8-c9a1-48a8-bc92-bcb0aa749036",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ec71b67f-eb67-42c2-8b41-f55ee2386337"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1485f73f-1bca-42bd-9017-2002ce73a438",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2d3e3196-1e9f-4f01-94d2-7b00bc82fceb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "42cb578a-93b7-4d96-978b-6791b0d72401",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "29d22f23-6ae8-4d16-b3b1-0b888a61d1d0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "96877e8a-8706-4be7-b38b-e259875d8e14",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6c64c7fe-ef23-4231-b575-4167fd314d3c"
            }
          }
        ]
      },
      {
        "id": "1a1df89a-2dfd-4809-981a-f2e725b7a4b1",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "97e23e32-2a7c-4538-aa0f-32765a9f7219",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d7233ad5-3c17-483f-9655-bf25bfbd809a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0505ba4e-db15-4d9b-a22a-f7f09e183dbc",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a71d78f-c805-48a8-bd9d-3628e7ea3289",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4f02945-24c8-4341-83a0-cdd595bd56d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "caf3c072-e7be-4339-9489-3b5db68be66a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a393e898-34d9-4714-919b-f7cc1d52d87e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6e9394c-3c26-4858-814d-98a4596a9221",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c30ffa4-fdf2-4cf4-907d-a6fb10900ebe",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "518bd5e1-cf43-4b99-8c33-4bb9e4f944c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0128a59-03d1-4190-9079-74f7262c7886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7164f22f-52a6-4785-aa95-5e7233057720"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "efd6717c-a34f-4b9a-8959-929db64c4b2b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4a215171-3aad-493c-9240-446969171610"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7304b411-fc21-431f-b91e-8befaa9a3433",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7619730f-5b65-4460-a554-33ddccb7cc31"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e470d851-5924-4e95-8806-d4c07d370cad",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "94c69f5f-7dc6-4ff7-b410-c7790d02a46a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "beff6add-4096-48a1-85d6-fce80d3aebe5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b9838ba2-3537-4785-b21d-c91d5da7ae29"
            }
          }
        ]
      },
      {
        "id": "5832f6ec-265c-4f04-bca7-197bcbf8d124",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "e65140ba-ec1a-4605-9b90-833bb008d17d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9a90e097-2d61-4ffe-b0d2-071e7d9a5046",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f6d18e91-fa75-4c9b-bb72-dc810ecd0ed5",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34b8b280-efa2-4376-814a-150e2b425a28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64e0125c-6f2c-43c0-8d4f-15ce0747bf15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72aab41e-5ec8-49ad-ad24-735ea405c125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cc746f57-b842-47d5-9478-ffa79be1847a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1d5e586-dd0a-4238-911f-e36720ce927b",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ade5640f-31b9-4cf8-9ad3-2f765716a399",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "8903b46e-cca2-4b1e-b15c-261c264ec6dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28574a95-10f7-4471-9f12-bbdf0570a438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bbbaa495-9c73-4feb-aaf7-809ea7ff9a42"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "70c6eedf-94ab-46bb-962c-95ac2e43a2e4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "63610ae7-292a-4ed9-a967-79e0e4694128"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "af108cfa-4804-4cd8-82db-6ea174efe1e8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5bea528b-74fa-49f5-9957-a0c000eb665d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "12842a43-81d8-471f-8945-a66b75eebeab",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "78c31291-b735-402c-b555-1153fb0742b6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2f5c08ff-fb19-4cb5-ad15-d9ec996867ef",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0e4ffe29-c4d0-4889-ad57-e3a80b305b42"
            }
          }
        ]
      },
      {
        "id": "d00440f2-e5cf-4441-85b3-a3e58bc74227",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "c9039f0f-e12a-4ad7-a98e-334fbafd3904",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 475,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 111,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 131,
        "pending": 0,
        "failed": 8
      },
      "testScripts": {
        "total": 240,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 235,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 48.009009009009006,
      "responseMin": 10,
      "responseMax": 331,
      "responseSd": 80.25370755607122,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1662771133622,
      "completed": 1662771142095
    },
    "executions": [
      {
        "id": "5e77d982-b217-418d-b51d-e9ee686d8903",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 63,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "7ce8269b-7c94-4649-b4a3-a269cce44499",
          "httpRequestId": "6fadb484-08d6-4644-adb3-f88240fc4192"
        },
        "item": {
          "id": "5e77d982-b217-418d-b51d-e9ee686d8903",
          "name": "did_json"
        },
        "response": {
          "id": "135b6a27-0d00-4d62-8e53-2760df2b26ee",
          "status": "OK",
          "code": 200,
          "responseTime": 260,
          "responseSize": 1002
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ff7c603-3276-4760-b42b-4c47ba519944",
        "cursor": {
          "ref": "19e0ae44-72f8-49d4-adae-a2ec10b7542a",
          "length": 63,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "8db77329-ee90-4f75-8bbd-b6802482c9aa"
        },
        "item": {
          "id": "3ff7c603-3276-4760-b42b-4c47ba519944",
          "name": "did:invalid"
        },
        "response": {
          "id": "e2ab4747-958b-4c3a-a224-b8db7dba6095",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ff7c603-3276-4760-b42b-4c47ba519944",
        "cursor": {
          "ref": "19e0ae44-72f8-49d4-adae-a2ec10b7542a",
          "length": 63,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "8db77329-ee90-4f75-8bbd-b6802482c9aa"
        },
        "item": {
          "id": "3ff7c603-3276-4760-b42b-4c47ba519944",
          "name": "did:invalid"
        },
        "response": {
          "id": "e2ab4747-958b-4c3a-a224-b8db7dba6095",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7af3fde9-3f5f-49b9-af51-6a2e98920196",
        "cursor": {
          "ref": "4f5adb6b-7572-4a97-a182-8dc3e20a3da9",
          "length": 63,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "60e0cd93-f646-425a-b9f1-3946cdc2940c"
        },
        "item": {
          "id": "7af3fde9-3f5f-49b9-af51-6a2e98920196",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "ebb15b50-66eb-4b50-9495-8528ab074671",
          "status": "Not Found",
          "code": 404,
          "responseTime": 63,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5d41065-5fad-4156-9d78-411bd7fc69f0",
        "cursor": {
          "ref": "8dc4963d-e7b5-46b0-9875-a75c2aafcd84",
          "length": 63,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "81f4cfbc-b498-4505-a34d-0146c5e4f039"
        },
        "item": {
          "id": "b5d41065-5fad-4156-9d78-411bd7fc69f0",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "edc4535f-28d5-4513-9b6e-644755d49f21",
          "status": "Not Found",
          "code": 404,
          "responseTime": 13,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fcfa1d5-f295-437f-903f-93524db6e480",
        "cursor": {
          "ref": "31c59808-87de-47b5-afd6-98de1421892a",
          "length": 63,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e4f218ca-d13e-4df6-9392-a15463aac330"
        },
        "item": {
          "id": "6fcfa1d5-f295-437f-903f-93524db6e480",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "7192d114-1ffd-413d-b7d9-9af070ef9a9d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac6edf5a-2445-45ce-93ce-5d9cdd32ea4f",
        "cursor": {
          "ref": "4be4f4d2-12a7-46cb-8c86-9a32a5929d66",
          "length": 63,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "323c39ad-90a0-4307-adc3-1e4d594858c3"
        },
        "item": {
          "id": "ac6edf5a-2445-45ce-93ce-5d9cdd32ea4f",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "ff2fecf3-fc37-4e00-ab68-f383e2ee9f3a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 13,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac6edf5a-2445-45ce-93ce-5d9cdd32ea4f",
        "cursor": {
          "ref": "4be4f4d2-12a7-46cb-8c86-9a32a5929d66",
          "length": 63,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "323c39ad-90a0-4307-adc3-1e4d594858c3"
        },
        "item": {
          "id": "ac6edf5a-2445-45ce-93ce-5d9cdd32ea4f",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "ff2fecf3-fc37-4e00-ab68-f383e2ee9f3a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 13,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8db44d54-48bc-4e02-8a48-601b9fadc25b",
        "cursor": {
          "ref": "d46f5728-3e3b-4304-a7f7-6e454f0cb5d3",
          "length": 63,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "df06bc76-d3e0-43d1-b99c-ff5fe5813ae3"
        },
        "item": {
          "id": "8db44d54-48bc-4e02-8a48-601b9fadc25b",
          "name": "identifiers"
        },
        "response": {
          "id": "143ebbe4-439a-455c-8281-3f693c316606",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 1018
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "274dd575-d704-44fa-adcf-679645d85f44",
        "cursor": {
          "ref": "1ad0b7bf-ca1b-47b3-b187-f78b2c80ac6c",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "10a6ba91-5d32-453c-8f07-16c8d93657ce"
        },
        "item": {
          "id": "274dd575-d704-44fa-adcf-679645d85f44",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "0fcb81e6-214f-4b6c-afd1-f1e4697ca13d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "274dd575-d704-44fa-adcf-679645d85f44",
        "cursor": {
          "ref": "1ad0b7bf-ca1b-47b3-b187-f78b2c80ac6c",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "10a6ba91-5d32-453c-8f07-16c8d93657ce"
        },
        "item": {
          "id": "274dd575-d704-44fa-adcf-679645d85f44",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "0fcb81e6-214f-4b6c-afd1-f1e4697ca13d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "274dd575-d704-44fa-adcf-679645d85f44",
        "cursor": {
          "ref": "1ad0b7bf-ca1b-47b3-b187-f78b2c80ac6c",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "10a6ba91-5d32-453c-8f07-16c8d93657ce"
        },
        "item": {
          "id": "274dd575-d704-44fa-adcf-679645d85f44",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "0fcb81e6-214f-4b6c-afd1-f1e4697ca13d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "805af597-7e77-498f-885d-4bb2b23dbaee",
        "cursor": {
          "ref": "868914a8-e482-4c74-98f0-96bbbc76b236",
          "length": 63,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b1c1a411-39de-47de-b4ab-6c9a0ca2837d"
        },
        "item": {
          "id": "805af597-7e77-498f-885d-4bb2b23dbaee",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "a74b7518-fa42-43b2-a540-6a969494d923",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "805af597-7e77-498f-885d-4bb2b23dbaee",
        "cursor": {
          "ref": "868914a8-e482-4c74-98f0-96bbbc76b236",
          "length": 63,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b1c1a411-39de-47de-b4ab-6c9a0ca2837d"
        },
        "item": {
          "id": "805af597-7e77-498f-885d-4bb2b23dbaee",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "a74b7518-fa42-43b2-a540-6a969494d923",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e9d21cb-444e-4b93-91ef-fd3bf65582ae",
        "cursor": {
          "ref": "c6a9fc4a-2af4-437d-be8f-cddbc0fed0bb",
          "length": 63,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "fb5288dd-53c2-49e6-89d4-2d33701268bb"
        },
        "item": {
          "id": "4e9d21cb-444e-4b93-91ef-fd3bf65582ae",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "1d2fc7cf-5379-456d-b068-20bcdfc4d910",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e9d21cb-444e-4b93-91ef-fd3bf65582ae",
        "cursor": {
          "ref": "c6a9fc4a-2af4-437d-be8f-cddbc0fed0bb",
          "length": 63,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "fb5288dd-53c2-49e6-89d4-2d33701268bb"
        },
        "item": {
          "id": "4e9d21cb-444e-4b93-91ef-fd3bf65582ae",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "1d2fc7cf-5379-456d-b068-20bcdfc4d910",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d619a491-5e12-47f5-86d6-dcdc72797dd1",
        "cursor": {
          "ref": "29805033-a35c-4e09-9fe6-1648ac9d9e60",
          "length": 63,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "0c92b86b-15fc-4e9d-8e04-a3e4d1096a5e"
        },
        "item": {
          "id": "d619a491-5e12-47f5-86d6-dcdc72797dd1",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "ea6808be-0495-4072-9aac-ed59180466e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d619a491-5e12-47f5-86d6-dcdc72797dd1",
        "cursor": {
          "ref": "29805033-a35c-4e09-9fe6-1648ac9d9e60",
          "length": 63,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "0c92b86b-15fc-4e9d-8e04-a3e4d1096a5e"
        },
        "item": {
          "id": "d619a491-5e12-47f5-86d6-dcdc72797dd1",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "ea6808be-0495-4072-9aac-ed59180466e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cab69bee-f59c-4356-945a-84ccc058b2a0",
        "cursor": {
          "ref": "020561af-cca0-465e-bb24-462a0f3b01df",
          "length": 63,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "347e2632-7862-495e-bc76-ac4d80842b69"
        },
        "item": {
          "id": "cab69bee-f59c-4356-945a-84ccc058b2a0",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "27900bbe-6dc7-44ae-8b24-a6e7eb71ccc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cab69bee-f59c-4356-945a-84ccc058b2a0",
        "cursor": {
          "ref": "020561af-cca0-465e-bb24-462a0f3b01df",
          "length": 63,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "347e2632-7862-495e-bc76-ac4d80842b69"
        },
        "item": {
          "id": "cab69bee-f59c-4356-945a-84ccc058b2a0",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "27900bbe-6dc7-44ae-8b24-a6e7eb71ccc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d74081b1-f1d9-4b0d-a526-e20c8b562d9c",
        "cursor": {
          "ref": "f5dd1223-61e1-4976-a1c8-78a6d78b6712",
          "length": 63,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "f99c5898-6af4-41b6-909e-30a865a65e4f"
        },
        "item": {
          "id": "d74081b1-f1d9-4b0d-a526-e20c8b562d9c",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "53244efe-cc5c-4489-8612-6373158e1f1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d74081b1-f1d9-4b0d-a526-e20c8b562d9c",
        "cursor": {
          "ref": "f5dd1223-61e1-4976-a1c8-78a6d78b6712",
          "length": 63,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "f99c5898-6af4-41b6-909e-30a865a65e4f"
        },
        "item": {
          "id": "d74081b1-f1d9-4b0d-a526-e20c8b562d9c",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "53244efe-cc5c-4489-8612-6373158e1f1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c437032-3c4a-4358-a7fe-fdaaf03b1d4a",
        "cursor": {
          "ref": "8c19e3ad-db3e-49f7-b986-b9f1006e31af",
          "length": 63,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "3e06f527-862f-4fa0-9f19-384eda3491fe"
        },
        "item": {
          "id": "6c437032-3c4a-4358-a7fe-fdaaf03b1d4a",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "e977ee2f-8956-4cc4-a3bb-7553b034470b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c437032-3c4a-4358-a7fe-fdaaf03b1d4a",
        "cursor": {
          "ref": "8c19e3ad-db3e-49f7-b986-b9f1006e31af",
          "length": 63,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "3e06f527-862f-4fa0-9f19-384eda3491fe"
        },
        "item": {
          "id": "6c437032-3c4a-4358-a7fe-fdaaf03b1d4a",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "e977ee2f-8956-4cc4-a3bb-7553b034470b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "478cf6e4-5235-4862-af87-152bc854948a",
        "cursor": {
          "ref": "25f29d8f-e62b-4100-b50a-2dc81988537a",
          "length": 63,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "b2f47dea-39f4-4fbc-a872-e073913bdf53"
        },
        "item": {
          "id": "478cf6e4-5235-4862-af87-152bc854948a",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "57743390-b6b0-4d65-bc42-2c9d23dded23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "478cf6e4-5235-4862-af87-152bc854948a",
        "cursor": {
          "ref": "25f29d8f-e62b-4100-b50a-2dc81988537a",
          "length": 63,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "b2f47dea-39f4-4fbc-a872-e073913bdf53"
        },
        "item": {
          "id": "478cf6e4-5235-4862-af87-152bc854948a",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "57743390-b6b0-4d65-bc42-2c9d23dded23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba3cb9e9-9d40-458c-ad8e-68e4aad915a0",
        "cursor": {
          "ref": "1271b92f-0f10-4f19-b782-6d00ae5b70cb",
          "length": 63,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "904f702f-5f3d-4bf6-a515-73b0c385ec10"
        },
        "item": {
          "id": "ba3cb9e9-9d40-458c-ad8e-68e4aad915a0",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "271b65d4-38b0-4500-bda8-653322a5a9e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba3cb9e9-9d40-458c-ad8e-68e4aad915a0",
        "cursor": {
          "ref": "1271b92f-0f10-4f19-b782-6d00ae5b70cb",
          "length": 63,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "904f702f-5f3d-4bf6-a515-73b0c385ec10"
        },
        "item": {
          "id": "ba3cb9e9-9d40-458c-ad8e-68e4aad915a0",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "271b65d4-38b0-4500-bda8-653322a5a9e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "674a4382-dbfb-4263-8e41-eca00ef9f27f",
        "cursor": {
          "ref": "ba24134b-3731-455b-b591-5d90ae084c12",
          "length": 63,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "503ae0de-2a03-41fb-98fc-fa391b7265ea"
        },
        "item": {
          "id": "674a4382-dbfb-4263-8e41-eca00ef9f27f",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "ab999358-9444-4106-b06d-4c11076165a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "674a4382-dbfb-4263-8e41-eca00ef9f27f",
        "cursor": {
          "ref": "ba24134b-3731-455b-b591-5d90ae084c12",
          "length": 63,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "503ae0de-2a03-41fb-98fc-fa391b7265ea"
        },
        "item": {
          "id": "674a4382-dbfb-4263-8e41-eca00ef9f27f",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "ab999358-9444-4106-b06d-4c11076165a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7d84a81-394b-4a68-b24c-4a938d2c9493",
        "cursor": {
          "ref": "d772be79-a44e-4a83-b15f-368d3be07589",
          "length": 63,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "1c959bed-0678-4fba-9e9e-f1a5a5f3bc32"
        },
        "item": {
          "id": "c7d84a81-394b-4a68-b24c-4a938d2c9493",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "13dd012d-4246-4886-9a67-1e6f9e124e04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7d84a81-394b-4a68-b24c-4a938d2c9493",
        "cursor": {
          "ref": "d772be79-a44e-4a83-b15f-368d3be07589",
          "length": 63,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "1c959bed-0678-4fba-9e9e-f1a5a5f3bc32"
        },
        "item": {
          "id": "c7d84a81-394b-4a68-b24c-4a938d2c9493",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "13dd012d-4246-4886-9a67-1e6f9e124e04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c764075a-2528-4d25-85e6-9e68230425a5",
        "cursor": {
          "ref": "359b682c-af58-4cf1-abf4-db19932722f5",
          "length": 63,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "2632379c-03d4-41da-b060-6231e4942921"
        },
        "item": {
          "id": "c764075a-2528-4d25-85e6-9e68230425a5",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "13687b85-3142-4201-b830-a491c4031ead",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 331,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c764075a-2528-4d25-85e6-9e68230425a5",
        "cursor": {
          "ref": "359b682c-af58-4cf1-abf4-db19932722f5",
          "length": 63,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "2632379c-03d4-41da-b060-6231e4942921"
        },
        "item": {
          "id": "c764075a-2528-4d25-85e6-9e68230425a5",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "13687b85-3142-4201-b830-a491c4031ead",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 331,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5acb38a4-1315-4a46-8413-73b6966b0b07",
        "cursor": {
          "ref": "40fedda2-aa68-47ff-afec-afefa8fb51ec",
          "length": 63,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "cbc00aea-979c-400e-ac46-ccb3bf92a7e4"
        },
        "item": {
          "id": "5acb38a4-1315-4a46-8413-73b6966b0b07",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "ac6cf7df-1882-4909-8406-557e8a576a68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5acb38a4-1315-4a46-8413-73b6966b0b07",
        "cursor": {
          "ref": "40fedda2-aa68-47ff-afec-afefa8fb51ec",
          "length": 63,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "cbc00aea-979c-400e-ac46-ccb3bf92a7e4"
        },
        "item": {
          "id": "5acb38a4-1315-4a46-8413-73b6966b0b07",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "ac6cf7df-1882-4909-8406-557e8a576a68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1236578-d80f-49f8-a4ad-e6b14685eb0c",
        "cursor": {
          "ref": "c746423a-e8a5-47b9-9955-810d62cbd402",
          "length": 63,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "cc0789d4-1951-422f-92d9-6353f167cab9"
        },
        "item": {
          "id": "c1236578-d80f-49f8-a4ad-e6b14685eb0c",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "0c9f8213-c560-4f19-9165-f89acaa54342",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1236578-d80f-49f8-a4ad-e6b14685eb0c",
        "cursor": {
          "ref": "c746423a-e8a5-47b9-9955-810d62cbd402",
          "length": 63,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "cc0789d4-1951-422f-92d9-6353f167cab9"
        },
        "item": {
          "id": "c1236578-d80f-49f8-a4ad-e6b14685eb0c",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "0c9f8213-c560-4f19-9165-f89acaa54342",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d0d46fa-875a-48f6-9558-e2a5a3d4898a",
        "cursor": {
          "ref": "5736c666-6a04-422d-9778-ad029bd977ad",
          "length": 63,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "f0d56d07-e9db-492d-83a8-28dd94357809"
        },
        "item": {
          "id": "3d0d46fa-875a-48f6-9558-e2a5a3d4898a",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "73e87629-e9bc-4670-af12-c642043ae191",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d0d46fa-875a-48f6-9558-e2a5a3d4898a",
        "cursor": {
          "ref": "5736c666-6a04-422d-9778-ad029bd977ad",
          "length": 63,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "f0d56d07-e9db-492d-83a8-28dd94357809"
        },
        "item": {
          "id": "3d0d46fa-875a-48f6-9558-e2a5a3d4898a",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "73e87629-e9bc-4670-af12-c642043ae191",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c25f52f3-b653-49e3-a921-bdc7ecb68c9f",
        "cursor": {
          "ref": "01a9b1f1-5956-4ed6-b345-667a78dada15",
          "length": 63,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "ec31f4cb-a63a-4cbd-b869-bb72c5f75bb4"
        },
        "item": {
          "id": "c25f52f3-b653-49e3-a921-bdc7ecb68c9f",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "2a111034-5d26-4448-b3c0-b1f66dfd2bac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 146,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c25f52f3-b653-49e3-a921-bdc7ecb68c9f",
        "cursor": {
          "ref": "01a9b1f1-5956-4ed6-b345-667a78dada15",
          "length": 63,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "ec31f4cb-a63a-4cbd-b869-bb72c5f75bb4"
        },
        "item": {
          "id": "c25f52f3-b653-49e3-a921-bdc7ecb68c9f",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "2a111034-5d26-4448-b3c0-b1f66dfd2bac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 146,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "913098fd-842c-4bcc-803c-ac100e6d08a5",
        "cursor": {
          "ref": "da18bf23-a121-45f8-93ca-b566169a07b3",
          "length": 63,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "681847ef-5db2-47bb-9904-23c05aeba292"
        },
        "item": {
          "id": "913098fd-842c-4bcc-803c-ac100e6d08a5",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "9a171f90-e8b0-4bf5-b727-7cba7afae852",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "913098fd-842c-4bcc-803c-ac100e6d08a5",
        "cursor": {
          "ref": "da18bf23-a121-45f8-93ca-b566169a07b3",
          "length": 63,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "681847ef-5db2-47bb-9904-23c05aeba292"
        },
        "item": {
          "id": "913098fd-842c-4bcc-803c-ac100e6d08a5",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "9a171f90-e8b0-4bf5-b727-7cba7afae852",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5713bca-a189-4d14-b1e7-d6f7a6907c24",
        "cursor": {
          "ref": "b4f92c6c-b8d4-434d-993f-34f49a2e98dd",
          "length": 63,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "090da5c9-94ff-461f-932f-ce4976d87cff"
        },
        "item": {
          "id": "d5713bca-a189-4d14-b1e7-d6f7a6907c24",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "8b419106-4688-4f2c-b239-c6c7d88cc23d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5713bca-a189-4d14-b1e7-d6f7a6907c24",
        "cursor": {
          "ref": "b4f92c6c-b8d4-434d-993f-34f49a2e98dd",
          "length": 63,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "090da5c9-94ff-461f-932f-ce4976d87cff"
        },
        "item": {
          "id": "d5713bca-a189-4d14-b1e7-d6f7a6907c24",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "8b419106-4688-4f2c-b239-c6c7d88cc23d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9d44c42-32cc-4031-8d29-9680c02bdcb0",
        "cursor": {
          "ref": "04d5d98e-3353-495e-85db-a33501664168",
          "length": 63,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "29123caf-eef1-42f6-adf9-27188c524797"
        },
        "item": {
          "id": "c9d44c42-32cc-4031-8d29-9680c02bdcb0",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "cd5f2e0b-2f03-49c4-bfea-76e75d627a6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9d44c42-32cc-4031-8d29-9680c02bdcb0",
        "cursor": {
          "ref": "04d5d98e-3353-495e-85db-a33501664168",
          "length": 63,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "29123caf-eef1-42f6-adf9-27188c524797"
        },
        "item": {
          "id": "c9d44c42-32cc-4031-8d29-9680c02bdcb0",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "cd5f2e0b-2f03-49c4-bfea-76e75d627a6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ac8ce7b-073f-4be6-b016-2e31af8d2749",
        "cursor": {
          "ref": "a60cad30-5a43-4227-9179-3f6375b06783",
          "length": 63,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "354f5427-7058-4916-a2a1-55859ccea229"
        },
        "item": {
          "id": "7ac8ce7b-073f-4be6-b016-2e31af8d2749",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "cc6d3d98-f04f-46d5-989a-3536761b012b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ac8ce7b-073f-4be6-b016-2e31af8d2749",
        "cursor": {
          "ref": "a60cad30-5a43-4227-9179-3f6375b06783",
          "length": 63,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "354f5427-7058-4916-a2a1-55859ccea229"
        },
        "item": {
          "id": "7ac8ce7b-073f-4be6-b016-2e31af8d2749",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "cc6d3d98-f04f-46d5-989a-3536761b012b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfa4ea20-73d0-47bf-bff7-8936169318c3",
        "cursor": {
          "ref": "207cb447-df56-4858-88e3-c85ea0778b24",
          "length": 63,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "2cf01040-c2d7-4ab0-8042-1d021286756c"
        },
        "item": {
          "id": "bfa4ea20-73d0-47bf-bff7-8936169318c3",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "08de26ba-fad9-4304-b489-481db311e4b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfa4ea20-73d0-47bf-bff7-8936169318c3",
        "cursor": {
          "ref": "207cb447-df56-4858-88e3-c85ea0778b24",
          "length": 63,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "2cf01040-c2d7-4ab0-8042-1d021286756c"
        },
        "item": {
          "id": "bfa4ea20-73d0-47bf-bff7-8936169318c3",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "08de26ba-fad9-4304-b489-481db311e4b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e31f2f31-644f-43d0-8701-c93f587b1fe9",
        "cursor": {
          "ref": "fe486c63-bdf7-4fc8-b708-7d3a8fc079f1",
          "length": 63,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "9892f1fc-7f1a-43b8-b406-af6b108ed895"
        },
        "item": {
          "id": "e31f2f31-644f-43d0-8701-c93f587b1fe9",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "0efc71ff-97ef-4915-866d-e97a4404f74f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e31f2f31-644f-43d0-8701-c93f587b1fe9",
        "cursor": {
          "ref": "fe486c63-bdf7-4fc8-b708-7d3a8fc079f1",
          "length": 63,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "9892f1fc-7f1a-43b8-b406-af6b108ed895"
        },
        "item": {
          "id": "e31f2f31-644f-43d0-8701-c93f587b1fe9",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "0efc71ff-97ef-4915-866d-e97a4404f74f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe79aed4-f0cb-433d-9fd1-d72b258dc9c2",
        "cursor": {
          "ref": "a6a05e4a-65de-4980-96d6-49c1d0196ecc",
          "length": 63,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "ed8da787-bfec-429e-8039-be4999fe320a"
        },
        "item": {
          "id": "fe79aed4-f0cb-433d-9fd1-d72b258dc9c2",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "f2eeb6d2-e031-4452-8f20-1b795b33e366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe79aed4-f0cb-433d-9fd1-d72b258dc9c2",
        "cursor": {
          "ref": "a6a05e4a-65de-4980-96d6-49c1d0196ecc",
          "length": 63,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "ed8da787-bfec-429e-8039-be4999fe320a"
        },
        "item": {
          "id": "fe79aed4-f0cb-433d-9fd1-d72b258dc9c2",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "f2eeb6d2-e031-4452-8f20-1b795b33e366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c291755-4092-4ebc-870c-9eb7fb2e46b9",
        "cursor": {
          "ref": "5959e798-0f66-4942-9cb3-a1dd15d12314",
          "length": 63,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "8e7270b6-eab1-4de9-a702-079d3fd3d9c5"
        },
        "item": {
          "id": "6c291755-4092-4ebc-870c-9eb7fb2e46b9",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "b381c5af-b42a-428e-bdee-30427178c2dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c291755-4092-4ebc-870c-9eb7fb2e46b9",
        "cursor": {
          "ref": "5959e798-0f66-4942-9cb3-a1dd15d12314",
          "length": 63,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "8e7270b6-eab1-4de9-a702-079d3fd3d9c5"
        },
        "item": {
          "id": "6c291755-4092-4ebc-870c-9eb7fb2e46b9",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "b381c5af-b42a-428e-bdee-30427178c2dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d32bd588-9ea1-45b3-9d9d-4306e91670ea",
        "cursor": {
          "ref": "8ea3a44d-869f-439b-a3b9-c4d37eba9bfe",
          "length": 63,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "c70a2a8d-b4d1-4401-acf0-4b1c8757f58d"
        },
        "item": {
          "id": "d32bd588-9ea1-45b3-9d9d-4306e91670ea",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "6a28339c-0bb6-480d-a69f-9bed04c94507",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d32bd588-9ea1-45b3-9d9d-4306e91670ea",
        "cursor": {
          "ref": "8ea3a44d-869f-439b-a3b9-c4d37eba9bfe",
          "length": 63,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "c70a2a8d-b4d1-4401-acf0-4b1c8757f58d"
        },
        "item": {
          "id": "d32bd588-9ea1-45b3-9d9d-4306e91670ea",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "6a28339c-0bb6-480d-a69f-9bed04c94507",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f69dda98-4b11-49e8-99b7-b433c7a6a9d3",
        "cursor": {
          "ref": "6887e798-2ad0-45a8-aef6-c500121534e9",
          "length": 63,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "a2dac4f5-a8c5-43cf-b7c3-722a180cd44f"
        },
        "item": {
          "id": "f69dda98-4b11-49e8-99b7-b433c7a6a9d3",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "a7a7c704-a8e0-4afe-8621-9f6694d15ac8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f69dda98-4b11-49e8-99b7-b433c7a6a9d3",
        "cursor": {
          "ref": "6887e798-2ad0-45a8-aef6-c500121534e9",
          "length": 63,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "a2dac4f5-a8c5-43cf-b7c3-722a180cd44f"
        },
        "item": {
          "id": "f69dda98-4b11-49e8-99b7-b433c7a6a9d3",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "a7a7c704-a8e0-4afe-8621-9f6694d15ac8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5f530bb-d4e2-4272-970a-297344e1cbcb",
        "cursor": {
          "ref": "ac7ac1c7-be5c-46a2-838d-2b6bc33ab1a1",
          "length": 63,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "29a5c56c-1f7d-4f38-9f2b-61d7f4c02f5f"
        },
        "item": {
          "id": "f5f530bb-d4e2-4272-970a-297344e1cbcb",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "453f9f9a-d08b-4ba0-bf18-3af406b4558b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 190,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5f530bb-d4e2-4272-970a-297344e1cbcb",
        "cursor": {
          "ref": "ac7ac1c7-be5c-46a2-838d-2b6bc33ab1a1",
          "length": 63,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "29a5c56c-1f7d-4f38-9f2b-61d7f4c02f5f"
        },
        "item": {
          "id": "f5f530bb-d4e2-4272-970a-297344e1cbcb",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "453f9f9a-d08b-4ba0-bf18-3af406b4558b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 190,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71d2e987-5177-486c-ad35-c7072c31d724",
        "cursor": {
          "ref": "09813671-5aa2-49ad-a788-23b34e346be1",
          "length": 63,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "a1962101-c9c7-4f30-853d-45969a8e6cb0"
        },
        "item": {
          "id": "71d2e987-5177-486c-ad35-c7072c31d724",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "cc810aab-c05b-45ba-bbe2-f27c432a5bf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71d2e987-5177-486c-ad35-c7072c31d724",
        "cursor": {
          "ref": "09813671-5aa2-49ad-a788-23b34e346be1",
          "length": 63,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "a1962101-c9c7-4f30-853d-45969a8e6cb0"
        },
        "item": {
          "id": "71d2e987-5177-486c-ad35-c7072c31d724",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "cc810aab-c05b-45ba-bbe2-f27c432a5bf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5158d8f3-18c6-4c3a-ad3c-94f0f1fbda17",
        "cursor": {
          "ref": "007c63bf-ddfc-4ce5-b77e-6d359b2c5de5",
          "length": 63,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "57eb4b8d-1df2-4a74-9ac3-0b721ecbd9e6"
        },
        "item": {
          "id": "5158d8f3-18c6-4c3a-ad3c-94f0f1fbda17",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "91aaedc9-4c80-43f3-a560-310529f9e05a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5158d8f3-18c6-4c3a-ad3c-94f0f1fbda17",
        "cursor": {
          "ref": "007c63bf-ddfc-4ce5-b77e-6d359b2c5de5",
          "length": 63,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "57eb4b8d-1df2-4a74-9ac3-0b721ecbd9e6"
        },
        "item": {
          "id": "5158d8f3-18c6-4c3a-ad3c-94f0f1fbda17",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "91aaedc9-4c80-43f3-a560-310529f9e05a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "583b29d4-b982-432e-a16a-56601f579362",
        "cursor": {
          "ref": "718ea319-0edd-421c-b9d4-cad694ae46dd",
          "length": 63,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a6458270-06b4-444a-a460-3e70835ed710"
        },
        "item": {
          "id": "583b29d4-b982-432e-a16a-56601f579362",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "d0e3a7ea-cd0e-4c43-8003-4f092061169d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "583b29d4-b982-432e-a16a-56601f579362",
        "cursor": {
          "ref": "718ea319-0edd-421c-b9d4-cad694ae46dd",
          "length": 63,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a6458270-06b4-444a-a460-3e70835ed710"
        },
        "item": {
          "id": "583b29d4-b982-432e-a16a-56601f579362",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "d0e3a7ea-cd0e-4c43-8003-4f092061169d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3560ccbc-8f5f-4660-8dbf-21835e6414a2",
        "cursor": {
          "ref": "ca5b1509-037e-4017-972d-06c96dcd298c",
          "length": 63,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "1b54f8fc-2b61-44ff-8f84-2eaac18fc260"
        },
        "item": {
          "id": "3560ccbc-8f5f-4660-8dbf-21835e6414a2",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "c0505c9f-7150-432a-b789-f21538d9844c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3560ccbc-8f5f-4660-8dbf-21835e6414a2",
        "cursor": {
          "ref": "ca5b1509-037e-4017-972d-06c96dcd298c",
          "length": 63,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "1b54f8fc-2b61-44ff-8f84-2eaac18fc260"
        },
        "item": {
          "id": "3560ccbc-8f5f-4660-8dbf-21835e6414a2",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "c0505c9f-7150-432a-b789-f21538d9844c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b072c2cb-5998-422a-a937-b55429076322",
        "cursor": {
          "ref": "71821a94-d5b2-4de2-a616-72b1b1ab235b",
          "length": 63,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "cf436d68-8f91-418b-8956-965b0d662cff"
        },
        "item": {
          "id": "b072c2cb-5998-422a-a937-b55429076322",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "cdd4c9cc-1bc1-438c-82e1-cc6a690ae4a9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b072c2cb-5998-422a-a937-b55429076322",
        "cursor": {
          "ref": "71821a94-d5b2-4de2-a616-72b1b1ab235b",
          "length": 63,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "cf436d68-8f91-418b-8956-965b0d662cff"
        },
        "item": {
          "id": "b072c2cb-5998-422a-a937-b55429076322",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "cdd4c9cc-1bc1-438c-82e1-cc6a690ae4a9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58cb782b-604a-4b50-b15b-5d2c6951683d",
        "cursor": {
          "ref": "aeb9d54e-2d44-43fc-bbee-93e4534a4e87",
          "length": 63,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "21519af3-7719-489e-b8a2-716ae8ec82e8"
        },
        "item": {
          "id": "58cb782b-604a-4b50-b15b-5d2c6951683d",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "9c1a25cd-083a-46f6-af4f-eed137dded09",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 12,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58cb782b-604a-4b50-b15b-5d2c6951683d",
        "cursor": {
          "ref": "aeb9d54e-2d44-43fc-bbee-93e4534a4e87",
          "length": 63,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "21519af3-7719-489e-b8a2-716ae8ec82e8"
        },
        "item": {
          "id": "58cb782b-604a-4b50-b15b-5d2c6951683d",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "9c1a25cd-083a-46f6-af4f-eed137dded09",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 12,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b50e773-66f7-427f-91de-d68eb355256b",
        "cursor": {
          "ref": "ad982fa6-800a-4b77-be6f-37d7f4dac118",
          "length": 63,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "dcd91cc1-57b1-445a-91cf-a6c178d65767"
        },
        "item": {
          "id": "8b50e773-66f7-427f-91de-d68eb355256b",
          "name": "credentials_issue"
        },
        "response": {
          "id": "73674fca-4573-481d-9480-1a73ed686d51",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b50e773-66f7-427f-91de-d68eb355256b",
        "cursor": {
          "ref": "ad982fa6-800a-4b77-be6f-37d7f4dac118",
          "length": 63,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "dcd91cc1-57b1-445a-91cf-a6c178d65767"
        },
        "item": {
          "id": "8b50e773-66f7-427f-91de-d68eb355256b",
          "name": "credentials_issue"
        },
        "response": {
          "id": "73674fca-4573-481d-9480-1a73ed686d51",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5e0f7ea-c20d-4599-bfae-6f092772e7f7",
        "cursor": {
          "ref": "b44a4eb7-ed6a-4eb4-88a9-9766355c248e",
          "length": 63,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "758d7c43-9fc8-4efb-bc57-03c0be628ec9"
        },
        "item": {
          "id": "b5e0f7ea-c20d-4599-bfae-6f092772e7f7",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "49c1909a-bcfa-443b-ac16-0b27080c6156",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 607
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5e0f7ea-c20d-4599-bfae-6f092772e7f7",
        "cursor": {
          "ref": "b44a4eb7-ed6a-4eb4-88a9-9766355c248e",
          "length": 63,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "758d7c43-9fc8-4efb-bc57-03c0be628ec9"
        },
        "item": {
          "id": "b5e0f7ea-c20d-4599-bfae-6f092772e7f7",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "49c1909a-bcfa-443b-ac16-0b27080c6156",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 607
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "831ac785-7b79-4e79-8368-6dab07d4550d",
        "cursor": {
          "ref": "d1bf0dc6-15bc-4b8f-b723-876d866df1b1",
          "length": 63,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b176eae1-0d73-4c82-9e85-48d4fda8db2e"
        },
        "item": {
          "id": "831ac785-7b79-4e79-8368-6dab07d4550d",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "067b1927-3954-4a7e-a884-77fb0e4e22af",
          "status": "Created",
          "code": 201,
          "responseTime": 305,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "831ac785-7b79-4e79-8368-6dab07d4550d",
        "cursor": {
          "ref": "d1bf0dc6-15bc-4b8f-b723-876d866df1b1",
          "length": 63,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b176eae1-0d73-4c82-9e85-48d4fda8db2e"
        },
        "item": {
          "id": "831ac785-7b79-4e79-8368-6dab07d4550d",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "067b1927-3954-4a7e-a884-77fb0e4e22af",
          "status": "Created",
          "code": 201,
          "responseTime": 305,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2d692e5-266c-487e-b430-e1aec1efcb6a",
        "cursor": {
          "ref": "53e6cf84-0372-4e63-b9c1-24b6c08e31a8",
          "length": 63,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "539bd505-568d-49c7-a14e-cabf9962a248"
        },
        "item": {
          "id": "f2d692e5-266c-487e-b430-e1aec1efcb6a",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "556c1f23-de8a-405d-a603-ac889e891b97",
          "status": "Created",
          "code": 201,
          "responseTime": 301,
          "responseSize": 576
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2d692e5-266c-487e-b430-e1aec1efcb6a",
        "cursor": {
          "ref": "53e6cf84-0372-4e63-b9c1-24b6c08e31a8",
          "length": 63,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "539bd505-568d-49c7-a14e-cabf9962a248"
        },
        "item": {
          "id": "f2d692e5-266c-487e-b430-e1aec1efcb6a",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "556c1f23-de8a-405d-a603-ac889e891b97",
          "status": "Created",
          "code": 201,
          "responseTime": 301,
          "responseSize": 576
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d440517-4a6a-45da-9641-e3fb764b0372",
        "cursor": {
          "ref": "ba8c99ca-825e-4e64-885c-6105ec174e1d",
          "length": 63,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "d92d52f1-1fe3-4cfe-b76f-3960b5af556f"
        },
        "item": {
          "id": "5d440517-4a6a-45da-9641-e3fb764b0372",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "1e6abfec-8ce1-4890-bf6e-7d1ab22613ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "5d440517-4a6a-45da-9641-e3fb764b0372",
        "cursor": {
          "ref": "ba8c99ca-825e-4e64-885c-6105ec174e1d",
          "length": 63,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "d92d52f1-1fe3-4cfe-b76f-3960b5af556f"
        },
        "item": {
          "id": "5d440517-4a6a-45da-9641-e3fb764b0372",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "1e6abfec-8ce1-4890-bf6e-7d1ab22613ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "ba447e6b-71bf-4b68-a451-920ffbf59e80",
        "cursor": {
          "ref": "a2f4c8d6-a761-478b-bd09-00bfb70cb7c7",
          "length": 63,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "681026e6-9ffd-4559-a566-9c1a545da699"
        },
        "item": {
          "id": "ba447e6b-71bf-4b68-a451-920ffbf59e80",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "35431806-3c04-40fb-8337-f517278a9b46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "ba447e6b-71bf-4b68-a451-920ffbf59e80",
        "cursor": {
          "ref": "a2f4c8d6-a761-478b-bd09-00bfb70cb7c7",
          "length": 63,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "681026e6-9ffd-4559-a566-9c1a545da699"
        },
        "item": {
          "id": "ba447e6b-71bf-4b68-a451-920ffbf59e80",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "35431806-3c04-40fb-8337-f517278a9b46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "0dd63431-242e-4500-af76-89da641d76d7",
        "cursor": {
          "ref": "f88e2809-38aa-4452-a487-45934da31bbd",
          "length": 63,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "51289a96-6ddf-425d-9ff0-34222c6d8acd"
        },
        "item": {
          "id": "0dd63431-242e-4500-af76-89da641d76d7",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "42f3f731-4f3a-4d39-9be7-02f1e8baf625",
          "status": "Created",
          "code": 201,
          "responseTime": 320,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dd63431-242e-4500-af76-89da641d76d7",
        "cursor": {
          "ref": "f88e2809-38aa-4452-a487-45934da31bbd",
          "length": 63,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "51289a96-6ddf-425d-9ff0-34222c6d8acd"
        },
        "item": {
          "id": "0dd63431-242e-4500-af76-89da641d76d7",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "42f3f731-4f3a-4d39-9be7-02f1e8baf625",
          "status": "Created",
          "code": 201,
          "responseTime": 320,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fff61ca1-2453-4a74-9f88-ab88b9f08da0",
        "cursor": {
          "ref": "c08d9151-8f61-4da6-85ef-dcfa8c2e2d3f",
          "length": 63,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "a4566891-97ff-457c-8ae7-cf8c23e8ec10"
        },
        "item": {
          "id": "fff61ca1-2453-4a74-9f88-ab88b9f08da0",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "9b6f4446-e680-4fae-a997-74c0a607596e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fff61ca1-2453-4a74-9f88-ab88b9f08da0",
        "cursor": {
          "ref": "c08d9151-8f61-4da6-85ef-dcfa8c2e2d3f",
          "length": 63,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "a4566891-97ff-457c-8ae7-cf8c23e8ec10"
        },
        "item": {
          "id": "fff61ca1-2453-4a74-9f88-ab88b9f08da0",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "9b6f4446-e680-4fae-a997-74c0a607596e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7736eff-92b2-4e9d-b0b0-5132dcdcfede",
        "cursor": {
          "ref": "010f74f8-6225-4f21-9414-217d6623ae69",
          "length": 63,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "47fc2020-a370-4736-8a2c-047d61a931c5"
        },
        "item": {
          "id": "e7736eff-92b2-4e9d-b0b0-5132dcdcfede",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "9ada000b-530c-4b92-9085-46d1c1ee7ce4",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 12,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f098d532-72d6-4471-b68c-adb8209e36a8",
        "cursor": {
          "ref": "43ade663-3811-4d79-a42b-6a3da1820df6",
          "length": 63,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "1d168add-83d6-4cf7-aec9-d7195e9afe2b"
        },
        "item": {
          "id": "f098d532-72d6-4471-b68c-adb8209e36a8",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "34350357-da08-4527-a4e5-3ce20d2de850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 175,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f098d532-72d6-4471-b68c-adb8209e36a8",
        "cursor": {
          "ref": "43ade663-3811-4d79-a42b-6a3da1820df6",
          "length": 63,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "1d168add-83d6-4cf7-aec9-d7195e9afe2b"
        },
        "item": {
          "id": "f098d532-72d6-4471-b68c-adb8209e36a8",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "34350357-da08-4527-a4e5-3ce20d2de850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 175,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a1c02bf-4e18-480d-b809-6910daa68fbc",
        "cursor": {
          "ref": "8d28f0dd-d6c6-458a-9e90-f7d25a557cdc",
          "length": 63,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "1574c619-e79c-481b-9bd9-25e8c941a84c"
        },
        "item": {
          "id": "6a1c02bf-4e18-480d-b809-6910daa68fbc",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "ee4aeb5a-cc8f-4562-8380-6ac303524f26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bb70f26-3b61-48e6-b077-a3ee1cb62f2a",
        "cursor": {
          "ref": "67b4edf4-a1d0-4a8b-8c91-6613fd1983a4",
          "length": 63,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "40dbba07-b4c7-4303-b01f-1cfcd3eb5c02"
        },
        "item": {
          "id": "5bb70f26-3b61-48e6-b077-a3ee1cb62f2a",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "83db288c-9473-4630-a299-f66517f8025a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 146,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc2b99c4-4d08-4683-95da-c063236585ac",
        "cursor": {
          "ref": "3f275e14-a263-4069-befc-3e0b7c468ece",
          "length": 63,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "99470053-235b-46de-8e1c-2430e593cd86"
        },
        "item": {
          "id": "bc2b99c4-4d08-4683-95da-c063236585ac",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "7718a37c-76c0-400d-bd24-fa6853854218",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ef49846-56bf-418e-aab9-ebd25c4af135",
        "cursor": {
          "ref": "e35b8df7-3644-41cd-990c-7bc250b2d511",
          "length": 63,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "dbf85167-17ce-4f06-a6da-23a831d72a68"
        },
        "item": {
          "id": "6ef49846-56bf-418e-aab9-ebd25c4af135",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "9236bcf1-9737-42c5-b12d-5c2be12ff5eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f651b67d-27cb-478f-bb19-e85891bbab35",
        "cursor": {
          "ref": "482887d2-e0cf-4588-a804-7dfd448b309a",
          "length": 63,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "a241560d-9d95-46e7-9dda-a9ce198afd1d"
        },
        "item": {
          "id": "f651b67d-27cb-478f-bb19-e85891bbab35",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "3a99f07b-6cb0-44e4-ac06-cff481f34447",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a280145d-61f8-49e2-9e78-57f16d560a7a",
        "cursor": {
          "ref": "e2c9bf4a-bdb5-43c3-b201-b0f31f363313",
          "length": 63,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "92f617f4-f479-473f-9f34-8e3d0467ba04"
        },
        "item": {
          "id": "a280145d-61f8-49e2-9e78-57f16d560a7a",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "44dbd399-7e6c-4c9a-9b7e-a8c0e1807790",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2eac7c6-204f-4c8e-a929-a2137532098c",
        "cursor": {
          "ref": "090a9181-ec6c-427f-a854-04e609354244",
          "length": 63,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "b1f047b7-0906-4bba-8009-d8a60a3bd5de"
        },
        "item": {
          "id": "b2eac7c6-204f-4c8e-a929-a2137532098c",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "d6016bf3-b8e1-4340-893a-ee5d2ed1ea9d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 13,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fe4ec4d-d5a1-4cc0-b209-c6c8faa089c3",
        "cursor": {
          "ref": "08cbdc4c-dbe8-4bd9-bbb1-a44a529b9f41",
          "length": 63,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "289e84bb-f561-4fd2-82a1-3c01abad206b"
        },
        "item": {
          "id": "2fe4ec4d-d5a1-4cc0-b209-c6c8faa089c3",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0bfc7982-7574-4fb1-a936-a819812015e2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fe4ec4d-d5a1-4cc0-b209-c6c8faa089c3",
        "cursor": {
          "ref": "08cbdc4c-dbe8-4bd9-bbb1-a44a529b9f41",
          "length": 63,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "289e84bb-f561-4fd2-82a1-3c01abad206b"
        },
        "item": {
          "id": "2fe4ec4d-d5a1-4cc0-b209-c6c8faa089c3",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0bfc7982-7574-4fb1-a936-a819812015e2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "573e5ee1-bab2-4d7b-8551-91c467890d07",
        "cursor": {
          "ref": "6229cdd0-aa32-4c5c-b170-820b039efa5d",
          "length": 63,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "6c54ad86-7c7e-4e58-a78b-84f1f7fcfcb3"
        },
        "item": {
          "id": "573e5ee1-bab2-4d7b-8551-91c467890d07",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "a50b8f7c-1f48-4c4d-9694-e023357985ea",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 11,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0505ba4e-db15-4d9b-a22a-f7f09e183dbc",
        "cursor": {
          "ref": "ab09db2f-5419-49d0-b4ab-cfda4434a744",
          "length": 63,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "de811816-f86a-40d4-8d06-a8ef2f532a4c"
        },
        "item": {
          "id": "0505ba4e-db15-4d9b-a22a-f7f09e183dbc",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "33c12479-f534-4dc5-997f-b15519816de2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "0505ba4e-db15-4d9b-a22a-f7f09e183dbc",
        "cursor": {
          "ref": "ab09db2f-5419-49d0-b4ab-cfda4434a744",
          "length": 63,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "de811816-f86a-40d4-8d06-a8ef2f532a4c"
        },
        "item": {
          "id": "0505ba4e-db15-4d9b-a22a-f7f09e183dbc",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "33c12479-f534-4dc5-997f-b15519816de2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "c6e9394c-3c26-4858-814d-98a4596a9221",
        "cursor": {
          "ref": "ea94a9ab-be06-4c3c-a578-73249e7099e2",
          "length": 63,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "5c7a9a63-d203-4d13-bc0e-62bdfa420b70"
        },
        "item": {
          "id": "c6e9394c-3c26-4858-814d-98a4596a9221",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "3f0eec55-c001-4029-b198-7b4fcf329c74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "f6d18e91-fa75-4c9b-bb72-dc810ecd0ed5",
        "cursor": {
          "ref": "b1c14eca-119c-4783-8334-0081276f6040",
          "length": 63,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "f953841d-f758-4e67-a4a2-a1e4e76e2aac"
        },
        "item": {
          "id": "f6d18e91-fa75-4c9b-bb72-dc810ecd0ed5",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "e849de53-24cf-4163-9088-cf4525a6a0d4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6d18e91-fa75-4c9b-bb72-dc810ecd0ed5",
        "cursor": {
          "ref": "b1c14eca-119c-4783-8334-0081276f6040",
          "length": 63,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "f953841d-f758-4e67-a4a2-a1e4e76e2aac"
        },
        "item": {
          "id": "f6d18e91-fa75-4c9b-bb72-dc810ecd0ed5",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "e849de53-24cf-4163-9088-cf4525a6a0d4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1d5e586-dd0a-4238-911f-e36720ce927b",
        "cursor": {
          "ref": "94a55002-6f21-48db-9f19-d9b817e5c2fc",
          "length": 63,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "dc81d9dc-ac55-4e6e-9a38-c20ef4b280ed"
        },
        "item": {
          "id": "c1d5e586-dd0a-4238-911f-e36720ce927b",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "6b4b07c9-da8f-4593-900d-e3556d0df4d4",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}