{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "29326924-3c73-443f-88d1-6d8769e58494",
        "name": "Clear Cache",
        "item": [
          {
            "id": "a440262a-2e8a-4767-95a7-33fdfba8db88",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ea43a7ef-facd-4a66-84a5-262cdf623cce",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4d39fd3d-cd36-437f-9925-da3a9ed3bc03"
                }
              }
            ]
          },
          {
            "id": "1a90d40c-1efd-48c3-814e-5be9e538bd3f",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "75445cdf-3665-49ba-96c1-93e04164f209",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "db941738-5ad0-4166-8216-1221c2f21d39"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "ab5f9985-31dd-4854-ba4d-07973416e5d2",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "241c6ac3-c35c-4c96-8064-89639caae2db",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1c1b3e2a-aeb4-4420-b683-39d9339ec9fc",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9cd9360f-db9e-415d-a7c5-ead57c1e8c86",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cb4f96c0-029f-462d-b960-45391e867fd6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0eca1647-388e-4f23-a7ae-7e2563c4fd84",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d556950f-f708-492e-8e89-210a6d3f9df3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1fc13ccc-f6fe-47c2-9e79-1362f51efcab",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bc4ab568-5401-4fde-9359-d5b5e4c40cf5"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e0e8a735-b3a7-4d13-b7b9-4ecce87c32f5",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "c8b35b4d-3c93-4956-b2d7-75b7097bf545"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "57477229-2f29-4e87-89c5-b0f8b91778bf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e874af98-7d68-4403-aa82-80bc44b58beb"
            }
          }
        ]
      },
      {
        "id": "b3c60282-a8e6-49d4-8ae6-2816cece8f6b",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "36ec2378-c547-45af-aea4-b56bc83ce5bd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "443066fc-b62d-4a99-a3aa-e281f633fbc7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "73eef524-558d-4385-b8b1-3d1eda3e2dd2",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f78d9da-52b8-4f9f-a72c-524921adf59c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a97a22d7-6456-4021-9205-f3ec20f7d88b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f75c108-f26b-47d9-887d-c55fe090407d",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0a64880-b0c4-407e-9ceb-135135e8e51b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "afcf5daf-e0a5-4445-814d-051294416c55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0874b7f8-83dd-4fdf-96cf-2273e4bc29d6",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1d852cf-4277-4e7d-b364-203da4359db9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8f86ec85-1354-41bc-8934-621de5879184"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "064444b1-0972-4709-907c-fb450336243a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c3a8000b-1bf8-49e0-b457-009f7d0acc71",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4189a567-ac42-4173-814a-7b141982975d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3fcd00ff-4d83-483b-99c7-e38754bd398b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62ffaa00-edcc-4088-b8e2-e24c5c6faff0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdb90758-c665-48f4-97a2-994a666f503a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d694f10-08b7-4e4a-a64a-88ca55737a0c",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d342609-4173-4e72-9e44-55c4399e5da1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "406845e7-5686-4cc8-837d-f8e269501178"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a752cd0-5181-42a2-895d-e823b9c69a82",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "85a78855-058d-4720-ad75-d528a5f88dfa"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "8c5f2881-dfc6-4275-8967-31ba7266ef25",
            "name": "Positive Testing",
            "item": [
              {
                "id": "feb64712-b846-4139-8540-22ec32830927",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "11f4687e-9c4b-486f-9f25-2a787a35bd17",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "28d0af49-a914-4ef5-b7b9-68abe3398938"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3e42d67c-1bf8-4eba-917b-6ba3ede15101",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "fdc95b60-56e1-4cef-9d23-4c21ae67b650"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f6871924-5b90-41e6-8440-00b1600678b7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0f4fabd4-5977-4d37-80ff-b969184343e2"
            }
          }
        ]
      },
      {
        "id": "764644fa-4c9d-48c0-8466-59bd0eb9709b",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "091b6c90-7649-46b5-a504-b6f56ddecb7a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "998878a4-4273-417b-ac5b-60379d3111a2",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "3b53b320-3b58-4dcc-892a-a57bca3f6d0e",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f904cb3d-9ead-4252-a8d8-cdeb25fac18c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b810b05-3b90-4b45-acf1-fad038de1ffc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaceaafe-33ee-47d2-8fb6-e5c5e8dcf517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c218074b-ac3b-4e59-8093-ebec231ed369"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3160da35-166b-4802-b8b0-07f8bd72a51f",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83efd1b2-e38e-4827-b740-b857e1c09428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5243d849-4231-4905-a2ef-ee1da77b6396"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26d8cd93-e96a-4e7f-8f4f-dbbbcfce0710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "63679394-1d89-4239-8b4e-3425b0cfd7ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54d54b6d-675a-424c-b81d-75fa7142e94b",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a211193-07dc-440c-a1d5-e0815b27c192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d80e0e4-c9e3-4fce-bc8a-c6e3a539fbeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "342a5a44-6819-4e66-bff0-3448fd5d9356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a5793ca5-14ac-4c2c-83b9-84f338da83bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a326a6bc-68a7-4ac2-868c-1eb74462e011",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ede430c8-a8f4-4868-b94f-3437447afeed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "095f608c-8941-4230-99fe-0a626b4a3a90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c080d3da-0447-40a4-8904-7f92eb6e341c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "72eb91e6-5cf3-4306-b54f-d1c8f12f86e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2247d7d1-dac7-468c-b0f3-f9194fddc69b",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "884e7557-b27b-4086-95f1-21e84ec6401e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8eb6363-5641-4561-8140-6bd64a00b7a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5b14c33-b2d9-4235-8ae5-ea188e365686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a3c48d40-0a02-45de-9ad7-48743dcae94a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3b22719-af34-4407-b220-039bc4764ac6",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "955aa646-a07c-451f-bab9-5287e2351f94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "546d7843-9caf-43a1-89c9-c318b25fca02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87ff9528-a16c-497e-8c09-f7ff66384953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7695dd89-749b-4360-a8cf-71cd4806decc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de97759a-4c1e-4a1a-8192-aab6c6846f6e",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b016a036-d596-4f78-bd26-0119b77be67e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc045b94-3ba3-4530-8273-c6ed2e43605f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e772b82f-3459-4afa-978e-647f6940479d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d97b266a-d0d1-4ef3-8c9d-5970bbb24bfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15dc8750-dc32-4885-b498-b5f0d056c73e",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97c7e41e-e928-43f2-96c9-303e9ac3afb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6d2a792-4dd0-4b67-a846-49af04f81bb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bfde044-7954-4f48-8ece-40d1174cf6b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f5fafbe1-215b-479c-8c25-cb2ee3e28c26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d6e615d-45bb-4f08-a38c-b38b5b35b03c",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b21c1d86-c438-479b-b686-ccd23771328d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f702a722-e9dc-4bae-92d5-e50424dc63bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a72a499d-fc0a-41a7-8de2-4b71d18cfbaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2e4b6532-62f4-4c57-a373-7173b9027894"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfa2c7ee-d91e-459c-a7aa-a552bbd3c481",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f6dac0a-e636-4c01-8747-58f0cd0546fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "963b071f-8007-4a5a-b98c-9f77895076be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2504684-b71c-44d6-a98b-d969d64b64df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9decc278-5126-4f5b-8ca8-00170108f3b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96bbf87e-4d58-4722-8d17-a10e077dbb42",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e7a8081-fa3a-4d9d-b6cf-6553f4b9cdf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d02be45-1edf-4560-a15e-5a874677fc23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53ba5123-e1d6-4153-844f-a8ed30a906a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dbff7f74-438a-451c-9484-2f0d4f3feddc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "effe389a-61ba-47e6-9e90-21fa8ebf45c7",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4ca49d4-a1e7-4f05-9b51-c742e761008a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14b68d8d-bb8a-4173-86b7-300771ea2f81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c96e8702-0a0c-4944-b551-bf5e1bc06abc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "557a56ce-2321-44aa-8909-bbf5479eb6b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8382652-6637-4167-aad5-f86a081680de",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a21a3bff-6176-480b-b5e2-b3c5f763318d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7f4bcaf-4af7-4ecc-b400-3c657e07236e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec694d8b-8b58-4b7f-b800-7e90fbee84e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c7152e25-9371-44b0-b951-22ae68e9789a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb5542cd-5e3a-4595-96f1-233ae2b8baec",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a9ea726-0f44-4793-8f73-582a04fba050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82462bcf-09ad-40cc-b371-371e926328d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18a93adb-2ee2-486a-ace2-3cbec052aa7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e2225246-160d-4efe-9c3b-f173fc15c93b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0963212b-2191-4e7a-a986-a4654124fe65",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9f59356-d768-4600-bda9-7f37d5c4f97b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f24d761-6393-4572-ae6c-00f3a5e4bf88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "797b4f4c-7836-4c44-90f4-b18665d71cb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f5afde79-0d45-4c22-bdbd-f8c09b7ba975"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbb010c9-1fc6-4c82-bd50-65e97a319815",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a5741d9-e986-4278-bb26-0445c757d5ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "073c60fd-0c16-4a55-bf20-e444fa306e11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "887d50ee-af10-478a-a026-4cbc4ea775ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "de323d12-ad38-476d-bc68-6d3f22a6ae55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2388629b-e017-407a-938c-7d918c90e0c0",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7500d821-492c-4296-b9cc-4aeb16857bbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bf4b630-7b03-4278-a914-1af7f49a202d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b63d319d-cb41-4a60-9946-b6a6d0823327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e1a5a3a8-8727-4068-9e3a-205841965ff8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4404529-e7d9-40eb-a15b-4c218b03c36f",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "895b0b72-5d31-4822-b602-92710917ba7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0474df0f-af31-453a-9212-34a8adb06e05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c24b196e-a051-4201-8c55-460cf1eb75f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "33be356e-b6a1-4c72-9d25-81ec233b88ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "319d47ca-173d-4e45-acd6-8f4dee21fb39",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a16744f-43c3-4646-b352-0c4c9fc48ed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e25f3a1c-d00c-4850-9485-69ad782093cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ee0fbc5-437e-407a-a0bf-b4629dc47a76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3efc569c-3a6a-4be5-b55c-88f5b757212c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfdd531c-6f38-4700-a145-7c4e8ff16e4b",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1439af2-f1a6-4424-90dc-741270b2069b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac137047-366d-4801-975f-147f3ee01827"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd0451db-de0d-4943-9262-52835d9265bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a486a18-aa80-4e32-8c9b-2525aa29f90b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75fe6edf-751f-4518-9958-4de22d866079",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56451eab-20d5-4d09-9526-b0e9502221cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5169cacd-85b6-4e43-8ada-370495c4fe2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "480da6ec-b994-48ba-9008-2cfd4869cabb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4b0f94f-f9eb-4189-a3fd-abf346b83a14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baadceb6-ea90-4a9c-9f82-19d5309183b3",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "260130df-efaf-4e2c-ba80-585dfa724e64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c78e70c7-3d7b-4303-8bf9-4fa06d41d960"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3db99132-7ed6-47eb-abbd-6195c447a396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ec0561a7-6307-4474-a40e-de70e9ae4769"
                        }
                      }
                    ]
                  },
                  {
                    "id": "772acc85-47ae-4010-87ff-56c074234dfa",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c61a338-b4eb-4279-803a-3fc3681b62cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c987b660-ddbe-4251-a28b-595cdf8d13a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f6689fc-f1a1-4ac8-a883-10192ff59380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b4351dc7-7062-4e9e-a1ae-e6eabb0cb953"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffdbc90c-1d12-4663-9ebc-6d11bd2cff52",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96799845-8cac-4837-b1b4-2f5e72b2989b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f291bfb1-f696-466b-b8b8-12b0031ff3af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28eaa9ee-6b87-49f9-8bb8-009d3884bb01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c9329f0-6ba3-4497-a6f6-f98a1ce9dad7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4664e5a3-1c7a-4368-9842-e77fc01eb797",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8fd2479-013c-413b-920c-9852c8265ab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cba77d7-dc53-4dda-bad8-0f0d52350ec4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c22c0091-6813-4d79-ade8-4654fb8eadf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b55ee2c-340d-42c0-acd0-fb8797d90ee2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21129e29-b3e2-4bf3-9140-8571c006c089",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66f25fb2-a51e-4263-b751-4c64a47acaa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d96026fb-ade4-4338-a8f3-9c45ebd48743"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27ae68e5-1a42-45fa-8b8f-bc33617d62a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e8f6bc6-3bd5-4fcc-9289-2c44ed102e2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40435f5b-efea-410d-a0a7-3a4d9f9f9f44",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "951d6bab-1618-47f7-8de8-60af6caab6a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0682441b-1799-4615-ad55-178ed5784a04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e7c6d21-c360-41d7-bd80-947a80d270b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "01f3595c-899e-465d-9c72-b39572d285ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "901c2e74-d9d3-46ae-bc56-e81362fa813a",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30034763-1f31-4d8d-a274-dea72490ef55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b472c19-6f07-40d8-8ccb-83006492c819"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9fbaeac-0d87-445e-9e98-6626b3dbb707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "83e4663b-f65b-4d7d-8328-27383031fff5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e83ed17-d473-446e-9161-08deae9ae223",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c30fc7e4-b1ef-4d62-b9ee-0fdd928df1ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b632f4cc-e899-4daa-bca7-7bd4c44d0f18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf0a9fe5-457b-442a-bb2d-d0a6ccd5d2d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c19f48c-1b63-4353-bec6-0dca6526ed33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62b74e91-0a43-45ca-a45c-c6063df42a6d",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84c05388-f935-409b-904f-379f0455b87c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0ba017b-24d5-4447-8ce0-68e55b0cad37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17c52523-008e-4a49-b01b-f969183f6a78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4d520ed-20a7-4dd1-a6e9-6d4cf313f94b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "283e9170-32bc-44f8-9fa3-77ed23b83dab",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4bbacc6-9713-4560-8a7a-96ea7151d2ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1806eab9-4be2-415e-9c49-50485e34b2b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f341f5ee-e2fe-4026-a78b-833e5c360f9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea87a903-8fa1-4114-9c0a-de0fccc7357f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d6d68d2-7c28-4211-bf9f-3d47bedb7d98",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67e780cd-1880-4878-84de-cdbdcad8bfd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28d0521a-4144-4b9c-aa9e-65c899852bda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3165bf57-3bb2-4c50-b671-a31128ce52ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "08b776c9-fb26-45e7-bca6-02ddd7a69bbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af82e8ef-2c10-4bf3-aa11-d1d7f7ab27ef",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f346bee-2098-4af0-a888-d74d5199f200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9bbf35d-dfd4-410c-8d66-786356ed6b94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f7e90b1-9de6-4302-8502-4ecedce7ebb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5cb35f9-b493-4705-a2f6-5b41bc690799"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aeee429-088c-4f1a-a6e9-5a48477534da",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "679c7dd5-3955-42b8-8ef3-9435c20f991a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4f454d5-c18f-4fee-86d0-b0112d0f5110"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36aef98c-9bfe-4df7-a720-08d589bac9cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "17e5fcf3-49d6-434a-90a5-76a3597c988e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7124f05-2bc0-4505-aafc-b3befc5e6368",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc7b9482-3dca-4226-a7a7-8f0e794db453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1b7ce42-0c3c-49c0-b175-a16c4ffb93ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a117092d-a270-4ace-ba5f-66d75c7602b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "a70869d7-2a92-4033-8059-6485b3476279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b7743bc-be30-443e-8afe-5348c5587a2b",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9838710e-4823-49ce-a3cd-148288d0309c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c2325f63-bba0-4a3f-8c7e-c024e643af9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "039b9533-0676-4a2f-96f5-405032673ef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3b4b015f-c610-453e-9a28-622bb2d28037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39a02ec9-6251-40e0-8fc8-97364c8e777c",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57d72e69-5369-4bc8-8f5b-cb839c351b4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c244d6d-d5ca-4bb9-9eac-822ab38e2ddc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ac2796c-17c9-44c9-90a7-f7074c4d1c3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8e3da347-f8f4-4419-99ae-f9c281072abb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ff22c97-12fb-4f0d-ae37-e8f0ffd529a0",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "038aaf9f-db20-4da3-93da-377781d7bfbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abe8feba-8f43-4a4e-9eb7-b27882f91f0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14ae3e42-390a-490f-b4b3-18f770960a96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "85101474-64a9-4ce6-9504-d9509f8d3ba8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "968448a5-ae87-4845-b12c-de8106f1eae1",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7a9f1a0-69ce-4b65-935b-b76d18bccb59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fadab505-c2fb-46ab-9f2e-58da16d4800c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c722f021-73eb-4084-aaef-af7b49abee1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d3f0b702-bb9d-4f52-a61a-83fb277ed3d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b83ae95d-b181-4e29-8e62-758e386bd924",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c9f2143-8f16-4836-80ff-088d4efe7d6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe8a6171-35fd-4f77-ac78-8465fa227356"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4caa5f94-8437-4ef1-a031-1faa3ed255b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8480c204-3cf5-4ecd-b3b1-3c53b0a6d729"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0a2ae5f-ca52-461f-9a92-e416142198a9",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7813616a-46c5-47e7-8bb4-125920354097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29cbb7ca-19cf-4189-8903-cc5f8f084221"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fba262eb-1f6f-4140-a000-3e8132beb23c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a8e79b5f-cdfc-4d76-8fcf-a96ee7831f42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35596bb0-e45b-4169-b633-8fc42e4fdeb0",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5076f35-e8d8-4ccc-bfe0-7672be317828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e51f2bf-5c26-4dfc-902d-75a4ebeb31a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04402d34-5459-403d-8114-1048fe6c17bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "b1383ce1-c3dd-480a-8750-c763bd401cb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf523dfb-8490-4898-ad20-fac18fd2c900",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73592b67-f328-4831-aab3-121088210d60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f1bdc15-a9b8-4b4f-a6d9-231796b80d33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ce660b6-2dae-4839-9a79-527652d60703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "5388737e-b93d-473c-8762-25d9d785a0b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19a5ab68-b172-4e28-be3c-3d7127de27cf",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84ae3521-9ebb-44fa-a766-78dfb20d18b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e77214d4-65b6-4bf9-8e6c-9025895b5efe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8649e2c7-c618-4292-8a80-115916965450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "49fef27b-7d3c-441d-9b70-3b6a2c0a8734"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad87563b-2625-4b45-a2ef-932c6b183d7d",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f70a28d-22b9-4132-ac0e-0e3734b07e10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13ca93f2-6965-4d54-852f-66f389435f61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dad2961b-7f3e-467e-8494-9e393687e9ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "801b9b3b-a312-4f95-b3d4-ae3fdd99a09b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2819e80-9b0e-4a6d-9d7f-b385602a0805",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "783c12a1-4aed-42eb-89f6-4523b4f08db8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58a3149c-675c-4a12-ab62-04b460e5017f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b56e4006-36d4-4d28-9d26-b2c71c8d23c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4251929-1552-4f60-882f-f271c25b32cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa151c45-4ce6-4460-9b99-adaa0676821f",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fd4b1b5-8c4d-4fcf-93ab-c0a7dd64f432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "429b4933-4985-4035-938b-6b2d60f7ad13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "896f5434-ba1b-49b5-ac04-20ce51f8dfd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "05d57c54-bf0f-4763-9e5f-2556b20dfeb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "229cc11b-ad19-44b8-aa81-2f4c4a5c8aec",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a349ea33-1c75-43b4-8f01-7c3c11312361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6f30565-d6c1-459e-b1a2-e51102f4b0c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b8441e1-bbf7-4205-86cf-8261ff149e94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "63f5b570-7ef9-4898-9f50-2b8b23171ca9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed0c6ee4-842b-431f-9e9c-d50a13f7c220",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a617321a-09eb-4e9a-9659-1481fd2ddb46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1d06277-64c1-45c4-8304-ed6c2785a0fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2391b848-91c1-4dac-b7aa-7b814b7ddb1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8747912c-2e99-489c-b7a0-073d0b2489cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d064b132-c882-4742-9676-69950c427c1d",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12091706-2c4f-4b67-a088-d4404d39f65a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "253adfa3-4a9f-4e4b-a8f0-892725516b4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c7dc955-234a-42f6-ac72-6844a379cdba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fbd87223-821c-4427-8dfe-9e475c679df6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e0a16ca-dd9f-4283-807c-e12208a9b85e",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6957b24-6357-4aec-b54a-32f70eea0a76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5339e38-79eb-49fd-ab0f-8459d843ccd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "116372a8-79b0-4102-87e7-a42cd8eddb78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "14f0daa9-61c9-4250-bc18-a7a557d7a24d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1f86c83-959f-4962-8b8c-871d392da4b0",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08ab02fd-4d37-4bfb-83b8-fda63b0e6bf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddd851d0-91d5-49a5-a431-d54ccf8433de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61ace652-f3c0-4256-86d4-d11107ce1bfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ac82ae6-6509-45e3-bb16-bc5f0e77243b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b96f221-b234-4af9-87d8-08e51c609b1c",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c01fa61e-8544-4986-b3c1-f460d5645249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06edadcc-b722-4853-b3f3-84edb4bde8a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7709f513-1729-473c-8b11-e1537f47337d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "87e29efc-f449-49a5-af29-57ba456c7aa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b73d473-93b9-40cc-9196-1235fdcaddb2",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27e2ed05-0b20-412b-b784-6f8e464a4cdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49d769ac-0510-4074-b165-28d50a73f613"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6a52a29-11e8-4c96-a68d-22800650a95c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "447c94bc-e363-4f73-b671-0c939beea708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae5b7427-c124-4901-b0d9-33487f0d2475",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36972ef0-b5f1-4901-9fda-8641f95e46e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c148b0a-e387-47e5-af05-4cff9a91a368"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "912967c6-9f36-4deb-b61c-011d967c5c60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "478d5856-78f4-418c-89f1-610b754db449"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c4cf5be-0316-4456-ad16-fdc927a3eb02",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1b3c9a5-345d-4621-add0-fe3230cfcccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "064ebb4f-8203-400c-9590-2f26fa2a8600"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eebe7fdf-085f-43ce-b0c1-612691eea8db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "e0109e4c-3482-4ce8-b851-cb7bd6379d00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46bb646d-215a-435c-bbe9-d361e4e88a90",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7735262c-9a98-4669-8df7-44fbe59134bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "844fd600-a575-4f12-9693-1905f409e1bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f9d16d8-d3eb-47ba-acb0-c8190b849c87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a28d174-535d-453e-85ba-1ad6563d31e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8e98e0f-b06f-489e-b7eb-2bf4f21ac27d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc7c8f8f-773c-48a4-b32d-ef4bab6e4b5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "813ff6bc-3693-4492-a30a-9739518a9b91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e0f486b-955a-40c4-a24e-d2366f3830ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "faea9221-ff58-4ceb-a74a-455ba441bd58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "171408fd-d4d4-4987-86ef-efaa9a84dd9e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b3b20c1-9986-42e5-967e-b9f1f8f9bb7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ee15010-5b59-4203-b0ee-2a444ef627a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20e8fa5e-a3ec-4728-99ea-78cf3ac4cda8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d058de70-a91f-484e-ab0d-e32b89ba47d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4bdc524-1be8-4c9a-8368-5c69871b9a22",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89b06961-427b-4597-82d0-402cc4575f0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77c40294-0fc3-4dfb-8031-e5f5552faf5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daff70d8-3636-43d7-ae8a-3d4d50a5ee44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5a24b3e1-588b-4291-8668-78422fb0909b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ac2524f-404c-4420-b399-f3d6adfbd023",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d19e474-1f92-4c1f-9f05-6ee72a8b46d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af7ec86d-c46b-471a-a057-562c61919275"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae48a828-ef4f-4fab-9950-23b92fddd07c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "09354932-5644-470e-b02b-da27e236bca6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f24a8c8d-5994-449a-99e8-80db2e3f7de3",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01a6c893-99dd-4fc7-9126-fe6daacec23d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5946456-4e89-4aa9-90ba-56d8e20fe970"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3495bc9e-a14a-44ff-b83c-0b23dbd8ace7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "03eac0d5-3a8e-438d-971c-dc90a79cc374"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d36f84f0-684b-4706-840b-f6fda5cc18e2",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c87c180-7c66-4c07-8671-712892cd4e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca1e83d4-84c9-47d9-b80d-00e056d1b5b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "451d28a1-5593-4d3a-b7b3-fb94cbfe2459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9eed7f94-1df3-4d92-8d96-2248fcf8b9f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "832cfe7c-76e6-4c2b-84e3-422dc1a4c7d7",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc49d6a3-bfa5-497f-ba8a-c33a0a48120f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57c0c945-1773-4f66-828a-5a05b6a1729b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "069a4135-9a2a-4c24-96c8-8cf57f59bd13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "257a3580-eb8e-4f0d-9994-4bb64e6d5e68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "763c3245-1eeb-4a0c-bd5d-a7a69cacc71d",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfbb13d2-4118-4855-8d63-1e85d1bc6cc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4661b4f0-e4f3-4df1-a8eb-90f150b918ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1947feac-99ab-4c94-a743-658f8144228a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4763682-485b-459f-9a61-c1e6f0824dc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49e38a3f-27c6-472d-b8b6-0ffa500ea4f2",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d41f2ece-c707-4166-bbed-d35fda5f28ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "909bdf6d-9927-4ea2-90fa-6bb9c2668371"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fe6ee8a-3ec3-4e8a-82fd-13e8446ad2f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f0d71ae-c261-4f0d-bf59-0ec38f4754df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f6d8100-800a-4ce9-be5a-8f5d0030e387",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28d26264-084f-45aa-9619-a3e98775e7c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1eea5ff9-5058-4b97-b327-b21a539f705e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9d80796-e2f9-4f2c-80cf-777efa30ed78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3a670ca7-3671-45ea-85bb-6ec45ec763ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9551b22-a8d1-4dc9-9b09-5889f12f6fb7",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4a08704-b9c7-4245-9952-48bf4a418a86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dced987-d3c6-45ea-a71f-92f2916017a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2733b519-2f36-4cf5-a3b8-f8284c88f876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "00ac35dc-818b-4f65-a2c2-32de74ecc76c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14d3e3d9-149a-4919-9c09-e49fbbceb3ba",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0791cdd4-b3b9-42d4-a2fc-33fd895df040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e51f40f6-08d6-4de8-a7d4-621b4f948a9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4b3c681-c5be-4e5d-a6e2-53bf63658c96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b413b3ab-cd3b-4954-b496-f5bc6c410625"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69166389-2317-48c1-b0aa-c338f3829478",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0ee488e-b83e-4012-9e20-810e75732c62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6695b16d-a4de-4594-8dd9-32f247a61c37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "307b113e-b9bc-44da-88c3-6f7c0469c78d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "53f46683-80c3-454f-8649-ba403dca3fe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "362c77ca-3975-43ba-b876-ba38c5d697ec",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5654201-8f0a-4ef1-a7c6-1e994d37e06a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3345b12a-8253-4bac-8524-c868a90eb37f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59b513dd-bfe7-47d1-8058-1d3bafc0196f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "211a7915-a3f6-4ab4-a9e3-7916c337b990"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a0a29d6-32d4-4911-bb4b-b18b5eb5c807",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccd32074-6f1a-462f-bf83-23e9e726e6a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61434ed4-1a80-4e47-b2ae-41835263d80f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42b57841-befc-4f2e-a7ee-a2870ada8bfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "edb11ebc-049f-4420-9d3c-d2206cf75207"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56d3c2a9-59bf-4a5f-9ab8-4322a6760360",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0915b1ae-8d50-43c0-8b31-18e4168fd889",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e177df9e-0dda-40e6-8706-56e4a3386d31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "621b0802-cb6d-4908-ba71-bb0db0b61571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c141bde6-5148-4fa3-a516-40be4eada94a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bd198c2-7995-4912-84a1-9e99e1b5ea40",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7726efd0-6a37-4d92-bd15-84c168fe82a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00a02b18-3710-49bf-b7af-40196e0814d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd9ea2fe-8437-4264-86a2-c6e1c1a01ffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d01a1e3b-b324-42ca-9962-ca5e61fbd726"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc8e1f3b-ec6d-453d-abe1-8671d726c451",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dab3dd41-b044-481c-93d2-a39cdb7c76e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1915e35-3277-4672-9fe6-f905285fd81c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66bc8523-49c7-4964-8867-79fdfe4b6a83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "98668961-3b71-4df9-8275-0b9293ce6d35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aaa10cb-44ce-41a2-ae1e-c25bb37d4b82",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6ed9e77-ec90-4f08-a25c-797c0b8cd1b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0b70b3f-daf8-48db-89f3-502c37b03ae4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3c56268-a0a2-4a60-9558-e3c4cd1eb2f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a542e120-36db-4abf-a17c-676353f17553"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8e05214-7bfb-45d3-aa97-5c862eeb3bfc",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e24dd04a-5e60-4a3b-a21f-d5911e2bedbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2fd8374-d64b-4639-a88f-a7bd29f84b04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14181390-6060-430b-af8c-c8242bc4de69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3a3bdbd-7ded-4bec-a64c-d5f85b4380c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6379e421-0297-4d25-b709-62e6cca2781c",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcba97b6-d061-4674-adcf-91cee4f2ae7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f6428de-1943-411a-8f92-d51ea9262ea7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd7b1ac1-4450-4807-a969-c657b2285021",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c04e8b9-971c-4965-898e-625696cfa882"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eec7bf9-9f17-4100-8a50-22a0c3d6b007",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a28da728-180e-41fb-9727-23d8b6958e98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e59f6f8b-9b12-463b-bcf5-e5d4a9c5a57b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8292fc63-6ce1-4738-9733-e188000b40e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6153e525-af1c-4649-922d-64e36c5b2992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78cd16b9-313f-4986-ba55-cb47cc684eac",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "741293b4-fa25-41ce-b36c-6d56a5557217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02f8e45b-f2dd-4006-a9bc-76629ac5cfcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1248ce04-84a3-47c4-ba2a-fa4c5d1c7ae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8d063b8f-3c57-4e38-a6a5-4c7b6945c2eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddcb7804-51ec-41e8-90d8-eb558e6489d7",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7af88386-8010-4961-9e40-9be841bf3d8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dca6ca08-0ea3-4e69-b278-27d7400f7b55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecd1f5af-061c-4763-8a0d-423d1ef55629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6023a61-8cba-48a7-acec-0fd52417515d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f075a17c-1d93-496f-bc60-ef5749727735",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "433e3c5f-5d15-4322-a930-60b8a373299a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5f1c028-6dce-4c56-a226-4d204add1f58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e505d2b-c8fe-4e79-b8d7-f9373c0345c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3493654c-4f81-4a63-953a-76c76905febf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "474f5a66-c254-4d9b-b8bd-78237338298c",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84ae7a03-36b7-47d2-928d-d866d95c8945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ff48a7e-dba7-42c9-af17-8428c98d863c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "253b8381-79a2-498b-88f4-f9911dcc8a4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "60f311d4-8c5c-4365-8915-74b3624066e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1bfc52e-eca0-4980-99e0-e8ee6a60d4df",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c210bba5-f1ee-489e-8318-820d212c4afb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b529de4-a5ab-4c42-8d35-8c47e3f0eb6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d233ede-3ff0-43c5-9c4d-2ed50ef880f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9cb03932-c2e3-47bd-912b-fb6aecac7082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44d1b69a-0eed-4aa4-86c4-af4d42981abc",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82153acc-5524-4245-8206-88f8354e71fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96471184-477f-4682-9855-60b03dfef414"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f4b896b-6844-4c53-aa5f-b1ff06def36e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "140d0f3a-89e3-49dd-a66b-2c16eaa3e39b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fc05ea0-e0da-44e9-a768-f1c811f0ebdb",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1c055fc-47f8-474e-8479-b4790d55a19d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dfc1ee3-1033-4262-bc90-a0a84a32ae81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "128acaf7-1163-41cf-907e-d0ffe11ff85b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "20bab9d4-6301-4a35-9316-c0259231813b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9113a3a-6934-4918-bbbc-3d3efd8a1d5a",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2e8f90f-38e5-42b3-96d7-54426edb5908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f004e0b-dfe9-471e-a975-07219f3158b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c31f76d-584b-4c42-bda2-f8843af63127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "95a7ced0-162e-4d3d-ad8a-ffd6afcbed4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b5fd9ac-d0cb-48a6-afdc-a0983143b09e",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a34812ee-2831-459e-bee2-08ed73e4edb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3463aec5-090e-406d-b179-2a027f8adef1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3849f1b-d46c-40d1-8ace-8c85b97c88da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4f501668-dae7-471a-af9e-bf27733dbe74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7207f58a-74d9-420e-ba15-0d8fc388355b",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04a686e6-d4a8-433c-9261-83c3aa6a19bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "161cd97f-3242-45f8-ab36-556b93a016c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41531868-79d8-40cd-be38-1aaffc527567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "378226d4-565e-4503-b0d1-8c347c5fed42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "138f4362-0e57-449c-b11d-d496de78926d",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc584531-97e4-40d5-998f-12d7b2832f5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0c23f22-92f1-46c7-bf0f-b9628c7a98d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66b37018-a0ba-4a0d-8824-1384373a1e7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3e681c29-b05e-4304-a32e-97ee0e8683b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6128495c-75da-48ec-b394-32f0f61b5b83",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "292cbe69-244d-4abf-8d8c-0532052600f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bddcb94-9b48-4509-8d01-60b4f86a8a38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3fbf0e1-f222-45c5-8be9-ee95156e7adc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "9b6c9fff-a3c2-44db-b3ad-d126ccafb326"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acc6278c-862d-44e5-a4ce-f5a94aa57e0f",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee01cb5d-cc3a-4032-90a5-7eaa1b8069d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "a3bc3a53-a667-4d40-bc98-e39d341c205f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a5dc06f-1785-4209-9c16-4818000623cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "e0f717ed-062a-43e9-85f4-aef1593b633b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a399555f-b6e5-42a7-906e-bceece6b4820",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "39859372-4b42-410d-8bdb-57e77e53ba8d",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca2016ea-5e85-4f0e-a670-b09ea5462caf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3207c8c9-f685-438d-9578-771b58021357"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b0b0a67-2e00-4801-a64b-2dc81f61d001",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "f16823cd-2579-4aee-8272-980c526ed5a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a4de562-f789-45c0-9ee5-383d83f8cc1c",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3775352-86c8-4300-8279-019c24745817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a756cd2b-545d-4a30-8e4e-60237009d0ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "800b68d8-0706-42b5-933a-8d04c70386c3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "90790e15-738a-4e82-ae74-024d0ea99adf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0a32c80d-aadf-4596-a4d2-f872987641ac",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d4ad7b2f-2244-4973-82f8-aea9830b7a7a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "207f45db-4f79-4a85-8808-e9cbc2664f3f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "498c9cd8-493b-439f-9272-4647d64a950d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f23d08ff-37f4-452f-9c1c-e8c9ce2d4377",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "01dfa31e-508f-466b-bc23-efd70e223caa"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8adf31a4-3bde-41c9-9c4d-cf510ac2ad6a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c4f16a3a-f432-4c7a-a56b-77399bec39dd"
                }
              }
            ]
          },
          {
            "id": "aa813a5b-9f6d-499b-8f71-6b129f6ada50",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bf70b27d-9cab-4fb9-925c-4397c0334f26",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "add5422b-0481-42a2-b589-0070c9128a51",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json();",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d590c5e2-c59f-4586-910d-3e5ef9436897"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6575c2bf-06a5-4d65-9a8d-f58ebcd67972",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "86790b16-621f-42ef-8f26-1381b510c8b9"
                    }
                  }
                ]
              },
              {
                "id": "894f7d0b-ab32-410f-8893-40b4deb62998",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1f88c325-eaae-4cfa-a8c6-b011d0e91bea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3d7352a5-2dca-4424-a392-cec2bd60be80"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f22f0bed-6f55-4fff-82a3-21f889495301",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "29d53778-f6ab-4c2f-b28f-7b265f8ddc8f"
                    }
                  }
                ]
              },
              {
                "id": "3a164cf3-c3ce-415b-a8f6-0199fb245c1d",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8f721dbe-f754-40dd-9b80-67f79f951805",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a1b655d3-5c67-4ebe-9a5a-f9e9438df14b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "81ef2c2c-75ce-4100-a487-460051fd6621",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d24ed85e-4b57-44d1-bcd6-9c7baac331cc"
                    }
                  }
                ]
              },
              {
                "id": "0d99153b-ac9f-48e5-b8b0-55e57ce34237",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aff98113-2e99-4af3-894c-e1358785d787",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9fda05bd-fc37-482f-ab76-0427bc9345dd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ad7acf39-a380-4e54-abe9-e5f28c4bf3a7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "f06fff77-bf84-4b94-aef5-ae438ed094d5"
                    }
                  }
                ]
              },
              {
                "id": "d2cb6ed8-51f1-4c5b-bd5c-ece11f7d4405",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "912f0b9c-6af3-4e58-aa2d-c3502197e2fa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1d630204-9a55-4b18-88a3-2996b033f850"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "46f01330-13fb-490b-ac54-8fe676c1381c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "9bea3918-eccb-41e2-96d9-b4dac44d14f8"
                    }
                  }
                ]
              },
              {
                "id": "631b88cc-86be-4d67-ae6f-b26ef895dae2",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e83fe60-9e1c-486d-a9bd-39d7b65399df",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e131cbd0-00e3-4f78-acc7-fe723453186b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dd024bfa-fd6d-4267-846a-1ff96a3ac650",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c231ef39-d5fa-4dd3-93e6-63b6035d8c67"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3489224f-8137-4533-bf1f-2a5f530267e6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b07158c4-2136-45e5-9699-a231c9366f8b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "29717d77-4cc8-4a9d-b1a2-a2eb9e19bd19",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7df02658-8d9c-4bfa-83fc-09ee3a7e18d8"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2d268d7c-4641-48d9-8fa0-fff170422ae4",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "549a8825-7c0d-43c5-a5de-60e53f81b8bf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ab130ddb-04c4-400a-8242-05fc8043fd05",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cc60f9e6-b59d-4bbf-8070-878d96c937b4"
            }
          }
        ]
      },
      {
        "id": "d6a49800-58ef-4c9c-aa74-01cf450bae4b",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "8925cda4-f4c3-440e-a590-72fdd6a6c256",
            "name": "Negative Testing",
            "item": [
              {
                "id": "47269ff8-c070-4bc4-bd32-08a7dc4f0be0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5e5729aa-f4b0-463a-ada1-cc331af83811",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc401468-b545-4b50-b724-8b1182b23a7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf349640-02da-4d61-875d-29e257dc495a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dbf6361-f74d-48bf-9802-bb88e8d927fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "488ce98a-f905-466a-b3d6-787f5a70b418"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e402768d-a804-4ce5-bea2-4335e4dc6044",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e9e7da6-2675-4186-b820-7c997e680e16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b74affd4-8919-4fb1-bf94-605de26e3076"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a9a05a6-dc65-4d71-84d0-aec4d2528187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d4b6239-fa4e-4422-b2cd-0c05bfa19a9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c244fa2-6bca-4721-a90f-da3bce55e4d6",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91eb6093-00d7-4291-a710-b2714ab27443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc37b64b-c83c-4f4c-a42e-e0a12c5863d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a472b289-334e-46f2-99da-c9d78066a567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f955c951-a450-4d75-aa18-9d45ed4663f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e88da6c-9780-4fa1-a17c-6600a77b0287",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "464c48e6-d858-4532-9131-db5c8cf808e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9df0e39-aa4a-4689-bf1b-06eaaa74cfc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fb7d06a-47bc-4f40-b247-645183129b35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3974a33d-4bad-475b-8d9e-593a8de23e33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "013f589d-455e-44ed-8501-e4ddc5f363af",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85871af4-e70d-498d-91a2-4b041f229652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39fd2ee0-0544-4b79-ae47-d5fc95e3c9d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd8cea10-62a2-4f58-a7ec-423363fe0584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fee8de1f-15df-46c7-9e13-44b6b8d2ec8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4219babf-8501-4c6c-873a-04e3d9e20055",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac2780e0-15e1-4d3d-9882-9081a80c7029",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "899a21e6-391d-43a2-ad7f-9758d9c00efe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6406571-80a6-4c9c-9ea2-0b954b2a3c55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "84943ca0-3a0f-44af-9b6c-523afc9df2b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fb622ef-38df-4d1f-894f-749d0c5f6e57",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5411998-a417-4f18-b0c3-90bc796629f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "758abd95-84a5-4a1b-bd4f-701b000e1e60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d39cc0a6-5ecf-4656-85f2-ab1e5e512a56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "3cdfb49e-fa41-4992-a980-1e7e4ac7aa76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "863961c6-5218-4cce-9e6c-b631144070ef",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b3d7215-1f92-4a86-8a7d-7b0815f984af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c21ed738-6319-4bc9-bef6-9a33da8a19c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "627adfee-7e36-479a-8f71-4d15c0377f9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a8045a7-9f6a-4d61-9a9b-ba6d4d33748b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd6804af-f6ca-42c3-82a3-597403be4bf4",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d51d04b1-e456-4987-9bf5-4250924f44d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e82eae2c-3567-4009-a3c5-8ab57a06b69f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45a54c29-062f-4ead-940b-12526e19cd30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7d80e2b-3d60-4991-83fc-9af7f0c695bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fb035ae-39ba-411e-b986-20387c064a29",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a31e70f-e11c-494d-8ac9-e59f9ae0426b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c1fca51-d0df-41a1-b0d8-03759f9861ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97494d37-23f1-4e59-98a3-ce0ca1e540b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "19d5e915-9390-46f0-b1ce-6ae2e9298777"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c7d3bb1-81cd-43f0-8357-6b6dc921f3af",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "170b1124-33de-4523-8d8a-a372fe05932f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdab140e-3568-4d44-8b74-0058fc9367a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af09362d-f989-4765-8f1e-b6bd759c9b03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "98624404-6f25-4339-985d-455b1d74faaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4c7c1c7-9b9a-4652-819b-b2eddb573b18",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0296094f-7b67-4043-85e6-6085cd4910f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3c9d28f-f5e2-47e7-a6f0-982bda53f78f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a1e471e-dcba-4046-bda1-e23639b4afdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e5177008-b46c-422c-9a21-b504bd750c4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08c2582b-79e5-4dc6-aad0-d231b41d6b9a",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83fccbd2-aec6-4964-a6ef-3e76c5c846c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67c5d34d-2ce9-4913-95b8-ec39a9fc04de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "200ddd7c-1851-40b7-9f06-a38da27d0f0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3c0b140-9520-4be7-bd62-438fb9bddead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88acb470-23c9-439f-b8df-bc08081ac656",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6503fbd5-c2a9-4a00-93d4-30ba2f560dfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05fefd38-53da-453f-9697-51fd5122e74c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5590d4f-2b55-4222-8797-6427eeb4b138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7085617-81f7-4ea3-8e61-b8b2eb865b48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0491ee78-a6e9-456a-8c09-f82f914feece",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e72b156-705d-42d5-a2a6-7846a8a1b07e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc8082ce-04d3-4b7b-83d5-6ea137f296a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45389800-6248-4622-a249-ab1d3432e168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "550100ab-cbd3-42e3-b7eb-c218734eba1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c82151ad-e187-4c46-a688-eeaf9049eb7d",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2c244fb-8ad8-4515-ab46-a5e605a38b44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3311db7b-0779-4158-9332-aaf536d9015f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "247d2d6d-503f-44bc-b441-a25f3334908f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "82f0720a-b008-4b15-86e8-c574afc681ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b54a435-612c-486e-9280-62a2def4a781",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1695695-68d8-4340-b6c4-a820918a372c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdd88d6c-a4af-4e57-8412-c053c5372908"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a987703b-047f-40fe-8c31-a39fa1597232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7d99ff8-65d4-467d-a4d3-43398cb4f101"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00504f31-28fb-4b39-b81e-a0d7e77b85e3",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19c6c0eb-f3a8-4074-8918-6b4afc45a2f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09720e33-0752-4ff6-ac8d-d5d63e08f474"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e7f6764-2b88-4d14-ab39-af8ba2669bde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5c5987d-8d1d-4d3c-affc-33a74450128e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51d9627f-38b0-4142-99b9-450e6b5fe1b4",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ddd842e-2620-4ddf-a284-69dc57bf646d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae95b4c6-864d-4ac5-be9c-5233dcb5b53b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee9e0ec0-c987-4f93-b80e-07fe3aab182a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "162c6fb7-cc06-4916-8843-b1b07112282d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "032e94ec-0754-46fa-be9d-d8c44713c4b7",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b5c29cc-f396-4480-8a6f-71c5da39f34c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "400f691e-8686-42b4-aeeb-03da9d7b6df6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3914010c-aa7c-4313-a9ac-df0a0a2af43a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d558fe6-8b59-438e-b1b8-ee4c6d0f66de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e55d1be6-f54c-4dcb-b57f-61132a2d1fcb",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f58e46c0-ad03-4e55-8600-e1d58620645d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f540baf-5bd6-487c-8812-54397dab83ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3dc79ce-ca7d-4828-90a2-a25c2d37b072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b8399c8-f5d9-4027-9c80-31ad678d6b87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40845ec5-6868-4df8-a62e-e43cc9f41eb2",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd166e1f-90c0-440c-b70d-8b4909517c8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd3f85e1-883e-4cce-bab4-5f8e77e6a27a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9821ee03-de3e-4459-8950-94593d977bdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb490ecc-9490-433e-891d-01c187bcc675"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98e72c78-bce2-443e-8edc-e9302ed42cb3",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1293129-8cae-4144-8c6b-9a503dfa4911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc06637d-ea9c-48a1-9cc7-7da39accb11a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "732598b9-809c-4216-a700-1c1034d1275c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac0c9f4c-139d-4b89-b534-06d7eff66e19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db218588-74e8-4355-b14f-efc36c2e9c8f",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dabbdd7e-bbbf-4bc8-b148-74cb8499364f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88a245df-afa7-41f8-9c09-4fa0a16f071e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53a84aa3-70dd-4290-8aac-ad078ec1d757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "802a3ade-4621-4a05-9002-730c8fd34ab3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abb8501c-d837-424d-b1ef-200cc548c9ee",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d58843d-0c9b-4c3e-b374-d03552f0d33f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed864204-37f9-42ef-8ac8-484b9a29051c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d86c2511-b4e6-4c94-8970-0f4dc26a8fae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "58d015f3-1b48-4f90-b5e1-360c9049a2f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1572568-8baa-4f28-9e68-8c1060e36ce5",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c74ac613-c4ad-443e-9803-354d7dbf6b52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04159582-9ffe-4b0d-9cd7-39b4924b4970"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c147e67-d00e-4d14-baaf-8d1cadc6cfaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f3cdddf-ee69-430e-9912-4104c81b8964"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed0f0303-6bc4-4d95-9b60-d979f318ac70",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7be04e92-6004-42ac-914e-b45ba4e5b0d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dc6a1f9-32e8-4132-929b-d24b4ce2c479"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3e67ca7-afe1-407b-b125-c4250be83b56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "133f10da-036b-4fc7-b7c9-1fb673ef7ff5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8ae3167-5ac7-4ffc-84f8-af5dc6f995e6",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0352301d-7b26-4d71-83de-9fd342a1b653",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d295133e-410e-497c-8598-d56db1cc7ac0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "def17fb3-e9d5-4e2a-8071-dc801c960d4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "193a40f0-8759-40c5-9490-2d9ac79dad36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcfa19a9-b364-49ad-b816-5f4ece7b9654",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24c711f5-054a-4837-a3ec-ded9e71b29c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83c1ce05-db84-4d89-9774-955bf865f450"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "275a2d5a-0528-4a11-b6f6-a64e75efdf75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6cc5fb76-5ee6-4416-b4f8-f4216b3ffd0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dddcfac8-9d4b-4f2b-9066-856bcf27b74f",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35b36f1c-26ba-486b-b1e5-9aaf60b66f89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60e5cf23-86cb-41d8-8127-1998ad7d49ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae1f8165-525c-4f19-bd55-afd0d6bc0d74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "711a2629-fdd3-472f-b7dd-380b6609af66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81882b07-71ba-4f53-985c-20702ed7cd89",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c374c405-f98a-4425-a15d-c98c3c1fe23a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b99828f-122a-4485-870e-c1673f8cfeaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7659385-1f89-4231-aa78-5e56f330644e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f72b3177-7bdd-46ed-b184-bf74251fa9ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "531e4d63-8e77-4a1d-bb4b-fa3adc374bb7",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "172bdf32-deac-4334-9a25-5932f3a9814b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44bd89a4-e8fc-48c7-9602-55ec5ace704f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07959119-de9b-4926-a48a-e1d19dc9b5c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "77029e2a-94c9-4a40-96ec-18efad001ed5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2d72ad68-74ac-4e88-a472-0a52ffe782ce",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "eb0f56e7-e64e-481a-9fec-7fb79a6a9c6e",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78f08b3b-f774-42cb-82dc-a03405286f9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06d97a52-efe2-4637-8ce1-94879d67b2c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be2a1874-7e04-4e70-9fb5-71b4e22b11c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cf81a6a9-287a-4e29-9a86-4faa9e96b4c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "493ccd7d-1eb3-4ebc-9a83-7e5340d67a3c",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ae74255-ec07-42e6-9957-387ab566fb0f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "97734455-13ff-416b-a2cd-2a254359d5f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a08b8c17-d6f0-45df-95b7-1bff5b3386c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4d207ca6-5ca9-4d26-98e9-eea0e44ec45f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1294dc1a-f2b3-4d82-8219-509b1ccb5c27",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c50d9b16-6f55-4bef-a9b0-158136cfdfa6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3b2e8e99-deca-4b8a-a98d-9633f3e35d2f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a5311404-49fe-43d5-b624-734c6bf0fffd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ddb1fb66-8e2d-4ded-aa81-38ec280165f5",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ac50c9a9-746f-4ddb-915f-db6ba513390c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a39eb54f-686d-408a-9532-c9a305bc50fc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cf7fc405-e9b5-4162-943b-59db36d1caa3"
            }
          }
        ]
      },
      {
        "id": "d96de452-a0ba-4a97-85f6-9c0f4cb5bcd6",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "24f2515b-7c81-473b-81b0-aae578837a50",
            "name": "Negative Testing",
            "item": [
              {
                "id": "492f7ad8-79d2-47c8-a003-19ec567a0fa5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e0b1ba19-473d-4d34-b664-949791d73da7",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b140b9ed-43b5-49c4-b163-66aa5eaf9e14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abf5b59e-d187-4c2d-8c36-b9e717f94078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad2da6f3-f2e7-464f-ae35-5c6136e283f1",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f8f0eb1-c975-47e1-8950-d453a0d90899",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33499701-759d-4241-9ee2-c83e7b7b9c8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d27ebb6b-21d2-4572-bbc5-04927a9f8f5b",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f2e9731-f568-45cb-a1a2-b6c29049b227",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43a86867-30d1-400f-b448-d595983fcd56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86affd14-5507-4162-9eac-757e3739cae7",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddae9d22-0958-41cd-8ea7-45cc6a7c6550",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c53cacfa-8949-435f-b4ce-3fd0301abad9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17252345-8efe-4853-bd99-000b343c988b",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11ca3f4d-39a8-419a-bcde-136710e3a0f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14d0959f-ec5c-477f-8bbf-8fa714498f08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "732226a7-9b3a-4af5-ab1a-3f0981f49a94",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c05905ba-d857-4ea2-8a5c-31400222b5b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0c83182-20f2-4c97-9f3e-f5dc2d0f8aff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a336a448-7d77-4476-8364-e2646171e414",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f3c1f24-5c37-4051-a476-6f9faec08e6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edd84839-76da-4f98-ab47-4b16efefa810"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10ff3c25-b465-495f-bc25-aabb6643a4a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "083809c8-6870-4527-996f-d9955cd1d277"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06c5668c-4463-4ebb-82e2-2a6835a268e6",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e577ffc-3df0-4975-a9a0-7955fe9a02f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "687e3a57-db96-4c30-93f9-e7389ef6a3ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fff0967-5347-4f90-881d-a7bc88272143",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cba19c65-855e-4137-8d55-383a2a0675dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "149a7fd8-07e0-4a82-a023-27718fc5cd4d",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90aa9779-90da-46c1-9e2d-5c652955c02e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac80fb28-c6f5-4e20-90b8-3c3c94e56139"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "102b011d-393e-4e6c-b7c8-7f81a72eeaa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35c68d57-3056-4d78-a802-4bb4fabcb4c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42e643a1-0a2e-4408-ba47-b55ca0e720e0",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5844b01b-6558-448f-860d-652d78fd4dec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c37fff5-d569-4630-812f-a0160b15cfd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "361b3fb2-a1a3-4813-91b8-5f8acacf9917",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f339edd9-8a41-4b10-9173-34efa7fda5e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cadc1bc2-44ad-4fb2-b12d-6495056e98ac",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2b20d5e-879f-4d8d-a2e6-3a56e5f5ab92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51bafd5c-6666-4bd1-b609-d20fb1591d6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d1066f4-9de8-4279-9d28-a94657b99ea9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6366b277-e64a-42fe-b4b5-d791644fb322"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77205795-deda-4180-84c7-9c5267a4737a",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b10059da-4e7a-425f-932b-28381757ed17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88f432a7-1c02-4ced-a8dd-0e1fec6fe1ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7c36e69-85c2-4f26-97e3-d4151ad96fca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f404cb4c-8f7e-4293-a7c2-f273430bc4b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ac76414-ca88-4767-97bf-58ecb5d55b6d",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15802564-b3b2-42cb-8d1c-777ed0bd868b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45ef9044-efae-4787-840e-4c089d9a872b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d48eb15-13a7-419a-982e-a46cfe2b7d8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00afb3a2-cc20-4ebf-b9ac-5b55dfe83774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ca2058b-45a8-44cc-8ed4-9ee2e579baa4",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28e0568d-55da-4f44-afe0-1c0e0bb2ed66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b471f88-c7f4-4382-8812-61602490297f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa4b72ed-7f4e-4af8-8d74-9a73736a2099",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d13a3106-85aa-473e-8218-f6a2d3f3a142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b41597eb-2c80-4a58-a325-311c3c7f3bdd",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b151f398-4743-4dea-82d4-cca796f7680a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "150f9738-27e6-4de7-b629-5c48582ab103"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bedacff-8b91-4b73-b39d-20a539fb74a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6555ff2-9656-44a0-b886-efe203bf5d4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4ca8238-dbc1-42d2-a85d-7babacf68ba5",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30738c76-3ece-42b0-b5e1-6ebc2bba8093",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "276ca97c-e1a2-4c30-859e-cedfff14d9b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "350b413e-bb72-4eb1-91c1-5aae4173b844",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fab76a6-2b72-4c84-9415-30b8c5c04661"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f96d4684-b2f0-4dbc-ba5d-7a5bb6b47ed4",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1e617d3-2425-42a7-8903-1ed82554470b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0c1e106-d4c4-445f-9765-0e6a145a44b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50f6c9ee-88db-4c70-9794-19f124d10444",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf79ecfb-f6f9-4deb-bf97-1cfac504c0d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e896387-e748-4e40-9ea2-d4e3d9305bbe",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dff0c25-921b-40e8-8849-e79de390e508",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "632f22e3-e794-4713-9e76-634c567275ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa6ed455-9ddd-4df3-a065-39ac604bc860",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99c88be2-b16e-49eb-a9e6-c39455e47758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "456e4634-b983-485e-84c4-ada3acb2c2a2",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9136247f-cdae-4ace-86ab-7134bed1e6f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3863870-5938-4dd2-a7c7-9350efa05bed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23edbde0-4e91-4c20-b655-6357876a28a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73660c46-f789-4f2c-b3ec-5cdb0af58c31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c3a899a-52de-4ed0-b4ce-419fa30d2925",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ad1b69c-4e37-4a11-a12d-e5a1a31de12c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c49fc10d-9dfd-4b45-a765-6ab16e4a3864"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c82b661-8265-43d4-a6ef-932648023cbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d7eef12-5448-44da-a90c-0e9cfea69728"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2296715-9b20-4715-bf28-a8110e52d987",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46aba8c0-b2be-45a9-9037-b0047dac2946",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab2525d4-2da6-4228-be9f-c8cbcb9dc8d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4815bec-2cd6-4582-83f7-654bc0a91d9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95b2c522-1b9a-4869-9a62-dba83352d869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "163773ca-a713-4d97-80ae-7fe4c8ebbc28",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "783d7160-81f1-4a2e-b5a2-6908bca656e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9eca0cc8-bf65-4df8-8452-a066d5700c35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bec4d580-0b2a-40c8-9cd3-a782eb3c26d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c6ee954-7fac-4a1b-b285-4dd26cc6d0d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec38b67e-c534-49af-9e89-88ab8698d736",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3436db40-cf84-4fd1-8883-e6126dcc9202",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77a7e79a-f1c0-4cca-8d36-f97e94ec74d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f0a51e8-a70f-4062-b448-7e3e999b6358",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48a29ec0-4fac-42ca-99b8-4c3241d0ff91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1c40e6d-4c31-4343-bbdf-8ab3a2f3446b",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00ee239a-60fd-4061-9b26-11be87aed93d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b2c45f2-3f40-4b4e-82d7-2e40ad7e5c8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6de48839-3325-4ca5-8edb-8b3f78696225",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63934ba3-83c5-4375-89b1-0767ff3318de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ea44024-255e-405d-b927-f63c986f4214",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b56687dd-8cad-4f74-b0a4-4b2044861179",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d91a5b1-9118-4c4c-b95c-db496cd3744a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35893678-1cff-424e-8952-6fbd04b094be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7021d8c8-2d4d-40cb-94c0-c9839469c5ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8489754e-4887-4e86-bdc9-9830f3cbf5af",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79a66120-c09e-4921-b65d-f3c260a70325",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41cbf21f-bf31-48be-a6a7-6d0536f4aab6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be1c373e-9abd-4593-a2c8-0e1a0d8a9957",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41de8786-2ad5-41b1-b0be-7a17ecfe1804"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d4265a2-c71d-4dd2-b624-192068253e84",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cf56e84-f92e-405d-a234-bcc23375183d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b6940f5-9bec-47ac-964f-273c6988aa28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de294130-b8f9-47c2-b960-6426d547f99f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90911d1f-6a0b-4cb8-ade5-010af3de1233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70096ac5-de3f-4e03-9c87-b4d1517d4414",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a136fd32-7532-4416-bcb6-bc90d5cc9a23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fc6d9c7-9ba8-4e57-b33c-aa72a1d6bf99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4280eba5-ac61-496f-9f0b-6772dcd6dcef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38b4d443-e341-4418-baf2-034e1ea54911"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0361c18f-b91f-453c-9189-7949c6a69cd1",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab21020e-1ac6-4274-b556-2dbfeee02897",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c85704b-9e94-4907-8e2b-907b47a4d4fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31e9b944-54a0-4cfb-a46a-5392eb9d3fa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8884cbdf-2126-419f-b5de-0308ef25bfb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41f4d650-b9e9-4313-814d-819bf52d88ff",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af247586-33f2-454b-93cf-7c2123b31194",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "950b22a0-9d25-409c-9994-57386798e5c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80ff4d21-9634-4772-9df3-06ef7555cf66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ac14c4c-6abb-4733-9dd5-0e26707ea0b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3779974e-b451-48ba-b6f7-12457816ad2a",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80abc801-087c-4b23-9dfe-43647f6526dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b721ee4e-708f-4d29-9c4d-dcf47274d3ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be8b1832-84fc-4c8c-8ba5-33e8acc36de7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e75d4dbe-777e-43ff-8537-c57c15c2566f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4d7713b-7fbc-49b0-bea3-d13b1badbc62",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "574783e1-a2ce-422e-b0bc-86582a1aadd3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f40c052-a3d7-41a3-a8f3-31f99cebd799"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e1cac24-b54d-4ad7-afa1-3b76336d4d59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "910f946d-9661-4fa6-b212-1954fdfc4bc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70c6e8dd-14af-4cc3-8679-07ab0cbfcf36",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef7b50cb-8b65-4353-b9c3-22cedfc99833",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d3b5c5f-f596-4278-bae6-9891934c9acb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa9532c3-105b-4a2e-b323-c3f4aa3c5979",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc81c6cd-48e9-4392-b7b4-f26502a6eba8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e458416-7eb6-48ba-aef3-c37f9f186be7",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd67b715-63eb-4ee9-b77d-bca67d3e73a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7533d41c-f754-42dc-9870-6330cdaa5608"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43b8aee4-d3ae-4041-8413-663c99855abb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a555234-1c8b-4c85-98cc-910af0bb18b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c35d4a3b-a367-4772-ad43-7725aa1521fd",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c00ca5b3-2667-4019-8502-3b74b5ab1e63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "719e6fc4-6820-450a-9e39-e2cc1fea11c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f718188b-1266-4364-9032-8a81d70e1e44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "573e6579-d1c6-4514-9d37-4bc8b884a438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fbc23d4-75a8-45c2-a670-9c31cdf892b4",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c94af4a-5242-4e6e-9f83-72fb944f6731",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac4ecf21-9774-4e3b-8042-1f5704d75075"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8da373ba-d176-4f49-a760-13525789bb84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c47cd715-ba70-4ede-b7f1-1357ddedce10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29ae39bc-f177-4744-a119-0b9c48b23c0e",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "617cfdec-c849-4ecb-8f79-9114fa27c5e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59aa8aac-5d5a-4a25-9602-dd4f542d46f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15f2bb12-b517-4990-805b-71298e642912",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22199322-a1ae-4a53-b012-2944a62a49eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91637a44-f3e4-4592-9c70-98fc68f23d18",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ca88d5f-e2a7-4c5d-b8e1-d06b15bf5f5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddcd2e6f-5b33-4101-968c-9f126a1d63ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbee6b7d-52d4-43d9-97c6-5e6105c276a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38d6a35e-d4ad-4fc1-8357-4f6b3bdd2043"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1aacd75-6798-431f-ba3b-e3253732862a",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16233430-762b-4dd2-9742-efb24aa46b14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "182d43ac-214a-4e50-8933-a1a2fd1a828b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90b2e374-5de4-4865-9c70-3ca9d1cb64d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b0996b0-a210-4738-af95-2017682e8bf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45fa0c8a-c8be-4649-bd05-a766e0755177",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aca4ad13-fb66-4223-a1b9-9a02cb924b8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17c5ce7c-685c-45fc-abeb-9e6ed04d33e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e69f4891-c3c0-49e2-8c00-0f7b4f4c3ee5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47e0cd25-b320-4867-a96e-010df7e990fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80f04f91-31b7-488b-8e70-41a8916a4d79",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6c02a61-56be-4279-946c-4224848a042b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc583efd-fc7f-403c-9fd1-642938bdfbe9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93a515e5-56c6-476e-930b-6acd44a716fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c421b5cb-1cf9-4085-ab19-97af5226a9d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "def01cbe-5ba5-4139-b534-69609073e84c",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b466bdd-49af-4757-b0a5-5e5ae5fa9a8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29be3c8e-b271-4732-bcc5-d10ad04a14ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecb476f1-91d0-48e9-8b79-67850d2c85bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4aa19095-5d60-4fe6-9793-8b8bb49a37f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c5bc950-bdeb-4ee0-b9d2-e8b7547d8748",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddca0bf9-ce7e-440f-9a2b-b00df722d56d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "358eabc2-5d56-4378-805e-0f90b58d79bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff5c5fe8-ff36-497f-a905-494c08a56bbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0cf8990-9877-43d9-8b45-5509c3084168"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb608b30-fa5a-485d-b5ae-1c49691e0906",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8841d770-18f7-4632-a228-61892071ee35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd68a49c-8e72-4788-aba2-63c8b56ba879"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbeca3dc-ff4f-4188-9f1b-91735be4478c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "983a78f3-090a-402a-8ff2-1d96df271419"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1355ef53-c469-4ace-830b-5c53ce0206e6",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7fd0a8a-bb7b-4561-b033-346f7ae3d604",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "988b6049-e3a2-4d3a-892d-a203a515ed62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "933d5a9f-8780-4516-876d-0ad53a6887d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb4aefc6-56df-4a74-aa0f-39aafadfe799"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f8fe541-d685-4012-a0f3-2edcfc8dd39d",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aff5a619-1afe-473c-bf5d-c8082a2e66f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28f6547c-68d3-46d3-82e0-237b31af3606"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "081e26f5-c416-4ae7-8872-76733f3dda9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4eb12797-b541-4356-b7bd-4b766525eb8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9665b05-7374-400f-ae36-8850490b614c",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1e89108-2525-4e2c-84cb-ff5e2b41007d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a42515e-1767-4741-b23d-d4a5f1f239a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f335868a-adfc-4ed2-938b-a02ed2d1cb1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89475676-ac7b-4d25-ac31-765307fab165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16f41ec3-d47c-4f44-aff4-9a4dceb798b9",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60daf810-df55-4154-8b79-d28469340d42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b54c264c-4d0d-4563-b16b-09f333349f56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8e8589a-5967-4d90-81a1-698780bd13a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca762e2e-1d1f-4cfb-8dcf-907d33d81067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "912ca11b-7ef2-4559-b4eb-001b058354f3",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e700475-4bb4-4b3a-9a2c-28e5e0d9b4ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "173cbfc5-ffed-4338-8db7-e63f6a1818ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34674c2f-b4cc-45bc-9f31-0b84989e1796",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5018fb38-4d03-4196-8319-095b0118b7bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "453060aa-a93d-44de-a065-ec4753570ce9",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "262a49ff-7076-498a-9dd9-2b425829e36c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebce3e0b-3352-4fe8-b3e2-d75a66d9a3cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec68e915-4666-42d8-857c-ea2542ed5e83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d9624d4-d9b8-4fdd-9676-5ecc4f767299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c44ee813-6992-42a5-8c52-e654165e8157",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a35fc0dc-9c73-435b-8c72-6be310970e2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f679f5c-ec9d-454e-973b-16fa1e5f4713"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc03007d-3500-4e83-acfd-e32596175388",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87810857-142f-4555-b68c-a97982e7a72a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0182544-1be8-419a-9aec-000de33fef4c",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bb26c8a-8b39-460f-a309-903e7e489be2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22f93f9a-3a63-4d95-8be5-0976e9150204"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cace9ca-21bb-4f74-bd24-f6ae8ddcaea7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cf2e00d-8abc-4f6a-a210-89180cac9089"
                        }
                      }
                    ]
                  },
                  {
                    "id": "845fff88-f02c-43dc-9059-4ca619045f23",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25d76dcf-87d7-49b3-b9d7-b36894d96f21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f71bcec0-20b6-4a59-b10d-841dfa9cd7b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e341452-c7fe-47e4-9baa-c4c8baf3e1a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bd4350d-d6f8-4198-be9a-f31d618aea13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c431ccd7-b891-439c-89be-2644a386ac97",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3e57899-9fcd-47ed-9425-0e71ee03aeab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd9329e7-b70c-4aed-8a46-01b79db8ed94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77244b28-b8ea-4233-934f-c0d8cdc38974",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9819d0e8-dbac-4d1c-99c0-b77fe2fcd7cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c79757e4-ca79-46ab-b5c6-5a0dd9b2b455",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c37c8ce8-9810-4ff6-83d7-e82c2f996636",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23e25c84-4736-4a11-8e88-55cc8da290f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48140dd8-a899-4b87-a474-e294d2a67629",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "347c06a4-f236-4c9f-b283-d870c4e890d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93e289fd-1654-4ea2-bedc-2c49f12c487b",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a30cb82d-7cb0-4604-9bfb-e867b3077c01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8661f8e2-0d27-4d2c-857c-baf569195f32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f39a45ca-d056-4fbb-9ea1-771f270e3a27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d839718-c392-4a16-b8e1-52a13d269734"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f77526ab-6477-42b3-a2cc-1d78339b6aad",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aca5011b-cec5-4ac0-a0b1-77a847a47b79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0ce6a6b-3e85-4534-9449-10ec4ad78e7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "404dad4a-ba10-4725-9815-933b483dbd6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37559b98-0180-404d-af5d-6a40ed1a9763"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19e3d299-5af3-469b-8c6d-56020bf35792",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "901b2366-0a56-43f8-a8b1-7045421b9c91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed332672-b024-4d04-9e7f-7d603ca3649c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f35196b4-ec77-4555-9a26-7124b97b4bfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc48cc02-f2af-4b27-a0ce-f3be9bbf2c2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d053d67a-06ab-4e91-842b-45ebba3c60d4",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7c73466-c2f1-445b-9ee8-ae0d4666854b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a5d44d2-1f2e-4b7b-af1c-386bd012392d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cacedc2a-97ac-417e-9717-16e43dfd611e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57ac266e-0960-42b3-8fc6-ea8bd5a5da14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b6925d7-764a-4fe9-9b59-234a1673bf38",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae9adf3e-df0c-4a33-b88c-64694b2e47d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4460b63f-6d4f-458f-ac9e-7b8e4ddad284"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4462f31-2b44-44bf-9ec4-b4b5a0b563b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6996a2f0-5fbb-4bfa-a354-385532ff4f5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a5e1374-9a1e-4f6c-b8e4-16b88215d048",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be9cd9e2-77d4-481c-ae0d-1caae919960b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "048a17c3-7d2c-4666-8348-b56a8489f3f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f7fb2ad-e75e-42ba-9d12-151542cb5483",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7df09dbf-3c8d-47d5-83b1-5bddc4eb2e06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d349fc0-b3e2-44c7-b76c-f7e7d24d9124",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "405f6e35-0b12-4072-b382-d08e835ceaae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf9d15e9-b357-42f2-bb40-517354e1ab07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bf0c7ff-0c40-4f9e-861a-6bb1878ac456",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bf78b93-442a-48e4-b76e-67a6acadb0c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "651e14c8-55f2-48e3-9792-2e358f50d5ec",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "148f18e0-deaf-48d7-9b42-9bd86f410efa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04339076-97a2-409d-a5ea-a83f60be2eef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30a39c3d-6e5b-49d0-9d62-cb45387fdc3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aabf7ca2-c89d-4a5b-9ba2-1689baf49c83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a42484fb-55d9-432f-9c8d-b401beaf5276",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fa7ee6f-b823-4bfc-8ff9-2e5b3e6bd1c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a57e248-31d0-497d-8914-4f9d0f61f008"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06365f01-82e5-4905-abfb-01fb40ff2f36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10e97441-982d-425e-928f-c1e90c5e2971"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2599a480-c78e-448d-add4-6e3aa15d243d",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c84a8ce-f031-473f-b457-2a04d8783d75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e576725-b058-4053-9542-4aaf2131aa75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b4e07ea-364a-4252-931e-2d0cf8a2c8fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f43d425e-533c-4ac0-98c0-2621cccefd31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf6ca806-2809-4b66-bdc7-c1b79a760beb",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cc11f7f-caf6-4a33-9ba6-aebb0e11477f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2fe521eb-324e-4101-91aa-899d22b42f03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecc563e5-6d02-4f07-87a7-4acaa8170589",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c869f7e-8a42-4e30-b17a-3afbd70f95f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f34293a1-8151-44ec-8407-9a8899fcb744",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d2d5aca-75c5-48f8-8261-fc792cc62c87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e23b870-e219-4cdb-aa13-c45cb0aa92ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "118c5752-fe90-4324-8df6-d705b80cbd65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b06cc2d-4c93-48f2-bab9-54ef63ea2487"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e892267-5341-4d9e-91a4-fce2b2bd9f75",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e3e9ec0-7d40-420d-86fd-dd9ddab03490",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e23346d0-2c5f-48c3-8450-aadd51c65b7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36644da8-0d60-441e-81b2-1d5c62fdbe78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffade179-0b29-46e5-9653-8ff254e8019c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "856686a4-6d86-41b2-8ee9-22c89a02437c",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4bf59ac-beb6-4936-8308-2c77ed9435e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0b973ec-b735-46d1-8f3d-4375eba2c283"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9eb2164-68fd-4513-936e-655b9ef6d8d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6b984fe-ddf1-4147-a850-a4899a0b8d97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70b3bf20-8f53-4eae-9927-7a630d4dbf25",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b1254b5-bfa3-4f75-a372-7f1b901b5d43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2af50fbf-9de6-4c5e-934a-52c2d6391fef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a91e987b-a773-44ac-8e6f-d86a0e30b3d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09cdb91c-ac9b-491e-a288-2bd3654a9c27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85781cd6-a07f-4c44-9991-0354ec469aa0",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f886cca2-3ff2-4a5d-a543-946b64798c42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3257c928-2881-49b9-a442-f55a525c0e7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0d8d775-3b9b-4624-bacc-599d369e8b0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7502070-40de-4644-a8e7-98e3090db70c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeeb79cf-9d36-43bc-abce-3071d27f7ae2",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51c7dd15-f43f-4753-9c40-f1e63d595a46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9218fbcf-1ca8-48fb-adeb-078f1aa1b387"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d88113bd-d174-4b65-8bcc-de92f14832f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e18a4b46-4277-4223-a785-85735b799aff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d57656e-d282-4553-a2d4-b0280598569f",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "094123de-4124-4d08-88de-540bc183e0ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c50ebf2f-50f4-4922-b1f3-391995f67c9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2f6be86-9a46-4ca4-85a3-9b990141830f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03471fff-ed67-423e-ba42-587981fde02d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10010d15-fa0d-43f8-80d0-25096d783802",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4b58b65-a740-49c5-9724-4f31b195edc7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18253ba1-8899-47f1-b795-95e2e05bed89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18889208-0b50-4bf7-afee-d597e3c467d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f47097b-e2d4-43f7-aaa9-99b3d36b1218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d906e44-63f8-4b7c-9272-013733e68b5f",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66441e72-4477-4cf8-b47f-b11c691ff155",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95c5b8a7-14b1-44a6-aa35-561edbda1c7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2b0373f-2695-4d50-94e6-c29aa27c0113",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "697b5b36-7bcc-4355-b244-6395008bf8c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c760fd13-ce6f-478a-bde6-08cbc098701d",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e152134f-c649-41cd-b028-5b8b8dfbb7b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4dbfae0-41ab-4b20-b1d5-51fba4cf928e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c33d91af-a72b-4a15-abdc-1a96f34a3405",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abb28497-24bb-4a66-8065-869f277807d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5876f97b-fdf9-4a8d-aa23-b66f63bce73d",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "354860b7-6582-485f-8832-7a59d4f0ae5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cebc7ad6-5a2f-4c2a-98b1-08e852c558ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a89fc8a5-f5ab-461d-86dd-96e073a6a3d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e0c1152-4070-4d85-be34-2c8fa97d3db7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d2cec85-526b-4644-ba75-9ec8c659d828",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ab09cc7-f41d-4187-b48b-e8f4a0ba2748",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a251a5d9-6557-4535-8db3-bc2c48a31d8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41578364-94cf-4323-ba2f-a8a42e5019c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "800cd150-4c36-478a-a1d5-06f2d20e1c8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4679600e-7a4e-42b2-b3c9-59951cd021f5",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0dcae03-efac-48ff-835d-fb7a2b7d8dfb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1beacbfd-0a85-460a-bb72-361c13c0c7c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc9ff9d8-33e2-4c59-8534-819189a4f7e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42433f9e-2a93-4928-853d-f549f357d6b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0acbf48-10df-4875-8a94-c764859be860",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1626b1e-5c95-47a0-892c-34b399b68106",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "acf638c7-86e5-4b02-b509-0b990eaaf834"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8082d4b2-64ce-4e42-b9d5-3f2b3ba60a99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "716dc556-f503-481d-89a3-dec5afdfff82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "146732da-82e0-4170-9043-2d2b4df7256d",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edf24d21-46e2-4ca9-8e75-90d44698cf34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7451e52-988d-4a6e-91a5-ad473375964a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da726e2d-d641-4593-902b-3b4dfc6e9aea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c657049-a515-4ba2-a19d-b9e7cabd4245"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7370fcf2-ffde-4689-83f5-b325447cf143",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76c89906-3918-41d1-b152-1db50cfc60c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71b21078-2d1d-4965-b505-fffe4ae5ab3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48bebaf3-7be6-4b1b-9b77-ce6f38d8f34f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8675219a-ff52-49e1-9479-9acfd9cf77a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ca8d8c2-2e9e-4885-ba82-d115f8e83cd2",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bddd7d9-b562-4d3c-9192-717a06a816d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8bed29b0-6eed-40dd-b7d5-57a71bfbb226"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d38cc45f-bb0c-4550-820d-d7e834b5057a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8aa23680-5636-49af-bcba-2530acf7134a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33796816-2619-4478-9641-0d7b90113055",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a2cc331-ed76-4b7a-9dbd-807e600f10d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18a7db59-2c2d-49d9-9b19-a6b508fa49e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5011e025-d103-4380-825c-340ca6a101dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c364294-1faf-426d-8c2d-45c050f56558"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f5b9913-6b16-4789-a8db-730e61415403",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bac48b9-0609-4c20-ad27-fbadde5fa388",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf4f1609-5098-4268-be76-9d5b49c317ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14329ac6-b611-451e-984e-ce4a4ced1fdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a17c240-0183-4c06-b3d4-8fedced723fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "222e84f6-4bb6-4a65-aa0e-8558e46473ac",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "973c5f0d-7b71-475c-8006-539ef18dce5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55b60d4d-1561-4166-b834-9c5999dadc4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72855847-6425-4b53-b24e-d622d3ada1cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d3a54e2-b3e6-4795-b85b-d4a0506b7635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "937f768e-fc37-4035-8a61-26a7a02e3c32",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8747ef7f-f997-4e01-a874-67ad0bd30ed1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99610679-42ae-49e2-8d0c-7332c8f7450f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e1170dd-9f1f-40f6-808b-6fd13e02f1c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f3449e9-f409-460d-b6b8-2f04511d03d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9df82098-9508-4106-b857-d4d6ee0acff3",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6ce5914-b5b9-4b3b-9df5-78c54cd8db6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d07549b8-6b12-4008-97fc-e135b757f571"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ff08e60-2acb-46e7-b76e-bfc2ce5f360d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e367001a-5de3-481a-ab17-4f8921c974d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0c21d83-48e9-4607-9098-1f963537d0cc",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e4917b5-f21d-474e-878e-5a96b2a48044",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70c4c84d-58bc-45a2-a0b7-a7e8b8ae9a98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "474537be-7a02-4de2-bf29-2bf670272f61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "143beedd-1e8d-465f-91cb-9361109ee80a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b37ada3a-90a1-42f4-a8ae-ade75b94f298",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3c44dcc-04e8-458f-9847-28ceb35abc25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43923c97-b0b2-4d5a-b2a2-6a6e0b4b755a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d65b03ef-2626-49ac-8871-c2027926f6dc",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0ccd4f0-d473-4fb4-8f6e-96c9e37dde4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2940e7b2-0c37-46a7-ad23-ef5fc813aeb7",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c63fba62-0510-4807-a0bb-bcc3fcf23476",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "290b8caf-36c5-4b18-af63-bf32cb4b4771"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad3b8344-3ab8-4630-8e5a-cc530ad72a26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b5aa721-9bf5-49bd-bd98-d9f8d83dcf6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72ef07c8-32a3-425a-8c81-8529e9a15b7f",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66b05c9b-65eb-493a-90f9-42153955468e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f9010f1-f168-4f43-adc0-617599204a36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f136095-6bd5-4bd4-aaba-2df25d8e66fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8598695c-ce66-472d-82b7-ef14e7a1c89f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "989bd410-441a-48ae-aeb6-e09be3def563",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9def3b17-c895-4709-b485-f8af47532840",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c92785b6-b533-4d2e-866a-66cae81b8103"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7444c7e-1593-4eab-831d-0107540ada34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29ec7025-d4d8-4741-80d2-22ea84e41c4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2abb1b1b-326b-479a-977f-7779ea34f6b0",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caa5646f-ce49-4569-b038-80851d52c124",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b947afd-ba89-4f63-82e3-3490a9b8f4ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99d99fd8-125e-43f6-9434-e1100d2bb507",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61187dbd-f3e4-49ba-a643-cc061138aed4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09b53104-f98c-45df-b647-0ab7cd95edbb",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f72c837-c134-4753-a2c4-2f62f2d31414",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9a7d505-a5d4-4c68-b1d8-f4374dcdf572"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b6f27cb-733c-477f-9194-fa0ebe9719f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0c387c3-2f0a-4626-b6af-7ce90ea2eef7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97573485-2183-4709-ae61-3d7897aa63d6",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a813179a-dbf7-443d-a69d-c0fd0e557c07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31efefc7-b461-4334-b65f-ca8a419afd43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b22053a1-89eb-46c3-abef-14652b4561ad",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f953a2f5-a20e-4149-af92-95d1fde89095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcb7e0a8-ff75-43a7-ac1f-b826a6eb952b",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6219f0b9-7000-46bb-9546-01dc24319953",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45950470-62c8-4333-8920-8bf4c85e3d8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f4c4a1f-d074-4782-a9f9-5b71054ece1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efe800c7-77bc-45e8-99e3-f7a091214f28"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e6f3d72b-5595-4ce5-bbf4-f2d4b65186b8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "94521a02-9d71-4528-8538-caa9edc8af43"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3b907fa1-3abd-46f0-a4ff-0e9614390ce7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ef1b0302-5c25-4c40-8288-4ca58edbb776"
                    }
                  }
                ]
              },
              {
                "id": "75a31840-e6a5-4ff5-8d96-884efe13544b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "193a0ae1-1790-4ce3-be05-b0f49b168a6e",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2643b560-2320-49be-a924-6b644da4f752",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "4b3f291c-ff4a-42d0-9792-0945e559ca8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0e77b92-515b-497d-960c-5c0203d80be3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3f5ac6ff-4089-423e-bafa-801dee12cff7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df69a55e-4eec-40fc-9013-4dfc91d143fd",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2c189ac-680e-47b4-8738-20fa635993c0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "2849b8bc-b55c-4d75-9218-ce5dacdb1740"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02f03256-4c33-479b-a889-0dc8ef0d2e57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6041b76d-d1a0-447b-bfe0-b37e632c004a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "429a8d2b-05a4-4574-b04d-d897334e2fe0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5bbe8a70-5a0e-4f10-b497-19dfe8eae9b1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2a81cc41-30ca-457d-b0d0-2a4f94d9b1e2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4572b788-677d-4a50-8369-cdcf52767d59"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "e1f080f6-7fb1-4659-b508-86d34d7e718e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "01bae8be-0bbe-46f9-8a2a-e4ea18536cb7",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6f01f004-7ff6-4e89-b02d-bc0e8f2d1cbd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e6410fd9-65f5-4ff5-b04d-87a049247f02"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fee1a95d-393c-42a1-a86e-0695d9e39d80",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f4cacedb-f8e4-483a-9381-61c2e6682899"
                    }
                  }
                ]
              },
              {
                "id": "a3785efc-4728-47ec-bac3-4d89674a3781",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "137b9df2-2fc3-4bd6-bb45-374cb43fe479",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9bc9bcda-5983-4590-9e03-aa3556c342a5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "482853ac-a57e-4af0-a7d8-65f87ac85b77",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d9ba01d3-f3db-4a08-a25e-503aa8c99a55"
                    }
                  }
                ]
              },
              {
                "id": "eb981485-5d22-435e-bc0e-d3ecdb4fae26",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c5b8f8a4-1101-4046-98f4-29753f8a8aa7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "68147abb-f8b2-449d-96d2-ba766255f08b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "59280834-5b5f-4f26-812f-e8d23d9452af",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8f66f5a9-fb4f-48c7-97ce-c5c368c161bd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "84d47214-d0d3-468e-a334-589394b0c109",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "b4c8e627-f202-43bc-a87b-2eba307ed9f6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cc7ec40e-4a97-4d50-bcc3-9183ef664006",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "edcb4181-4fea-4042-b3d3-38a2014eef84"
            }
          }
        ]
      },
      {
        "id": "d8621f0c-b3e2-4c16-a647-699daa07b113",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "50a88ec4-412b-4e28-8743-454cc0ce3d1f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "803ec272-3d6c-42bf-89fa-3b87fd9b2137",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1224f6bc-8ff3-4e7c-88d4-e724d4084572",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a925ddf5-ae16-463a-a1cb-288c0f6e869d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ea8f8ddc-d3c2-4a77-80f4-ed7d5989e152"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da95ed04-286b-4c16-b0ab-031623d5da13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "69df722d-9587-4d4e-8702-29cbd519f364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddbf4a0a-12a5-435c-b178-cee3591557ef",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcab0d8f-b509-4f36-9bbf-30c888e18c98",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "749988ad-5279-4b83-8a78-0a4b625cea93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ce96bec-3ced-46dc-b50a-6947c9386b60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6eeb214f-89a5-4b9e-a247-09f41185ed73"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bd9b9f8e-af8d-43db-afc4-14b692802b37",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "380913a2-b4a4-41d5-b81c-4a548788e53e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6b443ff8-3ef5-48fe-ae4d-1cb05df5eb28",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2c84f5b3-ecc7-4018-805e-210e87068baa"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "353fd862-ea2e-403d-99a2-6a023e41055c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "8b8dfab0-0c17-4dcb-a2fc-8b92a7180f6e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "237bd226-5874-43a7-b969-acedbb832bea",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "57aeffcd-2234-4465-bf3b-cd033160d8f3"
            }
          }
        ]
      },
      {
        "id": "9c8e49de-662b-4c63-9b14-9573e1e2c983",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "b5c676fc-2853-4759-a9de-0f45ac8cb1f9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "81f98045-6abb-4047-8e60-346e2ed204af",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7b4681dd-57dd-42d0-8116-dd55368d5eb0",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a22b88c-0cc6-4d78-b74f-1a0b9470f2d0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "02469675-8df8-47ea-ab68-2e5eeec9ba03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be89ffc7-a89c-4201-ae68-811fb68f9b46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7172b04f-d642-42c6-b5f5-18d03eda70bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d682ab5-b650-4d2f-a014-cf975833aef9",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a351c39-08b6-4c00-a8b8-3c90dbf53e5c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1217989e-56ba-42b3-8740-b09b136bbca7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5812a68a-05b0-4e5f-810a-d9990860fb01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b3ae36a0-a141-43cb-a7dc-1541a923081c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "25a26a0a-97db-46e8-b2b9-0ba0081439fb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9cb26a62-cad8-4af0-9dac-85e82633a24b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cc1c5982-eb3a-470c-a434-4becbba73dcb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aeff0750-fc37-42e3-ba64-8105852b9f2d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d4dfc471-a966-401e-93c5-9677dd7db339",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "f3e2c19a-f9f7-4a1f-88de-95357eda259f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dd41935b-a08b-45ba-bbdf-22a7015d2397",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f20e8d3f-5f4b-404d-8044-4d41822780ad"
            }
          }
        ]
      },
      {
        "id": "e9644c5b-aa48-4016-8f7f-70f5b33ecd6f",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "19be90ca-3f29-45bb-bf98-0e8ad9aa1945",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b7172da7-9858-4466-91a6-beed2a049544",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "793263b8-c68f-4314-b19a-6bd89eb4c460",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6aa4c23-bf01-407a-bb90-55787f65b790",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3bb0024c-b90c-4a51-8ce6-8c0cc5bd5590"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50bb0e45-5001-4782-aa3f-beb55cc5e829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5afa468d-f206-467d-ae59-0a3724e0c564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44a3b7f2-7c16-4672-b542-7f589ff1bebe",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edd7c85b-a9d1-49c7-873a-1d28a4da88bc",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8b05a00b-2d15-42d1-a26a-9554dc87d101"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5479e1c0-5815-4be7-9f9a-1c2af73f4653",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c8a67ec7-cc9f-457e-afce-8740c103ff87"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a2a5ded2-22c9-4f9f-a604-e4bff30f3af5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "13c72049-be33-4a41-a017-27eb1844905c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ec7d6cac-e89c-4e8d-8afe-34552f3971f3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a99ba08e-2353-40e5-8683-68231869ad59"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7bb59117-1070-400d-8277-31eefd4e19a8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "7af18b55-f43e-4928-b3ff-0cac91a13476"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1ac34d33-8c25-42bc-9390-42d25e4188ee",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ff7ec7cb-4930-4222-b8f9-32fd839ada2f"
            }
          }
        ]
      },
      {
        "id": "13a7e0f1-b2b7-4e6c-8c98-d61327472485",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3502b6f0-ab81-4e88-9907-c74412a8352f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "02c605da-c515-45f8-921a-d904f92fe038",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "8393c99b-7edd-4cca-bcef-37ffbe84b263",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7fa939c6-8b65-41e8-925a-c22ff9a9ba88",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2c828c16-a5ea-426a-b8d9-96bfd4c6cb64",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 505,
        "pending": 0,
        "failed": 90
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 68.0923076923077,
      "responseMin": 6,
      "responseMax": 703,
      "responseSd": 107.10515653418851,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1668026387647,
      "completed": 1668026419449
    },
    "executions": [
      {
        "id": "a440262a-2e8a-4767-95a7-33fdfba8db88",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "e543369a-5bfd-45c1-9fc9-df547e3e312c",
          "httpRequestId": "99e1c2f3-d795-4ff3-9718-e4f53d916972"
        },
        "item": {
          "id": "a440262a-2e8a-4767-95a7-33fdfba8db88",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "d6ef5a4b-8c60-44e2-8cab-4b4e7f466f39",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 0
        }
      },
      {
        "id": "1a90d40c-1efd-48c3-814e-5be9e538bd3f",
        "cursor": {
          "ref": "4a5ccd93-f080-4df6-8cee-39e4ce110c5b",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "72e502b4-a40c-4806-902e-3ffb28a178b0"
        },
        "item": {
          "id": "1a90d40c-1efd-48c3-814e-5be9e538bd3f",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "9c1c0013-5445-45fc-8c7e-4e37b68371a3",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "1c1b3e2a-aeb4-4420-b683-39d9339ec9fc",
        "cursor": {
          "ref": "30bed09e-ce42-4710-a803-56bcc6a48d1a",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "b0ec5eaf-8449-47d9-be55-6ffe1e7f0ab7"
        },
        "item": {
          "id": "1c1b3e2a-aeb4-4420-b683-39d9339ec9fc",
          "name": "did_json"
        },
        "response": {
          "id": "fa75897e-1d45-4396-bc50-8d370d268362",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73eef524-558d-4385-b8b1-3d1eda3e2dd2",
        "cursor": {
          "ref": "cd79c159-39ee-4b28-9b78-8ec291916920",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8487f9de-ee69-4858-a572-727181314073"
        },
        "item": {
          "id": "73eef524-558d-4385-b8b1-3d1eda3e2dd2",
          "name": "did:invalid"
        },
        "response": {
          "id": "06139ed7-72f8-4643-ab24-86e0e82fa69d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73eef524-558d-4385-b8b1-3d1eda3e2dd2",
        "cursor": {
          "ref": "cd79c159-39ee-4b28-9b78-8ec291916920",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8487f9de-ee69-4858-a572-727181314073"
        },
        "item": {
          "id": "73eef524-558d-4385-b8b1-3d1eda3e2dd2",
          "name": "did:invalid"
        },
        "response": {
          "id": "06139ed7-72f8-4643-ab24-86e0e82fa69d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f75c108-f26b-47d9-887d-c55fe090407d",
        "cursor": {
          "ref": "f4a36274-e2d2-4196-b89e-1174ff46d45a",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "73244619-6b08-4752-ae27-0eb95887a67c"
        },
        "item": {
          "id": "6f75c108-f26b-47d9-887d-c55fe090407d",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "ade3a208-066f-4627-883c-e690717761ed",
          "status": "Not Found",
          "code": 404,
          "responseTime": 142,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0874b7f8-83dd-4fdf-96cf-2273e4bc29d6",
        "cursor": {
          "ref": "d3241c8b-235b-4523-8b47-a6b7f02074f9",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "5a822ca1-6aff-4766-9937-a6988cafce2b"
        },
        "item": {
          "id": "0874b7f8-83dd-4fdf-96cf-2273e4bc29d6",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "0b1f359d-2c23-4fd8-bca7-135abf0e494c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 15,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3a8000b-1bf8-49e0-b457-009f7d0acc71",
        "cursor": {
          "ref": "acecdd1e-d8a1-43dc-aeb5-5f4b469f1b8e",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "5780ed08-f6cd-4833-b646-94d393229647"
        },
        "item": {
          "id": "c3a8000b-1bf8-49e0-b457-009f7d0acc71",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "d360abb3-7027-49bb-98c7-561cbbb9293b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d694f10-08b7-4e4a-a64a-88ca55737a0c",
        "cursor": {
          "ref": "2a388066-d087-4491-912e-ba037b7918a5",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c18e44cb-b6a3-4828-8f3b-daec28074fa0"
        },
        "item": {
          "id": "9d694f10-08b7-4e4a-a64a-88ca55737a0c",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "14ee09df-121d-40ac-85b4-773087b7e08a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 24,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d694f10-08b7-4e4a-a64a-88ca55737a0c",
        "cursor": {
          "ref": "2a388066-d087-4491-912e-ba037b7918a5",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c18e44cb-b6a3-4828-8f3b-daec28074fa0"
        },
        "item": {
          "id": "9d694f10-08b7-4e4a-a64a-88ca55737a0c",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "14ee09df-121d-40ac-85b4-773087b7e08a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 24,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feb64712-b846-4139-8540-22ec32830927",
        "cursor": {
          "ref": "466dfa25-f6b1-4050-ac9b-2f2a67ecb392",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "5f504e95-a6d0-4137-a0ec-d90331e0973f"
        },
        "item": {
          "id": "feb64712-b846-4139-8540-22ec32830927",
          "name": "identifiers"
        },
        "response": {
          "id": "30b9ef30-068f-419b-981f-f87d1042640f",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b53b320-3b58-4dcc-892a-a57bca3f6d0e",
        "cursor": {
          "ref": "da78eb1e-a30b-47be-89f7-7b1768da583b",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "0833c207-ce97-4f5c-9272-98a34831f1ac"
        },
        "item": {
          "id": "3b53b320-3b58-4dcc-892a-a57bca3f6d0e",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "7004ec03-6faa-4b2e-95da-ecfb2540e969",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b53b320-3b58-4dcc-892a-a57bca3f6d0e",
        "cursor": {
          "ref": "da78eb1e-a30b-47be-89f7-7b1768da583b",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "0833c207-ce97-4f5c-9272-98a34831f1ac"
        },
        "item": {
          "id": "3b53b320-3b58-4dcc-892a-a57bca3f6d0e",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "7004ec03-6faa-4b2e-95da-ecfb2540e969",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3160da35-166b-4802-b8b0-07f8bd72a51f",
        "cursor": {
          "ref": "241241ef-35cb-4107-b2a4-8517c5623fb9",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b9475279-ea6d-4283-b6d4-9b2c916e29ea"
        },
        "item": {
          "id": "3160da35-166b-4802-b8b0-07f8bd72a51f",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "f056ca3c-6c23-4fed-9557-999c1f032bbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54d54b6d-675a-424c-b81d-75fa7142e94b",
        "cursor": {
          "ref": "4f5cfcdd-7fc6-4bba-887f-3f9b8a519d3e",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "4996dbd6-13f8-4937-8863-e5f0e3c366de"
        },
        "item": {
          "id": "54d54b6d-675a-424c-b81d-75fa7142e94b",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "e2dc5f6f-fe1d-4aeb-b7c0-7dee6b94ce88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a326a6bc-68a7-4ac2-868c-1eb74462e011",
        "cursor": {
          "ref": "206e5820-cebd-49a7-aee1-d78932390948",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "1b6155d1-ce65-4408-872c-f1b2225cac89"
        },
        "item": {
          "id": "a326a6bc-68a7-4ac2-868c-1eb74462e011",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "a8311ee2-f101-4d60-9619-79d50dbfe151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2247d7d1-dac7-468c-b0f3-f9194fddc69b",
        "cursor": {
          "ref": "e80c2bbb-c507-4394-9e7b-57db9bb518bf",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "30b3fba0-9b47-4384-b372-ea78e7020946"
        },
        "item": {
          "id": "2247d7d1-dac7-468c-b0f3-f9194fddc69b",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "bcd8c8da-1292-49be-88ce-69239c4c3d69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3b22719-af34-4407-b220-039bc4764ac6",
        "cursor": {
          "ref": "ff262e44-bd15-4335-93d6-186c13c507b4",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "788429a5-0c1f-4c4b-9c4a-cf5474e64c6d"
        },
        "item": {
          "id": "c3b22719-af34-4407-b220-039bc4764ac6",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "92ade309-7d79-417e-94d1-1ce227d5f920",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de97759a-4c1e-4a1a-8192-aab6c6846f6e",
        "cursor": {
          "ref": "ffaf25e6-bba7-46d5-816c-1c4d67a67350",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "6224026d-8f81-4825-a94c-1df0cfab98ed"
        },
        "item": {
          "id": "de97759a-4c1e-4a1a-8192-aab6c6846f6e",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "6348b697-fa0d-449a-962d-f3d4092c96cf",
          "status": "Created",
          "code": 201,
          "responseTime": 453,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "15dc8750-dc32-4885-b498-b5f0d056c73e",
        "cursor": {
          "ref": "c2509f47-a6a7-4f29-9024-8687d178d911",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "2ae31831-516c-4415-ae87-7a91131ca9f4"
        },
        "item": {
          "id": "15dc8750-dc32-4885-b498-b5f0d056c73e",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "3ca3d29b-7be7-4e29-8396-666a3d445123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d6e615d-45bb-4f08-a38c-b38b5b35b03c",
        "cursor": {
          "ref": "eb376270-d947-47b1-a0b6-6fd073d668d5",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "965ebebc-33d5-4c54-b276-e32a49ee18d7"
        },
        "item": {
          "id": "2d6e615d-45bb-4f08-a38c-b38b5b35b03c",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "a85fbba7-3799-4c0c-a5ce-34b734e2d1ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfa2c7ee-d91e-459c-a7aa-a552bbd3c481",
        "cursor": {
          "ref": "9d240436-1b1e-4e8a-a755-15d523c5398d",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "7045d082-7242-42bd-a66b-b18cb26fcaab"
        },
        "item": {
          "id": "dfa2c7ee-d91e-459c-a7aa-a552bbd3c481",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "3e9bc0d8-b992-40d5-a822-d98eafb2e5e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96bbf87e-4d58-4722-8d17-a10e077dbb42",
        "cursor": {
          "ref": "43284b45-d6ef-406e-9005-c1601bd03787",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "ddf5d709-0d80-4a80-9a06-2683b66ff60d"
        },
        "item": {
          "id": "96bbf87e-4d58-4722-8d17-a10e077dbb42",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "afb29e25-8b8a-4268-9c01-6cf028e3bedd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "effe389a-61ba-47e6-9e90-21fa8ebf45c7",
        "cursor": {
          "ref": "38ce47bb-8833-434d-85cb-d1f3c8ef584c",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "53a79ea3-f48a-4f18-b1a1-4c8b034fa5fc"
        },
        "item": {
          "id": "effe389a-61ba-47e6-9e90-21fa8ebf45c7",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "a5648e8c-116b-48b6-a60f-8a65fd4ec6aa",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 584
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "f8382652-6637-4167-aad5-f86a081680de",
        "cursor": {
          "ref": "fdb5d14a-9c16-4500-900e-0b0aedff2e14",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "43d0bfc1-736d-4d70-b111-29e5e67738af"
        },
        "item": {
          "id": "f8382652-6637-4167-aad5-f86a081680de",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "136ff9a3-4564-4ce6-b2a8-fe62516358dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb5542cd-5e3a-4595-96f1-233ae2b8baec",
        "cursor": {
          "ref": "f780b578-f4ac-4ac9-a23b-e597da48dd5f",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "5e7a2412-7a7a-4ceb-9dc4-ae673e1c6853"
        },
        "item": {
          "id": "fb5542cd-5e3a-4595-96f1-233ae2b8baec",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "6425e2c6-9bcc-4836-b13c-11709ab258fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0963212b-2191-4e7a-a986-a4654124fe65",
        "cursor": {
          "ref": "02e69203-b45b-4bf8-80e5-cf08b4c5a5e8",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "2fe60293-4a96-4362-90bc-32c27f1854ce"
        },
        "item": {
          "id": "0963212b-2191-4e7a-a986-a4654124fe65",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "69374316-0fe1-48cf-8575-b08d9f046bae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbb010c9-1fc6-4c82-bd50-65e97a319815",
        "cursor": {
          "ref": "fd5cfa33-d369-4e40-80cc-dd06e4611229",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "fa0283eb-3f50-4859-befb-80f5556a06b1"
        },
        "item": {
          "id": "dbb010c9-1fc6-4c82-bd50-65e97a319815",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "5bdaf1dd-f6a9-4b5b-be74-34fb87dd3188",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2388629b-e017-407a-938c-7d918c90e0c0",
        "cursor": {
          "ref": "46f5a6e7-b534-4cf5-b1db-ded6327eb48f",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "d53a5797-5214-4628-bc7b-916f461fa9d7"
        },
        "item": {
          "id": "2388629b-e017-407a-938c-7d918c90e0c0",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "2938ee16-5790-400b-9810-25301ebc4528",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4404529-e7d9-40eb-a15b-4c218b03c36f",
        "cursor": {
          "ref": "d10ff565-392f-4f2e-9dc9-f34df2c134b5",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "39dc2c40-8007-4acc-9044-cdc798caae44"
        },
        "item": {
          "id": "c4404529-e7d9-40eb-a15b-4c218b03c36f",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "e24f8129-4338-4011-bbcd-a36740386bba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "319d47ca-173d-4e45-acd6-8f4dee21fb39",
        "cursor": {
          "ref": "992b3395-333c-47a2-8c8e-04603be0979c",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "ebffb8b8-4e67-4608-bf16-994345d54167"
        },
        "item": {
          "id": "319d47ca-173d-4e45-acd6-8f4dee21fb39",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "564a485e-cffa-480b-9e4f-d1f0faa7d755",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfdd531c-6f38-4700-a145-7c4e8ff16e4b",
        "cursor": {
          "ref": "0a8f5690-7327-4334-acac-ecf1487a4cfb",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "66a0e8c9-29a3-4a64-aeb3-4260b83444a4"
        },
        "item": {
          "id": "cfdd531c-6f38-4700-a145-7c4e8ff16e4b",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "8c62b993-724c-4ab2-95a6-d0b8f21933a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75fe6edf-751f-4518-9958-4de22d866079",
        "cursor": {
          "ref": "bd077675-33d6-4a3f-bf7e-30a2e6cc3b79",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "cb0cc66a-5b7c-42d4-8389-e59d35e5a192"
        },
        "item": {
          "id": "75fe6edf-751f-4518-9958-4de22d866079",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "39747809-2aa2-4178-bba9-d9e30971f619",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baadceb6-ea90-4a9c-9f82-19d5309183b3",
        "cursor": {
          "ref": "e890e562-efa7-423f-a286-c792ea652596",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "27d4fdb0-719b-43a3-b26a-861aa9cf04f4"
        },
        "item": {
          "id": "baadceb6-ea90-4a9c-9f82-19d5309183b3",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "9840bc78-29ef-473c-88a4-cdfc85a92f83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "772acc85-47ae-4010-87ff-56c074234dfa",
        "cursor": {
          "ref": "1fd062b2-64be-4d38-ac28-ab3c379a1df4",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "3cec0270-9857-407f-9187-af48a0b631ae"
        },
        "item": {
          "id": "772acc85-47ae-4010-87ff-56c074234dfa",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "e32438ac-4f19-468e-a834-bdc3643fc022",
          "status": "Created",
          "code": 201,
          "responseTime": 431,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "ffdbc90c-1d12-4663-9ebc-6d11bd2cff52",
        "cursor": {
          "ref": "75b1f6ab-bb81-4c7f-b351-88bd2ee6714a",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "f5e53df6-7036-4adf-849c-b43b2c381ddb"
        },
        "item": {
          "id": "ffdbc90c-1d12-4663-9ebc-6d11bd2cff52",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "b4236c5f-b873-4b31-9ead-8e31eae529fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4664e5a3-1c7a-4368-9842-e77fc01eb797",
        "cursor": {
          "ref": "f4d99a26-946c-4be6-ac7c-f4bb8e565a7c",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "a32120b9-3db7-4a95-992d-f5c6601a8c7f"
        },
        "item": {
          "id": "4664e5a3-1c7a-4368-9842-e77fc01eb797",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "abce5c79-1210-4f5b-b59e-251adb6765f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21129e29-b3e2-4bf3-9140-8571c006c089",
        "cursor": {
          "ref": "cd6b52c0-e751-4202-8213-baa223fcd65c",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "07a2b8d3-ada4-4880-ac67-4c1922e01ae9"
        },
        "item": {
          "id": "21129e29-b3e2-4bf3-9140-8571c006c089",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "7856e80c-87bb-4849-8498-ecc767170f82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40435f5b-efea-410d-a0a7-3a4d9f9f9f44",
        "cursor": {
          "ref": "ac10c97e-dc63-49b2-b36b-cb3356b44047",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "f6697ace-00eb-4586-979e-8b7a714a77f8"
        },
        "item": {
          "id": "40435f5b-efea-410d-a0a7-3a4d9f9f9f44",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "886da176-320a-4cfd-8b1c-c055b7171824",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "901c2e74-d9d3-46ae-bc56-e81362fa813a",
        "cursor": {
          "ref": "104b6ba8-dfdb-490d-bed1-8d3335b7f8cf",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "b324ed54-1296-4878-bc8f-15f4b1c7e248"
        },
        "item": {
          "id": "901c2e74-d9d3-46ae-bc56-e81362fa813a",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "94bc8a5c-77fc-4143-8a5b-3bda7b804a80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e83ed17-d473-446e-9161-08deae9ae223",
        "cursor": {
          "ref": "1147e34b-b99d-472d-be36-5be585e3eff9",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "2ccb6fe5-5abd-4916-a475-fbb2b13de0db"
        },
        "item": {
          "id": "9e83ed17-d473-446e-9161-08deae9ae223",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "73d41ab0-1adc-407a-a089-2cf51dcdd7af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62b74e91-0a43-45ca-a45c-c6063df42a6d",
        "cursor": {
          "ref": "9d327256-f29b-42c2-8c53-eeaf3cfeb2c9",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "64b6a3fd-d8a9-4a97-8f12-d61f2141c978"
        },
        "item": {
          "id": "62b74e91-0a43-45ca-a45c-c6063df42a6d",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "248b2ab2-eda2-4b08-a1e9-e8e5f65a1bdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "283e9170-32bc-44f8-9fa3-77ed23b83dab",
        "cursor": {
          "ref": "07911731-258a-4dbd-9445-dab039762cd3",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "c53853c3-ffbf-4535-9eea-795e94b5b746"
        },
        "item": {
          "id": "283e9170-32bc-44f8-9fa3-77ed23b83dab",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "71a97910-6773-4e85-9b65-70d00074e961",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d6d68d2-7c28-4211-bf9f-3d47bedb7d98",
        "cursor": {
          "ref": "7b2f44e8-e530-4f8f-ac43-00110940f9fb",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "cdd55469-848e-4f77-b01b-1b59e7d18c94"
        },
        "item": {
          "id": "9d6d68d2-7c28-4211-bf9f-3d47bedb7d98",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "82c9436a-b8fe-4c71-8ab6-5ad3bde54f6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af82e8ef-2c10-4bf3-aa11-d1d7f7ab27ef",
        "cursor": {
          "ref": "0881f40c-9c04-4d1f-a213-8c508613d9d0",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "050bade7-f667-4b97-91ea-de34e82eea53"
        },
        "item": {
          "id": "af82e8ef-2c10-4bf3-aa11-d1d7f7ab27ef",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "78a9d941-4821-4c1c-9d84-fd5901320f23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aeee429-088c-4f1a-a6e9-5a48477534da",
        "cursor": {
          "ref": "dfd47dbe-ae96-48de-9c07-7f3a84a8c891",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "f4cd0039-74b9-4784-988b-8ca6f93f4819"
        },
        "item": {
          "id": "8aeee429-088c-4f1a-a6e9-5a48477534da",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "cc10906b-79c7-428a-858d-2b65253fb878",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7124f05-2bc0-4505-aafc-b3befc5e6368",
        "cursor": {
          "ref": "6a2aa1d7-7cb8-4341-a40c-879b58cb1fdf",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "366cc5cf-7ce0-4bef-9e7a-3aed5d185e83"
        },
        "item": {
          "id": "a7124f05-2bc0-4505-aafc-b3befc5e6368",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "8e16cc79-8890-427a-b11a-9cd98837c86f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b7743bc-be30-443e-8afe-5348c5587a2b",
        "cursor": {
          "ref": "f227e04e-df36-47d2-9899-a0842e0f334b",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "a33540e2-71f5-4d9b-b299-d0dafcafd2ea"
        },
        "item": {
          "id": "3b7743bc-be30-443e-8afe-5348c5587a2b",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "8e0731ed-1abe-47a1-a252-6586dafc3e5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 278,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "39a02ec9-6251-40e0-8fc8-97364c8e777c",
        "cursor": {
          "ref": "396b3cc7-28b3-43be-a886-58c130e3c840",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "d10f7e4e-83b9-4fa9-8b46-b9df96d589c4"
        },
        "item": {
          "id": "39a02ec9-6251-40e0-8fc8-97364c8e777c",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "ae7b0ec1-de5c-4fde-9b24-5bd24e5821a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ff22c97-12fb-4f0d-ae37-e8f0ffd529a0",
        "cursor": {
          "ref": "11e25a70-dbdf-4a22-be5f-e9541ab76d9a",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "165903b9-bbf8-4335-9139-c1b6838f7c09"
        },
        "item": {
          "id": "4ff22c97-12fb-4f0d-ae37-e8f0ffd529a0",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "8e8895ea-b295-4f77-8161-d5623f5604c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "968448a5-ae87-4845-b12c-de8106f1eae1",
        "cursor": {
          "ref": "5cd6ff21-d792-4918-9e9c-1388d4880669",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "07abb6b9-47c0-4b91-b2c9-46e675a63d77"
        },
        "item": {
          "id": "968448a5-ae87-4845-b12c-de8106f1eae1",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "0407fc31-8a4d-49d2-bae8-5f9679dd2f51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b83ae95d-b181-4e29-8e62-758e386bd924",
        "cursor": {
          "ref": "c24d97f7-337e-4e92-adbf-fb39d55f1c87",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "19b55706-52ad-4f3a-81f4-460d90ff4d46"
        },
        "item": {
          "id": "b83ae95d-b181-4e29-8e62-758e386bd924",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "2a36a351-1992-4b42-a993-c70662c4babe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0a2ae5f-ca52-461f-9a92-e416142198a9",
        "cursor": {
          "ref": "752b9c68-70db-4a3b-98db-76cd5dba1a0f",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "996f017b-8dcb-4463-9480-819004d8e551"
        },
        "item": {
          "id": "b0a2ae5f-ca52-461f-9a92-e416142198a9",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "847d9b6b-041a-4ed3-a118-7943f6c36d86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35596bb0-e45b-4169-b633-8fc42e4fdeb0",
        "cursor": {
          "ref": "2fd17b9f-b9f4-4a0a-a5f0-cafc838a3385",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "e7b5e1f2-6b86-40e7-a9fd-590b4c253012"
        },
        "item": {
          "id": "35596bb0-e45b-4169-b633-8fc42e4fdeb0",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "cdec4f86-5bcb-495d-abda-4707b083d0e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf523dfb-8490-4898-ad20-fac18fd2c900",
        "cursor": {
          "ref": "19154e7f-d0b3-49a5-aba1-a9119368392d",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "d74eb3a8-3570-4845-9af8-ad935557e1f1"
        },
        "item": {
          "id": "bf523dfb-8490-4898-ad20-fac18fd2c900",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "c6905883-3bc7-4428-a20e-756d94699c0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 146,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "19a5ab68-b172-4e28-be3c-3d7127de27cf",
        "cursor": {
          "ref": "dfe70a58-f09c-47b4-b022-d4fa27ec11fa",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "456667c8-3189-4255-9ff6-012cc7221a7c"
        },
        "item": {
          "id": "19a5ab68-b172-4e28-be3c-3d7127de27cf",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "50853708-14b6-4b9b-85bd-cdc69fbd84a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad87563b-2625-4b45-a2ef-932c6b183d7d",
        "cursor": {
          "ref": "3c5c4723-03dc-4a1c-920e-aad18fab4fbc",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "47ee85af-df36-4ef6-8565-fb420f546d53"
        },
        "item": {
          "id": "ad87563b-2625-4b45-a2ef-932c6b183d7d",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "692069de-cf20-42ca-b6c4-d86fe64f5265",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2819e80-9b0e-4a6d-9d7f-b385602a0805",
        "cursor": {
          "ref": "5b56679f-5d80-4242-b9eb-341dbd9bc1b9",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "78028629-f751-4359-b0b2-fcfecacf5848"
        },
        "item": {
          "id": "c2819e80-9b0e-4a6d-9d7f-b385602a0805",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "2f86a7c9-53b1-452b-82f0-d3699b845969",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa151c45-4ce6-4460-9b99-adaa0676821f",
        "cursor": {
          "ref": "c5b8c5b3-8561-45b2-af75-f23fc3406a93",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "7e908a41-26c6-4216-9073-5a1f13719627"
        },
        "item": {
          "id": "fa151c45-4ce6-4460-9b99-adaa0676821f",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "a302cbdf-63e6-4f80-be2a-369c04fb9a83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "229cc11b-ad19-44b8-aa81-2f4c4a5c8aec",
        "cursor": {
          "ref": "45b7255a-ba06-4eba-99cb-f45fc02a5921",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "e96a31b5-e959-40b3-be8e-e354c52fcb92"
        },
        "item": {
          "id": "229cc11b-ad19-44b8-aa81-2f4c4a5c8aec",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "d6680e0f-2af6-48de-a319-23a44ebfa3c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed0c6ee4-842b-431f-9e9c-d50a13f7c220",
        "cursor": {
          "ref": "2882552f-4ad8-4584-9882-279119410205",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "4aee65c3-04fb-4ecb-8a62-2761b0ed44a4"
        },
        "item": {
          "id": "ed0c6ee4-842b-431f-9e9c-d50a13f7c220",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "53440e51-db52-4783-86d2-5610736d0fb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d064b132-c882-4742-9676-69950c427c1d",
        "cursor": {
          "ref": "676c5c5d-29fe-452a-8e09-9e29c86f2027",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "9d939df0-bcea-4ec4-a9aa-acf1959d56fa"
        },
        "item": {
          "id": "d064b132-c882-4742-9676-69950c427c1d",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "4e633e4b-baba-4117-8ee0-ea46d6dc4cdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e0a16ca-dd9f-4283-807c-e12208a9b85e",
        "cursor": {
          "ref": "7602a40b-94b2-4a2d-82b4-af97c300f8b8",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "9bd426cf-7c8a-45bb-b2aa-bc72511fa0bb"
        },
        "item": {
          "id": "3e0a16ca-dd9f-4283-807c-e12208a9b85e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "08ce9511-90fe-4724-af05-e8a21be61428",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1f86c83-959f-4962-8b8c-871d392da4b0",
        "cursor": {
          "ref": "ca47bc26-528d-4fe5-9516-34e82de944a5",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "b83e485b-e226-443e-89c8-d95047032ce1"
        },
        "item": {
          "id": "f1f86c83-959f-4962-8b8c-871d392da4b0",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "b2ff13b9-05db-4274-8d13-74efba39cea7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b96f221-b234-4af9-87d8-08e51c609b1c",
        "cursor": {
          "ref": "710efa8f-1a8d-470e-a2c1-f4bc133f1898",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "3399a3be-f2c5-4d18-9c10-29993fce9b43"
        },
        "item": {
          "id": "5b96f221-b234-4af9-87d8-08e51c609b1c",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "04f36d77-5560-4011-bf3e-7952a9e0b78d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b73d473-93b9-40cc-9196-1235fdcaddb2",
        "cursor": {
          "ref": "340db46d-4107-4dd7-b12a-af4f41dadeb4",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "0c897845-e9cf-4e81-8746-519c9f09e36b"
        },
        "item": {
          "id": "0b73d473-93b9-40cc-9196-1235fdcaddb2",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "185c45f9-2339-46c3-8032-21dee9fe0867",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae5b7427-c124-4901-b0d9-33487f0d2475",
        "cursor": {
          "ref": "c6707b75-da39-41f4-bea8-17594cb0b3fe",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "40b23468-8bae-4416-8e13-4f19d5cfd318"
        },
        "item": {
          "id": "ae5b7427-c124-4901-b0d9-33487f0d2475",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "728fcc53-8d93-48a4-ae54-4fcdda278004",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c4cf5be-0316-4456-ad16-fdc927a3eb02",
        "cursor": {
          "ref": "062c2630-cb37-43e6-b637-53d9f8bb44b6",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "3a9b4468-f9cd-4055-b3c0-6f872121f566"
        },
        "item": {
          "id": "3c4cf5be-0316-4456-ad16-fdc927a3eb02",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "585b6c61-48b4-4abf-a58b-4ad00e9c98d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46bb646d-215a-435c-bbe9-d361e4e88a90",
        "cursor": {
          "ref": "a32f9e6d-6500-417f-90f3-d46f857cceb8",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "ad8386da-e97e-462c-9447-006f6ba7d933"
        },
        "item": {
          "id": "46bb646d-215a-435c-bbe9-d361e4e88a90",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "0ab29941-4c5a-4405-a39f-63ed229ac485",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8e98e0f-b06f-489e-b7eb-2bf4f21ac27d",
        "cursor": {
          "ref": "291c3da9-bd79-4031-abe1-e0491f8404c9",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "677a022a-6c2f-43f0-aa5a-f9a4c4a9068c"
        },
        "item": {
          "id": "f8e98e0f-b06f-489e-b7eb-2bf4f21ac27d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "ca9bb468-c2d7-4b5a-bd81-76161db584c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "171408fd-d4d4-4987-86ef-efaa9a84dd9e",
        "cursor": {
          "ref": "e0eeee1d-e450-495f-b60d-0c2375d3f44f",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "8c517084-d333-4d2d-9732-09a232b2cec1"
        },
        "item": {
          "id": "171408fd-d4d4-4987-86ef-efaa9a84dd9e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "5f27447c-e842-4388-95fc-36161630e795",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4bdc524-1be8-4c9a-8368-5c69871b9a22",
        "cursor": {
          "ref": "b0f88045-8e7a-4682-87ac-745f67ec0737",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "baefbeeb-b692-4395-bcc5-0e4cab527a15"
        },
        "item": {
          "id": "f4bdc524-1be8-4c9a-8368-5c69871b9a22",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "5d2f1730-8da2-4d9a-bd43-5e13d5179937",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 190,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ac2524f-404c-4420-b399-f3d6adfbd023",
        "cursor": {
          "ref": "671a21bd-9b31-4618-b32f-79cc0986019e",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "ff453acc-1523-4d49-a2ee-83a6477a812e"
        },
        "item": {
          "id": "3ac2524f-404c-4420-b399-f3d6adfbd023",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "a4a68bba-93fc-4001-a047-908464801aec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f24a8c8d-5994-449a-99e8-80db2e3f7de3",
        "cursor": {
          "ref": "a7187573-eb24-4032-802c-7faf64c4e6d3",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "a5bf9d7b-3d4b-4d1c-beac-528ce10c5910"
        },
        "item": {
          "id": "f24a8c8d-5994-449a-99e8-80db2e3f7de3",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "ba9c2c46-e61a-45f5-990e-0650e41886a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d36f84f0-684b-4706-840b-f6fda5cc18e2",
        "cursor": {
          "ref": "1e0f794d-8ece-4433-a207-ac0d00fb338b",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "377e39ff-8243-4941-94c1-a4d4135df3a7"
        },
        "item": {
          "id": "d36f84f0-684b-4706-840b-f6fda5cc18e2",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "61444e99-e281-4b2a-b6f8-74bbab5955aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "832cfe7c-76e6-4c2b-84e3-422dc1a4c7d7",
        "cursor": {
          "ref": "36e4e048-a63e-4bae-8e3a-63677da3c212",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "279978be-c319-485c-83f3-51916cac3088"
        },
        "item": {
          "id": "832cfe7c-76e6-4c2b-84e3-422dc1a4c7d7",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "fd2fdaa0-f394-4692-bf7f-130225772cc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "763c3245-1eeb-4a0c-bd5d-a7a69cacc71d",
        "cursor": {
          "ref": "c9077d1e-a451-4e7f-bff5-c6408c2d49aa",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "8f96d3f7-b729-4bcd-b07d-c52e9136dd19"
        },
        "item": {
          "id": "763c3245-1eeb-4a0c-bd5d-a7a69cacc71d",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "3ae2ba77-1227-4949-b9a7-6daeb005132a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49e38a3f-27c6-472d-b8b6-0ffa500ea4f2",
        "cursor": {
          "ref": "23795c5d-6946-49c7-9c29-dcfea8f1120b",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "dcf2fa03-5af0-45b3-a8dd-4f1d4e07b5f8"
        },
        "item": {
          "id": "49e38a3f-27c6-472d-b8b6-0ffa500ea4f2",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "184f0a15-defa-47e6-a735-3f61f979d7fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f6d8100-800a-4ce9-be5a-8f5d0030e387",
        "cursor": {
          "ref": "c2cbf109-4e5e-45cf-a390-c39dc0716a60",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "0d2a6751-d60f-4bab-8ed4-e923e15cc354"
        },
        "item": {
          "id": "3f6d8100-800a-4ce9-be5a-8f5d0030e387",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "fd6a46e9-4c8e-464d-a669-3bba442a2d2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9551b22-a8d1-4dc9-9b09-5889f12f6fb7",
        "cursor": {
          "ref": "cef9793c-778f-4f7f-bbad-3907e205b43f",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "b687c00d-939c-46e8-8537-16867a6b4ddf"
        },
        "item": {
          "id": "f9551b22-a8d1-4dc9-9b09-5889f12f6fb7",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "2cdc24ad-57b1-4bdb-9da2-384dc7149039",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14d3e3d9-149a-4919-9c09-e49fbbceb3ba",
        "cursor": {
          "ref": "9784aa73-8d95-437b-8755-6056ccd25ad2",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "79f6b910-f5c0-46b6-b77c-d8cccc9fac92"
        },
        "item": {
          "id": "14d3e3d9-149a-4919-9c09-e49fbbceb3ba",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "9b2274a7-53da-47b5-b5c7-7a31edcb50c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69166389-2317-48c1-b0aa-c338f3829478",
        "cursor": {
          "ref": "93707e80-8e8d-40ca-8a8c-c97cf57923ed",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "99fc9879-bf87-4bf8-baf1-7bbc63173315"
        },
        "item": {
          "id": "69166389-2317-48c1-b0aa-c338f3829478",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "d7daf130-606f-43c4-8c03-07f7d88ebad9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "362c77ca-3975-43ba-b876-ba38c5d697ec",
        "cursor": {
          "ref": "53273a58-b256-483f-85ee-54ecdad3ba14",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "ac575450-2eed-4a2d-b950-6c8809de46f0"
        },
        "item": {
          "id": "362c77ca-3975-43ba-b876-ba38c5d697ec",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "fdc522ef-039b-4fbf-aafb-e4b23e24d7ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a0a29d6-32d4-4911-bb4b-b18b5eb5c807",
        "cursor": {
          "ref": "6b8a5b71-32f2-49fe-af63-c81f843ed32f",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "c3a2b605-c126-4252-996a-e02fca3e0251"
        },
        "item": {
          "id": "3a0a29d6-32d4-4911-bb4b-b18b5eb5c807",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "15f141e9-34e7-43de-b14b-1c3e7eb63c68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56d3c2a9-59bf-4a5f-9ab8-4322a6760360",
        "cursor": {
          "ref": "ef734536-4932-4205-bd9f-aaa038f3c768",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "3c1dcfc2-1341-441b-9364-7fc3fcce79b8"
        },
        "item": {
          "id": "56d3c2a9-59bf-4a5f-9ab8-4322a6760360",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "50471162-7617-4d30-8c98-68339145fa09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bd198c2-7995-4912-84a1-9e99e1b5ea40",
        "cursor": {
          "ref": "a52dbc61-3cba-4901-886d-c6579332a8ca",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "0af47db5-455a-4555-be00-c17802e585de"
        },
        "item": {
          "id": "3bd198c2-7995-4912-84a1-9e99e1b5ea40",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "fdf0cba7-6c60-4fe7-b517-639c6724a387",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 215,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc8e1f3b-ec6d-453d-abe1-8671d726c451",
        "cursor": {
          "ref": "79c21b77-64df-426c-b33b-12abd2e15fcd",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "198a6d24-e1e4-4ad8-842b-1f056c578530"
        },
        "item": {
          "id": "cc8e1f3b-ec6d-453d-abe1-8671d726c451",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "1c302ce4-3246-46df-82b3-694c637110ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4aaa10cb-44ce-41a2-ae1e-c25bb37d4b82",
        "cursor": {
          "ref": "8afd6726-8ff3-400b-8358-85f4499bf7cb",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "25c30a84-55b0-4438-9ab9-5fcc59b24fb8"
        },
        "item": {
          "id": "4aaa10cb-44ce-41a2-ae1e-c25bb37d4b82",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "85c79ba0-f088-4ffc-ad6c-2a82d480e673",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8e05214-7bfb-45d3-aa97-5c862eeb3bfc",
        "cursor": {
          "ref": "1367a3bc-4b86-4cdd-97e5-6aac0ba50766",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "5debf8c4-da7b-4d6f-90ee-989b56233118"
        },
        "item": {
          "id": "d8e05214-7bfb-45d3-aa97-5c862eeb3bfc",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "1e0819be-9426-43e1-b8be-70fec2256a9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6379e421-0297-4d25-b709-62e6cca2781c",
        "cursor": {
          "ref": "f7739b53-714c-450d-bdf8-0d9441f2fb7b",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "f6104dd1-ab9f-4b7f-990a-1cffb4e60260"
        },
        "item": {
          "id": "6379e421-0297-4d25-b709-62e6cca2781c",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "d1e5356d-5a10-4c69-b897-da4485872224",
          "status": "Created",
          "code": 201,
          "responseTime": 317,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "9eec7bf9-9f17-4100-8a50-22a0c3d6b007",
        "cursor": {
          "ref": "0d23a50a-93e1-4bce-91ce-c10732d21bca",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "bbf380ed-bb86-406a-bf0e-57736062d1f6"
        },
        "item": {
          "id": "9eec7bf9-9f17-4100-8a50-22a0c3d6b007",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "71fc9eaf-a647-40ae-9707-ac3a1e8bcf0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78cd16b9-313f-4986-ba55-cb47cc684eac",
        "cursor": {
          "ref": "4e27424d-ce36-4829-9917-bd59b67f2dc9",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "224786f5-cb32-4f14-9272-3c8cd2e628e9"
        },
        "item": {
          "id": "78cd16b9-313f-4986-ba55-cb47cc684eac",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "6eef0c45-8851-4a54-8674-3008abad414b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddcb7804-51ec-41e8-90d8-eb558e6489d7",
        "cursor": {
          "ref": "180fc09a-aa0d-4e4b-9d1c-e6105d5e6ac4",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "9520e813-e73b-4016-a054-c6e78b792e15"
        },
        "item": {
          "id": "ddcb7804-51ec-41e8-90d8-eb558e6489d7",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "bfe858b6-f555-4f5b-baf8-600b528cf937",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f075a17c-1d93-496f-bc60-ef5749727735",
        "cursor": {
          "ref": "a0ee2ea9-24ce-4234-866c-1168ff80904f",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "e2366098-910b-4f13-81d4-8dc854313860"
        },
        "item": {
          "id": "f075a17c-1d93-496f-bc60-ef5749727735",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "f1ac6236-d591-43a4-8380-2fcdfffce804",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "474f5a66-c254-4d9b-b8bd-78237338298c",
        "cursor": {
          "ref": "95a1a7e3-e64e-4e4d-9c02-22ba32968847",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "b3a409d7-3ae0-4524-87b4-4db9234e9ab0"
        },
        "item": {
          "id": "474f5a66-c254-4d9b-b8bd-78237338298c",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "33c25946-6b02-4739-ba53-6c1508dc24be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1bfc52e-eca0-4980-99e0-e8ee6a60d4df",
        "cursor": {
          "ref": "f41ef0cd-7d30-416e-b79e-88704fdf3469",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "1a550d06-f62a-40ef-9e01-e54265f967aa"
        },
        "item": {
          "id": "a1bfc52e-eca0-4980-99e0-e8ee6a60d4df",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "39d3a625-1b3a-4776-8b79-c51a20d6d519",
          "status": "Created",
          "code": 201,
          "responseTime": 331,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "44d1b69a-0eed-4aa4-86c4-af4d42981abc",
        "cursor": {
          "ref": "2ec9460e-a936-4d76-b1ca-90ce6bc109a0",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "cfbd9c91-b5fe-4fe0-bbbe-67ea8faabb6b"
        },
        "item": {
          "id": "44d1b69a-0eed-4aa4-86c4-af4d42981abc",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "045365ed-3b79-4074-9123-a8f2b60604c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fc05ea0-e0da-44e9-a768-f1c811f0ebdb",
        "cursor": {
          "ref": "80a72107-276f-4f1f-b01a-8ef023b3bfac",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "f5719dfb-ca2e-48bc-9c2c-000b09a5d1ac"
        },
        "item": {
          "id": "1fc05ea0-e0da-44e9-a768-f1c811f0ebdb",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "a0d91898-7766-40db-a7c1-f64f29d28fdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9113a3a-6934-4918-bbbc-3d3efd8a1d5a",
        "cursor": {
          "ref": "5f046e0a-1283-46ab-a2d7-88aa38590c3d",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "74d31114-886c-4f1f-b4a7-27e3c5c36790"
        },
        "item": {
          "id": "c9113a3a-6934-4918-bbbc-3d3efd8a1d5a",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "d44ce6cd-9b4e-4025-a0f4-cedf7b9effd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b5fd9ac-d0cb-48a6-afdc-a0983143b09e",
        "cursor": {
          "ref": "686bce4a-71ee-44d6-b83e-8a1b0f02b48a",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "9827d786-448e-45d6-9903-83d7ca06438c"
        },
        "item": {
          "id": "7b5fd9ac-d0cb-48a6-afdc-a0983143b09e",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "0e5d7921-65e3-4323-aec9-abad83c78f36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7207f58a-74d9-420e-ba15-0d8fc388355b",
        "cursor": {
          "ref": "e21867b1-6440-48e6-b8cd-48741de84b1f",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "c36832da-c7b4-4915-a12f-533f8630e31d"
        },
        "item": {
          "id": "7207f58a-74d9-420e-ba15-0d8fc388355b",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "db29e260-f4bd-4c08-92ee-68ee02d351a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "138f4362-0e57-449c-b11d-d496de78926d",
        "cursor": {
          "ref": "da955271-b763-4cf9-8ddd-837e51fd448d",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "be2e3452-3ae4-4a96-bdd2-d8c8d6418880"
        },
        "item": {
          "id": "138f4362-0e57-449c-b11d-d496de78926d",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "ac7b6077-baa2-4387-a10a-2d72df447041",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6128495c-75da-48ec-b394-32f0f61b5b83",
        "cursor": {
          "ref": "a9d28f0e-6f39-425d-b0d5-a21a85771d34",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "931ca5c2-596c-4f84-acfa-3cbf88bfdd9e"
        },
        "item": {
          "id": "6128495c-75da-48ec-b394-32f0f61b5b83",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "42b8700a-225d-4589-9d4e-6644557dc054",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acc6278c-862d-44e5-a4ce-f5a94aa57e0f",
        "cursor": {
          "ref": "65f6c51c-0d23-4e5f-aed4-ecf1ba5a2eac",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "655451bc-87ad-4bf6-8a78-e8331c2c062c"
        },
        "item": {
          "id": "acc6278c-862d-44e5-a4ce-f5a94aa57e0f",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "22f35105-4001-499a-b4d6-d09183164ac9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39859372-4b42-410d-8bdb-57e77e53ba8d",
        "cursor": {
          "ref": "422ed918-c081-44f3-bff8-e5294ab2f27b",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "28dd2696-922a-4e18-8c38-f6f327daa7fe"
        },
        "item": {
          "id": "39859372-4b42-410d-8bdb-57e77e53ba8d",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "dcaa4717-e0ec-4629-a5fa-7dece9bcd6e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "9a4de562-f789-45c0-9ee5-383d83f8cc1c",
        "cursor": {
          "ref": "70ed61b7-db36-4fc7-a502-31c5908dc5fd",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "4e6ed4c1-e4c6-444e-9948-52d3786c21ca"
        },
        "item": {
          "id": "9a4de562-f789-45c0-9ee5-383d83f8cc1c",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "62813e77-fb34-4494-8306-6951df183e7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "bf70b27d-9cab-4fb9-925c-4397c0334f26",
        "cursor": {
          "ref": "3da28e92-b75f-47f6-99db-ce7a492cbf24",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "f0f04084-4b17-4e38-94f3-16902fa12449"
        },
        "item": {
          "id": "bf70b27d-9cab-4fb9-925c-4397c0334f26",
          "name": "credentials_issue"
        },
        "response": {
          "id": "af8ad947-e2e4-40d6-b41d-9de10a0b94f5",
          "status": "Created",
          "code": 201,
          "responseTime": 380,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "894f7d0b-ab32-410f-8893-40b4deb62998",
        "cursor": {
          "ref": "60655603-d8a6-42c8-bf1f-6509989b3aa7",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "6a397bb6-fc1c-4e9e-869a-f5ff9a821e68"
        },
        "item": {
          "id": "894f7d0b-ab32-410f-8893-40b4deb62998",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "da471390-8e96-4784-b1a5-248a5f4a8af8",
          "status": "Created",
          "code": 201,
          "responseTime": 324,
          "responseSize": 591
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a164cf3-c3ce-415b-a8f6-0199fb245c1d",
        "cursor": {
          "ref": "b67d11fd-cd8e-4775-ac8b-8d1ff5ac32a4",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "6b48529d-3d1b-4357-9de9-f1a64d7e4ea2"
        },
        "item": {
          "id": "3a164cf3-c3ce-415b-a8f6-0199fb245c1d",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "2548b79c-e5d2-4804-9d23-4f701292e6f4",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d99153b-ac9f-48e5-b8b0-55e57ce34237",
        "cursor": {
          "ref": "0ae6b57b-e06e-42bc-9cdd-ce94048081d2",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "1d95cec0-5a4c-47f9-bbac-f79a992a0c75"
        },
        "item": {
          "id": "0d99153b-ac9f-48e5-b8b0-55e57ce34237",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "40694179-0771-4416-b7be-c80b5c48c3a3",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 560
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2cb6ed8-51f1-4c5b-bd5c-ece11f7d4405",
        "cursor": {
          "ref": "cbcdcc1a-c993-43d6-aa7b-046662b34624",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "aecfe1c8-c181-45ab-a866-6150634dc363"
        },
        "item": {
          "id": "d2cb6ed8-51f1-4c5b-bd5c-ece11f7d4405",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "88404001-1c97-4923-a984-33bf9d322f96",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 528
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "631b88cc-86be-4d67-ae6f-b26ef895dae2",
        "cursor": {
          "ref": "9da9fb52-dcdd-4a7a-9afa-f133cd3ff8e8",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "6ba1d519-a55d-42d3-9ab6-b5f3c6d0c6e5"
        },
        "item": {
          "id": "631b88cc-86be-4d67-ae6f-b26ef895dae2",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "fde213f1-9b54-43ab-81f4-a723e67f1420",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e5729aa-f4b0-463a-ada1-cc331af83811",
        "cursor": {
          "ref": "8d045d2c-0b4f-4830-bd95-db4a01bf6f9d",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "c0efa753-6ad7-415c-9f6c-8ba052dcfafc"
        },
        "item": {
          "id": "5e5729aa-f4b0-463a-ada1-cc331af83811",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "480459f6-b00c-43d9-9ed1-7f7479718413",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "5e5729aa-f4b0-463a-ada1-cc331af83811",
        "cursor": {
          "ref": "8d045d2c-0b4f-4830-bd95-db4a01bf6f9d",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "c0efa753-6ad7-415c-9f6c-8ba052dcfafc"
        },
        "item": {
          "id": "5e5729aa-f4b0-463a-ada1-cc331af83811",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "480459f6-b00c-43d9-9ed1-7f7479718413",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "e402768d-a804-4ce5-bea2-4335e4dc6044",
        "cursor": {
          "ref": "7d60a517-ec61-4a17-8bdc-07772c060d1c",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "de6237ac-e21e-4f51-8da3-7a1a388de086"
        },
        "item": {
          "id": "e402768d-a804-4ce5-bea2-4335e4dc6044",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "ebde0bca-eba1-4e61-b416-4467858c59da",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "4c244fa2-6bca-4721-a90f-da3bce55e4d6",
        "cursor": {
          "ref": "f0f6d179-9246-4e76-b249-664cca0bca76",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "743857d0-6533-4279-8e2c-0866f54d868d"
        },
        "item": {
          "id": "4c244fa2-6bca-4721-a90f-da3bce55e4d6",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "df544502-e4a8-4746-beca-fb82f760df70",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "1e88da6c-9780-4fa1-a17c-6600a77b0287",
        "cursor": {
          "ref": "655cfe61-2f6b-4cce-ac6e-65546887a70c",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "a61065ad-338c-4bff-924e-3ef4f955fe8c"
        },
        "item": {
          "id": "1e88da6c-9780-4fa1-a17c-6600a77b0287",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "c1aec580-13fd-443f-9546-145decab40d6",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "013f589d-455e-44ed-8501-e4ddc5f363af",
        "cursor": {
          "ref": "7082425c-a830-4e43-a284-261fcf97bc82",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "f40a877f-2dbc-4e13-95fa-87f7c7c4fca8"
        },
        "item": {
          "id": "013f589d-455e-44ed-8501-e4ddc5f363af",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "97cf379b-add7-4f43-973c-fb367ff0a906",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "4219babf-8501-4c6c-873a-04e3d9e20055",
        "cursor": {
          "ref": "5926e748-0c46-4b84-ba02-e159101c5dae",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "0b73f93b-a9a5-42da-ad9e-43a135b8ddf4"
        },
        "item": {
          "id": "4219babf-8501-4c6c-873a-04e3d9e20055",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "98adfbe7-d9a6-4690-a99e-156abe66db91",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "0fb622ef-38df-4d1f-894f-749d0c5f6e57",
        "cursor": {
          "ref": "44fad98e-4815-4f00-9146-63be3895e3e1",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "7fbf3324-2c96-4448-9d55-859bd2fabd6d"
        },
        "item": {
          "id": "0fb622ef-38df-4d1f-894f-749d0c5f6e57",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "a2706e1b-8305-40b6-9070-76637ac4e3c9",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "863961c6-5218-4cce-9e6c-b631144070ef",
        "cursor": {
          "ref": "e0e1bef8-370f-4540-944f-48f2c35d6f9f",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "6a1caee3-e866-4d87-b817-d4c4d2607ce8"
        },
        "item": {
          "id": "863961c6-5218-4cce-9e6c-b631144070ef",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "94487d2e-6e3a-464a-a640-59101c5bb2da",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "dd6804af-f6ca-42c3-82a3-597403be4bf4",
        "cursor": {
          "ref": "da3be91d-1098-4dec-892a-a236c431b055",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "0659ac99-dba8-4930-bb28-9f19073c0f7e"
        },
        "item": {
          "id": "dd6804af-f6ca-42c3-82a3-597403be4bf4",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "7f96bd07-8c34-4e58-a264-a3cd1fa16610",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "6fb035ae-39ba-411e-b986-20387c064a29",
        "cursor": {
          "ref": "6cac9a1e-3118-4da3-8d01-426601ea3b60",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "372cda10-abc4-4918-a307-69cc3229ec97"
        },
        "item": {
          "id": "6fb035ae-39ba-411e-b986-20387c064a29",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "6265c66a-82ba-472e-b2f6-20f5734f3a24",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "6c7d3bb1-81cd-43f0-8357-6b6dc921f3af",
        "cursor": {
          "ref": "8dce5517-4c58-4f1c-8175-aeec18d43b95",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "51fdd78a-1e03-4372-a3b9-2688a0c4e84c"
        },
        "item": {
          "id": "6c7d3bb1-81cd-43f0-8357-6b6dc921f3af",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "23373b31-1a0e-4277-9410-ea82bb9b6dd8",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "a4c7c1c7-9b9a-4652-819b-b2eddb573b18",
        "cursor": {
          "ref": "8e6aeac8-e1c9-4750-a9e4-59d509de41d9",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "f95bbf81-b124-43e2-b253-bd91e9a12437"
        },
        "item": {
          "id": "a4c7c1c7-9b9a-4652-819b-b2eddb573b18",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "66cda4dd-f824-42bd-acf6-e6d0307c3d5d",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "08c2582b-79e5-4dc6-aad0-d231b41d6b9a",
        "cursor": {
          "ref": "7a18ba0b-740e-465a-b484-b5e9a6b5bdd2",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "b0e293ec-d410-426f-8c78-a061a664a6ab"
        },
        "item": {
          "id": "08c2582b-79e5-4dc6-aad0-d231b41d6b9a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "37ddd57c-8575-41c5-919f-688b746325ba",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "88acb470-23c9-439f-b8df-bc08081ac656",
        "cursor": {
          "ref": "b1a0702f-850d-4247-8142-e98dc4a840a1",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "b47096e2-bcad-4984-8450-d21e9a40de71"
        },
        "item": {
          "id": "88acb470-23c9-439f-b8df-bc08081ac656",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ea9dd651-abe5-4e2d-bd5e-bfa87ce9c2c6",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "0491ee78-a6e9-456a-8c09-f82f914feece",
        "cursor": {
          "ref": "76bb00bf-92de-4d6c-8c6c-7a9f7d4e0cf7",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "28727a88-2f9f-4853-bd55-280f28af3515"
        },
        "item": {
          "id": "0491ee78-a6e9-456a-8c09-f82f914feece",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "9482b7b4-5466-44fc-8b5d-58180120d26f",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "c82151ad-e187-4c46-a688-eeaf9049eb7d",
        "cursor": {
          "ref": "b1d42e02-97ad-4d47-9bd3-4c45ee84d954",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "4e74f4ea-311f-4600-8c3a-4d20d50c4ef5"
        },
        "item": {
          "id": "c82151ad-e187-4c46-a688-eeaf9049eb7d",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "e1ec82ea-b846-4577-8fb1-0cc7f60036ab",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "7b54a435-612c-486e-9280-62a2def4a781",
        "cursor": {
          "ref": "f0b63927-89e6-4647-a1c0-c35a26048cda",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "8a91bf21-25f3-43f0-a067-ab1a658deb4c"
        },
        "item": {
          "id": "7b54a435-612c-486e-9280-62a2def4a781",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "291a9cf3-2970-4689-8c0c-6ee775e49d8d",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "00504f31-28fb-4b39-b81e-a0d7e77b85e3",
        "cursor": {
          "ref": "faf6fbd3-ff25-4319-a33c-794e49b80424",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "88dfdddb-b8ec-495b-a061-f282f12ac15f"
        },
        "item": {
          "id": "00504f31-28fb-4b39-b81e-a0d7e77b85e3",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "71f7fda9-7da7-4957-aeb4-2d98149e5d26",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "51d9627f-38b0-4142-99b9-450e6b5fe1b4",
        "cursor": {
          "ref": "dc258626-fb0a-44da-ad64-9f3132b1b39a",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "0eb740ef-1169-4d7e-aa6b-cceb0032b926"
        },
        "item": {
          "id": "51d9627f-38b0-4142-99b9-450e6b5fe1b4",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "76737805-1d3a-4fb1-b15b-653ca9531c23",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "032e94ec-0754-46fa-be9d-d8c44713c4b7",
        "cursor": {
          "ref": "c076464c-9485-4477-a898-ba60b84564c4",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "a34306c3-6598-4192-b15a-2199bb0f6f68"
        },
        "item": {
          "id": "032e94ec-0754-46fa-be9d-d8c44713c4b7",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "6897b403-b304-4589-8692-65d8f27fc1be",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "e55d1be6-f54c-4dcb-b57f-61132a2d1fcb",
        "cursor": {
          "ref": "e3d8799f-daa4-4e9e-8442-90b1b0f66b09",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "48393c67-4d8c-41e3-83c4-29c94f9683ec"
        },
        "item": {
          "id": "e55d1be6-f54c-4dcb-b57f-61132a2d1fcb",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "379d5116-f58d-4d65-9f30-ad6284968422",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "40845ec5-6868-4df8-a62e-e43cc9f41eb2",
        "cursor": {
          "ref": "dfc8ce4d-8a9e-4ef6-813d-a147935c4821",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "f2f379e9-ed68-40fc-b62e-c57028895383"
        },
        "item": {
          "id": "40845ec5-6868-4df8-a62e-e43cc9f41eb2",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c9157f02-727d-41a2-a8fa-299f186d9490",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "98e72c78-bce2-443e-8edc-e9302ed42cb3",
        "cursor": {
          "ref": "8993ef5f-7af4-4172-b2c9-54fbc46ae790",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "a72bfc07-f491-4614-983a-149e1b160b30"
        },
        "item": {
          "id": "98e72c78-bce2-443e-8edc-e9302ed42cb3",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "2b52c48e-5dd1-428e-ae5f-6d5e87b14761",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "db218588-74e8-4355-b14f-efc36c2e9c8f",
        "cursor": {
          "ref": "5baeef3e-e682-471c-96e2-b3fc0c40960c",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "41fc4798-fa41-4ad1-9077-7123dd9cd72b"
        },
        "item": {
          "id": "db218588-74e8-4355-b14f-efc36c2e9c8f",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "bee1fbba-d31b-4f9f-81ca-9ea3bcfc5e83",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "abb8501c-d837-424d-b1ef-200cc548c9ee",
        "cursor": {
          "ref": "45312caf-e9e1-4ebd-87c7-03bbad46fb3e",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "124a5554-9f14-49fc-854b-66ac02942c31"
        },
        "item": {
          "id": "abb8501c-d837-424d-b1ef-200cc548c9ee",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "75710ca1-32b9-4372-96de-49615dda5bcc",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "b1572568-8baa-4f28-9e68-8c1060e36ce5",
        "cursor": {
          "ref": "a080ab48-5074-470b-ae9b-c1812c5b5dec",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "66e7cdd4-ab9f-4d85-a959-98e00f205c40"
        },
        "item": {
          "id": "b1572568-8baa-4f28-9e68-8c1060e36ce5",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "067cb264-fb56-4c12-9b72-a334e7c74990",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "ed0f0303-6bc4-4d95-9b60-d979f318ac70",
        "cursor": {
          "ref": "1f356ffe-02fb-47e6-b4a9-e3e967f36748",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "6dfd975a-ab83-4923-9af8-ff95168ddbea"
        },
        "item": {
          "id": "ed0f0303-6bc4-4d95-9b60-d979f318ac70",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "0596b927-6bac-40bc-b1f8-275b12a436c9",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "f8ae3167-5ac7-4ffc-84f8-af5dc6f995e6",
        "cursor": {
          "ref": "bdceede1-0f19-4a51-89a2-d3ac805ed216",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "477ec830-bbbb-47f3-96db-032c141cc58a"
        },
        "item": {
          "id": "f8ae3167-5ac7-4ffc-84f8-af5dc6f995e6",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "af7d71b8-d139-402b-8f69-90bb9e2e12ea",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "fcfa19a9-b364-49ad-b816-5f4ece7b9654",
        "cursor": {
          "ref": "774ac413-8a02-405c-880e-71cf2d42afc4",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "16679420-011b-463b-b2cd-2d3414c30724"
        },
        "item": {
          "id": "fcfa19a9-b364-49ad-b816-5f4ece7b9654",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b03aac73-c4c2-4e8d-af4c-48a383dc554f",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "dddcfac8-9d4b-4f2b-9066-856bcf27b74f",
        "cursor": {
          "ref": "19d3d970-7ef5-44fb-90c7-d584a5857bca",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "a1511f7e-73ae-4afe-9ced-2b2b3efed7cb"
        },
        "item": {
          "id": "dddcfac8-9d4b-4f2b-9066-856bcf27b74f",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "2bfbaf17-055c-4605-b5c6-10ccf8a15f1c",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "81882b07-71ba-4f53-985c-20702ed7cd89",
        "cursor": {
          "ref": "46367153-5120-48da-ae6b-747ce06b182a",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "eee09f22-2199-4b43-8de7-d3efe0c15ef4"
        },
        "item": {
          "id": "81882b07-71ba-4f53-985c-20702ed7cd89",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "1e7492f6-8abe-4096-a680-854f5f4cd19b",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "531e4d63-8e77-4a1d-bb4b-fa3adc374bb7",
        "cursor": {
          "ref": "ab38e848-9a0b-46b6-8dc0-16f882ab9ef9",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "2d8303aa-3329-4495-938b-17bbeecd37fc"
        },
        "item": {
          "id": "531e4d63-8e77-4a1d-bb4b-fa3adc374bb7",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "181e57f3-13c8-496d-b5e9-6aadc4b0d097",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "eb0f56e7-e64e-481a-9fec-7fb79a6a9c6e",
        "cursor": {
          "ref": "3ebc23fb-f745-4cfc-845d-6a4135544d16",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "83cf6f47-bb10-49b3-a00b-58fa43b510f6"
        },
        "item": {
          "id": "eb0f56e7-e64e-481a-9fec-7fb79a6a9c6e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f7c0c317-d10e-4d62-a7e3-b56a7a2f272c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "493ccd7d-1eb3-4ebc-9a83-7e5340d67a3c",
        "cursor": {
          "ref": "54385c4b-d088-4ab9-a23b-ad60bb8b58ab",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "6621689f-2529-4e7a-9a9b-93065758c8bb"
        },
        "item": {
          "id": "493ccd7d-1eb3-4ebc-9a83-7e5340d67a3c",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "c34465e0-8e90-48af-92b3-a65cefe16447",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 11,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0b1ba19-473d-4d34-b664-949791d73da7",
        "cursor": {
          "ref": "ad286aba-c389-44d1-9deb-bf6141cf05ef",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "742e608d-623d-4703-82e2-e4b9571f8aea"
        },
        "item": {
          "id": "e0b1ba19-473d-4d34-b664-949791d73da7",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "1e6d05e1-14d6-4c93-958e-6e3b40edba19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0b1ba19-473d-4d34-b664-949791d73da7",
        "cursor": {
          "ref": "ad286aba-c389-44d1-9deb-bf6141cf05ef",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "742e608d-623d-4703-82e2-e4b9571f8aea"
        },
        "item": {
          "id": "e0b1ba19-473d-4d34-b664-949791d73da7",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "1e6d05e1-14d6-4c93-958e-6e3b40edba19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad2da6f3-f2e7-464f-ae35-5c6136e283f1",
        "cursor": {
          "ref": "1a1ea033-66e1-4674-871e-d56023eb128e",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "d4bcdf0d-d0ee-4626-a070-f5f7e37e7d87"
        },
        "item": {
          "id": "ad2da6f3-f2e7-464f-ae35-5c6136e283f1",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "0af4f000-fce5-41ac-b6f0-6517d5c9a23e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d27ebb6b-21d2-4572-bbc5-04927a9f8f5b",
        "cursor": {
          "ref": "bbad38a2-9b6f-496f-b497-69620601b50a",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "edfa732a-3974-4d72-a0a0-4e5a5fc48033"
        },
        "item": {
          "id": "d27ebb6b-21d2-4572-bbc5-04927a9f8f5b",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "9b311dca-3665-491a-b482-64f3f963f3a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86affd14-5507-4162-9eac-757e3739cae7",
        "cursor": {
          "ref": "909e54ac-3a2d-437e-860f-b5ad79fdfec0",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "2dc2b9c0-28ca-4cc9-beee-ef3b1b565d9d"
        },
        "item": {
          "id": "86affd14-5507-4162-9eac-757e3739cae7",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "c72ab8d9-48ef-48c3-a59a-a061a5027e3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17252345-8efe-4853-bd99-000b343c988b",
        "cursor": {
          "ref": "bcfcb70f-998f-41eb-b5ac-3c372c5adf47",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "9377e09a-237c-4514-960c-9feb6b51246b"
        },
        "item": {
          "id": "17252345-8efe-4853-bd99-000b343c988b",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "ae89bcd1-f7e2-4e62-8f6d-102f530339b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "732226a7-9b3a-4af5-ab1a-3f0981f49a94",
        "cursor": {
          "ref": "169c5a9e-c15e-4c36-bc21-5ad51e15e2b0",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "1ee94add-56bb-4a89-86b1-66cc9474a247"
        },
        "item": {
          "id": "732226a7-9b3a-4af5-ab1a-3f0981f49a94",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "73ec3ddb-3853-4823-b01b-7ea3b536bfde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a336a448-7d77-4476-8364-e2646171e414",
        "cursor": {
          "ref": "9f2d89cb-fe05-45da-9e1d-5600a3c76131",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "b9d6c6fb-b4b5-4edd-8c15-0871e41550e8"
        },
        "item": {
          "id": "a336a448-7d77-4476-8364-e2646171e414",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "fec068d7-4f5a-4f98-bf53-fb5119052a6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 703,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06c5668c-4463-4ebb-82e2-2a6835a268e6",
        "cursor": {
          "ref": "c5410d35-8789-4104-af65-f51ecb8608da",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "a5b6ef20-7463-43ee-9952-f97b3adab5b0"
        },
        "item": {
          "id": "06c5668c-4463-4ebb-82e2-2a6835a268e6",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "5c77e3cf-c305-4a6a-9cdb-deda25216398",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "149a7fd8-07e0-4a82-a023-27718fc5cd4d",
        "cursor": {
          "ref": "27f30531-263b-41c8-8e48-e4618d6adeb2",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "7e7478c0-49b3-4819-9cb7-4c675a14a633"
        },
        "item": {
          "id": "149a7fd8-07e0-4a82-a023-27718fc5cd4d",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "3a34a1fb-2a90-417e-ad4c-5310d70968f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42e643a1-0a2e-4408-ba47-b55ca0e720e0",
        "cursor": {
          "ref": "92dcafe0-56c5-4378-8511-db9d49a0a51d",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "f6929002-e632-4c1b-894c-600a03b976d0"
        },
        "item": {
          "id": "42e643a1-0a2e-4408-ba47-b55ca0e720e0",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "137a1ff0-8c83-4552-af29-2f083c68fccb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cadc1bc2-44ad-4fb2-b12d-6495056e98ac",
        "cursor": {
          "ref": "b7062623-2402-46d3-b494-42deae2fe6ee",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "1396be13-7076-404f-a78f-3cdcb75906a8"
        },
        "item": {
          "id": "cadc1bc2-44ad-4fb2-b12d-6495056e98ac",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "d75ff383-f5dc-40c7-a866-9caaedc878cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77205795-deda-4180-84c7-9c5267a4737a",
        "cursor": {
          "ref": "b95a5e34-32af-4173-8418-43d4e86a81ac",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "21979cd0-a05a-494b-bbf8-d6d631b18182"
        },
        "item": {
          "id": "77205795-deda-4180-84c7-9c5267a4737a",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "00f78ede-686d-4d1e-9003-697ca161b3c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ac76414-ca88-4767-97bf-58ecb5d55b6d",
        "cursor": {
          "ref": "52391ec0-c671-4715-9e49-1c18d082d967",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "16ba430c-8540-4bc5-8875-4bc94f9df0a5"
        },
        "item": {
          "id": "3ac76414-ca88-4767-97bf-58ecb5d55b6d",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "753a2e12-fb57-4693-b1d1-a0ec2a01ec46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ca2058b-45a8-44cc-8ed4-9ee2e579baa4",
        "cursor": {
          "ref": "b7f80a09-6ce8-4429-bf97-859673cd4bb9",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "e31ffaff-4521-4890-a87c-d56d4f581891"
        },
        "item": {
          "id": "8ca2058b-45a8-44cc-8ed4-9ee2e579baa4",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "44260c83-28d2-46d8-aa93-9a6e08fc820e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b41597eb-2c80-4a58-a325-311c3c7f3bdd",
        "cursor": {
          "ref": "e0b5433e-d9a3-461d-9324-eb4e243be784",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "74f21471-51e4-474a-a518-d4524ce76681"
        },
        "item": {
          "id": "b41597eb-2c80-4a58-a325-311c3c7f3bdd",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "ec64fa02-dbce-4bed-bfa7-0ed9644fae7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4ca8238-dbc1-42d2-a85d-7babacf68ba5",
        "cursor": {
          "ref": "c35b2ff0-18e4-4466-bc3d-c64cbc254cf6",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "baf3e0bc-1c91-4b3f-bc55-9e99724ec8c9"
        },
        "item": {
          "id": "c4ca8238-dbc1-42d2-a85d-7babacf68ba5",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "7a833333-5c2a-48fd-b9d3-f326c0d49928",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f96d4684-b2f0-4dbc-ba5d-7a5bb6b47ed4",
        "cursor": {
          "ref": "cb2ed19d-9eff-46b9-ba18-3abc2f43dc31",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "b5c44b90-e31c-4bcf-80cc-95439fed3db7"
        },
        "item": {
          "id": "f96d4684-b2f0-4dbc-ba5d-7a5bb6b47ed4",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "3656fe31-38a5-4678-a8c5-951fddc22b4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e896387-e748-4e40-9ea2-d4e3d9305bbe",
        "cursor": {
          "ref": "7ff65453-4adb-4e7d-838f-c0c5d6ee70e7",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "d2b6e771-6cd6-43f6-b057-cfde76bef068"
        },
        "item": {
          "id": "0e896387-e748-4e40-9ea2-d4e3d9305bbe",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "0bd6cde5-6d82-489f-ae9f-9a14df216585",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 287,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "456e4634-b983-485e-84c4-ada3acb2c2a2",
        "cursor": {
          "ref": "73d05457-552e-4594-82fa-43ef492db102",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "cba502a6-49a8-4e55-9673-c686642c878b"
        },
        "item": {
          "id": "456e4634-b983-485e-84c4-ada3acb2c2a2",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "2e2d3abb-fb1a-42f8-962a-f769f6ed6055",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 172,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c3a899a-52de-4ed0-b4ce-419fa30d2925",
        "cursor": {
          "ref": "2e1946c9-c0d4-4b80-ac92-39fb4fe26bbf",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "b3ef0e64-1958-4edc-8be8-ee195e0e937a"
        },
        "item": {
          "id": "2c3a899a-52de-4ed0-b4ce-419fa30d2925",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "cf8097bc-2f3b-4d4b-88e4-211f05e36620",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 177,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2296715-9b20-4715-bf28-a8110e52d987",
        "cursor": {
          "ref": "a5b19201-fcb1-41ad-a3e1-cf4f43bacb07",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "00a65a88-07cd-492d-b536-a65c702458ae"
        },
        "item": {
          "id": "e2296715-9b20-4715-bf28-a8110e52d987",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "c8e4e825-c759-4853-a9fc-8a140f1a147f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 173,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "163773ca-a713-4d97-80ae-7fe4c8ebbc28",
        "cursor": {
          "ref": "2ea3a761-b039-4514-9439-dcb723f6cca2",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "e48abf5a-2356-4127-aee3-fe5137b92c2b"
        },
        "item": {
          "id": "163773ca-a713-4d97-80ae-7fe4c8ebbc28",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "6522b5d9-fa34-431a-a80f-f9c32d299e46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 188,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec38b67e-c534-49af-9e89-88ab8698d736",
        "cursor": {
          "ref": "c65394b2-86b9-4724-bfac-dee74436107a",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "10c9c4d5-09d5-4090-bc96-6451b1e190d8"
        },
        "item": {
          "id": "ec38b67e-c534-49af-9e89-88ab8698d736",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "91ee7fc2-85f4-4b9e-beab-427922e1fe71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 190,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1c40e6d-4c31-4343-bbdf-8ab3a2f3446b",
        "cursor": {
          "ref": "ca2d848a-46cb-4eb6-b218-f3f4f1d51d7e",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "a66a8bd4-e858-48eb-8167-ffaa65955c6c"
        },
        "item": {
          "id": "a1c40e6d-4c31-4343-bbdf-8ab3a2f3446b",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "2d22ed66-6205-4b15-a16e-adeea3b74bd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ea44024-255e-405d-b927-f63c986f4214",
        "cursor": {
          "ref": "a43d3e37-cb8e-4670-82d1-5e0f5b374197",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "fea01fa8-0460-4b5e-9b1f-50b2cd9c54bb"
        },
        "item": {
          "id": "6ea44024-255e-405d-b927-f63c986f4214",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "79f0729d-f7e2-42d7-a9b4-eda921da6572",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8489754e-4887-4e86-bdc9-9830f3cbf5af",
        "cursor": {
          "ref": "baf6b1ec-a66f-4f64-8696-5a0d18cdf3ba",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "a9b332e4-dbe8-4f7c-8758-3654e3b58d96"
        },
        "item": {
          "id": "8489754e-4887-4e86-bdc9-9830f3cbf5af",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "6909fa06-e6e6-44f4-8cdf-99d76350ee19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 184,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d4265a2-c71d-4dd2-b624-192068253e84",
        "cursor": {
          "ref": "559edf63-1405-4b2a-97b0-444cdb88ab3d",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "35f024bf-7b2b-4ee1-a619-b3c06be11689"
        },
        "item": {
          "id": "8d4265a2-c71d-4dd2-b624-192068253e84",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "bfcbbc64-e64b-47b5-be89-2963c5be0670",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70096ac5-de3f-4e03-9c87-b4d1517d4414",
        "cursor": {
          "ref": "f4a6ce78-2d10-496b-b920-f71ec654d1bc",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "9006abe5-3497-4650-809b-608a1772d47e"
        },
        "item": {
          "id": "70096ac5-de3f-4e03-9c87-b4d1517d4414",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "0605345a-ce10-4d9f-bd8a-9b662503d9b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0361c18f-b91f-453c-9189-7949c6a69cd1",
        "cursor": {
          "ref": "f84ca77f-f913-4eea-bb88-e12a5bd4edea",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "1d73674e-12dd-48f3-bca8-272fb2535d6c"
        },
        "item": {
          "id": "0361c18f-b91f-453c-9189-7949c6a69cd1",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "66b9d3fd-b594-4020-9448-a4f4c87aea41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 184,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41f4d650-b9e9-4313-814d-819bf52d88ff",
        "cursor": {
          "ref": "1c782d57-c199-4a6a-8efb-558f50f15fed",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "20f4479b-332d-413b-a07c-97f89114abdf"
        },
        "item": {
          "id": "41f4d650-b9e9-4313-814d-819bf52d88ff",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "e4de41f7-9aab-4aa6-93c4-956b769bba25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3779974e-b451-48ba-b6f7-12457816ad2a",
        "cursor": {
          "ref": "c41d73b5-e036-4f69-9cb2-6c60c2fb7c5e",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "3930bbd0-7356-48e9-ab65-c99a26df33ba"
        },
        "item": {
          "id": "3779974e-b451-48ba-b6f7-12457816ad2a",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "6a0e1e12-6245-428a-ad6c-2efe64f4fae8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4d7713b-7fbc-49b0-bea3-d13b1badbc62",
        "cursor": {
          "ref": "5dc952b4-782c-4e2c-8c4f-852885f14fbb",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "2ef5af7a-0366-4004-a76f-a39fdc801bbd"
        },
        "item": {
          "id": "a4d7713b-7fbc-49b0-bea3-d13b1badbc62",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "9cc7b618-0005-4c35-af5b-91a7758a6391",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70c6e8dd-14af-4cc3-8679-07ab0cbfcf36",
        "cursor": {
          "ref": "f1240712-fe08-4f3e-839b-2f4738ab450a",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "995f7509-99d5-479a-8fae-e8b7a399562d"
        },
        "item": {
          "id": "70c6e8dd-14af-4cc3-8679-07ab0cbfcf36",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "15d431c4-afd6-4ed8-b0e9-1dd3a2de6051",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 194,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e458416-7eb6-48ba-aef3-c37f9f186be7",
        "cursor": {
          "ref": "b2426074-4ea6-4d9d-ac99-a77c02b24b63",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "05d45b6d-720f-47b4-bbd9-fe54b39b1155"
        },
        "item": {
          "id": "8e458416-7eb6-48ba-aef3-c37f9f186be7",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "da28ef53-de64-465e-a3fe-c4fa11413cb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c35d4a3b-a367-4772-ad43-7725aa1521fd",
        "cursor": {
          "ref": "683a8ee6-686e-469c-956d-71d9bdb1fbcf",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "4db72649-56e7-479d-b0fb-d28d148565c8"
        },
        "item": {
          "id": "c35d4a3b-a367-4772-ad43-7725aa1521fd",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "75873203-3ad8-4480-8d1c-ea622b961459",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 189,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fbc23d4-75a8-45c2-a670-9c31cdf892b4",
        "cursor": {
          "ref": "72f94566-3cfa-4293-938a-9827fb2b0948",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "bb867f1c-993a-47a2-8cc3-bbc508684e76"
        },
        "item": {
          "id": "7fbc23d4-75a8-45c2-a670-9c31cdf892b4",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "f1d3f147-df95-4963-8c58-656c8fcc6014",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 175,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29ae39bc-f177-4744-a119-0b9c48b23c0e",
        "cursor": {
          "ref": "b1f7a6ef-2f05-4c8d-a870-a1048331e7c2",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "ee2f3268-fec9-404e-b53e-5faf22ba386d"
        },
        "item": {
          "id": "29ae39bc-f177-4744-a119-0b9c48b23c0e",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "bf045615-9632-4f68-abec-3b617b385534",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 206,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91637a44-f3e4-4592-9c70-98fc68f23d18",
        "cursor": {
          "ref": "8f37cb92-cf92-47b9-804a-184d8fae4451",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "ec3dde49-2613-4f90-bccb-183196cda4d8"
        },
        "item": {
          "id": "91637a44-f3e4-4592-9c70-98fc68f23d18",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "5a74e4cb-58dd-48e4-8eb0-2f17a67d3902",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 193,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1aacd75-6798-431f-ba3b-e3253732862a",
        "cursor": {
          "ref": "8e9cfde0-3976-4e6d-9c2c-cb6b2d9deca1",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "09bba49e-da9d-40fd-abf3-cc70bf3c0750"
        },
        "item": {
          "id": "c1aacd75-6798-431f-ba3b-e3253732862a",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "823ebf3a-32c7-4158-a5d1-61fd6eb6d424",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 183,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45fa0c8a-c8be-4649-bd05-a766e0755177",
        "cursor": {
          "ref": "328ac3d3-5677-46c5-95db-1b0c25487c2e",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "1333396a-459f-496e-a9fe-19e04141a18e"
        },
        "item": {
          "id": "45fa0c8a-c8be-4649-bd05-a766e0755177",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "e85ec6cf-a72f-4a0e-90b4-f3e65d33565c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 191,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80f04f91-31b7-488b-8e70-41a8916a4d79",
        "cursor": {
          "ref": "9d980fed-4f7b-4760-96ba-8dfa8d63d8ba",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "779305da-fd69-4470-9d9f-94091d3ba5e7"
        },
        "item": {
          "id": "80f04f91-31b7-488b-8e70-41a8916a4d79",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "dadd55c1-a8db-45cb-941e-2558b5c8fa7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 181,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "def01cbe-5ba5-4139-b534-69609073e84c",
        "cursor": {
          "ref": "3fc12555-9bf4-4f1e-a838-207caa9585da",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "af1692e2-f397-46d0-acf8-5b307ef9fef0"
        },
        "item": {
          "id": "def01cbe-5ba5-4139-b534-69609073e84c",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "56dc730f-fae7-4876-8f36-fe9d45074637",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 185,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c5bc950-bdeb-4ee0-b9d2-e8b7547d8748",
        "cursor": {
          "ref": "1ef727de-cab3-4ff0-abc8-800f202a59ae",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "29d7866c-850b-4ffc-8dfb-0d3e9687ebe1"
        },
        "item": {
          "id": "3c5bc950-bdeb-4ee0-b9d2-e8b7547d8748",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "b0175992-8725-4208-83bc-3ca1a7e00b4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 174,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb608b30-fa5a-485d-b5ae-1c49691e0906",
        "cursor": {
          "ref": "9b175c8b-54e0-493e-985f-05e48cb70251",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "30b01837-cca5-466e-bf7a-28ca3297cb99"
        },
        "item": {
          "id": "cb608b30-fa5a-485d-b5ae-1c49691e0906",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "044987e6-8103-4fea-abae-c4b18fe9c047",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 182,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1355ef53-c469-4ace-830b-5c53ce0206e6",
        "cursor": {
          "ref": "b099d8cd-c523-416e-bd4a-88986190b77c",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "3ca27d16-de39-4f1a-bb88-8e936ed1ae0f"
        },
        "item": {
          "id": "1355ef53-c469-4ace-830b-5c53ce0206e6",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "c833e199-7eeb-4eaa-ac00-31562ba7d71a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 173,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f8fe541-d685-4012-a0f3-2edcfc8dd39d",
        "cursor": {
          "ref": "93615d5d-bd31-41a4-a325-9e9e011bfa2e",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "3b927b32-2c1b-4881-94d4-d16476105601"
        },
        "item": {
          "id": "1f8fe541-d685-4012-a0f3-2edcfc8dd39d",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "34e7b45b-f647-41df-b7da-4cfbb4ad665c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 183,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9665b05-7374-400f-ae36-8850490b614c",
        "cursor": {
          "ref": "19b19fbe-a680-4519-b88b-a71454e14a6c",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "2f3dbf3c-307b-4bf6-b569-59ece47bd77d"
        },
        "item": {
          "id": "c9665b05-7374-400f-ae36-8850490b614c",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "8d522035-bd13-4ef0-a8e4-f6cfb4ae0f63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 186,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16f41ec3-d47c-4f44-aff4-9a4dceb798b9",
        "cursor": {
          "ref": "2dbb0f2f-a210-4d2a-8374-3a04c2dd8161",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "1a2958d9-b7d3-4f8a-b6df-3ba05dfb69c5"
        },
        "item": {
          "id": "16f41ec3-d47c-4f44-aff4-9a4dceb798b9",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "c20ade3b-109f-4301-a30c-c14b5ead471f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 200,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "912ca11b-7ef2-4559-b4eb-001b058354f3",
        "cursor": {
          "ref": "15363481-cebd-43da-866b-5e13163a3145",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "72916f58-3f0f-4188-8b5a-798187fa6f75"
        },
        "item": {
          "id": "912ca11b-7ef2-4559-b4eb-001b058354f3",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "79b84d54-9826-4047-b7e2-9918bf59e904",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 184,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "453060aa-a93d-44de-a065-ec4753570ce9",
        "cursor": {
          "ref": "3853351e-5f9a-4f58-a7e7-adfe1501da74",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "15334b9d-e723-4515-bb9b-859514a1b995"
        },
        "item": {
          "id": "453060aa-a93d-44de-a065-ec4753570ce9",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "46fe5258-d17d-488d-8af4-82c8e4f574c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 191,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c44ee813-6992-42a5-8c52-e654165e8157",
        "cursor": {
          "ref": "e159a6f9-1f73-4867-a701-d00f5deba8bc",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "42f25dd0-d6b3-48b8-9b36-fa006097680f"
        },
        "item": {
          "id": "c44ee813-6992-42a5-8c52-e654165e8157",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "058c6be8-2204-4ead-bdde-dd314f2829e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 182,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0182544-1be8-419a-9aec-000de33fef4c",
        "cursor": {
          "ref": "c4b2c188-6c01-4d84-9447-f27f1a183a18",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "85b36357-9b9e-4778-a75c-c2ef8b3c3d61"
        },
        "item": {
          "id": "c0182544-1be8-419a-9aec-000de33fef4c",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "4bd3c9bd-3c2e-413f-bf87-4c8569f2c0e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 192,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "845fff88-f02c-43dc-9059-4ca619045f23",
        "cursor": {
          "ref": "8a162ad6-7f5c-49bc-98e9-87d8f1d5226f",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "4d52aa81-533e-4125-9870-f8d4660a6260"
        },
        "item": {
          "id": "845fff88-f02c-43dc-9059-4ca619045f23",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "c3c73bac-b082-4a8e-b552-783809a44708",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 172,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c431ccd7-b891-439c-89be-2644a386ac97",
        "cursor": {
          "ref": "93f317b1-9d59-47e1-940c-3b5e4571d969",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "867933d3-3fc4-40cf-a801-8989ebb6a78b"
        },
        "item": {
          "id": "c431ccd7-b891-439c-89be-2644a386ac97",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "1ab9fcc0-0161-40a6-9b7f-7826c4f047fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c79757e4-ca79-46ab-b5c6-5a0dd9b2b455",
        "cursor": {
          "ref": "b8932e28-6ce9-4729-ba1b-615275408039",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "7edb7b1d-bb46-4454-97b5-3ba75ba9a2f1"
        },
        "item": {
          "id": "c79757e4-ca79-46ab-b5c6-5a0dd9b2b455",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "ee066a86-d49c-473f-b308-620773ca1fef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93e289fd-1654-4ea2-bedc-2c49f12c487b",
        "cursor": {
          "ref": "83c7c0ac-bd90-47a3-9a94-9851d00088f2",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "bc667956-2193-420a-9401-e896de137c98"
        },
        "item": {
          "id": "93e289fd-1654-4ea2-bedc-2c49f12c487b",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "a2570dab-5077-4f8c-909c-6a82f4d3b01e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f77526ab-6477-42b3-a2cc-1d78339b6aad",
        "cursor": {
          "ref": "f8c9a32b-4885-478f-9dd2-5dbee88b986f",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "1116549b-5dba-4743-92ae-0c2d1a5cf252"
        },
        "item": {
          "id": "f77526ab-6477-42b3-a2cc-1d78339b6aad",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "07941ed3-ec32-4f14-aca3-9469cb96e0ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 238,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19e3d299-5af3-469b-8c6d-56020bf35792",
        "cursor": {
          "ref": "653a19f1-1b4e-465e-ae14-34f560bb8cb6",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "590d9ca1-afc5-4341-8c69-9551b918a51e"
        },
        "item": {
          "id": "19e3d299-5af3-469b-8c6d-56020bf35792",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "6f615e2d-0a71-48dd-bca9-c2aae3c58ddf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d053d67a-06ab-4e91-842b-45ebba3c60d4",
        "cursor": {
          "ref": "faad6a92-0719-4ff5-8d8c-a4a0cd09e57d",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "3b279658-9048-44f4-9a8e-dbf87905db7f"
        },
        "item": {
          "id": "d053d67a-06ab-4e91-842b-45ebba3c60d4",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "bae6649c-496d-4450-9bbc-60e5b86b59a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b6925d7-764a-4fe9-9b59-234a1673bf38",
        "cursor": {
          "ref": "b0504b0d-dd99-456b-82ae-922ce71c5e68",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "5a6b656c-1886-49e8-a297-d0fed32f73a4"
        },
        "item": {
          "id": "0b6925d7-764a-4fe9-9b59-234a1673bf38",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "c416cb16-debf-4b35-8bc1-81d566f445da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a5e1374-9a1e-4f6c-b8e4-16b88215d048",
        "cursor": {
          "ref": "4bd49f7b-aeed-4389-b172-4a649c32c0d0",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "ac9824cc-56c6-45ff-b475-a5fab249bc3c"
        },
        "item": {
          "id": "6a5e1374-9a1e-4f6c-b8e4-16b88215d048",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "e8b00df5-4138-4b73-ba75-c4d2b9e9c30f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d349fc0-b3e2-44c7-b76c-f7e7d24d9124",
        "cursor": {
          "ref": "24bfe39d-5d73-42ce-8dad-46acc2f6d728",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "216f75c2-aa67-4133-ace8-4f6f8ad4b8d6"
        },
        "item": {
          "id": "0d349fc0-b3e2-44c7-b76c-f7e7d24d9124",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "605a93b6-ce93-452d-b6a5-b56abc87b080",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 193,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "651e14c8-55f2-48e3-9792-2e358f50d5ec",
        "cursor": {
          "ref": "1afd7c47-0d23-4ef6-af73-f8c093d9cca2",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "d453c774-baa7-4132-8de1-02a0ae846605"
        },
        "item": {
          "id": "651e14c8-55f2-48e3-9792-2e358f50d5ec",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "ab02cf54-c78f-42f9-85db-73a0374b6008",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a42484fb-55d9-432f-9c8d-b401beaf5276",
        "cursor": {
          "ref": "7f71f203-3cb4-4f0d-b68c-b5a17e426152",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "bdb8543a-c48e-4a51-b067-49031979855e"
        },
        "item": {
          "id": "a42484fb-55d9-432f-9c8d-b401beaf5276",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "2bfbc92d-24b5-414f-b749-d7a3593a70a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2599a480-c78e-448d-add4-6e3aa15d243d",
        "cursor": {
          "ref": "6ae20b57-fc98-4339-80d6-becca0db3ccb",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "393fe9c5-7585-48eb-a468-083aff5f33fc"
        },
        "item": {
          "id": "2599a480-c78e-448d-add4-6e3aa15d243d",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "659e8f7c-7f06-426c-863d-5af733b312b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf6ca806-2809-4b66-bdc7-c1b79a760beb",
        "cursor": {
          "ref": "2d420703-f94f-44f1-b525-5e35f6ea17a4",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "14c4da10-b68d-4427-9bfc-6c9749873d52"
        },
        "item": {
          "id": "cf6ca806-2809-4b66-bdc7-c1b79a760beb",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "a45ad88c-1ade-4b15-98a7-dda61c0ea8e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f34293a1-8151-44ec-8407-9a8899fcb744",
        "cursor": {
          "ref": "24c0510e-4938-46c6-bea5-0f2d02cea5e8",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "f73b6c4b-3aeb-4681-8278-04743c028f8a"
        },
        "item": {
          "id": "f34293a1-8151-44ec-8407-9a8899fcb744",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "1a2bb3f5-5386-4f1b-beaf-727c98861268",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e892267-5341-4d9e-91a4-fce2b2bd9f75",
        "cursor": {
          "ref": "3d5075c7-1e4f-43fd-b5e4-f8c088507f37",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "757e2be9-6b32-44e0-8b9c-f76b112ce94f"
        },
        "item": {
          "id": "6e892267-5341-4d9e-91a4-fce2b2bd9f75",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "48819225-d1c9-4240-a809-686937757bd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "856686a4-6d86-41b2-8ee9-22c89a02437c",
        "cursor": {
          "ref": "2da892c8-9cec-4f66-94c6-ba7f1442d847",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "9f8b7816-fc18-4bae-9bf5-1cf57db29234"
        },
        "item": {
          "id": "856686a4-6d86-41b2-8ee9-22c89a02437c",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "0851df98-c1d7-4b15-ab6f-ce77f63eef70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70b3bf20-8f53-4eae-9927-7a630d4dbf25",
        "cursor": {
          "ref": "1848d1a6-f4fa-4baa-829e-dc0a61a6aeb1",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "5c3b0200-3aba-45e0-a3e1-cf026059b3ed"
        },
        "item": {
          "id": "70b3bf20-8f53-4eae-9927-7a630d4dbf25",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "f0f53c48-a5c2-4bea-a4b8-d42af89563ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85781cd6-a07f-4c44-9991-0354ec469aa0",
        "cursor": {
          "ref": "2742f434-1b2d-4a99-ab60-fd53e16bae15",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "eda3d4b6-4e1d-4615-a21f-6f092262e594"
        },
        "item": {
          "id": "85781cd6-a07f-4c44-9991-0354ec469aa0",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "60a02515-bc80-453f-8160-a694599b9ebf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeeb79cf-9d36-43bc-abce-3071d27f7ae2",
        "cursor": {
          "ref": "5f4fb471-dea5-4466-94f0-fab69b9dae97",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "b2ad3d85-ba4a-4c09-a15c-ca6958cd72b8"
        },
        "item": {
          "id": "aeeb79cf-9d36-43bc-abce-3071d27f7ae2",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "4f4a735e-d8a4-4b7b-a859-c792d88970d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d57656e-d282-4553-a2d4-b0280598569f",
        "cursor": {
          "ref": "ff0c06be-f5fc-46e2-b8b9-5a023ca17058",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "2bd7be89-e004-4bd3-942e-f5b2b3412493"
        },
        "item": {
          "id": "9d57656e-d282-4553-a2d4-b0280598569f",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "e1dac1e7-ae13-4e1c-8f01-05f489727049",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10010d15-fa0d-43f8-80d0-25096d783802",
        "cursor": {
          "ref": "b244b98d-b428-486f-91e0-192eed5d608b",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "b9986973-dfba-4ca0-a2c5-824e277fdb12"
        },
        "item": {
          "id": "10010d15-fa0d-43f8-80d0-25096d783802",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "eaca44a2-4cc4-4440-9b85-53df8566f441",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d906e44-63f8-4b7c-9272-013733e68b5f",
        "cursor": {
          "ref": "e9635f70-de88-4ce4-8d37-d1a77572f0ea",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "9ae44fa7-bba6-4c18-8f28-308bb0499cfd"
        },
        "item": {
          "id": "6d906e44-63f8-4b7c-9272-013733e68b5f",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "0f9c1a9f-8032-4a9c-8006-ce356ededf2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c760fd13-ce6f-478a-bde6-08cbc098701d",
        "cursor": {
          "ref": "656bc8f9-a38c-4853-b087-faf72d759786",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "3c92003a-de30-4713-b202-da4be1c36ce0"
        },
        "item": {
          "id": "c760fd13-ce6f-478a-bde6-08cbc098701d",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "e9a128ee-eb01-48a1-bd66-6dbbcfbc3d22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5876f97b-fdf9-4a8d-aa23-b66f63bce73d",
        "cursor": {
          "ref": "6bc39eb1-b9a0-433b-9708-911f54d6ee4f",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "e27f95fe-3653-4774-b0c7-6677ddae29a9"
        },
        "item": {
          "id": "5876f97b-fdf9-4a8d-aa23-b66f63bce73d",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "7c127b86-8a56-4d01-8d48-fafdeb2b4dd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d2cec85-526b-4644-ba75-9ec8c659d828",
        "cursor": {
          "ref": "7d189744-2a5c-45bb-a032-31ecbf424d6d",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "0b43b638-818f-4904-984a-8a54289eea5a"
        },
        "item": {
          "id": "6d2cec85-526b-4644-ba75-9ec8c659d828",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "38a295f5-c35d-4852-b853-abd30bb3b7a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4679600e-7a4e-42b2-b3c9-59951cd021f5",
        "cursor": {
          "ref": "d03941a3-7bf5-4df6-9c55-ea6a54959a85",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "6071dac1-14a9-4339-ab22-abd1278a08e3"
        },
        "item": {
          "id": "4679600e-7a4e-42b2-b3c9-59951cd021f5",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "3e4a9e07-3aac-472f-a824-9ae65605a58d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0acbf48-10df-4875-8a94-c764859be860",
        "cursor": {
          "ref": "34f1e891-2f3a-427a-b8fb-7780e107d158",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "2d36b01e-6653-4a94-bd4a-539c1cbd3d7f"
        },
        "item": {
          "id": "e0acbf48-10df-4875-8a94-c764859be860",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "51b61dc3-1e73-4329-a71a-5c47b92dccc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "146732da-82e0-4170-9043-2d2b4df7256d",
        "cursor": {
          "ref": "31417ae4-53cf-4bab-90b2-75640d0f2680",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "917eac02-d736-480c-ac8e-93e395f18321"
        },
        "item": {
          "id": "146732da-82e0-4170-9043-2d2b4df7256d",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "28a9e3e3-09f6-4658-a7d8-6ff1b9d6c500",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7370fcf2-ffde-4689-83f5-b325447cf143",
        "cursor": {
          "ref": "744351af-0ed0-4640-ba90-3e85c204c893",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "f45827d7-ad0b-4f89-9999-ef1fcf58e6be"
        },
        "item": {
          "id": "7370fcf2-ffde-4689-83f5-b325447cf143",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "f2cfdb5f-a983-4d5b-b01e-341ef4ae15d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ca8d8c2-2e9e-4885-ba82-d115f8e83cd2",
        "cursor": {
          "ref": "e885b931-be7f-40a1-b335-d9eba131b264",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "4fd215ca-97a3-4180-b1b2-6f554e380ca4"
        },
        "item": {
          "id": "2ca8d8c2-2e9e-4885-ba82-d115f8e83cd2",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "556ac1c8-f0ac-4f60-baa5-70545092f396",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33796816-2619-4478-9641-0d7b90113055",
        "cursor": {
          "ref": "209d6121-166e-4e0d-aa81-2276538fa5cd",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "b68a5c50-21ad-4486-aad6-c7bdf8118669"
        },
        "item": {
          "id": "33796816-2619-4478-9641-0d7b90113055",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "23a1b166-5af1-45a4-b4f9-00ee148b07a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f5b9913-6b16-4789-a8db-730e61415403",
        "cursor": {
          "ref": "3150d8b1-ac3d-45f3-94a7-2e4f589933d6",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "b00d6d0d-297a-42d2-8d28-de9b4f274c50"
        },
        "item": {
          "id": "7f5b9913-6b16-4789-a8db-730e61415403",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "a414e987-1f3d-429c-aa24-fb47bfc6ca94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "222e84f6-4bb6-4a65-aa0e-8558e46473ac",
        "cursor": {
          "ref": "bfa0e769-5a92-4ff8-84dd-3dcb61d0f008",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "3d11e0b5-be26-4833-83ff-a942433f0836"
        },
        "item": {
          "id": "222e84f6-4bb6-4a65-aa0e-8558e46473ac",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "03485948-aa38-4045-afce-d11d41b4f620",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "937f768e-fc37-4035-8a61-26a7a02e3c32",
        "cursor": {
          "ref": "77d91b13-a0e6-401c-83e4-e2338e3f0dda",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "80c6394a-4972-4806-9caa-2fcd57cbdd5b"
        },
        "item": {
          "id": "937f768e-fc37-4035-8a61-26a7a02e3c32",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "9ab8a4b7-718f-4011-82eb-ba4772eec806",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9df82098-9508-4106-b857-d4d6ee0acff3",
        "cursor": {
          "ref": "05e24443-886e-4894-ba04-1546fdf46629",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "cadbdcef-e255-49b4-89d2-dc9e4dc2ed92"
        },
        "item": {
          "id": "9df82098-9508-4106-b857-d4d6ee0acff3",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "a23b42d5-11fc-4434-9718-b9b2158a99e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0c21d83-48e9-4607-9098-1f963537d0cc",
        "cursor": {
          "ref": "636811df-cad8-4024-b583-d07f16e93f3f",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "371e65c7-2fce-4b02-ad21-1876e37b862f"
        },
        "item": {
          "id": "f0c21d83-48e9-4607-9098-1f963537d0cc",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "a989936f-db10-4aaf-8c65-58b27b6d90ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b37ada3a-90a1-42f4-a8ae-ade75b94f298",
        "cursor": {
          "ref": "f6a46e9e-9a33-48c5-a9c4-4e7b276fa813",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "a83e36d8-534e-4345-88a3-c7a8a8f0ef54"
        },
        "item": {
          "id": "b37ada3a-90a1-42f4-a8ae-ade75b94f298",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "4109ba8e-fef3-4640-a8ef-d9c313e021f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2940e7b2-0c37-46a7-ad23-ef5fc813aeb7",
        "cursor": {
          "ref": "ec3a94af-b641-4b70-82a6-fcaae454242f",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "04ed2484-2f24-496a-8668-14575ca0f992"
        },
        "item": {
          "id": "2940e7b2-0c37-46a7-ad23-ef5fc813aeb7",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "c66f79eb-cb8a-4f68-be3c-f9963c019241",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72ef07c8-32a3-425a-8c81-8529e9a15b7f",
        "cursor": {
          "ref": "6eae8766-16cb-49df-a03b-303b2e0dfa19",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "0aff0743-2fb3-43a8-b04b-204f2cead161"
        },
        "item": {
          "id": "72ef07c8-32a3-425a-8c81-8529e9a15b7f",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "d1399189-88c9-439d-b7ef-64d5076c1803",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "989bd410-441a-48ae-aeb6-e09be3def563",
        "cursor": {
          "ref": "d7760b81-5027-402c-8ccc-cf7a88437f8f",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "1c85da67-1f4d-4876-98a6-bcca02776726"
        },
        "item": {
          "id": "989bd410-441a-48ae-aeb6-e09be3def563",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "8025c14b-ba0d-46f9-bdce-13d67522fc54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2abb1b1b-326b-479a-977f-7779ea34f6b0",
        "cursor": {
          "ref": "625046cb-5fce-4a22-ad32-23b60a3157e4",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "1ba35f4c-adf0-40ba-b84d-58b60b82a63f"
        },
        "item": {
          "id": "2abb1b1b-326b-479a-977f-7779ea34f6b0",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "ff62a486-9301-4687-96c0-0e73762e92ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09b53104-f98c-45df-b647-0ab7cd95edbb",
        "cursor": {
          "ref": "8b37be89-d634-423c-8c51-bd84e6f96eef",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "33c04194-4662-46d0-8ff2-5c47ff1a9397"
        },
        "item": {
          "id": "09b53104-f98c-45df-b647-0ab7cd95edbb",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "438dc992-40e5-46e2-b333-c6a811e62008",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97573485-2183-4709-ae61-3d7897aa63d6",
        "cursor": {
          "ref": "5092c55a-f1cb-489c-ad88-1bcc8c675b9c",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "1658f05d-e817-4024-8763-3f8fd2e03949"
        },
        "item": {
          "id": "97573485-2183-4709-ae61-3d7897aa63d6",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "24c7031f-7bc8-4455-af06-7b6d1f61a9ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcb7e0a8-ff75-43a7-ac1f-b826a6eb952b",
        "cursor": {
          "ref": "bb7a1fdf-1e2c-47c9-9592-3a6a60bb2b24",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "7000919d-7ebc-4af3-8368-c775606d791a"
        },
        "item": {
          "id": "bcb7e0a8-ff75-43a7-ac1f-b826a6eb952b",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "02597106-52af-4d1d-86bc-52f92d47f5aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "193a0ae1-1790-4ce3-be05-b0f49b168a6e",
        "cursor": {
          "ref": "91546f54-293c-4d1d-98a6-9d513df1d0b9",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "af626187-77a7-4cfe-87b3-836b157d8964"
        },
        "item": {
          "id": "193a0ae1-1790-4ce3-be05-b0f49b168a6e",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "7188975f-2300-43fb-bec5-fd6974030229",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df69a55e-4eec-40fc-9013-4dfc91d143fd",
        "cursor": {
          "ref": "c91721fe-8290-4f7c-81ce-81ffdd4a2603",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "ae7c8dc2-9aa1-4efc-b773-cca9743ffaa0"
        },
        "item": {
          "id": "df69a55e-4eec-40fc-9013-4dfc91d143fd",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "a5b92e94-a690-47c4-b99e-79d0ffb5fc3d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 27,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01bae8be-0bbe-46f9-8a2a-e4ea18536cb7",
        "cursor": {
          "ref": "5e8db5a4-0874-49af-b85f-5536c97a417b",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "addd42ef-dd64-4241-8650-ec29ae63d8c9"
        },
        "item": {
          "id": "01bae8be-0bbe-46f9-8a2a-e4ea18536cb7",
          "name": "credentials_verify"
        },
        "response": {
          "id": "2d7ae993-c567-41a7-94d9-ee06cb3c7221",
          "status": "OK",
          "code": 200,
          "responseTime": 425,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3785efc-4728-47ec-bac3-4d89674a3781",
        "cursor": {
          "ref": "8a152beb-688c-46d7-9954-99ceb81472bf",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "9e497b45-ad79-450d-817c-290663ca4ecc"
        },
        "item": {
          "id": "a3785efc-4728-47ec-bac3-4d89674a3781",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "c0442aa4-a5c9-49fe-8dfb-d7267f12a66c",
          "status": "OK",
          "code": 200,
          "responseTime": 402,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb981485-5d22-435e-bc0e-d3ecdb4fae26",
        "cursor": {
          "ref": "a8540d20-872e-4774-9760-212861eac3cc",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "2d1ab0d5-2bc4-47cc-bee0-a49af304f238"
        },
        "item": {
          "id": "eb981485-5d22-435e-bc0e-d3ecdb4fae26",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "93f7f6b9-59b9-48ca-ba76-27cfa6dc871f",
          "status": "OK",
          "code": 200,
          "responseTime": 653,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1224f6bc-8ff3-4e7c-88d4-e724d4084572",
        "cursor": {
          "ref": "5b41748f-6d15-4eb4-b405-449aad63bb5e",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "141a545f-bc8b-4ab6-9b8b-fce5d5e07f83"
        },
        "item": {
          "id": "1224f6bc-8ff3-4e7c-88d4-e724d4084572",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "39f1af5c-2877-41cb-bd93-53902f365702",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1224f6bc-8ff3-4e7c-88d4-e724d4084572",
        "cursor": {
          "ref": "5b41748f-6d15-4eb4-b405-449aad63bb5e",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "141a545f-bc8b-4ab6-9b8b-fce5d5e07f83"
        },
        "item": {
          "id": "1224f6bc-8ff3-4e7c-88d4-e724d4084572",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "39f1af5c-2877-41cb-bd93-53902f365702",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1224f6bc-8ff3-4e7c-88d4-e724d4084572",
        "cursor": {
          "ref": "5b41748f-6d15-4eb4-b405-449aad63bb5e",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "141a545f-bc8b-4ab6-9b8b-fce5d5e07f83"
        },
        "item": {
          "id": "1224f6bc-8ff3-4e7c-88d4-e724d4084572",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "39f1af5c-2877-41cb-bd93-53902f365702",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddbf4a0a-12a5-435c-b178-cee3591557ef",
        "cursor": {
          "ref": "2e5e9c2c-7de5-48de-b407-dfb24646f0b1",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "1d735b8b-d802-4bdf-827b-f28e41c17763"
        },
        "item": {
          "id": "ddbf4a0a-12a5-435c-b178-cee3591557ef",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "853305df-0859-47cf-8c43-2d2f06932885",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 17,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b4681dd-57dd-42d0-8116-dd55368d5eb0",
        "cursor": {
          "ref": "82311327-1c08-4329-abd1-5b431cd5c666",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "54bc59fb-d235-46f1-bf38-1e58d5e9df6f"
        },
        "item": {
          "id": "7b4681dd-57dd-42d0-8116-dd55368d5eb0",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "1d830572-058e-430f-919e-7e704ec17d17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "7b4681dd-57dd-42d0-8116-dd55368d5eb0",
        "cursor": {
          "ref": "82311327-1c08-4329-abd1-5b431cd5c666",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "54bc59fb-d235-46f1-bf38-1e58d5e9df6f"
        },
        "item": {
          "id": "7b4681dd-57dd-42d0-8116-dd55368d5eb0",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "1d830572-058e-430f-919e-7e704ec17d17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "0d682ab5-b650-4d2f-a014-cf975833aef9",
        "cursor": {
          "ref": "2bf1bb64-4048-4c1d-b95d-2cc66f809057",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "99326ed2-193d-4ddf-a81b-69e11082d63b"
        },
        "item": {
          "id": "0d682ab5-b650-4d2f-a014-cf975833aef9",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "c62301c6-28b9-42dc-91d5-da6da0d948e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "793263b8-c68f-4314-b19a-6bd89eb4c460",
        "cursor": {
          "ref": "13645cd0-af78-4e3d-a230-89bcc888926b",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "dfc65e9f-bacd-42df-b6bd-a090b55caf31"
        },
        "item": {
          "id": "793263b8-c68f-4314-b19a-6bd89eb4c460",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "684d9c7d-7698-4e8a-821a-625e546c659d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "793263b8-c68f-4314-b19a-6bd89eb4c460",
        "cursor": {
          "ref": "13645cd0-af78-4e3d-a230-89bcc888926b",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "dfc65e9f-bacd-42df-b6bd-a090b55caf31"
        },
        "item": {
          "id": "793263b8-c68f-4314-b19a-6bd89eb4c460",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "684d9c7d-7698-4e8a-821a-625e546c659d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "44a3b7f2-7c16-4672-b542-7f589ff1bebe",
        "cursor": {
          "ref": "aabe43af-347b-4dcb-8322-b77a739b91cd",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "3d5493a9-ed3f-4427-8cd8-0412c2b133eb"
        },
        "item": {
          "id": "44a3b7f2-7c16-4672-b542-7f589ff1bebe",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "668b6673-d1b5-44fa-9806-d779c269b387",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}