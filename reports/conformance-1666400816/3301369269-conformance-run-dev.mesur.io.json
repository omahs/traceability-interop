{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "49b1b1a2-b4bf-4f46-987d-48d8dc14e3e9",
        "name": "Clear Cache",
        "item": [
          {
            "id": "da37d1fc-87ae-497c-a7a2-9a8d2933474a",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f44e99ac-bd60-423a-929f-45c5d82a1613",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "35aee7a7-f908-4444-9128-ecf52973b0b0"
                }
              }
            ]
          },
          {
            "id": "455509fd-695d-407e-97cf-33913b9c336a",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b4c527c9-6920-4f94-b527-375a89b963c2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "04ab2dd5-0be6-45d4-9c9a-21e2899a7a0f"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b19e2aa1-c9e6-4c62-a3ce-6fa83d0ed2f8",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "95be215c-8732-4a37-b307-b6942d143719",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1fe9ba66-9337-4411-ae45-81d3845b0d6b",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2ca28396-3ac1-42cb-a04b-7632fcfc3f31",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "75e0d3f3-46b7-4bbe-819f-e19260d41d3b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0f324435-0fce-42dc-95d4-cc5f54ce9b80",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "50e5bfd1-6b69-4daf-a628-f54ba027b412"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2ed78621-d51b-41d0-9893-2e6b6a0fc6a2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8c6492bd-731d-49a8-860c-89ca610d79fe"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "37e40908-703f-493b-98f2-09972483f27b",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "88bf694a-3316-4715-934f-52a49fa81a9c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "778e2c5f-d7ea-4dc2-88fa-3957055de11f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "48d85006-0745-4663-ac66-9097a64edbee"
            }
          }
        ]
      },
      {
        "id": "b7aa6776-d6b3-4aa3-92c0-fd282270fe1b",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "ef3af747-b2c7-4676-af7e-15ac45765ac5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ab634387-8d1c-490b-b4d2-b6a307ad0d07",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "193031db-66a2-4ce1-aeae-8c2b0afec2f0",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11a31bd6-b751-413e-bc59-c896c6881b28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "91c6da21-632d-4f2e-8ad5-f1d0f0f71af3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54e3d5c7-2e0e-4e4d-bdc3-7f1a6f039f33",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c59a0951-0cbe-4070-a278-4d612d9034d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ab7bdb0b-8dae-4095-98bf-535cea7f2584"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7898377-4821-461a-a62a-306cdcea75e4",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bbfd54a-b71a-4529-8e38-77c02d66e8cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2ca2d7fb-ebb3-4dfe-bcc3-0503123a9136"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fd99a48c-b6fa-4724-a734-74d1199c7fa2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "691597a5-82b3-4a7d-87d8-8dd72b968fcd",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "669f3ffc-b7a8-4d0e-b187-294d18b6da61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "79a346e6-14c8-4a69-9188-c9a1915e25fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c396ec47-7e37-4289-a230-301699352d93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79256105-f8dc-4ee8-b159-40c7d7726e28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64e34938-bef3-45dc-89d1-d1cbc3f1dc71",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d58b4d3b-f906-4818-a3ad-61dc672fbd01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4d27ed1b-1adf-4a8d-ae48-3f46d3f9eccb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "852a2187-c0aa-4887-98e7-65f2c0d05e01",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "a7e7ddfa-66e6-494a-ba9e-82bf9bd4ebe6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ef681ca8-f886-45ce-b419-c60e4c1e993e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "59698b4d-083a-461a-a1cd-117df08940af",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bb8d961e-5e1b-4281-8cc9-712882b3f959",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "f8af0be9-c38b-43b6-87c8-34af5b0a1c34"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "edd5f1d7-b95e-42ea-85f6-66a4bf3ad60b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "a5bbd006-1d5f-45d1-b38b-0fda10a974a8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "87102c67-4ad1-40c6-b432-968b090c5f79",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7725cdad-983d-4ae2-ac3b-763bcb1b3454"
            }
          }
        ]
      },
      {
        "id": "a078dbb7-2708-4545-941f-52e01be50ed5",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "cbf64315-9e3e-4b93-934a-5c8c98811893",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bbea59bb-9b97-4ed0-891f-24757b345352",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "26a9c79f-ee58-4220-a895-c572cfa4cc8f",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dc36b21-87bb-44da-aaf7-c982b991419b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8a84ef8-a442-42be-bec4-45525d572902"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8da6f41-0225-4521-bd86-62c027a42f34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "439f1d5a-31b5-4e4e-b12a-9199937cc9c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e082a8d-44f7-49af-931f-0fb15ea9d1c9",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6f705c4-86ec-4d05-a320-1a37025f684f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "849b0652-0588-4af2-b4ff-5059a565cfbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df19a1b4-610d-4c53-baea-bfa6d2934edd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "be37ce5c-e9d4-4580-b743-df96596ce13b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c59cca76-f1d3-46ab-89f7-ea9ae6bfca98",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4be4a980-3d61-4e38-a8a5-e5efa3453af2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d81677a-1c32-4599-b7c8-d7e46e2c1681"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8edca0bd-8625-425b-9066-855f4c7f9ede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "acbb6f73-00d1-440f-a814-f9380f756c3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8975e6dd-e4b6-46ec-9db3-17b3b499e174",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71ce3b87-acba-4779-b5a4-f40269d18e4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01a53aea-af37-4d68-9cd1-41fbbe5d9ff1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "061348dd-4ecf-46fc-9455-863a6d0511b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c68209dd-9c60-4f0f-94e4-0017b151f76f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96cbd701-dedf-4d08-8a93-dc59366cc17a",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec689a2a-5662-4eaa-9963-dc9c54499f4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13028f5a-e7ac-4f58-a0b5-c02dad5ef314"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "465456d1-c63f-4638-866f-2800af91019f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "66bfb94d-f3ed-485b-b28f-a9f77b0e287c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "034fe94c-44e3-4447-b877-cb6908e3aafb",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdfd478f-0a13-4530-a26d-5770fd652a9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a2fcf4d-ea76-40d3-b4d8-7ccdcc525186"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aadf27e0-5fac-4ea5-9814-2b731f49cf07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c3778da8-bace-4543-874d-3221d21913e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32cd2c95-50ce-4a55-bc55-9a02251ee65c",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a691b75-ba4e-4882-8bb8-258f5e5fb51f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1964a87-07d3-4267-95ee-73bb9525f217"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b44ee57-c79a-4d29-9ac6-cdd43ff0a629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8c0242dc-3654-4837-a90f-a247a0d254b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cb9a6f8-ab06-4319-b24f-5ef3352e1da8",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57c5fe95-fa90-47e3-9aac-fd047e86c24e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31b06db3-e7b3-4842-abdc-d8bbcdc75480"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f38489f-0d53-4ea7-ad4d-b52c277bcb5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "07189b8b-6ac2-4cec-a9c2-91bff573190d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f8dda57-dcb1-4a6f-8e4c-e6a59605d492",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b17179e-7ad9-4900-b7b0-6fde8007f21a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f766f26-2d07-4eb0-8d9f-1ccf654e5622"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6455efab-b6d6-4dfc-93a9-444f754df004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9859bebc-5ffd-42e4-baa1-7161b660779a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2729b58-c084-43ff-8bf4-009030f2ddc2",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb5e33c6-a893-4164-9eef-fa62d041393e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f35d5546-3c57-4e02-9a69-291d70cc1d80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89d287b6-149f-4da0-82ce-47eb91f81c5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a96c9341-0f72-4b27-8c83-3a35533da112"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67e6be0b-d315-4537-a6c3-17c7d0b77e7a",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab6aaa35-107d-4f61-80ef-767e8e1237c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74cfeffa-9076-49e6-94ff-3085703133de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec1078be-ee69-475f-87d9-bea66b23111b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ee974181-75e3-4924-b78a-6a96ebe0c751"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83f34d57-f04f-4e8a-beb3-12c2fe0e42ca",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f1ff7db-826a-4e1b-acca-f2fe3d8f7bfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e873621f-1a81-4ca7-a166-7a8aff791059"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "329baa83-3db9-4d34-a525-b42fa664edc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dfd06fac-3802-4050-9617-e300dab8b6c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "415d5d28-c908-49aa-b709-19eb3321e857",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d454f76-8c74-4ef4-87f1-69b6de2a5b55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffa42833-5d70-40cb-82b6-8464d0d1bead"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f21f72fd-c4b4-4da6-b664-5ecb2eb47567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c91a561b-754c-486b-b2be-748559fb580f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea033df6-3426-434c-ab2b-450725c09eb1",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f52f2874-df53-46fc-a2b3-d8ddf138b5d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "824a608b-8eec-45ee-a089-b529601d424f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c557e875-9ec5-42c6-b9bd-ffeb1efaa4de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "94654fe3-57ab-42c3-bbeb-77e7f13e158d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be77ab1f-4716-4bd3-b739-6538231ffc6f",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f4699a2-737d-444f-890e-4beb41535aed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97896d9d-f283-401e-8c12-7ae13768fe43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21faeeb1-cc55-4205-96c0-c83752a2e9a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ae23ec2a-c9a4-437a-8867-45b272d8a5af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ba3d112-1833-43bd-adb9-8a983e75c357",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b255a04b-53f1-444f-b52c-db3fab236982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d77a225-888c-488c-b86f-79f7086630d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5d022e3-afac-4abd-ab40-e9c4766bd2a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "696909b0-4f69-48e5-8ffe-ad1c08998941"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02f851f7-aaed-441f-91d7-037210792c6e",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d0bb6b4-f2e5-4024-8a2c-d6fefe51f6bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9dd8dff-facd-4605-8bed-144f86340e69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d96e4868-9972-4304-bfc2-0896c4158d6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "175c7229-5400-4718-a992-173f66ae87ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9d2396c-0cae-4cb2-8be7-a32d0949f3d6",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "913297f2-bc72-41bb-b220-e32c21eb0a4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbe28d50-0022-42ef-a680-5b40d1665e0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7df82bfa-64d6-4705-baf1-ad9354e87a1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "95b03dbf-55a6-4b86-ba48-dc9e8d7ad60e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0200beff-22d6-4add-8040-b674005dd139",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7119fea7-b876-4f48-bcaa-551f5201834d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dc73d1e-7fe7-4195-bb78-985735913748"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9a45331-202e-4630-810e-7def3fd69207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e372a0b-2569-470d-8daf-275f839b5c96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fa164a0-9f73-4247-bd39-7f34aa648035",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "433aa564-ee10-4138-ac19-99ebc5648dde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50621cc3-0db9-4298-a250-88cceba1187c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02f8b079-9cb8-42e7-8e54-e25d418b056c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ce4418c-6849-4905-b45a-76d5ce01b32e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51b9493d-8210-414f-8abc-9c4f46f5a323",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e64b8b8-582d-4568-a7f7-46b7d86750d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "537c4248-9809-4669-b511-cf7b06205057"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c243feec-7ae2-4c65-85c0-52d250f3d5f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "23a7ce2c-87c9-48d9-815e-12af0cc9b1b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d279c30f-f09a-48df-80c4-a70c747d6cde",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41171766-11c9-4229-9ba5-25ce89bbeac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18617fb4-0669-48b6-840d-e465e0423532"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e89458f8-e59d-478e-a963-baa9301bb7d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7d390cd1-5666-4d97-9354-02bd7b55e0ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "317a289b-d5ce-4161-8eb6-647e8a492146",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aed338b8-04b8-4c49-af73-5c19425913c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34afe5d2-1666-4e58-abe4-ed7250eb9e7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1d5cb4e-a651-4a41-80b5-91717193d160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "938f7e77-b686-4a6f-b160-8526e038d6ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8faad4e2-b798-4be4-a6c7-9ea5b5b2fdd4",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9542833-8925-49a5-b344-1055523f5085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e71cc55-ce27-484d-96a5-19390647da70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1518eb7-1d8a-4774-adf1-552fc6488a95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2f3c21d-92ad-4ccb-b13d-c04b67cc4cce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39b7904c-6822-4b89-af22-bec96835eff0",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef45aa82-d924-4748-b501-f98ddc474308",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e204b9f8-0e09-4b85-9e47-c3575d1227a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec1b20ba-4762-48f0-b8d8-dc02c29357a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1869932-f1ea-4f4f-8fff-69a9d4fab08d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c36cffb-0a93-4e9c-9388-9775b27dd338",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f59877c1-01ad-4e7a-93c0-39a0c27d6591",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ed697ad-7944-4444-8860-964707738bdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deac8c87-8c72-4be2-9aff-9f3224683075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d56bc83-b937-43ba-a4c8-b69fc4cdb517"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd20deba-58ab-4b15-8306-df9c539b8506",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "461c4ba2-1416-4e3d-8b11-9357817fe044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cca54987-4928-4800-969a-8b92e76626aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb886058-0302-48c1-903e-ad9a31edbe80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4d6c6c9-5217-4354-90f7-e910a18cd1a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "496978fb-0c26-4bf2-92b3-075bb22b3330",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9416d1af-7047-4ad8-9d49-bb8048c42efd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "befdf6d2-d2c8-4b08-a102-d459ae827fba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1419387-003f-40ca-8c06-cea8e9615e46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6338189e-5ae8-41ad-9310-33010f582a08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93c7bb25-6ff6-46e4-84fb-638f8ceab58e",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95eefc3b-d599-42cc-86c3-3ab40883e2ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eefe7da5-0dbd-4cf2-ba44-715c06f858c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa40bff5-0822-4437-8319-f2411cf25017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "95a48ae6-5ca9-49a8-a46d-b13303c53a0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cad0394-1edd-4cdd-85b9-ac75ae050058",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ca02de0-9062-4bb8-83d6-2845effaddeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "891ee9a5-0f70-4e00-89ba-70f38fcfc092"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76009d71-55fe-47f9-82ae-dc405792cb93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "76261e6c-16ee-4f39-bcea-aadf5803b4fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75f61b81-7cd7-4a80-b0e6-4fb22c8dcb6e",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7bc32e1-ebdb-4102-8171-b96e48c4cb8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9744975a-22c5-453a-abc6-831363f5487f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbcb55c8-54cd-42e8-a236-0794fdd6ead3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c85dba0e-534a-4c7d-bd9e-918fa9147f69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55c9c9d8-47b2-4a47-a130-64933db1902f",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aac97cd-beb0-4c85-bb3d-d3ddfa21d6f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1318d60b-dc5a-46c3-9f7c-ba0cb3e29953"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46ea6c3a-dfe1-4b7d-b402-e65fb63ccbf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9fc92ce9-eea2-4653-93d5-43c2a8e5727f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc70b664-bbd8-44f7-8826-c33dcf3e3eea",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97719dd3-0d42-4425-9f01-9f80eb589e81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dc4f100-ab75-44dc-acb2-3b4d77dbbfd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ecefdd8-546f-4163-9fd2-c96b076991f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f6136b9-b148-4295-aa19-94d8680baf55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6deaaac1-4889-41a0-b683-2c16060015ad",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e57386ac-96a5-4583-ac35-748e345fd12a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d125c7d-be82-423a-8b85-fd95f97e27fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "305e3b21-f2fc-4e05-98e1-4205e2d423c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6093671-996b-4aaa-8d49-37f2bd56fc08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d2db02b-a79f-478a-b704-044521324c07",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9f7390b-32d7-4ece-b484-8c8e7ce6d72c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed7e543f-2238-40fc-969a-18911e7fecd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f04c1acf-0d5f-4b8d-b7f3-cb94978b0426",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "cd79477a-e60f-41fd-87a0-05cbb22e547d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ef88ccd-21e2-4067-8760-b6634b45fdab",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b2af7e7-ee52-4732-b55c-d5e81e36baaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4a236802-e9cf-4c5f-96e5-ed69ccc97613"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10d8363f-c770-47ed-872b-9e706542528e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "11502425-7a4c-498a-b069-e30bc4b63cc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1bfa9c8-8e40-4e2c-834b-2921a8ce2193",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99d33073-4bc6-4f58-b45e-65d3dd5a8810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45f061a6-e535-44a9-987a-5a615925e82f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2ced2be-586b-4e5c-b6f1-c545e780500a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "58f6b1da-0f0a-438a-9fbd-d9f25303ea95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73e735f0-5ea1-4c7e-b597-27c1ec1a14e9",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43b9ed83-1a99-4fd6-ba43-24768ce77a17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd56901b-f174-474c-bad0-cc00ffc5d76e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9212347-fb76-490b-971c-0c116a3bf22a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7d5c9abb-8dbf-45c2-bf34-ae3f8d4e62d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06cad261-ee3c-4516-9722-b83b19b26f55",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49c5aa16-4338-40d2-bbcb-5866b8e5893c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c72ad7f-654c-4440-833e-8a0187c4c292"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "749b4cf1-0f3e-4047-aa8f-80f7d9347f33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6477affc-ed81-41d0-822c-24a0799d52d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7035a4b-8847-49a3-968e-4f91082afe72",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa659ca8-8a26-4d13-9072-0ef15b0e6e3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78c40e91-a8c7-4d0d-b2ee-a14707e592e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "049a267b-5bcf-494f-baa9-7c5df9c9e330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "005b19ad-7fae-489c-a1ff-f24c627d4489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91198b40-78be-481a-bab9-b690650beaa8",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd4a6e09-a1d2-4230-a732-39a6831a276e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9b31a12-8610-4e76-8b4a-dbd0ac8d2ad5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "763ddb87-67e6-49e4-bf78-7354af853476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "825c90a6-c8a7-49da-90af-de78a3f66388"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90bdf2e1-cd17-448f-a988-661f8027569c",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71d1fbc7-90e5-4447-a99c-22d055c2595a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd183ee5-5a11-4092-be78-deafc8cc19d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "782f72fc-793a-4261-8778-f7eb86f7ca6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "16fa27c8-478b-4298-b5ac-c8ec72a7794d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ab2fbd8-e732-4310-b0f6-bb9e883f35ac",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbd54635-cc8f-4ec8-8634-c99c1fd95b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e400f0f-77f6-41a6-8f62-9bc8db37602e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce94887f-b8e1-426e-800d-3defc51362e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "0e9fa787-ba84-47d2-b4f6-52e08884704c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd7256b2-4ada-4eeb-b4b6-77ca2385b47a",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7caad1e-939c-4146-bbe0-68583ca83795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78e00fdf-a1ae-44ee-a79d-60543a4d4483"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "931891d8-1e4c-44ad-bcc1-b1ef9d1f0f97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d942d37-9586-47d5-bf21-e25faae72271"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cbb2516-39af-4dcf-8584-65f8d9966a5c",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b13ec4f0-9b83-4c94-819d-11be6588d178",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47cb209b-4f6f-4e7c-8844-e45eeddba3de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02eb8bca-bceb-4fa1-85bf-ee036489b59a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f806616-7134-44e3-b00a-6883da501503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d582ce00-f0bc-4e3b-81b0-125875b633a6",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85eaa17f-749f-4494-b6e1-c6a82a44e2cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08a4a8c3-4e62-47b7-a173-8247c174f6fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1bf4336-c1e0-4a48-aa79-a2ffa20ff206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "89fb963d-d7cf-4c54-bf76-c55139b0ee9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2789b13-64e4-4541-a567-ea6f9ebd1ac8",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7064518-c978-40a7-985f-3cc37e94127e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68ab31e7-6f25-46ad-a4f5-b918b4408146"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae5ac80a-8b82-4b70-b3f8-38d10845942e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "07e61706-4d78-49db-93f3-522f26776135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cecd776f-a8b5-4d28-9d4c-da805a3d8247",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "623867c5-c650-48c8-87a8-cc5dfb5a57ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f89b9d1-f7da-4d37-a5b6-fd085830c3b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73ef1279-fc22-4d9c-9c6a-0297d98acce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c77ba26a-e374-4a70-9fd4-ef5799a18322"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50b8a551-950d-4b87-9209-adc055b6b1c6",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "856671db-de09-4ac2-baf5-fee500378ce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5eb19c90-bf7c-4ef2-bc85-18fab01d5bad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fdffb7d-0760-422a-953e-188355696eec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ba119fa6-7162-43b4-95d8-fccf24b5de1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c578896c-e0c2-42f7-8242-eea2c3b2b881",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a01b693-489a-4ebf-8747-03508f0d0b92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c302ce7b-3c6c-4603-8c99-f811cd891389"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc6b2789-37f3-4efa-8f62-32a3eb26490f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cf4a2e17-3209-4b9f-bd07-552ba488e6bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feb2bf3e-11f5-4417-808f-3b714001a526",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b89f31cd-d8ef-4418-980c-991c9339304c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "042a3711-48ec-40c8-9937-6b1ecdddfec2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3176867a-565a-4fe6-a5d1-db84776b7f04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "428d7942-2101-4d38-854f-8862eee867ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abe8d3ee-ba69-4533-84f7-9467d7e979f8",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4188382-7fdf-41d0-b362-ee87c2c36a48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17522808-93e2-49fa-99c3-8b5836a1c564"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "117722c7-4e01-4499-a92b-7f4f39ecbaf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e3c6033-b982-480b-b7e1-ba43fa7775b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c1120f4-1847-40cb-a993-cd95b27436fc",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e176fe5a-748d-4ab7-ba42-87801411a92e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7e7ff2c-c9c1-4ef5-84db-dcd7b485bb9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e35fcbd-df41-4dd4-901e-bfd8b7783e37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce716785-7a5e-4ca0-ab12-bfd801bb08be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "010b3afa-632c-4e28-8b45-f5fed95bb00c",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bedaa57a-f231-4c50-8a98-10397c808178",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f67b1d4-8556-43c2-a4d8-6ad33030741a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9728f111-54d4-479c-8796-55d5eec5760c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "07f3a660-f369-4578-aa07-007f5eca2ee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2619d54c-6fdd-4533-bd8e-71dfae4533a4",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82549be9-0d7d-44bc-b397-df453cbd4699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a9c55c8-0a20-43da-a3f2-2d2bc8b777c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8e8c8df-80bd-42e7-9663-f46c483cf7be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "321ec069-d85d-43d9-be0e-77603c15bae1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53224052-2a9c-43c9-9ee3-76a909ae9fb7",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d2120f0-3101-43f8-b68b-a2bb1801091c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e37cf90-66a6-4e4f-a25c-875c2f9ae686"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0d7d1ae-4bc7-447d-bed5-97b308541f7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "35515efc-1499-476a-b92a-5b80bdd5394a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaee2c85-1ba1-4d43-b375-d687e3719c71",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ab71d54-39ee-47ee-acdf-e6d9c131610c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80541384-10f6-48a2-8ef8-901a069debe5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f1a7613-9134-4144-b050-caf210635715",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a1f7c8a1-a1e9-493a-86d9-8be151c00e94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f8b284c-8d9f-465b-b4ac-f09ff0d1536b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38c1c4a5-2b7f-49c2-a972-80d5add98ac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bceadab1-8e58-4a46-894a-34581e2f23d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "049b2e38-65d9-45a9-b175-2ea19a16a28c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "52d15089-d433-494e-8e9c-3f4ed99fa2fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f39405c0-ea9f-4272-aa9a-0a4a04de7510",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "300aa4f3-5700-4944-b8fb-2e8bc34feea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f88b4de-a5f5-4b14-abf6-f2f94ca068d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74285eff-987e-4ef5-82d0-f7491d326a76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c5be6101-0f26-460f-8810-be59ab32491b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d813bd6-ea16-4129-87bc-2116f5ec8720",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8a22012-d15e-4956-a0ed-620e485b598f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a41b11de-5ab3-459f-a7f9-f7dbaac7aac8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf59077f-de7d-4324-8ff7-8d82a056e9ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e29c20fd-6ad8-473f-a36c-eb7cddbbd1b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e659d50f-2693-4005-a17b-85946f0391b3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "043d783d-6ba8-4151-a94b-ddae52fc5416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e11c7a9b-a78e-4cf3-8aba-2e1c10046d21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cd94707-5f95-4a0a-8585-030b4aec3d47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a19fa56-97cd-42c6-9dc4-62f5984efe12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80117833-3a87-4d90-9bbc-656b0cb04874",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f48fa1db-c6f5-4023-81fb-bcc5e429da42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee7b513e-8c13-4fc9-ae8d-fd709e479ce8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "980141ae-287f-463f-9e39-8a434bc47ab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "935801fe-c923-4b54-99dc-2cb7648c241c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ddf4dd0-16c0-457d-91d8-83012d18ef87",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ac26299-7510-406e-88e5-35fe8df99d90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f16c6817-4bb3-4a24-9a8b-8d9a1dca8f93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e573e0fd-872a-4b6c-b6f7-7b2f8e168a87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2485f8e-3270-48af-b510-18667052838b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bbf3d9b-04e7-4e97-86d0-839e2bc89f2a",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21430ca9-a0f5-44af-b007-3b0578705a3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4e89bf8-18ee-4391-98b7-feed992065ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa71318b-2c54-4290-9634-0754bd9bf2f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "50d02dc9-4222-41d9-ba45-fb67bcf088bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b4295fc-4e80-4ba1-a626-73415a6e2572",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9ca753c-df9b-4aa2-9a49-7d4016543574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "530df3fc-9938-4df2-980f-db1f5470dfaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b842d892-162d-47bc-b1eb-720a206445a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ccdc5939-9178-4ee4-9ff5-b8caa18a31fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95e71c6c-6741-4258-9678-59f2d1484603",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "becd79f4-ee0c-4e28-9210-844814cb5951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5c8cbbb-397e-441c-8578-0bf0ebf04922"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2f180ca-6f5f-45cb-9dda-9034bc3dfdc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e5d8dfe-7d5d-49ea-8c54-44381f0d6e86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baa7a43d-bfdb-4234-b736-4fee85ba25cb",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "380a16e7-83f4-4a81-87ae-427410f0a918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "975aad1e-d5fc-400d-90db-84688061e81d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "861f85de-1b56-4a2a-b340-6b2c508f8dcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2d001a36-0aa5-40e2-84e8-f2530d0ee723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5cc1c4a-5c55-46c0-8807-53ba902f9431",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df958ff8-0332-43b6-af14-e6e6e44cf150",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09e397a3-deb3-4cbb-8f2a-b1dd736ca388"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "497324d8-f5d7-4340-9bb2-e51a0744d969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "90942a88-b1fc-4ea6-900c-6df3c17af782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60e1ce9c-5a02-4725-b54a-eb00a15dca73",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83bdc50b-aef3-4663-8c83-07c03566e87a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf858a65-de76-4ac4-b439-bd1b3a5c91c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06b8766c-44af-4d1d-bdf9-4c03ebcbca3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9500408-7632-4f31-ad53-79999cc2039a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08481ee5-a891-459c-9015-356ff5d903a1",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efaf93a4-edae-476e-a540-077e6e12cde5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40cbbd0c-a1fb-40d8-a0ae-046da3797266"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5121d00e-fd40-4c27-9365-a002a76b278f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4700702f-efc1-400e-bbc4-d351a8ae1b4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a16a74b-b09e-4e81-b075-6eceed49b6d7",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "734f3b8c-2634-4c68-844f-bb382264b83f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdba527f-098e-4037-9b2e-2dea765a98fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84379888-0194-441c-a925-9295ffe2a072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "97170a4e-42a1-490e-b654-d6f00ec7a617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "503bcdaf-7930-450a-9d20-5d00c6b096cd",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce6da744-b7c9-49e6-9d9d-cadcbd7beaf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a186323d-a50f-4c42-9740-f6d2b23da3f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41fc97e8-6e9a-4fff-8cf5-369747a9923f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "526d104e-834b-413d-bed4-e8caa5bec568"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ff46138-cc62-49bc-ae28-3fe32a88d4a8",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f347f4c8-08e9-45f4-8725-317372177212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd018b27-229d-4146-a9aa-3acaf0fbbcf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e2112a7-70e9-48c2-9d2e-3f16e0c127cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "58c8d5d5-2a95-4752-9ecc-38ff78e310c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "106284f8-0934-4d44-a3b9-348a57e5751e",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27b852a9-6da2-4c81-a350-4e4844866183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7c5f055-cf45-4220-b61f-ef03433dc4af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70fd30e2-b6bd-4c53-bf3a-21e05be75b20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d7eecb26-0122-444b-a562-7997066b4c37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a9930e2-641c-4698-bf6b-56dead09c5cf",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72dd2ffb-9dc8-42f3-85fc-d6b40b199e51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33d13ecc-473b-4997-be46-7b8bfdb6b235"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9867195-01ba-4135-bea4-fa3384b9c45d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c04f7a11-f8db-4b4a-bb9d-ce5b90aaab1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f650a61-874d-4e23-8822-9e3da2d0e735",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "471517a9-9b4a-4edd-aa10-fc1767e8fee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36cc396d-3279-49bf-af2c-853c84914c4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ab851c1-f5dc-4df3-bb27-2b6647221600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3c11e77-a925-4400-bd1b-51ea0d6f658a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d344930-c69d-4568-b592-ce0773166cd9",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf03bf9a-ef04-4060-8993-56c1347ae8e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "502862ea-584a-4d67-94f2-4690315d0a9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "956ef7bb-3d61-4268-8323-f299b1ff630a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c28f8728-ada5-4670-af93-8683f2f4ee40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f388f82b-8b43-4afc-9eee-63568ade96ac",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dc7fdb3-bfb2-45be-834d-76606507f65e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26de099b-3779-47e7-a1ed-5958bb07d57a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72b0ef6a-23db-48fe-8540-3c49fb395e9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "03cf89ff-2be5-4acb-81bd-81b2ec93e7d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "062b3a41-12fe-4f7f-81fb-f197e2e54aa5",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d6c5826-b9cc-4f19-8892-60a2b21484ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81549974-c5e8-4970-9012-90f539bfad24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3914c64c-0fe6-4d75-b2cb-e5a5a0853379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3df763e4-7cda-4ce0-89ac-ec1b6a998b81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d40eefc8-5189-4004-b774-729434345464",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "083303c7-0ce5-42b1-933c-e5eacb092b3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c322fc37-b25c-4edd-853e-0f7bfded98d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edb7cce2-5220-47e2-bf32-eb584aae5780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "33a4db8c-cd3a-40ef-8585-0eaed726a24e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75175d73-9033-4c78-9fed-e13e017422d0",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d20ee6ec-baa3-4e0b-b7d8-e47085741015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "695df48a-f11d-4017-ab3c-d6a19569bf48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a00dcf46-6271-4c9f-968d-cb0d77a4b7dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0372efeb-0374-400d-a359-1b8b351e04d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca63e74c-0fb9-4780-971c-843248cc9634",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7109340a-5bff-4006-8ce5-2f4ddcb1851c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1df63af-632a-464c-a0f4-13edb2546223"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "141e0a63-6dfc-468c-9d4a-6796390de9c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ec2e451-14f9-46b2-997e-a7413bd20bbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb037d78-5316-4e75-b5e2-d71daaa0cbc1",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f70f5898-7556-4c18-9dd4-dd612de0ac05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a833e68-83ed-4d20-be4b-9a0ab1dadd54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee2bc627-8ba6-4e01-a6af-b932a64072d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1d78840-4160-4c87-bcbb-92a985c3d6da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e27675c-128f-40ea-afd8-4c35e391868f",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89891296-9fab-4ca1-be65-58ddd2d41513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70b88c89-396e-4337-981e-525ac4d54bd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6477a79e-4037-4e2a-a9ab-cd9ef0b3b243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd015012-464c-478e-af7e-1f9b7fdc746c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1283f3d0-6f5f-4112-93ab-4f3b422f7a0e",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "080774eb-07e1-4973-bfb7-aafcd0872609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7105bf7b-eb05-4998-8c55-b4c90b970798"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df1046ae-5daa-4c4a-89ce-a9b4d9144855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "268b88d5-1de9-4f88-8c65-e44940cdf44f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28071ba8-fb6e-42dc-bc6d-409be771c345",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b78e91c6-2688-4d46-a2bb-17b018c1cc8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9f4bf29-233f-4e53-810f-8194ff16d6b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beffad15-0f5e-429e-b9f8-b78c328e49fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0c81e467-23be-401c-9506-7771b0e1f7f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cd5a624-fcdc-4b05-a1e9-9f393fac0ef8",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3c08a4e-857d-49be-a839-acd9c8dd7fc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74cb0283-f01c-4548-a757-2ff25fe8ca85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2252a4cc-0cff-4b05-99d7-ede0c598015b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "cac9fea8-14b7-4663-9fde-55ca7d4ce360"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5e3559a-0ed9-41a8-967c-b66d00f3d557",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1aea963-eb2a-4b90-a447-0746c054028d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f905802-b74c-4948-82a3-d7778dc82e62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ab626c5-aef8-4f1b-9006-7f303e1d575b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1efcdb6c-d838-4c6b-b6fa-08d32ca6b473"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faefb30f-8a86-46fc-9307-df0efeaa4eb2",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22c15de1-d693-45af-aed2-04b3f43b9ef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dec02c1f-bdfe-4c9c-be50-8c66642099a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58d65a6b-e7e7-43a5-9d2b-c94395a97490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1ca11d50-1788-47f5-adc6-c8ba5e0558e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4fa9d5f-a0e1-405a-be3d-7121cdd76451",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e350996e-0999-46cf-b143-5bbed81174f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eac873bb-b60f-4e89-b207-20b9a41f70d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "828e6010-acf4-451a-a338-73bb8b837588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f0d6f8b1-ac39-4bab-ae98-28493a3e25da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c8fc62e-1f38-4c6b-af52-a122e0648c1d",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bc08956-0360-47fe-9de6-823c0532ef84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bff4b1e7-1947-45db-9308-d15ead7cbf49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca67ae09-74a9-4d32-91a3-1eca73e207da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e0371545-1e3c-4140-b5af-4b271e7c350a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "382312d1-da6a-4e58-aee3-95c9bffcb9f1",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dce0b879-23c8-400c-9874-5c2b331e30b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "061a4ab2-9da3-45ad-899c-6d85e13b553b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a32ed8c-ea00-4e77-b331-6782099327e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "0c230d93-95ee-417d-aca3-2503b39d4f10"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7634b3b0-d572-4e7b-be91-105aa9a9c5ce",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4d96ce17-3db9-4c3d-843b-a708453adf86",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4efc9c74-91f6-43a6-821b-f2dc55a21040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "33a2382b-58ea-422b-bf7c-01b67213c51f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3a3eee2-88ed-49d5-ba31-bc00a1c2e791",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "ecd7e82d-bbbd-4d94-8acd-606c998e88e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d55f3be7-830f-4501-bff7-dd769823488f",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98c1ca3c-dead-4393-9520-33ad656fb0c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3ddca602-7a35-400e-a666-b18caeefe883"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14c5cd4a-44a8-4fb6-a26e-a31165303440",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "5bf7c18b-e9b0-4d65-ace3-c44daee4861d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d02bbb26-a8a5-4a14-8f09-30097869e194",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8851ac26-9c24-43ca-bc70-7d5e39469f27"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4f257cf0-1a44-4a76-afe5-712cfbe443f9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bacc547c-148e-4612-b75c-ac19cc95c57a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "51ff21a3-e094-45a0-864f-aa4ab0f42799",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cac91135-b01d-467b-9a4d-d3baf20ede89"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2afc62c0-9922-48a7-a07d-1d77d971f217",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "14d777f9-be4d-454a-ba2f-79f3679179e0"
                }
              }
            ]
          },
          {
            "id": "c9939cc3-3b7e-4d8c-95f3-38fc1b5b0429",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b508f76b-3e88-4668-a47d-be8503867edf",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "314db262-a686-4f0c-8b30-cc9daa9f5346",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json();",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "182f1475-b958-4f10-928c-16f946c90c0c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bd1afdca-59f6-4013-87a6-101b7ed27dbe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b9a43fd8-dd78-4d46-a8ea-e80113b93293"
                    }
                  }
                ]
              },
              {
                "id": "888c0625-2cef-4339-9430-22f60c2ba76e",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "19e68143-ccc8-4dbc-908e-fb3cdab2b660",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "15651e69-225a-4efb-97fc-eebed4cdf3dd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3da0d7da-94aa-4c9b-880d-9ec8435dffe5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7fdd073b-9d80-4a48-b6f0-b76696cead77"
                    }
                  }
                ]
              },
              {
                "id": "902020bc-be30-4d26-b8b4-9861c6610060",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b2210387-8e9b-4d61-960a-073e25ccf43a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9482de5c-ea2a-494c-ba5d-41d179aa95bb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1dae781b-5eb4-4ade-9076-455c47326ce9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1bd250e8-b028-411f-aefe-aa086db6d48f"
                    }
                  }
                ]
              },
              {
                "id": "fcb3e650-d872-4608-8824-382def8f72f6",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "960fd4bd-696f-4cd7-94ed-0588378511b0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "49ed118f-e5bf-4893-a72c-d314809c95d5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a59cee14-8a0f-44a3-b14d-bfa48ec0076e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "0542a8e6-18ef-4ae7-9428-547e77a9e57c"
                    }
                  }
                ]
              },
              {
                "id": "8979b50f-4c29-4909-8ec0-57538eed23ae",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8e35446b-a883-462c-bcfc-986db77778a3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f70a4c89-2d3c-490f-babb-8b26eb501ded"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b7612988-ef5a-47c2-8c86-418e81fa30b9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "e1332684-ba16-4576-babf-4aad9be6d8ec"
                    }
                  }
                ]
              },
              {
                "id": "2af61572-fb85-473d-8e46-ada42d26b1ea",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ba803b66-0bad-4a68-9c93-3e20a78c7d1e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "07ef0109-9315-4041-9724-3ee41e04bf86"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7edf68fd-a7c5-48d3-931e-f39e828118db",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "310835a2-d712-4f3c-a265-e6e5104ef31b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1cb50a43-b721-48aa-8c3e-3b191b0397d1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8d10bd33-116b-4679-ad82-05bf12569805"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2b9a2bcf-6852-4f81-9e77-9ff085c07f84",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9ee7b98c-6aa9-43c2-92bc-621157befbd9"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "154e2efe-521b-43e5-ba24-09fec334ef80",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "7803485b-e9e1-4443-9008-28be632fc649"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "95773be3-2bd8-4eee-aa3d-48531ff7b467",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "884e3729-e1eb-4e87-bb36-c48404840820"
            }
          }
        ]
      },
      {
        "id": "608f2ce4-acf0-4c6b-b7e2-8ecaff71837a",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "59ffde11-3688-4bb0-812b-3a25e4b93502",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e5b7e730-4e2b-49d2-8094-7b7df0f09369",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f1a380cb-209f-4c3d-a58a-c97dd9193884",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe1f41df-a422-4709-a23b-88648736e064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4cb7597-df95-47e2-9e2f-ec981024a997"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0cb6e91-040d-48e3-929e-4a3fe84e1b26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b036e95-d296-43bf-a889-d345bda0d522"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b2fd2df-c3dd-4117-8be9-466537dc0de7",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bf5dc5d-9ad5-4936-9c3c-6d50706faf77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6f82d71-9c29-4259-b58b-e8e1da726363"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab52c6d8-7beb-4752-b7e1-2cee01a21eb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f31fc4a2-7396-4a48-a37e-fc7c4fe82447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fa862c1-edfc-4d18-b8f2-c1dd746f6fde",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a83a74aa-1987-4c1b-9862-5e8c6ba02ed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87356ec4-8592-418e-8e89-6940e938dcdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9eeb34e-4b98-427a-9e8f-d058d461f59d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee71796e-23ec-4428-8880-805f61728db6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ef1dd56-3c5c-4ddb-bb30-b6a6db3f4c45",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e9775b8-f8aa-431f-8727-8a14ec0d4d97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e8b1be8-a7b4-47bf-bac2-aaf8ecdc17b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ffc0c11-b2d1-49eb-b1f1-42fc9bd7f03e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "82339a1f-d726-4ffb-999f-7ff030379e79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57d247c3-9abe-492d-ac59-d3d37c8127fd",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fab9093e-2a46-4419-9cc4-9aafebac4462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a5ed1d0-4f01-40c4-acab-980320fb8796"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5ba29f0-ad45-4a9a-82f7-1271af0bbe1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "29f70f26-a51d-4047-b771-76fb7fdd34a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d7baeff-54b0-4883-90c2-ac0de2f3b19f",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e61ea216-d5b8-407f-a5ae-201c062eaf65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "435d98f4-51e0-41d5-b377-18b390b16350"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "880888ad-94ca-47d1-9b21-2a91ccfa7591",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1a236849-624f-4cc9-9e26-dceb1a52c7b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e906e1df-983d-43b0-84b8-7b2ab3562889",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aacb3800-ac1a-4d19-a831-6d0613ab396e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc832dd6-d66b-4a3d-8cce-907c46890e01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c535ac44-fce2-40c0-be9a-7af863f8b6b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "40ac207e-ac22-4e62-8a2d-1d16e2b1064e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4784d6e9-4dae-489a-96db-34fe34fe5131",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "779ec465-046a-41d4-84bd-a4edddb8f3c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "573314b6-2896-4937-9c58-0411f7af3e1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b463a23-b706-4be4-9c51-9e8fffe4da22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "03596486-13b3-4be0-8e7f-ba8da53ab87b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75cb6502-d5dc-41da-86e2-d379a1bba83e",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bee4d6a-ddc0-4038-9e02-016b8bb4232d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c73ea0f2-e88c-4593-ad7b-02293dce4b7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87a82e49-f4ad-4511-a717-b3b65d4ffc5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e81cf91b-861b-4f5b-b24e-9f19cbd396f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e1f1e72-f0eb-4e76-b37c-1d92618281dd",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93bae2cb-3f6b-43e1-a870-362554da4772",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4fbcf23-94be-4286-9ac6-545de41727a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb51916b-e865-450f-a0c9-4a4155f12328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9b37139-7ea5-4619-acf2-236fd0d73781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e8b6fd7-0dbc-4c98-b564-50d57442b27d",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "738e51ea-beeb-4c90-b5da-ed149c011da9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13880a4a-f29d-40a1-82cf-33ce91e84ef4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffaf8918-7012-46c4-82ea-47610bd7258c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "75ff701b-71c5-4293-99fd-a73446b2f6f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bb17af7-4215-4525-a756-7a856cd62214",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecee6181-f48d-4541-8940-055ce19f57df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abd6b8b6-7667-4bd7-8328-d0eb6dd61674"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7c04aee-3875-4155-958d-e0204284def2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1fb304a4-9cb8-445d-aabf-50fc2e37ae00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba015b93-c973-4884-b3f6-565929bcdfe3",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec5466fe-61b2-4721-9007-03965885ff21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c84c2c4b-a085-4530-a6a6-46ac40aa21d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "501af560-6f9b-41fd-b27d-3fac5431d132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4920ffa-9549-409e-bec8-4b135fca42ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82137b6a-3a91-43aa-9dad-7755d3dfdee5",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ae6f25c-4f88-40b9-bc82-c9bee142fcfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8797a8c-0e6a-41b6-9e95-a5162253a7e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73b38beb-97a7-4504-89f6-1af198c478b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "49ec47f2-a614-4f0d-a3b8-0bc85c06aca0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2c6b903-ad6c-4bbe-a74c-5984e2fb66ec",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71b372bb-9940-40f8-95ce-10d19b66d812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8376afc1-97e6-4749-9def-879152f23536"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1eedbbb-7909-46ca-affb-22457b92b4f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "68d314d4-fee2-415d-933f-df8c20a712ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f65fe66f-0603-49c7-b43c-76c6f2d4ea40",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d546e55b-0821-4067-908c-325550293fd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17ff0599-a22f-40f7-853e-6c77aad81b57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddc88f25-0283-4eee-bea1-3daae9e8bef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed6a7295-c399-4bb5-90e4-7bc0e0c8c8d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05d79094-eeba-4000-bc1a-ec4a0174020b",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c723ab2c-c00c-4742-b08d-3a2c17d3b014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "330bec84-6a4f-4d71-be88-451351d67ce5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4a7612a-3a4e-478e-9c2f-1f0e6fb9b2dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3309946-d808-4438-9d07-fe06b65ab808"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bca06540-1061-4b53-9222-a25e6ae96d47",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fe377b9-37cb-40fa-a4ca-26f30e024c87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f3d5dd0-9338-443b-b129-9e435b4c1b7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bb8eb2a-99f5-4d3d-8019-ad6f7124b26a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "94b695fb-7b36-4a1b-a299-629c91486384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4951a97f-8d51-40ba-b5c6-7499b7e825bd",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "337bb2b6-d8fe-4692-b997-3ec3cb407a99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9db1e8c-acf6-4c22-90da-073a06ce4af4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f9e79e2-98a3-4fbe-83eb-0ce6da591662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "30c3752f-519d-4b11-a398-59a472f057c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7825965a-af7d-461b-9400-47efdb57d26f",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2add44c-db1c-4235-8130-0261fe3d57d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3523f16-79f0-4eb5-9aa4-aa9cf9f43d81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fa9c6f7-33f6-4c61-9331-2f46d80dee50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa711fda-7a43-41f5-af9a-f2de994ad419"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2d00d15-9367-4d9f-b2bc-d7a29b5b4dde",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93be6e8e-0a4d-4d35-95c2-60d9815e15d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb5bd9d4-bd19-48ce-a5e6-3fd905aac98f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5f24c82-e125-49f4-bd1a-b1bfe4aba95b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "65d5b03d-591b-471d-9441-08d1432c6b1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "729c5ab7-909a-4a2a-b1f4-df6b9a5de350",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3234ad2a-4162-4281-ad13-7e3b11d91d03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96eb73d0-b65e-4910-aeaa-6fad615f9699"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef846185-070c-46d2-b635-6260650efaa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c863eac5-58ae-4823-86e4-8f4690b97d3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9489e9ee-32c2-4847-804d-aaf2e6ffb975",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84e65e1d-95b0-4c8b-8c33-d54726243933",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "248013c4-8ce8-4d29-bfa3-d0d29ce25066"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25ac06c6-256e-42ce-99ff-9239c1de2125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5330e834-6f1f-4689-b39f-624c18df6287"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5e72ade-e69b-49f8-8772-ae781dd6ea32",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ded0277d-f71a-484c-a42b-f5a94934ef30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c06fde0-7b23-4d1c-ae27-e9ac86333a9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87aedf4c-1dbe-47ce-9ef5-e1a6f094b622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "52f6e014-2f47-4306-ab2f-ae528ea4a2ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e26a6139-5cfa-4142-8973-1af4936d64b7",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "323933fe-a8ea-422a-a0d3-b3d7792df4c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c34c174-9056-4401-8ad7-1e9b64b34a71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43d568cd-ff8e-4075-9bb7-3a66d5a3024a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8be6954a-6f78-428e-982f-249f2ec63e3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a2a9631-e74f-4d97-a4c9-e6c31fcf62ac",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19d540b2-a8d2-40a4-a679-201d5ed4feb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38c7597d-c3da-47ad-9da2-fa6456033727"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "007dd212-f52a-4193-ada6-ee26d636c71c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b3e5af6-f77d-4e78-9817-db074ca10674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60dd8470-36a8-4aec-8443-5660c04c6d71",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2e470d4-42f1-46fd-bb3c-98168002cdea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94379217-c97a-4919-89e1-f5691b642fd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbbe433f-9710-41a9-aa8f-45b609153a5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4cf2f618-4e92-488a-85ca-277852415c00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9c9a8ec-74e4-4d4d-b92d-a6303ee32bb2",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30cc5b8a-03a3-4996-b999-627b26fd850f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5654554-c5b0-4fd5-8b90-3b0262b17bff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c94ba792-1f3a-42d1-8eb3-c7365dee9b5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2662b111-09cb-41bc-876b-27ee4bbd9be9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47cf5653-f535-4935-8f63-e7294ba3dcba",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03042388-5ac8-4730-83e4-03534323a039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed002fbb-75c4-4195-b671-227d8b4c6520"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93666806-5dc4-4a6f-b1a0-59aef0c9dc4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9aa2fd43-7250-461e-8f90-6fa415221477"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06129cf6-a040-4b7c-9468-731fb5d48d75",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8441831c-469d-447d-9661-a9b19be964b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d2f4fa9-1451-4287-9898-aff0b7f90289"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0687e0c-32ec-4acd-9372-5251152f24fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a9eac90-ced3-4174-9117-069b98c6d4b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd4f5736-54ad-42a0-a0bf-04821bdbe4b2",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29af8eb6-b21c-4cb4-bf85-c7a16e7c0eff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3506f4aa-bbe8-4f8f-a6e4-a8c0ab9093fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab86a0ce-92e7-4f4b-9af9-0a8ec080d0b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c717d5ec-d66e-49fd-992b-556628c43d67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1edc3f61-4a1e-4b2d-9e0d-99797cd38689",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2df421b6-bc54-4b22-a83b-7b60ef3d38de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f469fcd4-a665-45b4-a6cf-8059bebc7e53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d8d374a-f3e2-45ca-84e4-ffa8341b0ed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "813236b3-c3c8-4de5-98ab-ee5e0daa3947"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0f125b25-ae03-4e2f-b673-7cfbd5da9bc5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d4b033da-eb46-47ab-a619-4ce1c50e0829",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fac8538c-4713-4e36-a1d0-80da46cb741c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a54db771-35cb-4cd7-aff4-c00435d757dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87beed5a-8eaa-4472-a7e9-87eafa331a52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eb039af0-d94a-4e87-a8a9-aaaf7595fd4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8382b1f9-f4f9-436f-b19a-b98adc1c2055",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33b67859-7e34-425b-802b-a7d55f7d47f6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "b7132d94-4ee1-4e20-aa88-e1678da68aa2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b22fa886-f0d0-492e-9cec-14957797cebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "83f5ec55-c1d0-43b7-ba0e-84a80e041543"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "05245a87-d959-4a0c-af9c-2702acab9991",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cf4bae79-d8e6-4487-96a8-7b00580bb758"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "102cbfb7-bc35-4393-b9d5-5c658210a286",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "11de37cf-a7f4-4275-9a95-7283700aef60"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "428528c2-5731-420c-9274-09977078acf2",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7d96e2af-23e5-4583-a493-60fbe7ca9fd6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d89dd49e-b7bf-4795-8746-6b10e3fb1018",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a8b61a9b-4670-46bf-8968-8e5a33385fc6"
            }
          }
        ]
      },
      {
        "id": "2770aa02-3774-44ef-a3fc-6dec6b5406c4",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "157dbbd1-62df-4dcb-9f69-63bf546c3d05",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cacb3559-a8e7-43c0-8843-201fa0581c19",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "001cbf08-defb-440d-a16f-c03c0bbf7ad1",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21d5e419-8301-4b3a-9772-8f4911e0a429",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "666857ab-b497-46ad-8e9f-a0a0a0b50364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85b94f20-a6e0-4532-9dd3-f10b5a76d7c2",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a0c9674-7095-4978-9d28-a981bac42c1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f1cc222-db05-435a-bc30-83d28bedd04f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c6e064e-cdc6-4c1f-bf94-c02b531aee65",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4939d7a-4422-4710-a999-f29bd15f471a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76f63603-9626-4277-9239-869c02944e80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f2badd0-9054-49fd-97fb-62d6a4e8faa0",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7aa7952-57e8-48cd-9097-3fb22316a43f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f35217e-ce4b-4444-b222-515b99f51ecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea88cff5-0452-4b31-84f2-e615e8f2b076",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b80b1d5-36de-40b6-b0cb-aa3bf8254b9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aeab7181-04bd-48a8-9d54-04c9055aa09d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0baa141-9cd8-40d1-85fe-1c76205fe5b4",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e513785-d30e-4a58-a052-f74ffa39417a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27da86ca-84ef-466a-b962-e6c574067acf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a55116cd-edc3-40a7-a90b-e98cb1cc658a",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7feb08bf-73b5-42cd-9de5-77bf8002b53b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "489a74a2-7160-4450-8ab2-bc8cda8bf469"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f96609a-99ac-4f26-909d-877289cee4aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05f50b9e-5d89-49b0-a326-665feec86150"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48bac78b-f98a-4e6f-ab0f-9da57cfe9b1c",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "439a9fc1-c553-442a-99e2-5641d9c9ae5f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1433388b-671a-45c3-9f08-344613480b4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f23a48ac-95c4-40dd-8a2f-d4907f0ed646",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cd089ac-3669-461c-9e03-cb45eed93a10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc4d92c5-97e8-4f68-bfb4-b7f369931ceb",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f79bd3dc-0862-4752-8197-3deae5986bad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5985862-347f-4cc6-a0b8-0d3869b45397"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bd7722b-9b41-4e3c-ad8d-a77a87f6fe1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e43272c5-be44-48e1-8cc8-49cbdbd4b607"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ada7234c-76c2-433b-82e1-0b01a99f9df2",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "623fa3ce-41db-4521-b196-b7423f504f1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81670db2-54a8-40cd-ba7c-654a772d737c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be152608-7fa1-4134-a3dd-7c83758cc60d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6a3fcd6-8887-443a-afcc-f5b799a4ecba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bab27f9-2737-439a-bfbf-fc10a80aea1a",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42910eb8-fe60-4638-a86a-df03b9fc33ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b84ae2e3-b661-4222-9a3e-56a2892e3fd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba009b01-6ece-470c-b690-ef3842155bf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "623faee2-8dbd-44c4-8c33-50de5ce0e927"
                        }
                      }
                    ]
                  },
                  {
                    "id": "360d4bf7-815b-4b41-98e2-6a4073824906",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7276024-2fd5-417c-a185-2827fac212ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fbbfdd9-c448-4b79-b5b7-8988cf3f2bd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a069113c-5699-4176-83ad-ca7c20d7f023",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af0f4d47-fd04-47e8-a951-eca633dfa802"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b61dee9-7ec3-498c-9283-de7e799f0306",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b99dad9f-e094-47b5-b927-50a27a1e7fb8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa8b3f56-a268-4753-9164-597ce47a8e92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64f38971-f071-4cb5-9d66-93d36e87b9fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "060f91ce-90bf-40cf-92cb-c4cdf9ab8aba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a467e13d-6d1d-4741-bcba-dfe877392ed4",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30bce204-8f3a-49c0-ab6c-806ec11f22c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "615cc5b4-ce96-451c-bd1b-12af5d453cc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a561238-b2c3-47cd-9e60-aa805bfc6054",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "655c5dbc-a50f-4403-aef8-17678c977049"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92562b8f-b813-462b-b6ef-ea6cf6f925d6",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bd1b2dc-16a3-4d63-a2c7-25d0fc7e7c1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35fe56c4-71ef-4e1d-81a9-87c797d48f1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad10c1b2-ec21-45ea-93bd-a7f9ff878c90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfa90989-84b1-4483-80eb-c74b81611d89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77c4226a-0961-4014-8020-27db3d2c89c7",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8441fefe-8327-47d2-ac59-d0022a3bcf77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7821792c-3a24-41c4-bf21-8f4a38ff10d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3be6fa52-2b22-4f71-a692-b84768b92734",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6699ba74-5719-4a81-a0f8-990c013cafa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "744914db-632f-4b93-aebd-0e0ff8564b81",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c2e77eb-4f14-4644-8471-5afe93125027",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70dcb151-9c34-45f0-9962-25e7667f4342"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c24f2442-beaa-45af-8e10-d8ec3778708d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "984943ae-7855-4de6-b0ba-43b98cf6a33d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e124737-64e5-44ec-965b-47196e86d5d8",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74c10ef3-da7c-4507-b7a1-053e2c071022",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87ed0835-5e27-4423-bae2-a06a8fcbd433"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1cf46bb-a621-427c-9dcd-d8da58a44d85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e29c82a3-aed7-4045-beaf-efc4d6b9c73a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4713ea28-f10c-4eba-9509-b65027632878",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "748fba6c-f080-4d66-8290-2df359c96a82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4de1102d-6ce1-4dc2-9bd6-32da0235d85d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fc83dce-521b-4bd8-8aa0-653c62e3a6b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e81b6a6d-ae5f-4cd5-b359-ad7a65469f22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "811ea8c9-45dd-478d-83e4-61b8b8a956fc",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d92bd01e-4b46-4a51-b2b9-a38caa796451",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aed7a460-0368-47ae-ad4c-e3475ea88bbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45d8c6ad-7575-4978-8863-7d01f373e5a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "050497ae-819d-4e0a-ad94-0a66b0834ab9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee2c2feb-0c78-4274-ac8b-b53813579bb7",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69842ca3-02ca-4433-ba23-a021b6970d2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c2382bc-5a18-4d63-b11f-b6cda4c4cf8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15b0c2c9-2042-4262-93fe-bffff6037215",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "827d5d6a-e750-4737-87d0-ff6873b4cc3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ec6ebf1-cc3e-46af-a32b-82d413bacfec",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90f22ebc-fb0e-4c6c-95fe-ec1f24c9e7af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f09b257c-db37-4651-8ea4-e0f01cee33ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a6720ae-be41-4b3d-9493-42171bc7e6ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3824623f-a009-432c-a48d-7200dea73cfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8557351-5eb0-40b8-a330-c71777320388",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7052dd64-bcd4-4a2c-957f-ad48cc13e58f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e535b15-a653-4027-b99f-84e1f8388378"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddca3d9b-2dad-4870-a6d0-3c4f0ffc1cc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e87ab654-bb60-4df1-8ab3-95f295a0d13b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16b62b01-7259-4e7f-9df3-6735ab0d66ce",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58f7ef1d-4fdc-4270-b82f-34ffc049a20d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "510229da-8a3f-48d2-beb0-319de0656d08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3ae4d2f-d306-41f4-a268-00e64d112d52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d7af3ae-e8d5-49fc-a6e6-f2f9374ed782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47abfd7d-ab05-4c06-8425-35e402895f39",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "978f0989-a787-490a-84a6-424e8a639596",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "daae800a-3608-4ffd-b139-d94e8c967410"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad62f4c5-1f8d-4816-b0d5-767334019539",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56ea8df3-ddce-4590-8600-410da22d9265"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5298c99-9d22-423e-9c11-59be0d745a99",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4580e686-23eb-496e-b70e-849a64caca6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b169321e-7081-4d0f-86a0-bc512bbc41e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7af42b2-e712-4132-b6b4-c127d0e6b2c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daa7ea87-456b-4bfd-99f3-4621d0edd5b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd453a49-6f60-4e9b-b45a-22792ea05e84",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45efb192-29fe-4a9e-b81d-ba2965314017",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8515f752-1e65-4010-af73-79d6f948196c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "441b4cb6-3533-4021-822e-5c2377482997",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "953774cd-34de-4286-8356-5907f8412df2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9cd4bf3-40fa-426d-b97d-62d10491696a",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c11e5a3-6007-4583-a1bd-1128f2f4ac24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "538ac7ee-d459-4061-97eb-759cdbd70fe1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c9446fe-4851-40f4-84fa-6e4ca4dc2ee0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22edf6de-0626-4aee-b187-2c7d21bfc7cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06b03683-d60c-485d-8da1-db8856e39052",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8308d995-f248-4ea7-bc8a-590074237bf5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6c19f90-3d8a-49b1-aa13-a0ba60b0cb9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4a804d4-6a71-4351-bf77-46b11e21d78c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7410e16-1f31-42d1-b089-e2ba3cf1ac51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffd278f3-36d9-4033-a0b1-0e948d8f92cf",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "decff938-9431-4940-a4f6-3b2befcd8e3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b8928da-b071-449c-8fb1-76343e353653"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "710ac51d-f1c3-423c-b838-582205c883a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de123973-c6d3-49d1-af45-a49d9ede8435"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef0cd0fa-9323-4ed1-9cc8-db6fd8d9e593",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dedfd5e3-58b6-4346-b8e9-39dc0a195964",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c5296e8-34fb-411c-b31a-5fb77cddabef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44ab45ef-4f5f-4fd3-84d3-79b853eb5b26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cc3aa6f-e934-4274-8ba2-30df643ce2cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df05aa4c-816f-4e59-ba4c-f154434feca4",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ca2311b-697e-4324-8638-ade4efccb71d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b5a2d36-d234-4337-8f01-4b2d6411bd10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a913cca-5a5b-458c-b574-41fe93d1cd96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ac951d2-1c09-4639-a28a-f54465305aa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5461cfc2-7715-45d0-8cae-4171d0d21612",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df4079ae-b346-432f-b613-61495ed4229a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5843d46b-4372-4c6b-a2ee-36e28eccae43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7062fa84-869e-41e5-9cae-4b9b45d83f01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "103ebacb-d773-4e96-ab60-eb3b2e4fcb72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8288ad9d-1341-4190-94da-ee6880c185ea",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "005a6c1f-00a0-4ff1-836d-931c2402c3aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79e90381-52f3-40f3-bcd7-6c123dd413f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bde74ae5-425a-4439-922c-05e17d5d5d71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb83a8f6-faf0-4e9b-b60c-f7f38d1a2eef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcc325c8-f528-4f31-9422-69b37186f8fd",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9204ba9-4eda-4e8d-a236-66279ee7611a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2046717b-e9db-44c8-aac7-161f9a091437"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec413f12-6432-46f2-9153-cf610b6c4e97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e37f751-94f1-4af2-890e-b0e8e4549ada"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74123c32-9df9-45d5-8921-14a8776897d8",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fba9d528-c2c8-417c-a054-d77ae4d00402",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b66a6ed-5f24-4ed5-89ab-09afe20a3911"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dbcd8a3-6ec9-4832-ac50-560cc350bf19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b60ba7b-a8f1-4047-8626-45fcfe446ebb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45a96af2-8895-4445-b172-781af8e2ef6b",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69991baa-697d-4198-a848-9c06ef86287e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a298e909-8420-4650-9d60-a2ec172f948f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e5292c9-3238-430a-bff9-1057a0fe3b00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc8770c7-4dbb-41ec-88f3-701a7eb3d351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22f8eefb-0acf-49c3-aef2-f1b26a527649",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ed34ca2-9624-4464-b92b-8787a81e9d77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80fdcee0-577c-4e8d-bb2e-fb00008489d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d56c8adb-86cf-4759-a252-b75f01518825",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1c179bc-a8d0-4354-a86b-63030346348c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02fb4736-150c-4471-9393-4fd1ec57fc68",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2316d5c1-164f-4b63-85b4-faf9fd6b41ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6933d4fe-299a-4cdf-9642-6fd538e93b73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e7e1aa2-9645-44bb-b7f1-8f4c2eaebab7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ba7ad83-171b-4344-bca6-dce8fd0d208c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f2db04b-1cd0-46cb-b6cc-2376fcd12a9e",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f59ff1c-aa55-49d8-abcb-1c02511a9bc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d32243e-a229-40a9-b021-ab3a013c54e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d51ca2a-8ce7-40c4-af15-41061ba4341c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "011b0508-3165-473a-9995-a2950a3b2733"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cac82e77-632a-4c29-945c-e221aff1ae43",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d105bbf-badd-44d3-9d2e-684ca46b1501",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29e011d9-a420-45bb-a466-7a1e7a7b6b53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9e9885c-83e6-4318-9cd7-24768b14c5b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8be6f534-bf7e-4916-abf2-8833dae804a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5769b64e-73f0-40d8-823e-4ce48aa3978e",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8561911-e21f-4dbe-ae29-0b040e34ff3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "102c611b-0ebe-4c1b-86e2-21e584462cd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcf8a90d-a46e-4a13-ae8b-969dab23acb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11a58fbb-141d-4c0b-8924-78a6620d3273"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de836c40-b5ab-442b-93f2-d33f3ec1ca55",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25332e85-2828-43ce-82b8-d867b219c8ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02f7f388-0ccf-4610-b932-1c0a39136e9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63fadc56-a6fc-4262-b56c-0cc5f408f473",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7183c59a-8e56-4caa-badb-41c4f64b0efc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66f88325-e2cc-4fdc-99da-9881e79972d5",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66a9ab4a-aac3-4fb1-8a06-11da75d42d82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a123b42-90ae-4027-8172-c78700a7fb08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddfc4f3c-5b70-429c-8913-0a66d166bbe9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69a2be58-bea8-4a44-a325-f2be57418422"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe3a233b-e554-4824-a226-a1c1014514df",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08a670b1-f45f-4f1b-9c7b-7718af53eb47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d600aa51-3c61-4c76-b2b6-01675476e0b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5779dfde-8a59-43d6-82e1-900111f8a2b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72016def-6617-494a-9217-cb08098f9d7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cb43202-2dd1-43eb-8cba-e935a886bf55",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c4b9844-bced-4a11-a55c-cbd12a1b55f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fff5e958-1577-4ab0-9fd6-e31b41d45b49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62c75145-2363-49d8-bbb8-f9a62662873e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98a3e074-4046-402d-80f7-25cabca1e3d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f7f1d8a-4ca1-4c4e-a8b7-6ad595c6b53f",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67a97814-9495-40b9-980b-42a667cef8a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7819b0a3-7f2e-4bc2-a407-cbb32bb8246a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f72887c-ff7b-43e6-ad02-fc8c85822c0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90531874-33aa-4173-8385-c7118a675dea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcadf501-abe3-436d-be27-01d2f15b27ae",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15ed25d8-95da-45b2-a263-31cce95520b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c76708b-8f2b-42fd-ba60-f6e70d0f1553"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bb737d5-5a84-4972-b2ce-f697434aec21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39402857-5451-4b55-9cc6-e3c11747aa68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec78f122-9ad6-4030-b5f1-110ff61383fa",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53d42327-9d93-4099-97e2-566445737f84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ffbc6d5-c456-4dab-8f21-8e85e0051924"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f095255f-1ef1-40ea-b9ea-0e2a4a0348af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1597cae-b1f9-48dc-9223-04fa8cc03805"
                        }
                      }
                    ]
                  },
                  {
                    "id": "412bc917-de1e-4ab4-8496-a39b7785b167",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c94213e6-6528-46e1-9df8-cffac9b999f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a50541c1-7c3a-4d69-9848-564cbee4eedd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "345877bc-5097-4613-aa05-957dfb785e52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "085eebe7-cd0b-4b71-9ad9-b6691cff4d3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cff8fe79-35f3-4d39-9bf0-bcebf9502af2",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9058093a-b354-425d-8bf8-8b8fb91a5152",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28e9a774-be8f-4142-bb28-8764c8b056da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e2d11dd-7965-48fd-b0ef-69eb4e289315",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "287d21db-94bf-44c5-9457-aeda2be97394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "596f9369-c2b7-4251-b641-571b84c9520d",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae3d4fe1-973c-4fee-baae-c2d07b7d1ab5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c678ae5f-1edc-456c-bf91-93e5aae31292"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83633ee3-3322-4b2b-90e4-029960aa004d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "961e2c2c-aa20-425a-8a06-04e3678c8b43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c920de68-8991-4076-92d0-3c0c63e363ce",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a50c8aa1-7ad9-4bd7-986a-234d30bb3ea7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27284580-5928-439b-8db3-1eace459bf58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fda3a850-196b-4dc1-a3eb-370d56b3fbf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4eafe0b6-02ed-48af-8799-73525e835859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a35fb8b-2ec6-4e66-88f7-97c26acccf71",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a055142f-ee03-4498-9b2a-c633e370fe5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66e8d6ad-abe3-4383-a341-44e19d6feaf7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d67de33-7c92-4395-bb20-714570d53a2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2816f21-fdba-481f-8e3f-92ab69c4b551"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ac4f9b2-45a3-41ad-bc15-66deb9dd2dbc",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94cfd7b2-6da7-45ed-897a-c8446fc7c954",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6a94179-906f-4dc5-97cd-251bd1f95d29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc6ea48e-bb6c-406a-99ea-c22c7a7820a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2d1b1fd-cc3f-49c7-992e-8cc94ff4d95e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96dcab1f-ccb3-45d0-8262-d021d065f7d3",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1a86052-d3e8-4c7d-a5f6-035e85fa5d97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a436194-b7ac-474f-a211-c8d277b994d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "890c14b4-b3ee-44a9-8c58-8fae673b9fbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4d0731c-4767-45fb-935c-17cf95e0d351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee5637ff-c255-4cc6-a909-ccc1e14ee8f5",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45ecfba9-269f-44f4-9916-513b560ae2dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe05cf57-7099-4860-895e-f7282b6f17b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ab0df96-c654-4ea6-b7e6-c2d2335b8c1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3ed2381-5211-4299-a45c-28a4fc2b6d76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deb1dfc8-77d0-4731-93e1-49aed8deae0f",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75da03bf-3ce1-4209-8956-b45df082bd29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72bada9f-dfbc-4071-9009-988d12a6be24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4f96888-a3ef-45dc-a68d-013a829de96a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "484c5745-28d0-4f22-906e-bf32cf3558aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e98fad9c-8d0a-44a3-b31c-bcc77d6e749e",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6104dc9-4678-4c37-b4c3-2c9433a1936e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c98470aa-5882-4fbd-aee3-b12b9b0497f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79d16813-6294-46ea-b662-432d210376de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4800dfa6-1277-41e3-aa8d-60cea64e690f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86e28849-89e8-4443-a5e9-a2573f06cf91",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28b2aa8e-c2ed-483b-a6d1-16b2ad10eb36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9273a65-4f5b-4b53-9d51-bc4909901112"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac3cbcb6-5d85-4638-a3a2-2d18a69ec468",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4535ca37-4ed0-4511-b054-d46697d8aa79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "247f6c84-11c9-4c9a-9bf7-1e124acfde54",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1836108-87a8-470f-a087-96871ad5fdf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee0f9db0-48b5-4a07-be52-6da228f750f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16fcb3f9-183c-4349-a1e8-648e72cd45ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6cf993c-fb9c-4d81-aff1-a269b3600b51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9e45883-0795-453f-b021-cdca76fe33fa",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56bf997b-7746-49ea-b25c-07add8b2e765",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b80b32a9-55f6-40ff-8ffc-d8f2f3296ffd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa0e85d5-4493-42bf-a86c-31f50543bcd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd4bb72d-22aa-448b-a3bc-efb4273db4f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ebadb30-0fd7-4b0e-b82d-e138fde7fd8d",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec394429-073a-40e7-97bd-e40795ad4b74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9176bfca-9128-48a9-88e2-4d79a2285f73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e33e001-a170-4f8f-bb54-035112a2976a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37f60845-158f-4cd3-a18b-289fc352d8f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aebccf94-b84a-480f-bedf-337c936f9170",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee9520ec-722d-479d-a2e6-ac567d5cd95f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83d4d3bf-bc45-4bfe-b9f3-35ec6b7c1e4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abfe154c-6fc0-4bd8-a560-d9496f77edc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fc8d0cd-0c36-4359-b085-b745c21a4385"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3eb9a68-1b15-440f-996c-aae243088c34",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ee46c1e-a8b4-494a-9f2d-5d249fd8c198",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ebd3b66-400d-47bd-b9f2-dc52cdbfeb78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e26fbd95-2fc7-4ec0-b756-73c95cea7b05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c1560dd-ca5e-42a6-9890-0db4ca200a36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c30b1556-9ac3-47df-a231-928a092a212b",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bd4d48e-b1e7-4290-b6b2-97c96064669f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35733c7f-f06d-4119-9746-18c09925b484"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8a1eabc-6e31-48ec-bbff-22604b57a627",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e9ed4d7-7869-4c96-9b30-4733a4e880db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c47e668d-e661-40d1-b902-d160bce4da1e",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dda0efa-81c5-49c2-87ec-88ac805d158f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32c3d228-93b4-4f60-a6c9-63928e4b921f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4045d0b-cbd6-4be1-9c1a-3a78ded90ea5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb3948f4-e8ea-4b0a-a07f-80a059c95de2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9f87447-d894-49d6-bb49-7a3f6700dbfa",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0255873c-f19d-4555-a845-a231332052ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0bb218aa-54b3-47e7-961e-c8807dd0b68c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b293627-4a50-4016-b8f8-94b6ee02b87d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f95ac1f6-d19c-416e-aa7b-d06fd7c8c679"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27af57f6-7fe7-4036-a6fc-ee16b1776b41",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7ceecb9-c7d9-4088-9ae0-f1e7a4a65e6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a01776e8-5c81-4e7f-9246-f063da9ea61b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b1aed40-4af6-4f62-bafb-d44bc1d2612f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3f94c93-2a4a-4a6a-b9da-b3de8807d4d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "290f82f0-4a3e-4032-9674-62064297e9c4",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf9d19a2-f071-4d1d-aa84-cb85820e4247",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3eea071a-89eb-4804-95a3-e388da2ff7e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfd4c217-ea63-4278-9742-4f59f163c581",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79e1108a-c8bc-4f48-852f-1271056ef1d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5b29c43-c23b-4873-a0df-dce7c9f67b2c",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5274e01e-1a4f-40fa-afc2-19ae9ee87a2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0452804f-f3dc-4f0b-9071-7c375210ded5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "447b421d-cccb-40e4-9ec0-6fbac4319d81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a73b2941-0333-40a4-bfde-f6acf6d0a010"
                        }
                      }
                    ]
                  },
                  {
                    "id": "669a2691-716b-4a64-bb01-197d517ee724",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df0db965-c67b-486e-86b0-8023b35d09c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a520fbf5-99e3-4894-ac26-40c25423e507"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "605af7ae-05e8-49ca-b590-97dc66464f81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "982b8750-3775-45ab-ae5d-2c3e66b825f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e3d0bf1-0451-48d9-84e9-ac31565a3e8b",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "644e1d61-a52b-4a93-95b1-28f3da9d15c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f013a79-c851-4969-ad7f-dbc90d6cf57f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "347a1c32-a782-46be-89e8-93affb0980cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5448bc35-2ef8-4a33-92d8-9a54f6663fcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b942651-5657-47c2-ae0f-41fabccf9dc3",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00f21288-7984-4ff6-9ac3-7459b22e6953",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6bf6f34a-c4f2-4d3e-a9b5-86b6b781df6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d695636f-e239-47dd-9f12-e499a1fd2c4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "311c057e-5467-460c-96bc-0aefd4395ba1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7294d037-197e-4460-a05d-02d364686b8f",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a8fa2d7-fe6d-47c5-8ef3-da026b89a7e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26718834-f9c9-4260-a97c-bf4384d98e1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "639f00bb-bd85-4e2d-9a3f-6d511771201c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46fcce6d-4676-439b-8168-7744c51337c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "053f963d-285d-4e78-bd9f-20159d294117",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67db147e-235b-4940-b3d5-7a423b5e1f29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0267694-1838-4f6a-9af1-4706fa4e6948"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cbc6750-c745-4a31-8dd0-db6aac8ad360",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9a421ff-16e7-49b1-83d8-0dd53aea34a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f8d383c-7cac-4043-9681-bd7977c29b4e",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73268fc6-00a9-4d26-ba8e-c134b187340c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5020dd1c-7bf2-4bc1-bacc-e435c17fe2e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35701d62-b411-413b-b304-399c2a07bbb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8835197e-08d7-4460-862d-a7ab9a727c91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10532ced-65a3-4702-8fda-38c00e68016c",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fca4aa4-cd1f-45b9-b8c1-6e22e0fde46b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5338e6cd-949c-4bc5-83da-4952d0f03cab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03bc0ec5-2356-4bbc-a5e1-0d5496cd1dc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a773c83-1f35-4018-9d12-7895c3d0a98f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1192aa43-ff4d-4684-9964-08f0673b5be3",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db7197f7-542f-4a17-ae6f-527d07343b20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0322bb3e-8e44-49be-bbc5-27c03dafcf6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a46d6d42-dc54-410b-aa55-cf4c4226fa98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87b9e23a-6864-41ae-85d2-500ebdb134a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "435fe199-54db-44af-ad40-8ffa754f1c02",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffd70a4a-cdb5-4a8f-a111-a83c43947d5f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61dcafb5-b508-4121-9aca-b86e0cabae26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13851be7-4a2b-493a-9f4f-d389a70a544d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4f8d2a5-8da3-45a0-8d73-9fe9b7f32fd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19394103-8c3c-4d59-bd9e-48b650cca436",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89bd447d-40ef-4518-ab3e-7c1db3fbce68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "258bc562-2391-452d-98dd-4865e14e31ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f6537ef-377b-49f1-90d2-d0c7cd46b596",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "270beef2-6377-4311-925d-620e14d592c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10147d67-9acb-43a7-83a9-2e90dc30e03f",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "824da383-022f-4c61-b4fd-f8929fc3eced",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "514050d6-d424-4c39-bf18-1199d888dda0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75b2c27c-20e9-4baa-92b4-07e3e25fcbda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f102d66-2dda-4897-a5ad-2180e6344b72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2fc0bb7-2c5a-43d2-a0df-406cc0d363bc",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d75358b-f80e-4802-9114-c1cc3fe55c4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9673c9f-405f-468c-9ee5-470f662e6cae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53ac0ff1-fd85-4d52-805c-be8e3170b7e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb5ee2f9-836a-4c7f-ad1d-16132b7fdf87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a101133-00bc-4c95-9fb6-d943ab348073",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2103c113-bd84-4d80-bece-216e714291bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59097726-712d-4495-a0db-209c094d8f0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ca5fe66-e290-4584-aadd-d86004132f48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24bf8df6-982f-4b45-a8ff-407bcbb152b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82b95fa7-5567-4b9c-90bd-214b78f5821e",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c227afcf-0734-49d5-bbaf-ae067a241a7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cb45ac8-41ea-45f5-a132-965e83c4ff3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c84af971-b06d-4998-a2fe-29cc55d9f8a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e94080ce-f1fb-4495-a720-33c86f8aa6fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dcdfcca-c235-4861-ba85-6cccbeb2569b",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24e58a60-1f5b-4784-9db0-90acfbf5693a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7391cbd8-426a-41ce-974e-2f33761089e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b73e8ad-bf36-4d6b-86ab-be82f176a656",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30d57d2d-3dd9-419e-9f6d-a2dfe6f848b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "428835f3-e2d2-4b60-a31a-8643300d37f2",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5921a19c-bc5d-4812-8d71-c318dde5ea71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70b6e4b5-869a-40c9-a55d-d2aef9b84afa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0ddfde3-c77b-447c-b547-e6687760c7d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2f27ebd-e429-47b8-bd1f-52cd2b277668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a10eb80-4ece-4c5f-b22a-6abc399a625c",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2143569f-bccb-46e2-ab20-24a61e573eaa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4d0261e-0f7e-47e9-8994-ad44cc1c9348"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a909208a-c462-491a-abe9-60b99951b75c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "389393e0-37d1-45b1-9382-34ea0661dd5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2822faa9-9e3f-435c-9d13-c7906dc9a1d7",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16510ac8-9866-4731-82a9-239f1727b18d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b7f33c3-756b-4c8b-be1c-afb2e703b9a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68d7ba0f-0223-432a-8e8b-656eb8deca57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "738076dc-8e88-42bc-902a-2b8d1ad85715"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fda58fb1-6c97-4840-a3d7-572a0ab148a8",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2d1e6f4-6e78-4a42-bf96-bff3ce423a98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c557fbf-d863-4887-84d6-df3514e40e76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76a86927-8664-4bf8-b563-0ba44a3f5ddd",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d33490ff-0946-40fd-81ba-eb03b66c05a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "859cf6da-2d31-456a-99f3-96b3bf8c4aab",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7929bdc4-519e-43ed-9581-944147ebbbc1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92e02ba0-1831-4f15-85b6-a5cce7ee4910"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d42fa2a2-ab5e-4a63-a0ba-eeabdec24454",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bbc02ed-e544-4cd5-b4c8-4471a857ad6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebaea653-c778-46b0-82f0-e7266bb33795",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3649a0dd-d27a-42c6-8d4f-758c3f034b2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90702a07-9b25-4f31-a1cb-609badb75959"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac509fa9-6d2f-456e-aab5-b59692380caf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c90964a-b389-481d-9c40-d3288b9c1820"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bb1be82-e764-4524-be57-5c92b406fbfd",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de9981a4-3b20-4396-85c0-ce83130c5d76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec73d2f3-7743-49c3-a4f6-aa2e315e6cdd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50ade067-ce1b-40ec-a6fc-c72651acb652",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12744dcf-fc2e-4616-8565-42edea6a7cfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a8644f6-4039-461d-bb85-db4421838d8b",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83a876f5-72a8-4470-8c45-fa82122f413d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12a35f08-3a6a-4d79-87b1-33a5a164add7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45d95518-390c-4507-85b1-183dc69b9b5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa0d95cd-ac00-4939-9faa-cf7129af719d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dfd4c36-b7b3-4b1b-a8c3-a5e8dc5f7ae4",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e3b8b88-77e0-4fcd-9039-5c77611c1f5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b210e2dc-1018-46e3-bf21-1bfd6013504a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe1501c1-6a4b-488c-a5b5-362a332128e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2698f663-f1d6-4ba1-a463-2c382d94f65d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd2d0fd2-4471-4887-8bd5-912448a84af7",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50bc8a24-d8f5-4039-9a7e-fe1bc4857914",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4dda6e3-422e-4e6e-bed8-99e39591d041"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc9db554-932f-459e-a2b0-24c534ddf246",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac941f28-003c-4db4-9816-1a5f5b61b9ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ed22860-64de-454a-98d7-582bbc069fb5",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44303704-d563-42bc-8f08-76a184b896f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d2a3d8f-8f21-45ec-bad3-211b43c18152"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0c3e691-cae8-47f5-8e58-d404e44a333f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd1f1547-04da-4698-9be2-4ff1e6955457"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "45a1c661-7f74-4af1-94d4-73bf1ca0d0e1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f5afa52a-c854-444f-95ff-f61da36dc38a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5a751edd-2e57-45a4-ad8a-b9805335f02a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9c8a64ff-1461-4609-ba62-a393bbb50079"
                    }
                  }
                ]
              },
              {
                "id": "0c019e69-5976-48be-9e27-de0851387bfa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a8c16c21-5fb6-456e-9ed2-d16832a5a380",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a85a025-8950-4986-b751-f413f0af966f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "b728e9a7-6b6b-457a-9cb0-469b1b875cbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66240aa4-e098-4590-8387-ee697318e535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f6ca2a4d-7e95-45bb-b2d5-33d043f841ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5490774f-1b55-4d79-9e3e-420adb5983f0",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1169eaec-dc91-4a51-817b-297306e24eaf",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "eb3ebd88-a20e-4d5c-8516-a1dbfc007a04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7c5f27d-d4a9-48cc-8f6f-6d6702e73511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "66fe7c43-100f-49e7-9dc0-0c7bc2ca6fab"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aee571c8-e381-44dd-8df4-32c6d2461ede",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b67ffd38-bf83-4208-972e-fa1b5075cb10"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "da72633f-c5fe-4336-b2f4-faaaa0921f5f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "31056b46-c5d9-43b8-a128-715f6b1c26a5"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "12b4ba80-d971-4cc7-82ae-bc17ee01cf9c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "630ae586-5d29-47f9-828b-a161a17b020f",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0076095b-538f-466b-9818-dc4866c435cb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8175658c-8c51-4a21-8eab-acd441287ae4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ed99d1fd-e0bd-4a31-9e58-729d597db3bf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ddd89754-92c6-45d3-afba-837d07962f66"
                    }
                  }
                ]
              },
              {
                "id": "64a42b45-b61a-4502-9317-aad155bd7ce5",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a46d0a4f-eae3-4551-8c29-ad0fc16421e8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b304cda1-e557-44c3-9e5d-c8c75182f2b6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "95c0d03d-737c-4326-8185-4191ccfb25f2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "302ec761-87a4-4056-8987-02cf9d5f38f2"
                    }
                  }
                ]
              },
              {
                "id": "40a303ed-f8e8-4d39-9df4-d18d375530bf",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8aa3b001-99c8-4602-a0ab-ab2daf53b72b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ff7caafd-3530-4a77-9893-32f4e7cd1f8d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8ea7388a-f77e-42aa-8d22-f9bcbb1a30d2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c5b69d66-4f60-4a2a-beb5-631b65d97241"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3c8c2ac9-1114-44b4-81cf-6b840e807e55",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "ae8775b2-1566-4d2c-827c-b645be6b4d18"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ee853bfa-779f-4b8b-8694-2ac610d417f3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d8a8a0ce-6fb5-48e6-9ca6-a4a545a6fe7c"
            }
          }
        ]
      },
      {
        "id": "ca9cd5ce-10c3-45c6-b659-b8cac6c21749",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "8123d01d-f3d8-43cc-9183-1e18181a6112",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3b725ed4-2d86-4379-869d-8d6c6ecdb98c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ee5af07a-1f74-48c5-a5d3-884cac6f6ab3",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa158929-a895-4acd-9799-0f72cf6e85dc",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "9a8b27f1-7c42-4689-a578-615dc040919c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "092cd1f0-bb53-4f71-b54b-b38744db4b01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "399415f9-7b0b-4bdf-9b90-b7ca56e1ef1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27fb580e-4ca3-4e36-90d9-f501986769c4",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b88ca93-93ad-4424-b71f-3bc7e80d69a8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "231c92cd-c422-40e9-8da8-71c4adae0c74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0db56231-5723-467b-8d7d-a77efeb73cea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3eca7fed-1209-4d6c-8d1c-c8294fe94560"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d201278e-365c-4020-9fdd-2f70a92ee884",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "84eae105-5f4d-429a-9a1e-6f3bd49b33ef"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2a454a62-3f49-4c51-8bd3-9fec1d480492",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8aa74225-a144-47cc-9d89-064fb91f0207"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "494b0916-4d18-45ca-8bdb-60ab73e46c89",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "10b073cd-6bbd-4c51-bed0-b4f6593061ed"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "267352de-a4d1-4797-88ab-ea1559295993",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "92040d8e-8406-47fe-8524-df27efebda92"
            }
          }
        ]
      },
      {
        "id": "22256269-8813-44c4-a8f0-fd836347c966",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "3ce061cc-1249-4c99-8ffb-616e079bcdcd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "08dd0d9d-5cd7-4f97-b31d-77421e41bd46",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bc2404e7-ae2f-4a89-910e-0b61ebe25a82",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4881bdf1-a2ff-4820-87c0-a04478f44587",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8f5ca976-ea4b-4e2d-b571-63d28faa383b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "211268e0-8b1f-4b41-bfde-5e9467c52588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "75f54e8e-911e-4d71-b779-ac45e7ec1cc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b59e952-4e0e-41b3-9c2d-5d1f3e3670e3",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20ee2d34-6628-44cb-b49e-75985d986376",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "bf7c7e48-d172-4942-849e-02aae3bcd8d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a42b6fb6-3a32-436a-922b-c3ab55e44ab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3762be34-ae19-4937-948e-d208145e2c1e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d71bbcab-8f28-4f13-a343-3638325721a2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2bb8e395-4a9e-4d46-a363-4d6ec6914349"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "611492c6-23fe-4255-9e2e-2e814759a09a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "51af64f6-e7a4-448e-b420-fa0be2def785"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "94f9ca18-b5c1-490a-8bf8-a7e3f03cd52f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "fc5a414c-126b-4969-864e-6eee9ac69d5b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "34efdae4-4f58-4ac7-97d7-16884b0416b7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0044331f-f000-4367-8625-c0dce6cbbe75"
            }
          }
        ]
      },
      {
        "id": "aea89e5f-c723-45cb-a969-97e10971720b",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "a025eced-f4b6-407c-8423-a71821eda3fd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "34a24129-dc25-4781-969c-21c5c4b3a60f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "adc3db0c-db8d-4a42-ad82-78d221a64580",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cac2099a-dede-4e17-acfa-f2efd13574aa",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b110500c-d593-4315-821f-3aab1ccbe075"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98c42215-a5ff-4af5-9dc5-782ea48826a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "258a76d8-a38e-4589-aa0b-40cdca4e8ee1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e58d0a42-3cb9-47dd-8a28-70c04742d26d",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc36fb5a-4b3c-4d82-83df-9c3af3a96163",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "61660882-3e80-4781-a358-c481f1994e64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf73bfa0-a26a-4c74-a373-1c0a1bd7392d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5be285fe-6df5-4da2-b3bf-b37c6532f9a6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a931d6da-f706-46df-9988-f4d2e130315a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e2b2d2b5-84bf-45fb-ad1e-4ca75bbe042b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6133aa98-13ca-464f-9520-70f2cf7ab933",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "782baa4d-749e-49f9-951d-b29ec2b3a9be"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d3ac3e22-5f20-4f17-ba80-b21993d5a43a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "72376aff-10fb-40b7-9dfa-95824d5872d4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2ce9a2aa-9fc3-4271-9373-59bf1ec1f401",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fb7dd72f-1e06-4b22-a901-a2aa6d28a048"
            }
          }
        ]
      },
      {
        "id": "c58cd3e6-a229-4055-bceb-d4f93ed398d7",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f122877e-300b-4048-8cdd-74242f0b6201",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e4e66e78-5eb7-4c27-a995-4a5e17f75d8a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "7e98c894-2e56-4b20-8c20-4bd36cdf4438",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c387ecc4-bda9-4c28-b6c8-3ba7c89a9eba",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "63ff3816-3540-45de-8479-48ff62f36d84",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 505,
        "pending": 0,
        "failed": 86
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 223.04615384615383,
      "responseMin": 8,
      "responseMax": 3824,
      "responseSd": 445.69974131502914,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1666400546202,
      "completed": 1666400615180
    },
    "executions": [
      {
        "id": "da37d1fc-87ae-497c-a7a2-9a8d2933474a",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "bd5562e5-39aa-44e8-a64d-0f78534262db",
          "httpRequestId": "9ec9e788-1b78-4d87-a2ca-4605ad9e6741"
        },
        "item": {
          "id": "da37d1fc-87ae-497c-a7a2-9a8d2933474a",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "19674278-1767-400d-a444-1d6eb80357e3",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 0
        }
      },
      {
        "id": "455509fd-695d-407e-97cf-33913b9c336a",
        "cursor": {
          "ref": "10d2310b-c2bb-458b-86af-301d37111863",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ebb8ab7e-9764-496c-94a8-251fbeab726f"
        },
        "item": {
          "id": "455509fd-695d-407e-97cf-33913b9c336a",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "c1e10965-9e1e-4f90-ad99-9e002aa70b94",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "1fe9ba66-9337-4411-ae45-81d3845b0d6b",
        "cursor": {
          "ref": "f43bb508-e81a-41c7-b759-02e6982f900b",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "b2c49151-2ac6-42e3-a76a-c3833b5a37e8"
        },
        "item": {
          "id": "1fe9ba66-9337-4411-ae45-81d3845b0d6b",
          "name": "did_json"
        },
        "response": {
          "id": "4b437389-0b79-4a33-81eb-81ad97bd6ef1",
          "status": "OK",
          "code": 200,
          "responseTime": 3824,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "193031db-66a2-4ce1-aeae-8c2b0afec2f0",
        "cursor": {
          "ref": "2f342136-5991-4eda-93fd-fd25c78637b6",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c8cf7e53-72df-4865-af04-c7a53e67a5aa"
        },
        "item": {
          "id": "193031db-66a2-4ce1-aeae-8c2b0afec2f0",
          "name": "did:invalid"
        },
        "response": {
          "id": "f6e14dcf-3e12-49b7-be77-27f976cd561a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 142,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "193031db-66a2-4ce1-aeae-8c2b0afec2f0",
        "cursor": {
          "ref": "2f342136-5991-4eda-93fd-fd25c78637b6",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c8cf7e53-72df-4865-af04-c7a53e67a5aa"
        },
        "item": {
          "id": "193031db-66a2-4ce1-aeae-8c2b0afec2f0",
          "name": "did:invalid"
        },
        "response": {
          "id": "f6e14dcf-3e12-49b7-be77-27f976cd561a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 142,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54e3d5c7-2e0e-4e4d-bdc3-7f1a6f039f33",
        "cursor": {
          "ref": "5ccc72f7-4278-4b00-bf2c-1b7e948011e1",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "1e7e0ad7-b4fb-407f-af2d-7a81d4b851f6"
        },
        "item": {
          "id": "54e3d5c7-2e0e-4e4d-bdc3-7f1a6f039f33",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "e124e7de-5395-4765-9910-d36c74dc8b42",
          "status": "Not Found",
          "code": 404,
          "responseTime": 832,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7898377-4821-461a-a62a-306cdcea75e4",
        "cursor": {
          "ref": "77d91f80-e242-4bd9-8f18-33ab0acabc70",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "5ee1e184-64f5-46eb-9b3a-f46e6cf97fc3"
        },
        "item": {
          "id": "d7898377-4821-461a-a62a-306cdcea75e4",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "31841324-a8ca-4b3e-a845-a89ef49d9d76",
          "status": "Not Found",
          "code": 404,
          "responseTime": 46,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "691597a5-82b3-4a7d-87d8-8dd72b968fcd",
        "cursor": {
          "ref": "97c7a0d3-8b83-4b0b-aba7-35f4260015e3",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c7381c96-a662-4233-9a09-7a2b9feb3351"
        },
        "item": {
          "id": "691597a5-82b3-4a7d-87d8-8dd72b968fcd",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "235a9876-dc7a-46b4-9ea8-1a5675b1dbf2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 159,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64e34938-bef3-45dc-89d1-d1cbc3f1dc71",
        "cursor": {
          "ref": "3019af19-ee61-4b7b-a15c-6ab8cf1dca84",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "bab14341-c289-444a-9846-a0b762bbab18"
        },
        "item": {
          "id": "64e34938-bef3-45dc-89d1-d1cbc3f1dc71",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "431eea19-74f9-4f3b-abff-60be74303604",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 90,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64e34938-bef3-45dc-89d1-d1cbc3f1dc71",
        "cursor": {
          "ref": "3019af19-ee61-4b7b-a15c-6ab8cf1dca84",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "bab14341-c289-444a-9846-a0b762bbab18"
        },
        "item": {
          "id": "64e34938-bef3-45dc-89d1-d1cbc3f1dc71",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "431eea19-74f9-4f3b-abff-60be74303604",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 90,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59698b4d-083a-461a-a1cd-117df08940af",
        "cursor": {
          "ref": "0cbd4bc4-4791-4084-87aa-ce6d288d7c95",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "ad096a77-1fd4-4c61-bdab-9344bfcc0598"
        },
        "item": {
          "id": "59698b4d-083a-461a-a1cd-117df08940af",
          "name": "identifiers"
        },
        "response": {
          "id": "5791b722-845a-4f96-9a4e-cf7d4796a763",
          "status": "OK",
          "code": 200,
          "responseTime": 310,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26a9c79f-ee58-4220-a895-c572cfa4cc8f",
        "cursor": {
          "ref": "ef294276-5ab0-465b-b97c-dd6ad20be005",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "654bea45-631f-489b-b842-8dbac93302e5"
        },
        "item": {
          "id": "26a9c79f-ee58-4220-a895-c572cfa4cc8f",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "c3a3c135-5fb9-4aee-801c-9f5f5a381d07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 169,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26a9c79f-ee58-4220-a895-c572cfa4cc8f",
        "cursor": {
          "ref": "ef294276-5ab0-465b-b97c-dd6ad20be005",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "654bea45-631f-489b-b842-8dbac93302e5"
        },
        "item": {
          "id": "26a9c79f-ee58-4220-a895-c572cfa4cc8f",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "c3a3c135-5fb9-4aee-801c-9f5f5a381d07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 169,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e082a8d-44f7-49af-931f-0fb15ea9d1c9",
        "cursor": {
          "ref": "d6a9b5f1-b1c7-4645-b332-2efbc2c5edbb",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "8ebe20d6-9490-4dbb-a058-e7be311fe8a1"
        },
        "item": {
          "id": "9e082a8d-44f7-49af-931f-0fb15ea9d1c9",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "90a26cd7-2e2a-4ccd-bb75-21d250f7ba8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c59cca76-f1d3-46ab-89f7-ea9ae6bfca98",
        "cursor": {
          "ref": "c1414af0-c123-48ff-b709-71040a3b42c1",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "08337adf-e4ab-450e-bed7-cb7a99356c63"
        },
        "item": {
          "id": "c59cca76-f1d3-46ab-89f7-ea9ae6bfca98",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "34d8ce77-c536-412a-94b3-67fe687dfe0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8975e6dd-e4b6-46ec-9db3-17b3b499e174",
        "cursor": {
          "ref": "13a7d7d4-270d-40c1-8cba-070c1df7080f",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "59b021d5-e3cc-4c3c-a069-af098133ccba"
        },
        "item": {
          "id": "8975e6dd-e4b6-46ec-9db3-17b3b499e174",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "03fa46d7-13bf-4a26-bbb5-e2b31db0a179",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96cbd701-dedf-4d08-8a93-dc59366cc17a",
        "cursor": {
          "ref": "cf3ff550-2e1e-4c3c-9cba-3c9b6477325e",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "a9e13c3a-9962-4644-ba57-71c43c159803"
        },
        "item": {
          "id": "96cbd701-dedf-4d08-8a93-dc59366cc17a",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "069806a7-1d7c-455b-92d9-404d24aec4de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "034fe94c-44e3-4447-b877-cb6908e3aafb",
        "cursor": {
          "ref": "e6fca5f1-960c-4969-8831-1294a5e744ca",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "cfc7e7be-7610-46cf-a495-6596abe40f16"
        },
        "item": {
          "id": "034fe94c-44e3-4447-b877-cb6908e3aafb",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "04dd55bc-8525-45b9-b1f2-189926a7e07e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32cd2c95-50ce-4a55-bc55-9a02251ee65c",
        "cursor": {
          "ref": "c3d2c52d-37d2-46db-a7ae-8f3357862eca",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "718c966b-f88c-4bb2-9004-e6ff10cb2c70"
        },
        "item": {
          "id": "32cd2c95-50ce-4a55-bc55-9a02251ee65c",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "eb72c10b-e752-414a-bb40-e4279ecb0085",
          "status": "Created",
          "code": 201,
          "responseTime": 1064,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "2cb9a6f8-ab06-4319-b24f-5ef3352e1da8",
        "cursor": {
          "ref": "0e2b1c4f-53cd-4c0b-af77-9c999f33cdeb",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "97842745-a2ea-4a49-af75-507dd4126fa3"
        },
        "item": {
          "id": "2cb9a6f8-ab06-4319-b24f-5ef3352e1da8",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "82b86824-2c60-4d61-8bd5-18d74eb70632",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f8dda57-dcb1-4a6f-8e4c-e6a59605d492",
        "cursor": {
          "ref": "1ea2278b-d5c3-4ef5-874a-680bebde1173",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "7bc4393b-5880-4a56-b624-15c91f2d4a1b"
        },
        "item": {
          "id": "5f8dda57-dcb1-4a6f-8e4c-e6a59605d492",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "0f2f09fb-048f-43ff-8b06-1dea2b93f115",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2729b58-c084-43ff-8bf4-009030f2ddc2",
        "cursor": {
          "ref": "15ac23b5-3cb6-44ec-9c59-516965aa5bc0",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "f235f30a-3327-4bdb-862b-762c1bdfda2d"
        },
        "item": {
          "id": "c2729b58-c084-43ff-8bf4-009030f2ddc2",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "e5092077-82ac-4ae5-b596-41defcfdcba1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67e6be0b-d315-4537-a6c3-17c7d0b77e7a",
        "cursor": {
          "ref": "18850e8f-5948-487f-8d77-d49c51c673c1",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "c3a1acdf-8ba0-44e3-82d3-863bc81bcf23"
        },
        "item": {
          "id": "67e6be0b-d315-4537-a6c3-17c7d0b77e7a",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "69727a8b-fda2-441c-8483-13e5fe59494f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83f34d57-f04f-4e8a-beb3-12c2fe0e42ca",
        "cursor": {
          "ref": "de9baca4-a17c-4533-b35f-33f6051da387",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "d526b54b-2c58-431a-85c1-38696d8d64db"
        },
        "item": {
          "id": "83f34d57-f04f-4e8a-beb3-12c2fe0e42ca",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "76142614-987b-4940-918b-72218f40a235",
          "status": "Created",
          "code": 201,
          "responseTime": 580,
          "responseSize": 584
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "415d5d28-c908-49aa-b709-19eb3321e857",
        "cursor": {
          "ref": "cbc3080a-f9bf-4394-a062-8f7bda4894e8",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "84ed80b2-6248-4378-b0ce-a18d33069955"
        },
        "item": {
          "id": "415d5d28-c908-49aa-b709-19eb3321e857",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "6cd74f4a-0fd2-4fb6-9016-3a37a051f31f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea033df6-3426-434c-ab2b-450725c09eb1",
        "cursor": {
          "ref": "7aef1348-40b0-4d08-9da1-90393dfc48f8",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "681a58fb-5ccd-49e9-b5e0-f388e9adfa08"
        },
        "item": {
          "id": "ea033df6-3426-434c-ab2b-450725c09eb1",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "d9dfc927-a7d9-402b-9357-ec375812b95a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be77ab1f-4716-4bd3-b739-6538231ffc6f",
        "cursor": {
          "ref": "4c6138fc-c07e-46a8-8102-ada090066e7e",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "4ea79652-6d7a-4928-851b-ef516bb07ac7"
        },
        "item": {
          "id": "be77ab1f-4716-4bd3-b739-6538231ffc6f",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "7b809ba6-8533-42ee-9630-d95835ebf4ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ba3d112-1833-43bd-adb9-8a983e75c357",
        "cursor": {
          "ref": "037376fe-9592-4fb2-98a0-3a616b4271b0",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "2b92a271-822e-4815-b207-123b0f94b34f"
        },
        "item": {
          "id": "2ba3d112-1833-43bd-adb9-8a983e75c357",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "b806bbcb-7384-40fd-98e7-003d002c301d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02f851f7-aaed-441f-91d7-037210792c6e",
        "cursor": {
          "ref": "d371a527-393b-47b4-8b01-bd8a0c27fc14",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f25248a3-8492-45cf-a578-173b0e0fca63"
        },
        "item": {
          "id": "02f851f7-aaed-441f-91d7-037210792c6e",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "3302cf00-1ddc-47e8-8090-68081d6958f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9d2396c-0cae-4cb2-8be7-a32d0949f3d6",
        "cursor": {
          "ref": "fc59b35f-be0f-43e0-8051-f2e297cea9c7",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "750c338f-0a94-4540-864b-054915bc3501"
        },
        "item": {
          "id": "f9d2396c-0cae-4cb2-8be7-a32d0949f3d6",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "9de53f4a-978d-4078-a5e0-1087d42601df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0200beff-22d6-4add-8040-b674005dd139",
        "cursor": {
          "ref": "f665d1ba-f961-45d7-beea-bbb0dc614214",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "b03e010d-05b7-4e21-aca9-206da02ae810"
        },
        "item": {
          "id": "0200beff-22d6-4add-8040-b674005dd139",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "ba9898e5-cc4d-4766-ad6c-a0d3538ced09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fa164a0-9f73-4247-bd39-7f34aa648035",
        "cursor": {
          "ref": "570d8f5e-5987-439c-9aee-08ccee0f5300",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "b6d7b6b1-2d11-4a17-8f18-73b2c7ced919"
        },
        "item": {
          "id": "3fa164a0-9f73-4247-bd39-7f34aa648035",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "df62a854-8fc6-4fd0-80bc-d72060153740",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51b9493d-8210-414f-8abc-9c4f46f5a323",
        "cursor": {
          "ref": "04e5f52b-b09c-49a1-b727-8de0182dca25",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "305941f3-7402-4ad8-8637-3a782a381f2b"
        },
        "item": {
          "id": "51b9493d-8210-414f-8abc-9c4f46f5a323",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "f05eab80-84a4-4572-a5cd-f6566f8261b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d279c30f-f09a-48df-80c4-a70c747d6cde",
        "cursor": {
          "ref": "88d61d5d-9365-439f-9ce0-405db5046d9f",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "6f3ae875-1e3a-4dd6-97ed-28573f3362b3"
        },
        "item": {
          "id": "d279c30f-f09a-48df-80c4-a70c747d6cde",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "62e6b3fa-12bb-46fb-bf9c-9ca671bc6b6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "317a289b-d5ce-4161-8eb6-647e8a492146",
        "cursor": {
          "ref": "20f58e3a-c590-4b3c-bd06-4517e6cf9eb9",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "2c114de9-d6ba-40a4-b18c-add43720725a"
        },
        "item": {
          "id": "317a289b-d5ce-4161-8eb6-647e8a492146",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "d1b04636-0aff-44c0-b033-83eaa3a1e66b",
          "status": "Created",
          "code": 201,
          "responseTime": 845,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "8faad4e2-b798-4be4-a6c7-9ea5b5b2fdd4",
        "cursor": {
          "ref": "85659b4e-74ea-4a03-9584-26caf38eea37",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "c6175d73-dff0-4cd3-89a6-6fdfb8b1d6eb"
        },
        "item": {
          "id": "8faad4e2-b798-4be4-a6c7-9ea5b5b2fdd4",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "b71ad995-475e-4baa-8cc4-855074e3df7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39b7904c-6822-4b89-af22-bec96835eff0",
        "cursor": {
          "ref": "d8c3101a-2be3-45c2-9374-5f253832a584",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "181dbb69-a420-466b-a28f-c127e8b942b6"
        },
        "item": {
          "id": "39b7904c-6822-4b89-af22-bec96835eff0",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "03b0f82f-87c8-48a8-af18-df8499e58323",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c36cffb-0a93-4e9c-9388-9775b27dd338",
        "cursor": {
          "ref": "14120809-0e1a-43e4-9167-23617246de7b",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "e800c0c3-e486-451e-a0a7-135ddcecca84"
        },
        "item": {
          "id": "0c36cffb-0a93-4e9c-9388-9775b27dd338",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "4525d780-3d2a-4e09-8a29-7cabe3617901",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd20deba-58ab-4b15-8306-df9c539b8506",
        "cursor": {
          "ref": "e733b238-bd30-41b0-ac59-64b3c6988083",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "a356a6c0-874a-4738-a1d6-1cc2eeeaf08f"
        },
        "item": {
          "id": "fd20deba-58ab-4b15-8306-df9c539b8506",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "f7d450c5-f778-4832-a978-9a394d637822",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "496978fb-0c26-4bf2-92b3-075bb22b3330",
        "cursor": {
          "ref": "d39bf8bf-95d4-425d-a136-b3873fbd0799",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "f994b6ad-3d26-43b3-a581-b34aba5d0961"
        },
        "item": {
          "id": "496978fb-0c26-4bf2-92b3-075bb22b3330",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "01bb9563-b6f9-4720-8f22-a3c34a82478e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93c7bb25-6ff6-46e4-84fb-638f8ceab58e",
        "cursor": {
          "ref": "1193b7a8-c8b2-4154-9b26-4b11a07566a8",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "994e6087-78ae-4b99-a97c-47e4fd2db13c"
        },
        "item": {
          "id": "93c7bb25-6ff6-46e4-84fb-638f8ceab58e",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "5124ceb4-e932-4cf6-9455-ef583eb025ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cad0394-1edd-4cdd-85b9-ac75ae050058",
        "cursor": {
          "ref": "3b87c16a-fee5-4d0d-a168-8549e3484885",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "c5ddabbc-55cf-43e8-b0ef-a9bf24303478"
        },
        "item": {
          "id": "7cad0394-1edd-4cdd-85b9-ac75ae050058",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e2c870cf-04d3-48bf-ad55-2eb69a730c6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75f61b81-7cd7-4a80-b0e6-4fb22c8dcb6e",
        "cursor": {
          "ref": "109988dc-7252-4dcc-a790-2c6873f5355b",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "8e648104-bcb2-4a78-bfa3-69a58ca5969b"
        },
        "item": {
          "id": "75f61b81-7cd7-4a80-b0e6-4fb22c8dcb6e",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "053d39fe-358f-42f3-b44c-590c9b6f0784",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 396,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55c9c9d8-47b2-4a47-a130-64933db1902f",
        "cursor": {
          "ref": "7720218d-0c95-451b-ba61-8885d7dc2413",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "8ee37959-17e7-48e3-8eb5-50514cbc6034"
        },
        "item": {
          "id": "55c9c9d8-47b2-4a47-a130-64933db1902f",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "32de73d3-f96e-431c-9c20-95e8e4ac40be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc70b664-bbd8-44f7-8826-c33dcf3e3eea",
        "cursor": {
          "ref": "a344d4b5-1d97-4c78-936b-1b8f037a3e86",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "a03769a2-d8d4-4767-bad3-72af9bcf0149"
        },
        "item": {
          "id": "fc70b664-bbd8-44f7-8826-c33dcf3e3eea",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "bd79aa2a-2abd-4f23-b87d-a252923e220a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6deaaac1-4889-41a0-b683-2c16060015ad",
        "cursor": {
          "ref": "0b85cd42-5a07-4a98-8f94-6e4ae8a771f4",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b7f707ef-aee7-4a3c-83dd-eeb223a3c96a"
        },
        "item": {
          "id": "6deaaac1-4889-41a0-b683-2c16060015ad",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "3ae4e603-97c3-4f3c-bb32-6801b59470a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 879,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d2db02b-a79f-478a-b704-044521324c07",
        "cursor": {
          "ref": "b158c263-307f-41e1-9da1-2e74348a623e",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "63b97856-6b75-41e4-aa89-58c01da9636e"
        },
        "item": {
          "id": "1d2db02b-a79f-478a-b704-044521324c07",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "1f1a5305-03a9-4bb8-824d-622322626e7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ef88ccd-21e2-4067-8760-b6634b45fdab",
        "cursor": {
          "ref": "48597947-c0d4-4e4e-9f6f-858e3ae69492",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "ff55a730-3c1f-4219-a9c9-4cdb311db7e1"
        },
        "item": {
          "id": "0ef88ccd-21e2-4067-8760-b6634b45fdab",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "5d10339c-4b2e-41b8-83f1-5ccd9534bc03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1009,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "c1bfa9c8-8e40-4e2c-834b-2921a8ce2193",
        "cursor": {
          "ref": "49a8aa11-64f9-4fa5-b13a-a4063ba67d22",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "6ecf01cf-5cb7-4980-8510-ed3e28e68b08"
        },
        "item": {
          "id": "c1bfa9c8-8e40-4e2c-834b-2921a8ce2193",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "45f0614e-1bac-4e47-8810-b7d8e33421f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73e735f0-5ea1-4c7e-b597-27c1ec1a14e9",
        "cursor": {
          "ref": "e65ecd40-cb23-4fc9-88fb-a32480be0585",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "4533e4c5-dec8-4a83-ad14-73f2ebe7b983"
        },
        "item": {
          "id": "73e735f0-5ea1-4c7e-b597-27c1ec1a14e9",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "5176247d-3ef3-44c2-b8df-ae72a8644821",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 219,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06cad261-ee3c-4516-9722-b83b19b26f55",
        "cursor": {
          "ref": "af712cbf-7619-452d-ba93-a1eb6319bbcd",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "f025a7e8-228a-4542-a4d7-30a2ed04f8d1"
        },
        "item": {
          "id": "06cad261-ee3c-4516-9722-b83b19b26f55",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "295d5c6c-1752-466e-a557-750b6a366a10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7035a4b-8847-49a3-968e-4f91082afe72",
        "cursor": {
          "ref": "4fe80a21-8474-4e2a-93de-9b23412a8fa7",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "30ac3ddc-6e09-4a59-ad31-aecddb74cddd"
        },
        "item": {
          "id": "a7035a4b-8847-49a3-968e-4f91082afe72",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "87f72e74-c7c7-4a2c-9ab7-6d93b150b93a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91198b40-78be-481a-bab9-b690650beaa8",
        "cursor": {
          "ref": "0e7171be-3941-4e53-ac3b-cba050c2d3ea",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "e21d12bf-f5c8-42d5-9cd2-4c5ef542f31d"
        },
        "item": {
          "id": "91198b40-78be-481a-bab9-b690650beaa8",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "8deb9003-f43d-4851-84a8-19d612f3b06a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90bdf2e1-cd17-448f-a988-661f8027569c",
        "cursor": {
          "ref": "7ca7b860-b89c-4c9b-9b11-ecca5c50dc98",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "75439255-7fe0-4938-80b4-1670ddb31ca9"
        },
        "item": {
          "id": "90bdf2e1-cd17-448f-a988-661f8027569c",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "a556215d-f799-49eb-91fa-a88a3f4ab28f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ab2fbd8-e732-4310-b0f6-bb9e883f35ac",
        "cursor": {
          "ref": "2e24b403-bb3c-4692-9f48-e22a8303615c",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "380b1fb8-9941-48a1-b0aa-3a6ebaabcd23"
        },
        "item": {
          "id": "8ab2fbd8-e732-4310-b0f6-bb9e883f35ac",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "0d9dc8da-5a11-4429-b41e-676081649652",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1546,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "dd7256b2-4ada-4eeb-b4b6-77ca2385b47a",
        "cursor": {
          "ref": "464ba53f-d3e3-4f8b-9670-1897d48f5c95",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "4519895d-dec6-4906-a6c8-ae2b0c45413e"
        },
        "item": {
          "id": "dd7256b2-4ada-4eeb-b4b6-77ca2385b47a",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "916fd19f-ded6-4e9e-b026-a2048b304ea7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cbb2516-39af-4dcf-8584-65f8d9966a5c",
        "cursor": {
          "ref": "ae981ef2-cb79-403e-830a-872e0e7cd8de",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "4c6b14b8-2053-43f3-b378-7ab6e9239bc4"
        },
        "item": {
          "id": "1cbb2516-39af-4dcf-8584-65f8d9966a5c",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "ee046fa0-6f40-49be-9aa9-0ce11b77ffda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d582ce00-f0bc-4e3b-81b0-125875b633a6",
        "cursor": {
          "ref": "b63461bb-c72d-40e6-b50d-44cd84053ffa",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "38f99d39-ea23-466d-ad5c-d57ad63688d7"
        },
        "item": {
          "id": "d582ce00-f0bc-4e3b-81b0-125875b633a6",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "116e7927-73be-45e5-9910-99acfea3fc2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2789b13-64e4-4541-a567-ea6f9ebd1ac8",
        "cursor": {
          "ref": "6cb793fe-6bad-4d2a-8d18-8339c6d059b0",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "8c13f4f5-4447-41df-8781-a12fdab5b668"
        },
        "item": {
          "id": "b2789b13-64e4-4541-a567-ea6f9ebd1ac8",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "5bb11b28-2f22-466e-b094-b2f6011ab38d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cecd776f-a8b5-4d28-9d4c-da805a3d8247",
        "cursor": {
          "ref": "dd848dea-c94f-45a2-be0b-66db2c5da709",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "2d3db463-4608-40b9-a32d-6d046dbbc5b2"
        },
        "item": {
          "id": "cecd776f-a8b5-4d28-9d4c-da805a3d8247",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "ab4a5680-86cb-4962-8c3c-5056302d0119",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 153,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50b8a551-950d-4b87-9209-adc055b6b1c6",
        "cursor": {
          "ref": "865f380f-b3e2-4855-9e9e-e3ac57cff019",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "0c1f1085-72d0-48ea-8299-2e9634e1c099"
        },
        "item": {
          "id": "50b8a551-950d-4b87-9209-adc055b6b1c6",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "ae75b371-273f-4650-b11b-c8bc0a19cf61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c578896c-e0c2-42f7-8242-eea2c3b2b881",
        "cursor": {
          "ref": "525d1b2b-d422-49ce-a472-38a367b10cc6",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "54af6499-1571-464c-96b8-50a9e411f7e6"
        },
        "item": {
          "id": "c578896c-e0c2-42f7-8242-eea2c3b2b881",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "cfa29bc3-f36d-469b-b5bb-74ea0423e77f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feb2bf3e-11f5-4417-808f-3b714001a526",
        "cursor": {
          "ref": "b9b95932-b938-4951-afba-c174fa4290e6",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "f969876f-9945-40b4-8ab9-a5f4c58b1470"
        },
        "item": {
          "id": "feb2bf3e-11f5-4417-808f-3b714001a526",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "14f491f1-ddc1-47f3-bbf6-41507cdfae53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 128,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abe8d3ee-ba69-4533-84f7-9467d7e979f8",
        "cursor": {
          "ref": "94656904-a289-4cf4-96a7-b46ba358dfe0",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "9da085fd-bdec-48ea-ab43-f1ba9eaef05f"
        },
        "item": {
          "id": "abe8d3ee-ba69-4533-84f7-9467d7e979f8",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "ac232894-09a7-4be3-91b1-7de8f01a7cc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 299,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c1120f4-1847-40cb-a993-cd95b27436fc",
        "cursor": {
          "ref": "9abdc5d6-f75f-48f4-b00a-6f865aad6152",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "ab114d5c-63cd-4814-ac8f-28ab079da854"
        },
        "item": {
          "id": "5c1120f4-1847-40cb-a993-cd95b27436fc",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "a13a14d4-aaa2-4355-980c-3de53ef54340",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "010b3afa-632c-4e28-8b45-f5fed95bb00c",
        "cursor": {
          "ref": "57c5fb69-a947-40c8-8d89-fd5b1ee891a8",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "e75c6848-8455-46b6-a047-86647d6ee82d"
        },
        "item": {
          "id": "010b3afa-632c-4e28-8b45-f5fed95bb00c",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "b366d71e-ec12-4f84-ac11-b6dfe9693d88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2619d54c-6fdd-4533-bd8e-71dfae4533a4",
        "cursor": {
          "ref": "2aaa25d5-deb9-4fae-b464-e5dc8a97c681",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "5a0411e5-31d2-4597-9c94-a9f43391cf27"
        },
        "item": {
          "id": "2619d54c-6fdd-4533-bd8e-71dfae4533a4",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "3d085b44-9700-4826-92af-df4fb358628a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53224052-2a9c-43c9-9ee3-76a909ae9fb7",
        "cursor": {
          "ref": "37b00b9a-d874-41c4-995e-dcb29b25333e",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "b7d1dddc-e88f-42b6-8116-e1e7fff9c31a"
        },
        "item": {
          "id": "53224052-2a9c-43c9-9ee3-76a909ae9fb7",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "3d6891e2-35fc-48f8-b833-f4150da8839e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaee2c85-1ba1-4d43-b375-d687e3719c71",
        "cursor": {
          "ref": "79c2932a-8ca5-433f-abf3-38f375ce5c6b",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "b133d998-87d3-4570-9b18-54a5e92c82b8"
        },
        "item": {
          "id": "aaee2c85-1ba1-4d43-b375-d687e3719c71",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "c232bc2c-d79a-4130-92be-2988faede51c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f8b284c-8d9f-465b-b4ac-f09ff0d1536b",
        "cursor": {
          "ref": "b5002fac-9af4-4f1f-913c-1dea5415382c",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "96b699a2-fccc-4feb-871a-5da3b9d1b0af"
        },
        "item": {
          "id": "7f8b284c-8d9f-465b-b4ac-f09ff0d1536b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "542a139d-0a89-4bd4-a313-2d5f8267e0d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f39405c0-ea9f-4272-aa9a-0a4a04de7510",
        "cursor": {
          "ref": "1c1c5b31-fb05-4c5d-acce-d09622396459",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "01a87e1c-fabd-4f37-a435-1e9d60282740"
        },
        "item": {
          "id": "f39405c0-ea9f-4272-aa9a-0a4a04de7510",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "0e3207da-ba79-44e4-b838-ba71e9e6cc2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d813bd6-ea16-4129-87bc-2116f5ec8720",
        "cursor": {
          "ref": "5d42ead3-c9ec-476b-a2bd-29e5c62506fc",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "22fecdc8-eb87-40a2-abc5-fc458aa12f35"
        },
        "item": {
          "id": "1d813bd6-ea16-4129-87bc-2116f5ec8720",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "7e9e5e1c-2054-4873-99bb-15e8a67beb73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 235,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e659d50f-2693-4005-a17b-85946f0391b3",
        "cursor": {
          "ref": "0372c115-2e2f-4eb9-8fa4-c38fb6a6986d",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "20a69e31-97d1-42cf-af9c-0d22e0e25f74"
        },
        "item": {
          "id": "e659d50f-2693-4005-a17b-85946f0391b3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "6732ba0c-c229-4894-b4e4-b0c90127e5d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80117833-3a87-4d90-9bbc-656b0cb04874",
        "cursor": {
          "ref": "0ee9ba63-fd0a-4140-ac87-e2f83d4771bf",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "f3011e5f-9473-42b0-aadd-d28b89ce96d7"
        },
        "item": {
          "id": "80117833-3a87-4d90-9bbc-656b0cb04874",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "b07c3145-99c6-42af-b0a0-eb58815df014",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ddf4dd0-16c0-457d-91d8-83012d18ef87",
        "cursor": {
          "ref": "6943cadc-881d-460a-84a9-99a184dc8267",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "3454e7d6-bca3-46bb-a509-232e3a508bcd"
        },
        "item": {
          "id": "9ddf4dd0-16c0-457d-91d8-83012d18ef87",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "c5f7af57-3ae4-4896-aa3a-96a76d4d7dd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bbf3d9b-04e7-4e97-86d0-839e2bc89f2a",
        "cursor": {
          "ref": "0ee4ee34-4890-4446-ac86-9bb88a1302e2",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "4a0ad8a7-0077-47c3-a83e-ec920e3a56a7"
        },
        "item": {
          "id": "7bbf3d9b-04e7-4e97-86d0-839e2bc89f2a",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "42de4f59-7490-4f41-b10d-bf5057dd086a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b4295fc-4e80-4ba1-a626-73415a6e2572",
        "cursor": {
          "ref": "78289489-32bc-4369-9b51-eb01204138f7",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "ab0202c6-221b-4881-a393-b317aef94c78"
        },
        "item": {
          "id": "2b4295fc-4e80-4ba1-a626-73415a6e2572",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "6f303989-9ffc-4c12-bb3c-d4301dc5db6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95e71c6c-6741-4258-9678-59f2d1484603",
        "cursor": {
          "ref": "8d6c0f6b-18cd-494f-a281-ccffb4b51452",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "de0d1286-6dce-4ebc-b605-ee97545ae14c"
        },
        "item": {
          "id": "95e71c6c-6741-4258-9678-59f2d1484603",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "ed1c8e4c-575f-4765-95e6-52a5348de9ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baa7a43d-bfdb-4234-b736-4fee85ba25cb",
        "cursor": {
          "ref": "35537503-9d8f-4e5a-b7a7-2c24d1c3cfa1",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "8ae8727f-e778-441f-b2c6-833cf0496a9c"
        },
        "item": {
          "id": "baa7a43d-bfdb-4234-b736-4fee85ba25cb",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "2b2cbafc-7707-44de-9c07-3d259676e1bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5cc1c4a-5c55-46c0-8807-53ba902f9431",
        "cursor": {
          "ref": "2ce4012c-5417-4588-9af1-decc66061c60",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "ceb43b83-c470-4d44-98ec-2c47fd81bfc5"
        },
        "item": {
          "id": "f5cc1c4a-5c55-46c0-8807-53ba902f9431",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "08b4f142-7b0e-42c8-b1f9-57de41b1b81a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 159,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60e1ce9c-5a02-4725-b54a-eb00a15dca73",
        "cursor": {
          "ref": "b37057e2-b2b1-4098-a38c-17f4edf08193",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "5be5c6b5-b288-43f7-b690-0c9281b14549"
        },
        "item": {
          "id": "60e1ce9c-5a02-4725-b54a-eb00a15dca73",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "0c5d83a7-687b-4a52-a596-5ac18a95d199",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08481ee5-a891-459c-9015-356ff5d903a1",
        "cursor": {
          "ref": "691dd98e-7216-49a1-85cb-bd32ba02cc32",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "395d386d-0cb0-424b-bffc-3b6b685e2c4d"
        },
        "item": {
          "id": "08481ee5-a891-459c-9015-356ff5d903a1",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "e1990325-5519-4a5a-8daa-f9f0288086cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a16a74b-b09e-4e81-b075-6eceed49b6d7",
        "cursor": {
          "ref": "e246a58e-f4f2-4d8e-9668-26e796e5f3ae",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "be11a8da-31d9-46b7-9047-bc35eb7b46c1"
        },
        "item": {
          "id": "2a16a74b-b09e-4e81-b075-6eceed49b6d7",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "fbbb904b-4254-44e1-9855-b6d1ae347100",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "503bcdaf-7930-450a-9d20-5d00c6b096cd",
        "cursor": {
          "ref": "b9d0c85e-6de4-4732-af7a-b6f10ed15707",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "8808f216-b9aa-4543-85a4-2cfe810e5686"
        },
        "item": {
          "id": "503bcdaf-7930-450a-9d20-5d00c6b096cd",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "03c3e940-5a97-4609-8fc7-aaffa3e8c184",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ff46138-cc62-49bc-ae28-3fe32a88d4a8",
        "cursor": {
          "ref": "ff8498c4-a8ed-4482-95d6-7373e0d002b4",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "6b615b0f-9196-4d31-a655-002fafe81740"
        },
        "item": {
          "id": "1ff46138-cc62-49bc-ae28-3fe32a88d4a8",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "388b343d-7b9b-4f9a-8bb9-18231040c908",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "106284f8-0934-4d44-a3b9-348a57e5751e",
        "cursor": {
          "ref": "3ed1f590-154a-4a2c-ab30-734904af3989",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "b2a81e6d-4de6-4540-87ac-436c8e40e42b"
        },
        "item": {
          "id": "106284f8-0934-4d44-a3b9-348a57e5751e",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "c02a1961-e69e-4173-b1eb-3d401d1bcec0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 393,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a9930e2-641c-4698-bf6b-56dead09c5cf",
        "cursor": {
          "ref": "a0f9815c-09a4-4fc3-b2b9-ede11c36e12d",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "8dba510c-d8a1-422a-899d-abd775939db9"
        },
        "item": {
          "id": "4a9930e2-641c-4698-bf6b-56dead09c5cf",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "f77c7052-815b-434f-8f53-21d4f4264776",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f650a61-874d-4e23-8822-9e3da2d0e735",
        "cursor": {
          "ref": "45a438fd-eb26-457f-8619-243a629c84ff",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "a3ff3b63-0de5-480b-b770-abbc66569f31"
        },
        "item": {
          "id": "9f650a61-874d-4e23-8822-9e3da2d0e735",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "f4e264a3-368b-4043-8b79-2e6fb9bb5710",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d344930-c69d-4568-b592-ce0773166cd9",
        "cursor": {
          "ref": "55e5eeb8-908f-49ae-a413-675ebe69fe5d",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "b38894ae-4f2f-4deb-a9cd-0774222a0b2c"
        },
        "item": {
          "id": "4d344930-c69d-4568-b592-ce0773166cd9",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "efcbdb5d-90be-49c1-9207-a0fee07761c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f388f82b-8b43-4afc-9eee-63568ade96ac",
        "cursor": {
          "ref": "e2f73caa-7b42-4973-ace4-51c4fe8f7f4e",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "39c1ae8a-b147-498d-978c-b2c5f1dd3ec0"
        },
        "item": {
          "id": "f388f82b-8b43-4afc-9eee-63568ade96ac",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "92b30d1f-7697-428d-9210-a7b2198a9cb9",
          "status": "Created",
          "code": 201,
          "responseTime": 421,
          "responseSize": 537
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "062b3a41-12fe-4f7f-81fb-f197e2e54aa5",
        "cursor": {
          "ref": "937b2f88-f503-4003-a70b-1da726bde82b",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "895b69fe-03e7-4d3f-a233-9da21f891d8c"
        },
        "item": {
          "id": "062b3a41-12fe-4f7f-81fb-f197e2e54aa5",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "2f5916cf-5d3b-4388-b3a3-ed11df4455d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d40eefc8-5189-4004-b774-729434345464",
        "cursor": {
          "ref": "a3e2f97f-a604-4020-98f1-8b131d17032e",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "bf9ad418-66af-401c-b61f-c783425f4ba8"
        },
        "item": {
          "id": "d40eefc8-5189-4004-b774-729434345464",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "0ebdaf99-7cce-4cb5-90b9-50fbf16ba58b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75175d73-9033-4c78-9fed-e13e017422d0",
        "cursor": {
          "ref": "fee2cd74-50fd-4dfa-af48-74b97e1d65c8",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "bf90280a-4fd8-4bf0-bc3c-974478f35a5d"
        },
        "item": {
          "id": "75175d73-9033-4c78-9fed-e13e017422d0",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "945ba0e9-9b07-4fe3-bdcf-e74aee0c9ff4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca63e74c-0fb9-4780-971c-843248cc9634",
        "cursor": {
          "ref": "c5fce987-26d2-47e2-84e6-ed12ae48a855",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "0d2dc6ed-3707-46b2-b66b-50452b375ef1"
        },
        "item": {
          "id": "ca63e74c-0fb9-4780-971c-843248cc9634",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "55b88473-5772-4305-b61f-544d9b15bcc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb037d78-5316-4e75-b5e2-d71daaa0cbc1",
        "cursor": {
          "ref": "a41a46ba-39ba-4dee-aa11-636f53edcce5",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "6d5f783e-606d-4f06-8cc9-aefc9162c6b7"
        },
        "item": {
          "id": "fb037d78-5316-4e75-b5e2-d71daaa0cbc1",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "b75a8bcb-6040-46fd-abdf-54566574362b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e27675c-128f-40ea-afd8-4c35e391868f",
        "cursor": {
          "ref": "f9d4dd39-994d-4236-ae93-277bde038f0d",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "8439a9a2-a114-4f20-a363-dccc72f853ab"
        },
        "item": {
          "id": "1e27675c-128f-40ea-afd8-4c35e391868f",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "c9e5d83e-f334-4732-80c4-0e407550c3c2",
          "status": "Created",
          "code": 201,
          "responseTime": 489,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "1283f3d0-6f5f-4112-93ab-4f3b422f7a0e",
        "cursor": {
          "ref": "aa91a948-20f4-4290-a24f-91665317946d",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "6ed80e35-35d9-49f6-86cd-9d33f1138627"
        },
        "item": {
          "id": "1283f3d0-6f5f-4112-93ab-4f3b422f7a0e",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "0c88ca41-fa00-402d-9d40-fe52ec11dce3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28071ba8-fb6e-42dc-bc6d-409be771c345",
        "cursor": {
          "ref": "5f1c3384-d595-41b4-bb3d-be99059d2940",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "2317ff89-34da-4de9-8d1b-064caa40d0b5"
        },
        "item": {
          "id": "28071ba8-fb6e-42dc-bc6d-409be771c345",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "7cb52640-1694-4ab3-9114-9e2f50790ed6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cd5a624-fcdc-4b05-a1e9-9f393fac0ef8",
        "cursor": {
          "ref": "f1233b6b-ca0f-4beb-8f6d-4d0842b94fe0",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "bb3a32e2-d4aa-44e5-9d85-90d258d6f589"
        },
        "item": {
          "id": "7cd5a624-fcdc-4b05-a1e9-9f393fac0ef8",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "47d8d49b-011f-41bc-a95c-19fa6d55379f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5e3559a-0ed9-41a8-967c-b66d00f3d557",
        "cursor": {
          "ref": "002afe44-76ac-433c-8587-af658f3abc5e",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "7558b682-2874-41cc-b5d7-61dc436efb73"
        },
        "item": {
          "id": "b5e3559a-0ed9-41a8-967c-b66d00f3d557",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "0c89c19d-cda4-4168-b95c-dc3950227027",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faefb30f-8a86-46fc-9307-df0efeaa4eb2",
        "cursor": {
          "ref": "c43c2a42-dde4-44ea-a5b2-b67c2a99ed76",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "42c0374c-8633-4046-b408-5eb0e0e3757b"
        },
        "item": {
          "id": "faefb30f-8a86-46fc-9307-df0efeaa4eb2",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "9a4b6835-c4bd-4dcc-a2df-5555d209562f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4fa9d5f-a0e1-405a-be3d-7121cdd76451",
        "cursor": {
          "ref": "cd884be6-13dc-4622-969e-3fe0f10ccf42",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "2d464213-6ace-4560-a862-6821c445308b"
        },
        "item": {
          "id": "d4fa9d5f-a0e1-405a-be3d-7121cdd76451",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "506fc5a5-0860-490b-aad9-8d94d614f422",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c8fc62e-1f38-4c6b-af52-a122e0648c1d",
        "cursor": {
          "ref": "a2f98af9-15a9-42a9-b808-d2d8b9a10209",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "0b7a4630-070e-4c53-9823-b463b0e917be"
        },
        "item": {
          "id": "8c8fc62e-1f38-4c6b-af52-a122e0648c1d",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "c9278844-24f5-4e17-a56f-8125c2d64e76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "382312d1-da6a-4e58-aee3-95c9bffcb9f1",
        "cursor": {
          "ref": "3983e740-4f62-46c8-a5d0-4fd1a31892d5",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "8ad633bb-90bd-4cf8-a296-fa884377831c"
        },
        "item": {
          "id": "382312d1-da6a-4e58-aee3-95c9bffcb9f1",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "7d54a150-3130-4bfe-8f0e-92a56a8333fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d96ce17-3db9-4c3d-843b-a708453adf86",
        "cursor": {
          "ref": "a9598927-b3f3-450b-b2d5-3efa5f67b221",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "18c32482-8a37-4c76-8d25-c056eaf88fb1"
        },
        "item": {
          "id": "4d96ce17-3db9-4c3d-843b-a708453adf86",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "f6ff6ade-fe98-469e-9dfe-06f72651f369",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "d55f3be7-830f-4501-bff7-dd769823488f",
        "cursor": {
          "ref": "90f1d55f-6366-40d6-9099-82df26234b50",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "5b6a749d-9d66-4ff1-8d29-22ab0354c9d3"
        },
        "item": {
          "id": "d55f3be7-830f-4501-bff7-dd769823488f",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "32399789-523d-4923-b992-29cb2addaaaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "b508f76b-3e88-4668-a47d-be8503867edf",
        "cursor": {
          "ref": "7a4d2d07-302b-475b-afbc-77bc111c305d",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "6717eef0-4816-4200-a032-04d7a4efef18"
        },
        "item": {
          "id": "b508f76b-3e88-4668-a47d-be8503867edf",
          "name": "credentials_issue"
        },
        "response": {
          "id": "d4f01836-0174-480a-9219-3dff45f9d0f2",
          "status": "Created",
          "code": 201,
          "responseTime": 1174,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "888c0625-2cef-4339-9430-22f60c2ba76e",
        "cursor": {
          "ref": "2463eebf-219b-4aa5-8844-413f2a68fa96",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "4fe2d99e-51fa-41aa-9893-91bd10a75ae8"
        },
        "item": {
          "id": "888c0625-2cef-4339-9430-22f60c2ba76e",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "b1a1eaf3-122a-440f-9cd2-ecbdadd7340e",
          "status": "Created",
          "code": 201,
          "responseTime": 1190,
          "responseSize": 591
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "902020bc-be30-4d26-b8b4-9861c6610060",
        "cursor": {
          "ref": "bf0e557d-0e1c-4017-9fcc-0bd7996170e6",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "fbcdc33d-f89c-4aa8-88f0-8c33d304aa99"
        },
        "item": {
          "id": "902020bc-be30-4d26-b8b4-9861c6610060",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "afd29bf6-5bd5-427b-8c1f-57a8c70f7fdc",
          "status": "Created",
          "code": 201,
          "responseTime": 1165,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcb3e650-d872-4608-8824-382def8f72f6",
        "cursor": {
          "ref": "13cd3cb3-3df7-4ade-9499-c6db94d3a528",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "9c1d4390-45e3-43f3-93d6-01a6dcbf3be4"
        },
        "item": {
          "id": "fcb3e650-d872-4608-8824-382def8f72f6",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "6aad09dd-7b0a-4410-80f1-b03aef2d2ed0",
          "status": "Created",
          "code": 201,
          "responseTime": 433,
          "responseSize": 560
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8979b50f-4c29-4909-8ec0-57538eed23ae",
        "cursor": {
          "ref": "8aa5f385-0a3c-41cd-a67b-52cadf854c9c",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "c5a8e8d1-ebe5-4453-9f3e-7d0472214934"
        },
        "item": {
          "id": "8979b50f-4c29-4909-8ec0-57538eed23ae",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "01318a31-c0fb-461f-87a4-d4bc05d17d23",
          "status": "Created",
          "code": 201,
          "responseTime": 490,
          "responseSize": 528
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "2af61572-fb85-473d-8e46-ada42d26b1ea",
        "cursor": {
          "ref": "1cb5e245-2e2a-4143-a713-3b511f779a96",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "bebfa2d8-3bb0-485f-a8a5-1dcfd66f7409"
        },
        "item": {
          "id": "2af61572-fb85-473d-8e46-ada42d26b1ea",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "50322d48-394c-4ec0-b148-f3c08e126300",
          "status": "Created",
          "code": 201,
          "responseTime": 1235,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1a380cb-209f-4c3d-a58a-c97dd9193884",
        "cursor": {
          "ref": "5b8cb944-345d-4607-87a2-7c9bd2bf0c65",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "ff000d92-e556-4e63-8bf6-d544902341e8"
        },
        "item": {
          "id": "f1a380cb-209f-4c3d-a58a-c97dd9193884",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "84d21755-73bc-48bb-be09-f8c8061fe71c",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "f1a380cb-209f-4c3d-a58a-c97dd9193884",
        "cursor": {
          "ref": "5b8cb944-345d-4607-87a2-7c9bd2bf0c65",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "ff000d92-e556-4e63-8bf6-d544902341e8"
        },
        "item": {
          "id": "f1a380cb-209f-4c3d-a58a-c97dd9193884",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "84d21755-73bc-48bb-be09-f8c8061fe71c",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "1b2fd2df-c3dd-4117-8be9-466537dc0de7",
        "cursor": {
          "ref": "36a9de4d-4a24-4743-aed3-ee9622492960",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "7b1bd531-6274-40d9-8380-25103769b63a"
        },
        "item": {
          "id": "1b2fd2df-c3dd-4117-8be9-466537dc0de7",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f06f7a1b-c32d-48ef-b9a0-2e2d966158be",
          "status": "OK",
          "code": 200,
          "responseTime": 98,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "9fa862c1-edfc-4d18-b8f2-c1dd746f6fde",
        "cursor": {
          "ref": "6a07114f-264a-4020-a2a2-2c32d8f91494",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "11ec2999-cdb2-4181-881e-3091de06e148"
        },
        "item": {
          "id": "9fa862c1-edfc-4d18-b8f2-c1dd746f6fde",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "123f327a-e664-4ecd-b3a9-05f34de41613",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "6ef1dd56-3c5c-4ddb-bb30-b6a6db3f4c45",
        "cursor": {
          "ref": "0fb8313a-9d2b-4212-93f7-96b5feaa8263",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "492ae19f-8b88-4cfd-8f98-781a514beca0"
        },
        "item": {
          "id": "6ef1dd56-3c5c-4ddb-bb30-b6a6db3f4c45",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "2015220b-0342-40fc-9356-fbd85b67b541",
          "status": "OK",
          "code": 200,
          "responseTime": 26,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "57d247c3-9abe-492d-ac59-d3d37c8127fd",
        "cursor": {
          "ref": "3be0ff56-7347-4088-868f-a17695990e14",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "826eafd6-7993-45a4-a5ea-f078bea94ad5"
        },
        "item": {
          "id": "57d247c3-9abe-492d-ac59-d3d37c8127fd",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "5ca01882-ed88-4ef2-b123-28da5cee91ac",
          "status": "OK",
          "code": 200,
          "responseTime": 19,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "8d7baeff-54b0-4883-90c2-ac0de2f3b19f",
        "cursor": {
          "ref": "40b630b8-5a13-434b-92d2-5fe3c480dcd6",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "a6b15274-57be-4588-8c44-36d70d669d59"
        },
        "item": {
          "id": "8d7baeff-54b0-4883-90c2-ac0de2f3b19f",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "8d4852e7-1cbb-4585-a077-39683236ff75",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "e906e1df-983d-43b0-84b8-7b2ab3562889",
        "cursor": {
          "ref": "a1aaf803-6511-41d5-a16f-a6d93c0ec96c",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "f3a514df-aeb3-4d6c-ac76-b7db877c5c36"
        },
        "item": {
          "id": "e906e1df-983d-43b0-84b8-7b2ab3562889",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "da58a36f-04f0-492e-8a51-c30828cd9a11",
          "status": "OK",
          "code": 200,
          "responseTime": 366,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "4784d6e9-4dae-489a-96db-34fe34fe5131",
        "cursor": {
          "ref": "9d4da152-0797-467a-b40b-ac9a4e46d3ef",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "7c975d30-bfcd-422c-b33d-8e8b67a55fb4"
        },
        "item": {
          "id": "4784d6e9-4dae-489a-96db-34fe34fe5131",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "5066750f-b75e-405a-a160-6e05b81b701c",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "75cb6502-d5dc-41da-86e2-d379a1bba83e",
        "cursor": {
          "ref": "06148640-65e8-4fdb-8107-f67eb5993037",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "7bd5a7ce-1d9a-498e-b24f-425fdddada20"
        },
        "item": {
          "id": "75cb6502-d5dc-41da-86e2-d379a1bba83e",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "19aaf2c2-310d-4391-ac5f-9568f7e61137",
          "status": "OK",
          "code": 200,
          "responseTime": 17,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "0e1f1e72-f0eb-4e76-b37c-1d92618281dd",
        "cursor": {
          "ref": "0ea682bf-564a-46fd-b26e-c728a30a2506",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "bf716922-ca86-4587-85f2-25fc02cec81a"
        },
        "item": {
          "id": "0e1f1e72-f0eb-4e76-b37c-1d92618281dd",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "a88b09c6-c133-41a6-b68d-e6980efe654c",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "4e8b6fd7-0dbc-4c98-b564-50d57442b27d",
        "cursor": {
          "ref": "31540c83-94fb-40e2-b288-3fdd023fd2cc",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "a4f39b2f-6586-493c-8d10-214d5397dc04"
        },
        "item": {
          "id": "4e8b6fd7-0dbc-4c98-b564-50d57442b27d",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "28d1eecc-a396-4f7f-a043-61c47031374e",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "6bb17af7-4215-4525-a756-7a856cd62214",
        "cursor": {
          "ref": "0829c879-8e5f-43b1-a420-4ea221afe2af",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "b7e99bba-645b-484f-b53b-63796f74ce76"
        },
        "item": {
          "id": "6bb17af7-4215-4525-a756-7a856cd62214",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "5e77dfea-386e-47d1-8f52-ec67acda4bc4",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "ba015b93-c973-4884-b3f6-565929bcdfe3",
        "cursor": {
          "ref": "ad58b02b-23e4-46b0-b190-9edac2fc7985",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "42d16f93-0754-4dfa-8a0d-4ffafd9467f1"
        },
        "item": {
          "id": "ba015b93-c973-4884-b3f6-565929bcdfe3",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "d9304c8d-69db-413d-a419-ee1cbe156650",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "82137b6a-3a91-43aa-9dad-7755d3dfdee5",
        "cursor": {
          "ref": "451555c8-5a3b-41cc-8565-37d63d4e1da6",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "b617b4a1-97c0-47e0-b507-5d11f3bd6f7b"
        },
        "item": {
          "id": "82137b6a-3a91-43aa-9dad-7755d3dfdee5",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "d484e059-a2b9-440f-b733-79bb6ce47341",
          "status": "OK",
          "code": 200,
          "responseTime": 24,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "f2c6b903-ad6c-4bbe-a74c-5984e2fb66ec",
        "cursor": {
          "ref": "817127f5-fb8d-4493-8f78-64626f8c7818",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "1611ed5f-a308-490b-9243-32af7eafb326"
        },
        "item": {
          "id": "f2c6b903-ad6c-4bbe-a74c-5984e2fb66ec",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "598d0fbb-f468-48f5-a8df-5b8cfb306bbb",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "f65fe66f-0603-49c7-b43c-76c6f2d4ea40",
        "cursor": {
          "ref": "af5f01ed-25cc-4685-be0c-d871f3ad0ab0",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "45add36a-20c3-467b-a19d-ff34b9f91abb"
        },
        "item": {
          "id": "f65fe66f-0603-49c7-b43c-76c6f2d4ea40",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "05249c8c-dce7-4ef6-b89a-ec57c57eb887",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "05d79094-eeba-4000-bc1a-ec4a0174020b",
        "cursor": {
          "ref": "88f5d872-6d33-4bdc-a037-e0825038468f",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "d5c7b232-9b38-468e-83bf-8d9824c92722"
        },
        "item": {
          "id": "05d79094-eeba-4000-bc1a-ec4a0174020b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c33838e1-1ea7-4ef6-824d-a06fb84e80ec",
          "status": "OK",
          "code": 200,
          "responseTime": 22,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "bca06540-1061-4b53-9222-a25e6ae96d47",
        "cursor": {
          "ref": "62118f63-7057-44a6-bf2d-7286589e603b",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "82acc639-9b31-4dc1-b6e1-7348b0d20d04"
        },
        "item": {
          "id": "bca06540-1061-4b53-9222-a25e6ae96d47",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "5c04cc4a-0ea8-424f-b67a-7679eed82fb4",
          "status": "OK",
          "code": 200,
          "responseTime": 23,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "4951a97f-8d51-40ba-b5c6-7499b7e825bd",
        "cursor": {
          "ref": "8852c62c-18b2-4785-adc0-b34771e81d42",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "1e4322e2-2001-42ae-b23a-006012fe3426"
        },
        "item": {
          "id": "4951a97f-8d51-40ba-b5c6-7499b7e825bd",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "e11c38fb-b35b-48ce-9947-fb6b3c956cb3",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "7825965a-af7d-461b-9400-47efdb57d26f",
        "cursor": {
          "ref": "ed2d7b5b-4c5f-4681-84f1-bc709e5aacc6",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "a0ec4b26-0cf5-4042-9f61-9be264f25d17"
        },
        "item": {
          "id": "7825965a-af7d-461b-9400-47efdb57d26f",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "409107ea-6e63-4be1-8e15-702dcec81c05",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "e2d00d15-9367-4d9f-b2bc-d7a29b5b4dde",
        "cursor": {
          "ref": "5cd5fad7-cd47-4355-8a7f-d32b4ca5779a",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "82e77c99-1756-46b9-8452-eb3906abc594"
        },
        "item": {
          "id": "e2d00d15-9367-4d9f-b2bc-d7a29b5b4dde",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "7d06034a-93a9-4738-b4f3-ba55b63f2c95",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "729c5ab7-909a-4a2a-b1f4-df6b9a5de350",
        "cursor": {
          "ref": "bbebf177-a715-41bd-b46f-265546d0e5cf",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "faf83b30-c8a2-41e0-a895-9a28995db120"
        },
        "item": {
          "id": "729c5ab7-909a-4a2a-b1f4-df6b9a5de350",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "ecbaca99-48de-4fff-b2ca-6046ffb185ed",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "9489e9ee-32c2-4847-804d-aaf2e6ffb975",
        "cursor": {
          "ref": "0d160838-50b6-46fe-8713-51818097967f",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "c88d42f5-486e-4ea7-97d6-0e6022203a27"
        },
        "item": {
          "id": "9489e9ee-32c2-4847-804d-aaf2e6ffb975",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "7eae6d65-6a5a-4b18-b708-abf66292893f",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "e5e72ade-e69b-49f8-8772-ae781dd6ea32",
        "cursor": {
          "ref": "511a37fe-9d3a-4a0b-9083-5f85391819d5",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "d797a944-b06d-4d0d-b687-098af834998c"
        },
        "item": {
          "id": "e5e72ade-e69b-49f8-8772-ae781dd6ea32",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "f1348879-ad75-46bb-be69-3b3e6eed17de",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "e26a6139-5cfa-4142-8973-1af4936d64b7",
        "cursor": {
          "ref": "e9eb708a-ba84-4fd8-aa82-c180b0f57683",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "89235bd9-880d-4387-a0a5-23a414190216"
        },
        "item": {
          "id": "e26a6139-5cfa-4142-8973-1af4936d64b7",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "631c037c-867a-47ce-9200-835569ed844f",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "9a2a9631-e74f-4d97-a4c9-e6c31fcf62ac",
        "cursor": {
          "ref": "200ced48-a946-45a2-b590-8f4392098509",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "5a27d3b2-b25f-48e5-af5b-63cf517a69b2"
        },
        "item": {
          "id": "9a2a9631-e74f-4d97-a4c9-e6c31fcf62ac",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "dc11f0c3-07e9-4d81-b60c-e8c795c0d0ec",
          "status": "OK",
          "code": 200,
          "responseTime": 24,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "60dd8470-36a8-4aec-8443-5660c04c6d71",
        "cursor": {
          "ref": "7201e506-7da2-468a-a560-2b19f186b7da",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "548f06e0-b4ff-4156-b8c7-0ef2f6916123"
        },
        "item": {
          "id": "60dd8470-36a8-4aec-8443-5660c04c6d71",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "e2c88c31-f008-4d1b-b19c-2e5d0f88b62d",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "a9c9a8ec-74e4-4d4d-b92d-a6303ee32bb2",
        "cursor": {
          "ref": "e269c89d-ffef-4942-b438-eda5a409ec3c",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "e1f62e74-a7a2-4e4c-a517-6946910c2fe4"
        },
        "item": {
          "id": "a9c9a8ec-74e4-4d4d-b92d-a6303ee32bb2",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "9ebd29a0-3197-4325-8cdd-a4595885a557",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "47cf5653-f535-4935-8f63-e7294ba3dcba",
        "cursor": {
          "ref": "d74ba193-43ed-496d-a4f6-e62033abceaa",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "5d4cd23c-6f13-4b93-ba26-481e891322c5"
        },
        "item": {
          "id": "47cf5653-f535-4935-8f63-e7294ba3dcba",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "fbe83973-8dee-4e04-b25a-4e2f059ba3e3",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "06129cf6-a040-4b7c-9468-731fb5d48d75",
        "cursor": {
          "ref": "c91f0454-9f54-4c47-9ee4-3732ecf9fc8c",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "bb4fd71a-c43e-4006-b359-a3ec88d5a3dc"
        },
        "item": {
          "id": "06129cf6-a040-4b7c-9468-731fb5d48d75",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "1928e663-bdce-4a69-bda7-a22d6be1a4e9",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "dd4f5736-54ad-42a0-a0bf-04821bdbe4b2",
        "cursor": {
          "ref": "ad3ad115-9929-40b8-840e-ae4b6a894c65",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "594d64f4-edce-4181-bc12-c17d9d4b31c5"
        },
        "item": {
          "id": "dd4f5736-54ad-42a0-a0bf-04821bdbe4b2",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ef057383-ccae-4779-aade-2d5287d59413",
          "status": "OK",
          "code": 200,
          "responseTime": 22,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "1edc3f61-4a1e-4b2d-9e0d-99797cd38689",
        "cursor": {
          "ref": "b952c67e-bc93-413c-8c42-adce46f31ee9",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "d8f3e812-a3c4-4eed-8eb1-33f6460bc953"
        },
        "item": {
          "id": "1edc3f61-4a1e-4b2d-9e0d-99797cd38689",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "15b1b774-673a-425a-9aa5-8ef6b8ff2e58",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "d4b033da-eb46-47ab-a619-4ce1c50e0829",
        "cursor": {
          "ref": "3733b2fd-71bd-4c0c-a615-11b13b06892e",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "bf271089-3e04-4d29-9a98-db0f35a47397"
        },
        "item": {
          "id": "d4b033da-eb46-47ab-a619-4ce1c50e0829",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "08347776-e924-4037-bc61-370c2ca46dd7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8382b1f9-f4f9-436f-b19a-b98adc1c2055",
        "cursor": {
          "ref": "396d97ca-4ea7-44f8-b103-058fda145f1c",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "7911b6fc-9a04-47e4-96bc-116e92ce086a"
        },
        "item": {
          "id": "8382b1f9-f4f9-436f-b19a-b98adc1c2055",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "96636d29-709a-465c-8d88-b2f746de0b56",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 104,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "001cbf08-defb-440d-a16f-c03c0bbf7ad1",
        "cursor": {
          "ref": "7f3dc228-c9a5-438d-b9d5-0628893892ed",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "13aa428a-b432-4e57-a23e-720af67c248e"
        },
        "item": {
          "id": "001cbf08-defb-440d-a16f-c03c0bbf7ad1",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "3c441584-c36e-44ed-a717-d21c8e5d3691",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "001cbf08-defb-440d-a16f-c03c0bbf7ad1",
        "cursor": {
          "ref": "7f3dc228-c9a5-438d-b9d5-0628893892ed",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "13aa428a-b432-4e57-a23e-720af67c248e"
        },
        "item": {
          "id": "001cbf08-defb-440d-a16f-c03c0bbf7ad1",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "3c441584-c36e-44ed-a717-d21c8e5d3691",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85b94f20-a6e0-4532-9dd3-f10b5a76d7c2",
        "cursor": {
          "ref": "ca0f1560-bdf3-4dfa-85f6-206e9d5c5ae9",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "feafc15e-b8e1-42e6-ab85-59ab75185a2b"
        },
        "item": {
          "id": "85b94f20-a6e0-4532-9dd3-f10b5a76d7c2",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "1aa95b23-78cf-4dec-a4c7-834cb825ca77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c6e064e-cdc6-4c1f-bf94-c02b531aee65",
        "cursor": {
          "ref": "66f54f5f-b23f-4d42-a20a-9e882676bada",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "b5566cd8-c65b-4828-8ff3-ebe3305b09c7"
        },
        "item": {
          "id": "4c6e064e-cdc6-4c1f-bf94-c02b531aee65",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "03fe05ce-756a-4b09-800d-47e4b3e9b1a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f2badd0-9054-49fd-97fb-62d6a4e8faa0",
        "cursor": {
          "ref": "60d08394-eab1-4967-beb6-7d0b4d14ae8f",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "e2a9aca5-13a1-4fc9-b19e-6f43450981e2"
        },
        "item": {
          "id": "7f2badd0-9054-49fd-97fb-62d6a4e8faa0",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "05161cf8-a09b-43a9-8760-2191a1e27614",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea88cff5-0452-4b31-84f2-e615e8f2b076",
        "cursor": {
          "ref": "d73f49a7-b64e-40db-a79b-e4acded8654c",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "3eb77606-29a9-4a66-a238-a73f41b39ec4"
        },
        "item": {
          "id": "ea88cff5-0452-4b31-84f2-e615e8f2b076",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "83f5a4a0-8461-40da-be04-34e69604b2b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0baa141-9cd8-40d1-85fe-1c76205fe5b4",
        "cursor": {
          "ref": "b24e8672-bd9f-41b8-b487-7fa7629c2e22",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "5c2ae11f-5874-4853-bc9b-e0f978e9ed6d"
        },
        "item": {
          "id": "d0baa141-9cd8-40d1-85fe-1c76205fe5b4",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "e07ae747-1925-49ba-89fd-7e1e848da5bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 145,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a55116cd-edc3-40a7-a90b-e98cb1cc658a",
        "cursor": {
          "ref": "ea3b7ff8-cee3-40e4-8778-9b90abc4d87e",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "ac83877c-e53e-48ea-a1b4-20c6ba065b97"
        },
        "item": {
          "id": "a55116cd-edc3-40a7-a90b-e98cb1cc658a",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "5f0e007e-af4e-4d6c-9418-42b13dcf2b44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1092,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48bac78b-f98a-4e6f-ab0f-9da57cfe9b1c",
        "cursor": {
          "ref": "17f30b56-cdb7-4832-9fdf-9c751ddf4064",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "98553c00-49ed-4bdb-87ae-ed85084d0b08"
        },
        "item": {
          "id": "48bac78b-f98a-4e6f-ab0f-9da57cfe9b1c",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "45a525e2-8d98-4b56-99fb-bb9342147e91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc4d92c5-97e8-4f68-bfb4-b7f369931ceb",
        "cursor": {
          "ref": "d3c775bb-9065-4707-bf0c-20e2743dcef0",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "af0a973e-7dc3-4de2-ad3a-23a488e4a65f"
        },
        "item": {
          "id": "fc4d92c5-97e8-4f68-bfb4-b7f369931ceb",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "f169ecb4-7ec7-40f3-9225-a73a3930d6b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ada7234c-76c2-433b-82e1-0b01a99f9df2",
        "cursor": {
          "ref": "bb355116-8dbd-4262-8de3-ab5bcdf1a816",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "6e8353ca-ee4d-4d55-b99e-02759a410a11"
        },
        "item": {
          "id": "ada7234c-76c2-433b-82e1-0b01a99f9df2",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "605628c6-c49e-47b2-9538-e7defe21ae64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bab27f9-2737-439a-bfbf-fc10a80aea1a",
        "cursor": {
          "ref": "6f9f65df-6813-4dff-868e-f0c3b18c83a4",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "c74748d1-c4ac-418c-bd64-7df3d8f7f70f"
        },
        "item": {
          "id": "5bab27f9-2737-439a-bfbf-fc10a80aea1a",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "883f3941-2364-41b1-94b5-5f4e6e08e080",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "360d4bf7-815b-4b41-98e2-6a4073824906",
        "cursor": {
          "ref": "a640c770-2143-40f1-a47d-581d44b0924e",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "70978f78-aa20-4629-a8f2-b27d4849eb0c"
        },
        "item": {
          "id": "360d4bf7-815b-4b41-98e2-6a4073824906",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "f4ed3d08-ed81-4124-b355-950b3c9cfa60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b61dee9-7ec3-498c-9283-de7e799f0306",
        "cursor": {
          "ref": "9c7a5a0f-f297-409e-b7b1-68e4aa3c1f9f",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "7e66d0f1-973d-404a-a478-4a44de8d2abb"
        },
        "item": {
          "id": "7b61dee9-7ec3-498c-9283-de7e799f0306",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "533573ba-5eb9-4865-b75a-12317ec03ca3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a467e13d-6d1d-4741-bcba-dfe877392ed4",
        "cursor": {
          "ref": "3b9583c0-08b5-4def-a7a4-16a37915e155",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "53dcade9-066a-4cb4-9fe7-a4fbf8359058"
        },
        "item": {
          "id": "a467e13d-6d1d-4741-bcba-dfe877392ed4",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "a9b5db31-419c-44df-acca-f3b367d70477",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92562b8f-b813-462b-b6ef-ea6cf6f925d6",
        "cursor": {
          "ref": "09655825-f539-40bb-8537-dba90d9a9ad4",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "57232bd6-684b-4d2b-a958-fc7e2593bcb4"
        },
        "item": {
          "id": "92562b8f-b813-462b-b6ef-ea6cf6f925d6",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "9ee80690-6320-436c-8cd2-40110caa3f95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 137,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77c4226a-0961-4014-8020-27db3d2c89c7",
        "cursor": {
          "ref": "faff9ece-90dd-4e07-83eb-76bb7a2b37a9",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "0a25a68b-d49c-4df5-99d5-83df2395e79f"
        },
        "item": {
          "id": "77c4226a-0961-4014-8020-27db3d2c89c7",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "b7a06d48-c4dd-4ba5-8030-8db0f03a3548",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "744914db-632f-4b93-aebd-0e0ff8564b81",
        "cursor": {
          "ref": "3811ca83-5a03-4003-8510-f84a72aed995",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "4d022048-697c-4282-b749-675b087c4491"
        },
        "item": {
          "id": "744914db-632f-4b93-aebd-0e0ff8564b81",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "23a4e841-6120-4be0-9018-1f90658bbdb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e124737-64e5-44ec-965b-47196e86d5d8",
        "cursor": {
          "ref": "53508ac0-74eb-4329-8109-ec97cc2ec0da",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "fa69fbbf-4fa3-42b4-b107-f01d9f33358c"
        },
        "item": {
          "id": "6e124737-64e5-44ec-965b-47196e86d5d8",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "2ee81dc2-88f0-44bc-b9cf-90a68c0d1a29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 467,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4713ea28-f10c-4eba-9509-b65027632878",
        "cursor": {
          "ref": "55929947-a7e6-4e2e-b0c1-d22ea1ba7b32",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "a3c61727-fff7-4aad-8fcd-50b21445f9eb"
        },
        "item": {
          "id": "4713ea28-f10c-4eba-9509-b65027632878",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "ddff7c05-ec50-472a-a003-49fa6222aed6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 733,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "811ea8c9-45dd-478d-83e4-61b8b8a956fc",
        "cursor": {
          "ref": "3b83fa92-04f1-4dce-91b0-d81e953ac9f6",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "9cb1c977-b68a-46e2-987c-c1c81f9cdea6"
        },
        "item": {
          "id": "811ea8c9-45dd-478d-83e4-61b8b8a956fc",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "a5ee9b2d-321a-420e-bbfc-62557e3b8305",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 476,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee2c2feb-0c78-4274-ac8b-b53813579bb7",
        "cursor": {
          "ref": "95aeb2b1-a786-4d15-a766-9281df6328be",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "9c1950be-8406-43bd-aa7f-159b35c0a127"
        },
        "item": {
          "id": "ee2c2feb-0c78-4274-ac8b-b53813579bb7",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "05671e34-5b5b-4c52-8e0c-dbf34ca666ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 852,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ec6ebf1-cc3e-46af-a32b-82d413bacfec",
        "cursor": {
          "ref": "36f604aa-571a-4a7c-9336-050db79e1420",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "6e2085a7-b3a6-47d4-b992-11a7611a2b02"
        },
        "item": {
          "id": "7ec6ebf1-cc3e-46af-a32b-82d413bacfec",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "c329b1c0-dbdb-49ce-b3a7-72f7104e1fc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1891,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8557351-5eb0-40b8-a330-c71777320388",
        "cursor": {
          "ref": "1f1f10fb-622e-4605-9189-66c7af9f4b63",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "90d298a1-2d9a-4f4d-8d4c-6433ac4cbc1e"
        },
        "item": {
          "id": "e8557351-5eb0-40b8-a330-c71777320388",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "60aa5650-cedf-48ac-adff-2175fa4e4547",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 945,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16b62b01-7259-4e7f-9df3-6735ab0d66ce",
        "cursor": {
          "ref": "330d9e3f-a977-40f9-a170-7f447c2707c4",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "042300c6-fca3-4781-9ef0-052e2879fa62"
        },
        "item": {
          "id": "16b62b01-7259-4e7f-9df3-6735ab0d66ce",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "ace85fbf-428d-4f7d-b3fb-20bfe814e6ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47abfd7d-ab05-4c06-8425-35e402895f39",
        "cursor": {
          "ref": "be0ca25d-8cac-41ac-9d15-e2656a9b4336",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "85892a02-bb52-47b8-ab83-dfc59da6a6e5"
        },
        "item": {
          "id": "47abfd7d-ab05-4c06-8425-35e402895f39",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "a50e2b42-71af-4ca7-be11-bb45d1975c30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5298c99-9d22-423e-9c11-59be0d745a99",
        "cursor": {
          "ref": "33186c29-cfc2-4805-9fc2-42a1ac518569",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "2fcf685e-df14-4a7c-bd49-31e3a9c7ca1b"
        },
        "item": {
          "id": "a5298c99-9d22-423e-9c11-59be0d745a99",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "086cde84-c236-4a31-a1d1-a73771dc26c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 439,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd453a49-6f60-4e9b-b45a-22792ea05e84",
        "cursor": {
          "ref": "13086330-7788-4fff-b016-fd5acc521ea8",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "d41bd18a-759e-4c10-9e13-e682c6da0df1"
        },
        "item": {
          "id": "dd453a49-6f60-4e9b-b45a-22792ea05e84",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "f587ccfe-3d4e-4100-8afb-73313f7238a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 224,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9cd4bf3-40fa-426d-b97d-62d10491696a",
        "cursor": {
          "ref": "fa657cb9-0099-46df-acdf-fda64d75b275",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "0f52e1d5-22f5-428e-b586-941b3f6337cc"
        },
        "item": {
          "id": "d9cd4bf3-40fa-426d-b97d-62d10491696a",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "caeac495-11dc-4a53-80b8-3930df2ac2cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 254,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06b03683-d60c-485d-8da1-db8856e39052",
        "cursor": {
          "ref": "d19c9b6f-54b4-431b-9b77-8676004af05d",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "d5dcb671-2d76-4adf-913b-30501113749f"
        },
        "item": {
          "id": "06b03683-d60c-485d-8da1-db8856e39052",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "43b48d47-d0cf-49b8-ab85-80a2a7a192a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 983,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffd278f3-36d9-4033-a0b1-0e948d8f92cf",
        "cursor": {
          "ref": "f93c764b-5185-4d5f-b824-3a0e5814450f",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "f0c90ccc-67a2-48d3-b037-6425e5bdf1db"
        },
        "item": {
          "id": "ffd278f3-36d9-4033-a0b1-0e948d8f92cf",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "d86ce1ef-7116-4af1-92ee-8cc24b8c7292",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef0cd0fa-9323-4ed1-9cc8-db6fd8d9e593",
        "cursor": {
          "ref": "b387f618-6e7b-44b9-8b5e-58dabd52744c",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "0a8c04cb-9a91-46ea-83da-214bbc74ab7a"
        },
        "item": {
          "id": "ef0cd0fa-9323-4ed1-9cc8-db6fd8d9e593",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "ce0f3d17-c2ee-4f0c-9ad6-9c27dd67fae4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df05aa4c-816f-4e59-ba4c-f154434feca4",
        "cursor": {
          "ref": "01384d1a-d52d-4d01-ab69-3a48d2637177",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "cf54b86a-e778-4ea5-a8e8-176e7c7129c3"
        },
        "item": {
          "id": "df05aa4c-816f-4e59-ba4c-f154434feca4",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "f498df30-f7cf-4e89-8a15-7b2626237817",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 300,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5461cfc2-7715-45d0-8cae-4171d0d21612",
        "cursor": {
          "ref": "31ec11da-ead5-40df-962a-c50c73ab5a2f",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "90f0670b-1560-46ff-bc60-1bf9b3d3a2e1"
        },
        "item": {
          "id": "5461cfc2-7715-45d0-8cae-4171d0d21612",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "6fe18148-b575-4be6-946d-0fb7cc0c1845",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1137,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8288ad9d-1341-4190-94da-ee6880c185ea",
        "cursor": {
          "ref": "c3df0cc9-8718-4720-9143-8678cf2b4f43",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "2bdc5349-2adf-4fe7-8c76-c74388d45a0a"
        },
        "item": {
          "id": "8288ad9d-1341-4190-94da-ee6880c185ea",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "219c4d06-ee95-4ba4-a6ee-6bfd197f9ed2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcc325c8-f528-4f31-9422-69b37186f8fd",
        "cursor": {
          "ref": "89214fec-e959-4adb-b328-d55219d729f3",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "bd7afb8f-9cf6-4fa4-8866-68cda450bcb9"
        },
        "item": {
          "id": "dcc325c8-f528-4f31-9422-69b37186f8fd",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "2df69fda-de4f-41b1-9b14-e4715b8ac718",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 529,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74123c32-9df9-45d5-8921-14a8776897d8",
        "cursor": {
          "ref": "0f2c3b31-66ec-4f7e-a4e4-dafaf15910d7",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "382f14fa-d981-42c7-b0cc-993ca820fad0"
        },
        "item": {
          "id": "74123c32-9df9-45d5-8921-14a8776897d8",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "289f014f-efe0-4254-9d37-f0c583b59cb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 548,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45a96af2-8895-4445-b172-781af8e2ef6b",
        "cursor": {
          "ref": "55d493ff-e22d-476f-a3ab-26200ef84cec",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "0e91063a-d192-460c-8196-f1ab17b10994"
        },
        "item": {
          "id": "45a96af2-8895-4445-b172-781af8e2ef6b",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "a8c57856-501f-43cd-8602-c8e1c5a5408a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 287,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22f8eefb-0acf-49c3-aef2-f1b26a527649",
        "cursor": {
          "ref": "2f1d72c5-46f0-46c5-bf15-986d9eef5b1b",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "b06a36fb-f148-4eab-93a9-52bab8165477"
        },
        "item": {
          "id": "22f8eefb-0acf-49c3-aef2-f1b26a527649",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "59d3d9ff-bd18-4f38-9f7f-6268cd24ce7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 386,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02fb4736-150c-4471-9393-4fd1ec57fc68",
        "cursor": {
          "ref": "80ba1ae3-5584-43c2-8d61-824c0f2f00e4",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "38b257bc-591e-4ac6-a13d-1e15b3792598"
        },
        "item": {
          "id": "02fb4736-150c-4471-9393-4fd1ec57fc68",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "3ac08d54-5872-4820-b2a9-9088edec762e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 357,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f2db04b-1cd0-46cb-b6cc-2376fcd12a9e",
        "cursor": {
          "ref": "3e143b4f-f56a-4543-aac4-aca922281510",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "109792d8-2dc6-4c7e-96cc-d0b9d7c96207"
        },
        "item": {
          "id": "5f2db04b-1cd0-46cb-b6cc-2376fcd12a9e",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "cd8f6be4-6226-48d7-9fb2-78dcf4ed0cb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 644,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cac82e77-632a-4c29-945c-e221aff1ae43",
        "cursor": {
          "ref": "c4119fdf-102f-482b-a4cd-a2cf72ab7e2a",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "2d5a74dd-3f59-4b3a-8f08-ff9ccb0a3f92"
        },
        "item": {
          "id": "cac82e77-632a-4c29-945c-e221aff1ae43",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "2505ce96-5526-4edc-8542-ebf57257c579",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 855,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5769b64e-73f0-40d8-823e-4ce48aa3978e",
        "cursor": {
          "ref": "e211dd1b-cad7-488c-81ba-d1a3ff0011de",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "0aaa4cfe-664a-4100-853c-04819944772a"
        },
        "item": {
          "id": "5769b64e-73f0-40d8-823e-4ce48aa3978e",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "c1ff54c9-8489-4dd5-b0fa-0522ce36a284",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 418,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de836c40-b5ab-442b-93f2-d33f3ec1ca55",
        "cursor": {
          "ref": "9e7afe73-9e8e-4a39-81ac-30eab17a7010",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "68acdd62-4c20-4119-9e3c-c743f8edf128"
        },
        "item": {
          "id": "de836c40-b5ab-442b-93f2-d33f3ec1ca55",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "444b82a5-c4ec-4a80-a74f-0c04972b9637",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 283,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66f88325-e2cc-4fdc-99da-9881e79972d5",
        "cursor": {
          "ref": "78ce17a7-73a3-43c3-a2d0-37051845b7f4",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "bb38bb12-5ef3-4234-bf69-887b05b9a270"
        },
        "item": {
          "id": "66f88325-e2cc-4fdc-99da-9881e79972d5",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "f128d26c-db1b-4692-bf6e-a6bb3f47f2c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 385,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe3a233b-e554-4824-a226-a1c1014514df",
        "cursor": {
          "ref": "71cf759e-c29c-47ab-99fe-d6427b3bb3f0",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "e092fa0f-6cc7-49be-8f9c-70e67089be71"
        },
        "item": {
          "id": "fe3a233b-e554-4824-a226-a1c1014514df",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "c05ed0e4-e7f6-4c76-8b65-abc40b320a2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2117,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cb43202-2dd1-43eb-8cba-e935a886bf55",
        "cursor": {
          "ref": "711c4628-bb93-455d-9311-55fc98ef6c7b",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "7ee7afef-40ca-473b-8f43-cd180bc3a717"
        },
        "item": {
          "id": "4cb43202-2dd1-43eb-8cba-e935a886bf55",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "ec92f123-f88f-44b7-9eba-255256b6c971",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 740,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f7f1d8a-4ca1-4c4e-a8b7-6ad595c6b53f",
        "cursor": {
          "ref": "d9ec86c8-8b8d-48bf-a891-3e9d6677391b",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "4d76a49c-64e3-4d28-b0d3-355981b72531"
        },
        "item": {
          "id": "5f7f1d8a-4ca1-4c4e-a8b7-6ad595c6b53f",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "fa5ffc2f-3ab3-4a3f-90f3-f380eb62c278",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 314,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcadf501-abe3-436d-be27-01d2f15b27ae",
        "cursor": {
          "ref": "c41dafb3-be03-401f-be3a-17d2c1719f30",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "41dd1625-841d-4b4e-b5b7-361492e63f88"
        },
        "item": {
          "id": "dcadf501-abe3-436d-be27-01d2f15b27ae",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "b0b9b6d9-21ad-482c-8cfe-56f346910d96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1810,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec78f122-9ad6-4030-b5f1-110ff61383fa",
        "cursor": {
          "ref": "6c61b59a-04f7-435a-af67-5f650ae97dfc",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "402f95e2-8859-42bb-a020-3388be0e3c24"
        },
        "item": {
          "id": "ec78f122-9ad6-4030-b5f1-110ff61383fa",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "72a3bf43-50f5-42f2-99d4-0faae36385b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1610,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "412bc917-de1e-4ab4-8496-a39b7785b167",
        "cursor": {
          "ref": "7623c109-dae5-45c9-92f0-e60a9e5279a3",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "bc84ed52-5ca0-406f-b614-a726e2d58ee2"
        },
        "item": {
          "id": "412bc917-de1e-4ab4-8496-a39b7785b167",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "34b6e28c-51e1-4d2e-a382-29409ac79e13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 498,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cff8fe79-35f3-4d39-9bf0-bcebf9502af2",
        "cursor": {
          "ref": "a5f5d5fe-75d8-4dc7-9486-dd6d137826c3",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "5ac53eae-2e65-442a-ab53-7c5ee172c251"
        },
        "item": {
          "id": "cff8fe79-35f3-4d39-9bf0-bcebf9502af2",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "c884bb7f-902a-475f-b1e7-f68a1f46ead4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 381,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "596f9369-c2b7-4251-b641-571b84c9520d",
        "cursor": {
          "ref": "42e6c64f-407b-468b-a981-9d94f43ecb18",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "dba35722-2187-4ac2-961c-f95791719805"
        },
        "item": {
          "id": "596f9369-c2b7-4251-b641-571b84c9520d",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "620ce806-78a8-42ef-bf92-20fbac47de45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 463,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c920de68-8991-4076-92d0-3c0c63e363ce",
        "cursor": {
          "ref": "c7146c8c-04b3-4cc2-8a14-f473b4082bfa",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "2232bcbc-3f31-4ed4-ae5c-7c87c7175a90"
        },
        "item": {
          "id": "c920de68-8991-4076-92d0-3c0c63e363ce",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "c4bc5684-4508-49e9-8285-f96acc3fb445",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 281,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a35fb8b-2ec6-4e66-88f7-97c26acccf71",
        "cursor": {
          "ref": "bb06c7a7-cb6b-4cc7-b20a-63ccc02b2321",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "976b5816-a202-4580-82b3-0d52d8b9a544"
        },
        "item": {
          "id": "3a35fb8b-2ec6-4e66-88f7-97c26acccf71",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "82415184-b6ce-44d7-b126-cb561c60cfa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ac4f9b2-45a3-41ad-bc15-66deb9dd2dbc",
        "cursor": {
          "ref": "1082e6fa-1b3c-47da-ab5d-a6f84cff4840",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "41d6247e-00ab-46a0-9c81-77256a603a11"
        },
        "item": {
          "id": "0ac4f9b2-45a3-41ad-bc15-66deb9dd2dbc",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "a6ea6591-d5a4-40d3-8ec3-490a4b9d549b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96dcab1f-ccb3-45d0-8262-d021d065f7d3",
        "cursor": {
          "ref": "cf0bba55-3913-4f9a-a365-2e25f01c7c54",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "cd122af4-21f7-4bbf-af35-03b59763fecb"
        },
        "item": {
          "id": "96dcab1f-ccb3-45d0-8262-d021d065f7d3",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "bb78a281-36c9-45ff-b30d-73ccd3d61554",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee5637ff-c255-4cc6-a909-ccc1e14ee8f5",
        "cursor": {
          "ref": "1639c213-2868-49ef-b92a-55737a9348e9",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "5a6ff8c1-4c45-4892-84ae-104ae2e6ab5f"
        },
        "item": {
          "id": "ee5637ff-c255-4cc6-a909-ccc1e14ee8f5",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "dd967ee4-459e-4968-958c-6ecc0a7c3752",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 469,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deb1dfc8-77d0-4731-93e1-49aed8deae0f",
        "cursor": {
          "ref": "5b6b9d9e-b744-45c6-8980-c2308b425001",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "33ef3bfc-8d35-4b8c-ab7c-661584807144"
        },
        "item": {
          "id": "deb1dfc8-77d0-4731-93e1-49aed8deae0f",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "f179100d-24c0-448a-8a04-59d5addf568c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e98fad9c-8d0a-44a3-b31c-bcc77d6e749e",
        "cursor": {
          "ref": "6be5d3a2-86f9-48f2-bf4f-b1b4d3072721",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "3bda0c72-2085-4767-9bad-14ffd2a903ba"
        },
        "item": {
          "id": "e98fad9c-8d0a-44a3-b31c-bcc77d6e749e",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "1a228e05-b9b1-4b8c-a5bc-78a1c793eaf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86e28849-89e8-4443-a5e9-a2573f06cf91",
        "cursor": {
          "ref": "f22943f9-2fb7-4f55-a9cd-a145c89d07bc",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "02e5e111-76a5-4aa1-b7e7-89012667762b"
        },
        "item": {
          "id": "86e28849-89e8-4443-a5e9-a2573f06cf91",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "cc0645a7-e5bc-4a09-9e98-10556549963c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "247f6c84-11c9-4c9a-9bf7-1e124acfde54",
        "cursor": {
          "ref": "3e9fc1a8-7f47-4968-b5d7-73834563b48b",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "9b9f6a43-18f7-46aa-97dc-7d365a8b1bca"
        },
        "item": {
          "id": "247f6c84-11c9-4c9a-9bf7-1e124acfde54",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "157eecc5-ab35-4b2a-96e7-c7fa97d8bc06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9e45883-0795-453f-b021-cdca76fe33fa",
        "cursor": {
          "ref": "da8c1131-1766-4ae6-b65f-d03a1b2753a2",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "72412e45-650b-403e-8aac-b438100ac898"
        },
        "item": {
          "id": "d9e45883-0795-453f-b021-cdca76fe33fa",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "e11807a1-0a33-424e-a178-cfed07840144",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 299,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ebadb30-0fd7-4b0e-b82d-e138fde7fd8d",
        "cursor": {
          "ref": "45f88225-2f11-4598-9eb4-564bb4821fd1",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "b3cd481f-03c6-4a2f-a542-c24ebb760724"
        },
        "item": {
          "id": "1ebadb30-0fd7-4b0e-b82d-e138fde7fd8d",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "5a303196-e5a7-45a2-bbd8-27bf1c5535b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aebccf94-b84a-480f-bedf-337c936f9170",
        "cursor": {
          "ref": "33c98454-3e88-4b94-901d-e7183c787d48",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "1d74ff67-c9d7-4183-9e6f-16bb8d68631c"
        },
        "item": {
          "id": "aebccf94-b84a-480f-bedf-337c936f9170",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "bad5409a-6e51-46cf-99d4-5e58f36b8103",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3eb9a68-1b15-440f-996c-aae243088c34",
        "cursor": {
          "ref": "d1c33caf-8d0d-4c4c-924e-8e0d73a2ce0a",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "96b3ee1e-b0c5-4c5b-8f90-ffc4e83e71e0"
        },
        "item": {
          "id": "a3eb9a68-1b15-440f-996c-aae243088c34",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "a66da04d-d598-46f0-8475-6a168bd39dca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c30b1556-9ac3-47df-a231-928a092a212b",
        "cursor": {
          "ref": "44009fea-bd2e-4ca0-a5d7-8dd8fb072051",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "3881a358-120f-4b3f-b09a-b47c2fe47ae3"
        },
        "item": {
          "id": "c30b1556-9ac3-47df-a231-928a092a212b",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "fe87833c-d78f-4ebb-b6f9-3e0c5f934fab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c47e668d-e661-40d1-b902-d160bce4da1e",
        "cursor": {
          "ref": "1375981f-b429-41c9-8948-29b59f2671b0",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "da812af2-776a-43a7-a4cc-14a1fa75bade"
        },
        "item": {
          "id": "c47e668d-e661-40d1-b902-d160bce4da1e",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "08792a58-ac6d-4bea-9d26-c3238d78ab34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9f87447-d894-49d6-bb49-7a3f6700dbfa",
        "cursor": {
          "ref": "2b858477-66d4-42cc-93a2-1fb079c48d03",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "48c754b3-dc70-41f5-9680-43d9246b13b4"
        },
        "item": {
          "id": "e9f87447-d894-49d6-bb49-7a3f6700dbfa",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "4fa12b0d-7c8a-451d-aefe-d41a07462c26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27af57f6-7fe7-4036-a6fc-ee16b1776b41",
        "cursor": {
          "ref": "d36af667-4001-44d5-8190-e33fed93fbdd",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "f0d3fb4f-1f9f-464b-8639-710d7ae164eb"
        },
        "item": {
          "id": "27af57f6-7fe7-4036-a6fc-ee16b1776b41",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "ac9046c3-9650-4591-9c81-efe93310789a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "290f82f0-4a3e-4032-9674-62064297e9c4",
        "cursor": {
          "ref": "089de28b-6aee-4e7c-a54a-94d198b83afa",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "ff872ac2-680c-4dc7-98d1-079e96aee80d"
        },
        "item": {
          "id": "290f82f0-4a3e-4032-9674-62064297e9c4",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "c9e26d91-41df-4a4c-a309-199d5b24334c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5b29c43-c23b-4873-a0df-dce7c9f67b2c",
        "cursor": {
          "ref": "362fec87-b35b-484d-97dd-819165efab81",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "f6565202-d1f6-4f04-80d4-daf02932424a"
        },
        "item": {
          "id": "f5b29c43-c23b-4873-a0df-dce7c9f67b2c",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "634ce841-dc83-4b33-a375-369828d04937",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "669a2691-716b-4a64-bb01-197d517ee724",
        "cursor": {
          "ref": "f4509c57-115c-4131-85d2-e4206c5b2082",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "724bfd31-068e-4b8d-8dce-f6c5f9e3038b"
        },
        "item": {
          "id": "669a2691-716b-4a64-bb01-197d517ee724",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "64a94e1b-1f74-4692-b0a8-35232df572e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e3d0bf1-0451-48d9-84e9-ac31565a3e8b",
        "cursor": {
          "ref": "b9673548-6046-4414-8949-379687b15afd",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "6731da06-18a2-4987-90a8-26fd70b688c4"
        },
        "item": {
          "id": "9e3d0bf1-0451-48d9-84e9-ac31565a3e8b",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "6d878cd2-4b26-468e-b530-b0647be62062",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b942651-5657-47c2-ae0f-41fabccf9dc3",
        "cursor": {
          "ref": "62117755-3ab6-4c59-8721-0e9a34685a5b",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "ba727028-af04-4294-9a5f-7ed2601eca12"
        },
        "item": {
          "id": "3b942651-5657-47c2-ae0f-41fabccf9dc3",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "1edbfdfc-20c1-4a53-959d-6f7da415b102",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7294d037-197e-4460-a05d-02d364686b8f",
        "cursor": {
          "ref": "b99de0d1-229a-4408-b925-aedbd52c88f7",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "d588d891-d09c-48b4-a0c8-2ceadc41a63d"
        },
        "item": {
          "id": "7294d037-197e-4460-a05d-02d364686b8f",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "3b43c1be-d06b-4cbe-b874-a2131a8d5c31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "053f963d-285d-4e78-bd9f-20159d294117",
        "cursor": {
          "ref": "23c4d306-3ef3-4431-8b59-1e50120a6c2f",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "fb866496-3ed8-4333-9cae-629a717540c9"
        },
        "item": {
          "id": "053f963d-285d-4e78-bd9f-20159d294117",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "4c918fbe-91d3-4d6d-8a8f-91ce5401d070",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f8d383c-7cac-4043-9681-bd7977c29b4e",
        "cursor": {
          "ref": "79d75f3c-c5a9-4aed-9452-1e05a2bb0899",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "3fe49202-7437-445e-972c-2bf0da2a8ace"
        },
        "item": {
          "id": "0f8d383c-7cac-4043-9681-bd7977c29b4e",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "b522f69e-9b21-4e24-914c-fcab2c6b8762",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10532ced-65a3-4702-8fda-38c00e68016c",
        "cursor": {
          "ref": "11172700-dda1-45f0-9b8c-b54445ca0dce",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "b4d27f93-63f8-4a65-9074-34d586088040"
        },
        "item": {
          "id": "10532ced-65a3-4702-8fda-38c00e68016c",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "9c9699b6-9b43-4685-8a72-c010bf93a1ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1192aa43-ff4d-4684-9964-08f0673b5be3",
        "cursor": {
          "ref": "5c56565e-33b9-4f76-8ffc-267ee6d26960",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "59877cb7-4f98-4c78-a088-54f5400db6f4"
        },
        "item": {
          "id": "1192aa43-ff4d-4684-9964-08f0673b5be3",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "68daea3f-a57f-45b5-b146-175151458fe0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "435fe199-54db-44af-ad40-8ffa754f1c02",
        "cursor": {
          "ref": "d844d520-5e18-4d6a-9a10-75612e23b562",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "4de8d03e-3078-4921-b49f-c26911b4181d"
        },
        "item": {
          "id": "435fe199-54db-44af-ad40-8ffa754f1c02",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "2e62e64f-28fc-4234-97c4-cd6b77553aef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19394103-8c3c-4d59-bd9e-48b650cca436",
        "cursor": {
          "ref": "20d3a202-dffe-4928-b38e-e752a0f1a95d",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "8632db20-0969-45bd-adaf-f9e1bc8c85bb"
        },
        "item": {
          "id": "19394103-8c3c-4d59-bd9e-48b650cca436",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "319b0736-06a1-44d0-984b-ead9d1661e54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10147d67-9acb-43a7-83a9-2e90dc30e03f",
        "cursor": {
          "ref": "cf26f539-da47-432c-805d-651a6813c960",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "be11114d-b7fd-44d8-a0ed-9f3edf8fca18"
        },
        "item": {
          "id": "10147d67-9acb-43a7-83a9-2e90dc30e03f",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "4d0121e0-6930-428e-8b15-db668152ba7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2fc0bb7-2c5a-43d2-a0df-406cc0d363bc",
        "cursor": {
          "ref": "dd80b0a5-da4a-4283-a961-94960d425b98",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "5ef5cb35-1275-42c4-916e-f3f083f48608"
        },
        "item": {
          "id": "f2fc0bb7-2c5a-43d2-a0df-406cc0d363bc",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "57d1f3fe-5ae3-4a19-90ed-e96eb372d425",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a101133-00bc-4c95-9fb6-d943ab348073",
        "cursor": {
          "ref": "05a76212-f852-4c55-a068-1c37e2c3cd29",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "becf3757-9bc2-46c9-bef8-5b0f7ad62183"
        },
        "item": {
          "id": "8a101133-00bc-4c95-9fb6-d943ab348073",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "2ea62fd8-a4cc-4b5a-ad82-dcc4eb5970e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82b95fa7-5567-4b9c-90bd-214b78f5821e",
        "cursor": {
          "ref": "60948852-d9ee-46a1-ac4c-1e062acd7be3",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "9789efdc-aa65-41b7-9825-cbde39a82e03"
        },
        "item": {
          "id": "82b95fa7-5567-4b9c-90bd-214b78f5821e",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "1941b074-5738-48f9-833f-0416c38cea56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dcdfcca-c235-4861-ba85-6cccbeb2569b",
        "cursor": {
          "ref": "fd4d51bd-b44d-4853-b3cf-76cd59f6c476",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "0313e871-f84b-470a-85a9-5f3b5ed4f108"
        },
        "item": {
          "id": "3dcdfcca-c235-4861-ba85-6cccbeb2569b",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "0e86936b-57ff-4f7b-9c55-3069a68ee0d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "428835f3-e2d2-4b60-a31a-8643300d37f2",
        "cursor": {
          "ref": "65ff2e89-8dea-46f4-b9da-cd2a4a3e243b",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "f1a1a4f4-b24a-4e71-b9f3-d34641946622"
        },
        "item": {
          "id": "428835f3-e2d2-4b60-a31a-8643300d37f2",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "7b891615-d6ef-424f-86c4-6cfe4c26987f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a10eb80-4ece-4c5f-b22a-6abc399a625c",
        "cursor": {
          "ref": "0c067fa0-c72d-4e84-9d3d-d17b8c7c8c20",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "aecf1092-be79-4208-91ca-3140e9bd1c5d"
        },
        "item": {
          "id": "8a10eb80-4ece-4c5f-b22a-6abc399a625c",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "dcc354a6-6bf9-4243-b970-4a9e9d7c1841",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2822faa9-9e3f-435c-9d13-c7906dc9a1d7",
        "cursor": {
          "ref": "02ae097a-d8e4-4e96-853c-9db4c7d53945",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "e72367dc-01bc-4275-bdf8-85ee3a1910ca"
        },
        "item": {
          "id": "2822faa9-9e3f-435c-9d13-c7906dc9a1d7",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "cda7b99c-b20a-4e18-822b-f460c0b7528b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fda58fb1-6c97-4840-a3d7-572a0ab148a8",
        "cursor": {
          "ref": "400cdfae-d9ab-4fe0-8a57-3f22333bb5b7",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "5dd9b587-e5c3-44ad-8df8-8fa1f1becdc4"
        },
        "item": {
          "id": "fda58fb1-6c97-4840-a3d7-572a0ab148a8",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "cef62c22-d3c4-4328-a70c-dbacead1a25f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "859cf6da-2d31-456a-99f3-96b3bf8c4aab",
        "cursor": {
          "ref": "78b26ae8-b6d2-493e-9e72-e7e030e7feba",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "63de7ff6-4869-4711-bc77-600e43975d14"
        },
        "item": {
          "id": "859cf6da-2d31-456a-99f3-96b3bf8c4aab",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "c6dc12f2-9c5f-4b0f-9765-803a7d7fbe01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebaea653-c778-46b0-82f0-e7266bb33795",
        "cursor": {
          "ref": "e1de7425-4921-4ea3-a54b-27d3d5b582c4",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "6520762f-6147-41cf-899b-656c8cc76a5f"
        },
        "item": {
          "id": "ebaea653-c778-46b0-82f0-e7266bb33795",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "84b49a3f-be01-4fc1-8e8a-6a10a4aad106",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bb1be82-e764-4524-be57-5c92b406fbfd",
        "cursor": {
          "ref": "07d89361-1d97-4daf-b478-71ea8363d66e",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "cd10fbde-f5ec-41c0-8ae7-dac5b9d03ae3"
        },
        "item": {
          "id": "3bb1be82-e764-4524-be57-5c92b406fbfd",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "6c78d863-bf1d-4e57-8efb-b71b7ce2a056",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a8644f6-4039-461d-bb85-db4421838d8b",
        "cursor": {
          "ref": "af6f96c8-b02e-47e2-bbeb-01d001e16b05",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "6d88b57b-876b-48f7-9976-70561f597033"
        },
        "item": {
          "id": "5a8644f6-4039-461d-bb85-db4421838d8b",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "666fb55e-0754-4bb0-bf41-0f844e65c93b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dfd4c36-b7b3-4b1b-a8c3-a5e8dc5f7ae4",
        "cursor": {
          "ref": "98dbf365-5dcc-4f42-a34e-e40ead1e5ebf",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "d3a35288-8526-4906-be27-69fa0f8ae7fe"
        },
        "item": {
          "id": "6dfd4c36-b7b3-4b1b-a8c3-a5e8dc5f7ae4",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "b56de791-f1f0-437d-9456-4b2e46618979",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd2d0fd2-4471-4887-8bd5-912448a84af7",
        "cursor": {
          "ref": "1cdd2807-eb48-4c59-8983-4a433e0b7cd5",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "b50a2239-6c6e-42fc-8f63-6e9b08c4bace"
        },
        "item": {
          "id": "bd2d0fd2-4471-4887-8bd5-912448a84af7",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "b0b44578-5383-4bb9-aa05-b8cb6d7c82ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ed22860-64de-454a-98d7-582bbc069fb5",
        "cursor": {
          "ref": "f54418fa-d1db-44cc-a957-17322b139bd6",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "8ff3affc-95e8-4211-9f05-f066b1bb9da2"
        },
        "item": {
          "id": "0ed22860-64de-454a-98d7-582bbc069fb5",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "85bd4dc9-f289-4fe1-b30c-1493737fd57f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8c16c21-5fb6-456e-9ed2-d16832a5a380",
        "cursor": {
          "ref": "9d937a92-1998-4bd1-9fa1-58902d5f4353",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "e4f06fb9-a01a-4a89-be05-14a52c0b7bc6"
        },
        "item": {
          "id": "a8c16c21-5fb6-456e-9ed2-d16832a5a380",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "7330a1c5-75d6-4167-845d-9e0a43e60f3d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 126,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5490774f-1b55-4d79-9e3e-420adb5983f0",
        "cursor": {
          "ref": "612d5032-60a4-45c1-8d43-ec572df2473c",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "852afd60-abeb-471f-968f-d89785a3fbc8"
        },
        "item": {
          "id": "5490774f-1b55-4d79-9e3e-420adb5983f0",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "d36a3576-19b0-47f3-892b-11515c74061d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 81,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "630ae586-5d29-47f9-828b-a161a17b020f",
        "cursor": {
          "ref": "c95c3f2b-e87e-45f6-a998-be8b5381dc6f",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "9ca166ef-7894-4abc-833d-31fe35f0183e"
        },
        "item": {
          "id": "630ae586-5d29-47f9-828b-a161a17b020f",
          "name": "credentials_verify"
        },
        "response": {
          "id": "d6a5012c-a34a-408e-9522-c8c4c1a5d5aa",
          "status": "OK",
          "code": 200,
          "responseTime": 1391,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64a42b45-b61a-4502-9317-aad155bd7ce5",
        "cursor": {
          "ref": "58078e9d-6fa2-4733-a04e-e09c65c3c4fb",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "8af3c8f0-7513-4018-8b42-bc340d3008eb"
        },
        "item": {
          "id": "64a42b45-b61a-4502-9317-aad155bd7ce5",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "1675eb04-81c0-4d2b-b50b-2b1cdb5a61bd",
          "status": "OK",
          "code": 200,
          "responseTime": 1091,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40a303ed-f8e8-4d39-9df4-d18d375530bf",
        "cursor": {
          "ref": "7214b5d1-c4ae-45fe-80b3-a04e6dd9afb7",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "b99d4d3f-24b1-4529-8f40-1b2bb68e6259"
        },
        "item": {
          "id": "40a303ed-f8e8-4d39-9df4-d18d375530bf",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "6f0c4b45-fb5c-4400-bf0b-7db1c16efa50",
          "status": "OK",
          "code": 200,
          "responseTime": 2562,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee5af07a-1f74-48c5-a5d3-884cac6f6ab3",
        "cursor": {
          "ref": "7feeea84-bea4-4887-a46d-c62b144661f1",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "0987c42b-2c4e-4877-ad43-987ea5d530fb"
        },
        "item": {
          "id": "ee5af07a-1f74-48c5-a5d3-884cac6f6ab3",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "bab124b5-202d-42bd-9bce-bb680aae61b3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee5af07a-1f74-48c5-a5d3-884cac6f6ab3",
        "cursor": {
          "ref": "7feeea84-bea4-4887-a46d-c62b144661f1",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "0987c42b-2c4e-4877-ad43-987ea5d530fb"
        },
        "item": {
          "id": "ee5af07a-1f74-48c5-a5d3-884cac6f6ab3",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "bab124b5-202d-42bd-9bce-bb680aae61b3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee5af07a-1f74-48c5-a5d3-884cac6f6ab3",
        "cursor": {
          "ref": "7feeea84-bea4-4887-a46d-c62b144661f1",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "0987c42b-2c4e-4877-ad43-987ea5d530fb"
        },
        "item": {
          "id": "ee5af07a-1f74-48c5-a5d3-884cac6f6ab3",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "bab124b5-202d-42bd-9bce-bb680aae61b3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27fb580e-4ca3-4e36-90d9-f501986769c4",
        "cursor": {
          "ref": "660e4d8d-2287-4034-929e-2996a5660978",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "b4bc3bd1-ee0c-4979-8cbb-356da0022a95"
        },
        "item": {
          "id": "27fb580e-4ca3-4e36-90d9-f501986769c4",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "3a2dc272-c30c-4f79-afcb-ac3615da9f30",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 15,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc2404e7-ae2f-4a89-910e-0b61ebe25a82",
        "cursor": {
          "ref": "63413a21-6c2b-4812-8318-78c72659a75f",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "40639172-2a7a-45fc-b7c3-81ecfc79e4c2"
        },
        "item": {
          "id": "bc2404e7-ae2f-4a89-910e-0b61ebe25a82",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "4f710f97-2916-4e7f-b814-186a6ca98c77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "bc2404e7-ae2f-4a89-910e-0b61ebe25a82",
        "cursor": {
          "ref": "63413a21-6c2b-4812-8318-78c72659a75f",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "40639172-2a7a-45fc-b7c3-81ecfc79e4c2"
        },
        "item": {
          "id": "bc2404e7-ae2f-4a89-910e-0b61ebe25a82",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "4f710f97-2916-4e7f-b814-186a6ca98c77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "4b59e952-4e0e-41b3-9c2d-5d1f3e3670e3",
        "cursor": {
          "ref": "aed4ea7c-3e16-4950-a8da-89f56ca18b2e",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "5815a13d-b497-4d88-8557-f8b9ba1e23c9"
        },
        "item": {
          "id": "4b59e952-4e0e-41b3-9c2d-5d1f3e3670e3",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "2b703fad-f622-4e51-b009-34df97a77f2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 726,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "adc3db0c-db8d-4a42-ad82-78d221a64580",
        "cursor": {
          "ref": "6e1aa6b8-b233-4a17-b587-964ecec098f3",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "7791fe7e-6e06-479d-8221-e63c4ac186e1"
        },
        "item": {
          "id": "adc3db0c-db8d-4a42-ad82-78d221a64580",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "0b9faa2e-1219-4d94-bc17-b8d45b773a40",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adc3db0c-db8d-4a42-ad82-78d221a64580",
        "cursor": {
          "ref": "6e1aa6b8-b233-4a17-b587-964ecec098f3",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "7791fe7e-6e06-479d-8221-e63c4ac186e1"
        },
        "item": {
          "id": "adc3db0c-db8d-4a42-ad82-78d221a64580",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "0b9faa2e-1219-4d94-bc17-b8d45b773a40",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e58d0a42-3cb9-47dd-8a28-70c04742d26d",
        "cursor": {
          "ref": "8e8f49c1-9a6e-4148-92da-0fb3b9f3523d",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "1b8f35f6-0891-4e30-878e-099d4150a7bd"
        },
        "item": {
          "id": "e58d0a42-3cb9-47dd-8a28-70c04742d26d",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "fc10eed5-f947-41ef-b9bc-a4e750858bdf",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 113,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}