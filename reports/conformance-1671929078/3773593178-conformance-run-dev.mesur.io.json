{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "3e64835c-4d9c-4d79-a16a-37fbea530b4d",
        "name": "Clear Cache",
        "item": [
          {
            "id": "9899a144-c171-462e-beb7-4b01f8bbca25",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fea09569-fb00-4f36-b14a-8a7bb23f5e79",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ca5a1644-4843-40e3-bf80-69e9f1269e5e"
                }
              }
            ]
          },
          {
            "id": "43ae82ea-a356-4426-93b8-89e047e56b19",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ab88c72e-959f-4fad-8992-da20409df57b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2b9851b1-38b8-4f4b-b035-3e389fb4649e"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "cb5ef102-4175-40d3-89a7-b2ab8a8131bf",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "bf3897af-68c7-4323-ba22-64cbe46d7966",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1f1ad1bc-3e8f-4199-976d-15cb4e427d81",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "51677e8c-cef8-4f56-8d50-c520217db086",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1f96fb65-f90e-44a3-9176-0bb43f9d1545"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6a1f67db-c87d-47a2-9bfd-663a3fbda60a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "85b839a2-543b-4496-a71e-92bda027e5ab"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "38b1e1e1-0d47-404f-a34b-3665c4a1c775",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "04735647-9444-4da5-bd63-bef772cd900b"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2c050a45-7b4d-46eb-9392-6a4eb99d268b",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "9f6284a0-ac35-4856-a00b-f26c166f5db5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7c976390-70c1-420e-b023-2b2fb46527ce",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8ecaa728-cd14-4ec0-9759-4b9757cade6d"
            }
          }
        ]
      },
      {
        "id": "61ebac4a-6e22-46b8-bf20-7d41a1d6b07d",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "bb6683eb-0979-4317-82bf-0218612f808c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8eb2d1f3-75e3-49b9-946e-1d866674a932",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "176a7ce3-7ab7-4760-8b8b-d3ba96ba4844",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "661906a7-af6d-4cfa-b447-8249f4422554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5f13f870-36d8-48c4-86d8-0b1a70bb26fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe225d20-13b8-42bd-b528-0e821fec4b74",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d2bbca3-b273-49d0-b11b-fe919b08f786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0244dd3f-c413-4198-9fbb-9b3f82fe7b16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2660f7ef-1979-4135-bea8-b519b31fbe49",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "313bf877-1fdd-4363-9978-08a037674be1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c309de88-7b7f-4c10-906c-47b909896154"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ce6ef403-5261-4cb0-b12c-bc1bc833703d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "38d5d00d-a987-429d-b129-f884226cb8ba",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6f25347-40d8-4150-9145-8dff84631cd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a115a45f-baa8-47f7-a32f-c958f5d56e70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7272b96b-3ccd-461d-a1c6-2e3e082d6e06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a32b0cf3-2dc8-4685-bfae-19979e6ce972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb28b70c-2268-425f-b2e7-88a84f5f1a2c",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c2e4d76-28fb-4609-b550-921a7fdee736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6cbf332a-85a7-4639-9842-663f352a0a4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b503db99-f551-4008-afde-d0d6317feaab",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "33df096a-8138-4a91-afc7-ed0b9b340fad"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e292ec7a-bc11-4597-a7b9-64bba07a58bf",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c8926542-24a3-4cf5-94a5-95e61ebf6695",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9c52bd79-d1a7-428a-8780-6e6344cafc80",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "b2587b40-849c-488d-a1d7-5aab2af4f7b6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "19cc70ce-dc56-4885-bcac-0a4e2a5b679c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "2bb5e846-7b14-4cb2-abeb-246022baadf7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e370c125-3969-4aba-a69c-8802b6cc1bb4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fa3b78b8-1732-4580-be24-f906ed613dfe"
            }
          }
        ]
      },
      {
        "id": "80de3f6b-4719-4afb-9d5c-ed3de6a9beec",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "270fe1fa-f967-44b9-9812-6908869ab062",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4ab91921-9688-402f-aa3f-22dbd850c735",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "5cb8c133-6a78-4ef9-894e-bebcd842ddb5",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9f5c912-348f-4763-9b37-be7372203d04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b9af26e-c07c-4280-abc1-7d751fb030ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e06708a2-e5be-4ce3-920d-c23e7ac6f86a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "82045a2b-fffc-4462-b6ec-da04d3ebac94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40d501d3-059e-4529-aaf5-fd5d4b338711",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dcdd44b-7eeb-4a5e-a963-de32a2225625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd99a9cc-2b17-4796-86d8-557eb92bb099"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7aaa26d-eeeb-4ca4-b61a-5cb144451b08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4da64fd7-c6e7-423a-89a0-366237fc8604"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3c9d1e3-0ec7-4aa0-9ac5-a72816efd7e7",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c22ef134-861e-46b4-b685-f8fc637e76d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cee16c8-6dba-4783-aa9d-b92c2a60c3c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dc659c2-d159-441e-a7c5-4b7f6f97f1a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "46805e55-df76-47a4-960b-dffeeb06f197"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a18b0bdf-1e4f-4bbd-916f-e3becbe3f634",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42c84236-789e-4d29-8e56-fd46cb5f9e91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbe23ca8-07b8-47e3-9e45-2e2f73e2b6f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c25d439f-c5d7-4d88-98e4-2c62edbfc98e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "86fe8cab-7bc7-48fa-a789-b208782f8e4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de097217-2e50-4730-ae7b-f410723d01bd",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1617f166-6c22-434f-bc49-64ecb4a316dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80dff25e-5853-468f-8df8-15cd672a5ab1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e290b4a5-061f-4e29-bc33-35fdd43a75c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0c54fd06-4261-4dcf-b86a-4eca78dfc8a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ad43f8b-2b36-471f-9ec5-be9bbe234fe9",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7338b2b-ebc1-4aee-94e1-474573d6399d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03d48798-bf68-434a-9d6a-211aca6e8432"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcaaedc1-a295-4a30-b092-338c599e1e6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5a70adf6-e44f-4486-9c85-e5c3955cf929"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bbbaa07-3e38-4826-ae00-0dde80bbe644",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4744e631-460e-42a2-aab4-65255ed70d47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ac5e379-a962-4587-9c15-18797d3af40e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68ba38ae-d531-425e-90a6-b9aecb8733a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a27b3105-52c4-4044-9bd8-e4eb0781f948"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02eaffbe-c4a1-4015-bebe-8868e01a33cb",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "437aa425-cf36-4026-add3-66c2ff581670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb0f315b-801b-4dfc-8d72-093a67887f3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2c956c5-0e7f-4d6d-b899-77e48a1c38f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "32817a0f-e838-403c-9af9-2e885b251c6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dd28fbf-da12-4c8b-9a62-a079d2e39234",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77c97490-6f8c-47d2-87db-c69f762ee0f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc3c0fe0-c7aa-420d-b9ef-d835c86ef8e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4994f1b8-a947-43a9-9723-fdfcac65317d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f3794e76-f90b-4000-b87d-f9cc80d2687d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44194c2e-9c1f-48b6-ab62-224c6494d25b",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64d8c36b-978a-47cb-bde8-9d4db3c1c9ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d32b6017-7e14-4841-b85d-c60c4015c721"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8317c078-9925-4d98-bf6e-c6cab2e727d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e3035156-6cc8-4844-ad90-507ed6c28245"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b763c9a1-7912-4122-a9cb-f6c2b7ea15ff",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b2314ce-6757-4583-9898-d1ae1931da6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41818eea-cd6d-4876-afe4-e303bb1272cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da245265-f77c-4014-a67f-fc1faef48bc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "438fc1e3-8e95-405a-8daf-12ddb051d780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08b8ec66-6534-4211-baec-aeec70b54031",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7861d729-e7fd-498d-a637-8ac22ccd0c02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a8b09f3-aaaf-4252-916f-cd1d0d0e794a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2df36951-a0bf-4c30-8e12-1918e6196cf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8f4d8ca0-e170-46d7-b3ae-30e9a29bc209"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ede4677-738b-47d4-81c8-83818b0b5609",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4af7b9c0-c6cc-4a25-8bac-e331c7cd228e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "336acab5-7c52-43ca-b7ea-4a820a29c986"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "731c72cb-a44d-42ae-a092-bc41b74ab634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5c5bb777-2061-47a5-8669-840831448550"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce9eaf49-64f2-4c53-9aee-6d9653714cf2",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "710f897b-3aa9-49c2-a448-7bbf0c101d98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b20fd428-ec7e-4f07-b781-04553de4d914"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f6f0c7e-ce88-4fef-a0c3-982256390d9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "adb9e504-e7cb-4eb6-a17e-044639a52e9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e0525c1-4158-4efb-a88b-2e74fc0f311b",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbae0d02-3d22-46d8-999c-c0f790733778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fd8ee93-4eeb-4884-b846-740d784bff9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd752899-6d09-4462-bcf2-c3696a975596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3f4c282b-3c43-48ff-9311-83b4d0d771e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7b8b2a7-7cf1-48b1-9b46-933f66030075",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8c4ab4f-15b0-4dbb-93da-c88c31d24f86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49dc9d34-19ab-4afe-9f8d-121cbdd62150"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23bc1eec-7c98-4cb9-9750-34e05262f478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "21772b82-5675-41d4-9477-18bd7f1e7ae9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a40e45d6-1fd4-4baf-a67f-d5c3476604e2",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a873114-15d5-4a23-b957-37fd23f6e744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "425b2d9f-5a65-40ea-9206-605decf18925"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "034e4fff-c0e9-4b82-b497-eaf55334ac5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a9082ad6-d63e-413e-b933-becf8fa7b635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7a2bd4f-0e32-462e-955e-cadf0ecbe079",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1b0e48d-1fe1-447c-953e-0856de9dbc59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79470d35-b55c-47e8-bb2f-f1ce5a9bfd39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0520a4fb-3d61-487b-970c-76b0931e0c06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4d6bfb2b-eefc-4550-885a-fd34694d1fbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "505756b9-fbea-4b86-944f-6f919df4f6c8",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a621e93c-c791-4993-8b49-255975153e64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7120569a-c84a-4d13-8f47-53d36de90607"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73bf3887-4987-44b6-8792-8001c027796b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8e4eccad-d837-493d-8bb9-e8b39f4c9ee3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54d467cc-6546-4442-aaf0-3435d1ca8051",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2208866-5ac9-46ff-828f-dbe01a5ace6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45e21b03-f52a-471f-9d18-7aa6dcf47b0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73822c2b-c695-43eb-b2e6-d2744928258e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "189e7fdf-e4e8-48b5-958e-1d904c40bf39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84c65cb1-56ec-42ba-a32e-0be5c9ed893e",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ad57327-9226-4167-b95f-74917368d238",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16e47c53-b988-430c-af1b-412b7674a2f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44a0482e-5868-4cab-b051-d386a9fd170b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "165dc9fd-917c-448e-bf1c-8fb8ee371a18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78269392-b33f-48ab-b099-784a44e4ae43",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ade90d4-47ee-4e7c-afa6-628f117f7138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d98f394-5ade-4aae-8be4-a6e6c78f5df5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "097260a5-bb67-4ba2-9c7f-115b75be8cf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d118da24-6d4f-42f7-8e0e-74f6ef578f2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f67ae5e9-3eee-4618-acba-29ac05a97bd0",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fab00a09-ac0c-4364-8f7a-4e09206d5559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63093f3e-cd81-4b04-b786-935254c27c8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "136a2ca3-eaa9-406a-b31e-428eb031bc94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "86b4bf71-803d-4eba-93f3-609bb28daf7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e04eaa51-8fd8-4bd5-b7cf-1a00b7d2bbb6",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a08a28d0-5311-4ed6-8dcf-d5f70f561089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df1a85f7-1588-4761-ba09-de6ffbc6ce79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78e65fba-c870-4189-b45c-5ee25c354b6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "58790039-259b-4a45-acab-27df2355944f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1589324-7ad3-44f2-ba20-cf95789f50c2",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38c59f19-6731-4f63-afb5-32ea0b5b64e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6228a7e-e212-4169-b6e1-1aad5addab2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23525f1e-571a-4198-9b71-d176285707e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "81387ce6-e102-4393-acd2-7713a466650a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb01d8cc-f0a4-4149-b447-4daa92b5496a",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2abfcff6-4a4e-4e09-9af9-f80916f16ffb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dbf970d-7b56-4886-9430-63beeabc2d4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c59e6c70-560f-4f16-bd4b-906b2ea9960f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b1ee512-4bf9-4940-903b-58b0e0514fb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "078452e4-ac36-4f65-9938-aa914af55eaa",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b32cd72-1c2e-4c04-ab88-62f2b990e929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19c6c687-d756-4c6e-a54d-90f658dcbd96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02b2de80-97cf-42c7-85b0-bc763f02c807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e254ce8-fbfd-474c-8152-149051f84746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b79fc42c-29e9-4ffe-b508-f0c2a49e2d0c",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b53419bd-fc8f-4aa3-9b65-7679aea9e4fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8914cf9a-bec3-4c50-9c2c-4428695cc4c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6db266c8-d087-4748-a13b-23aeedbf7669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5eb4f982-574b-44e3-98f3-8fb742d855e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e61ce199-a10a-4263-933e-5b04c7a1a14d",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6476b93-d814-4d8f-bdab-44081c30eaf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "744c60a7-8acd-4ca4-9eec-c8cda68e6f03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0895af0c-2895-4654-8a29-4d4d690c47dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac018914-2192-47ff-aaba-57ce8bfc6112"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80b7895a-c00a-48f6-8424-ed40f8bea82f",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77528b74-de9a-4402-a1f7-09b77b88f98f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c9492e1-3b18-4160-a61b-5ec25b4b518d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "216a56bd-0983-4a44-b5ee-65bbf2380324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "201da153-a9df-4d4e-97a8-72237deba575"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc2e7612-804b-4236-bdad-d228880709fa",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46ffd4ad-7bca-4e39-81a4-d0bb8133dfe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15489456-3414-42aa-958a-bfda2348f749"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e778b4e2-784c-4626-912b-1c4d004abe7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e75b5e87-1a82-4032-9892-13bf22b5341c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7becb7c4-b78c-4e7a-8c29-b8c5d8f749c9",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b8500c5-b449-442b-a105-ba720490c886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00bfdf97-e821-42ee-9990-58ff2fe64225"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "082a55e4-39b5-4b1f-a40f-a5b488bcfd35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "3bb7da26-eae7-4790-9a0a-c2423a2c51c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "427e35fb-05a7-4c4e-bc18-448d13aa0b0c",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df499149-0e94-43b6-a9d9-c5f53edbe231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d4bbd6d-61b5-4283-a287-f1213de2eeab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12e29fe7-f3b4-4b9d-9595-ec92ad40ca41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d03e54b-f385-42f3-a481-fa4c2c9f6939"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d58fbdef-a507-4f57-9823-4b614bed0402",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37be8d57-dabb-463f-b283-ec61c9047235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9467b1e-4c35-41a7-9db1-1d5d9ca522c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3595b1da-40b9-42c7-8341-fff7e5e5019a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "02f47f0c-db5d-43c4-909f-aafb7a99c3de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbba41e7-d41c-479d-b242-4527fe632fe0",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a456309a-cfef-4a5f-b8e4-08b41ff6e485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9af1ebf-1192-48cf-b89c-eadc41586321"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53fbace2-d300-4909-ac47-baa5dbf8e4a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bbb19177-9acf-4f63-b433-0a94f66beb61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62cc55bc-35d1-4565-ad60-aba167cfc128",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb3066b6-05fb-4882-940a-11f7be7fe855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36f0395b-5d78-45ca-a5e5-e9e8308b4331"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a6fac92-1e47-435a-a95d-3fdaa6e9a72c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ada0bd50-80f9-4f94-8ca0-de15145f9b21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14aa75ec-f175-4db9-bc98-c16d76d39e57",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02a03136-3d2c-4711-8c9c-f59730ca5757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28780795-fcaa-4184-9440-e90ade0a9d60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b299fc5-fe6b-4a67-a490-fb7fe5946a0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "4808d513-6687-4a61-a94e-1ade90d9e316"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6bb9609-574e-4b1d-8938-29f3aef79b53",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3be5c8fa-d1d8-4b84-8916-a3455a794f81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d65d4b7e-f990-4b99-a228-741235ffca3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d894634a-0c2a-4e82-a782-7b32a9ffaf4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0b31be94-2ca6-4662-a078-96fac653335d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "410b4009-3aea-460a-94da-4ffdc1f37e75",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f45b1af-f4cd-4189-b875-84c50f56f843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47b9dd35-4284-45c5-82a8-a9cf6efad3ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c65f5a7-f098-4ac6-acd7-c13f4e74762e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8cbadd5d-a882-4d57-b690-8e9864c4a133"
                        }
                      }
                    ]
                  },
                  {
                    "id": "955ca9e2-6a64-43a0-af20-f725362fe5d0",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b6e935e-6226-4bba-b94c-f4151cd8dcec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21ac762f-990b-430e-ac02-f08c233b592c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b116e8d4-866e-41b5-b0b4-622ad86b86bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "53db1dd5-167a-483a-a97a-63f4e81c7ada"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09bfa38b-aa23-4b73-9652-2bc7b497a00b",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6365e834-c396-47cd-9e13-8fa9d8098e1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c83cd475-c9c3-426a-8992-6c485f96722c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd56b000-7d0b-46c9-8e93-1d78e59521f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d53be460-1d8c-4c1a-816e-b720f92d0571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f70c946e-e709-445e-930f-6070f53f52b2",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50633f45-d78b-41ac-bcf7-e76fb6ff43f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7d9b06d-7468-4076-b104-6ada2fdcb40e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aa0cdac-ed8a-496c-bf0a-19c4229c87f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "bd350d42-daa2-4b27-b21a-14e3734031c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5059e02f-311e-4bd1-b690-af133c56dd7a",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdb573ab-7235-47be-ae78-f56b6735508e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23767eee-773a-4390-a2c1-884fa780e7ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10687363-446a-483c-ad4b-55e4ec09c456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc34da2e-1656-418a-835b-19dadfc43ea9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da10d420-cb61-4a27-ae04-8fa7d771ec64",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b00ed425-8462-4cf5-b01e-8f2804a22604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52e1e20a-5ee8-45e2-8c60-f3ec844eb137"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "051b2390-81d0-4e52-b8c7-05ef39d765e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "3cfb27f9-2ece-4821-9b70-eb13547d50ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0622637-7199-4e76-9b19-a7c89f271b3d",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38e2a999-8da7-412a-ba43-187a9b59066b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11f2a5f4-fb1d-46fa-8bbe-01a9aa97f39e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8969e917-dbde-484c-9c3c-93b5880afc05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d02250b1-c339-4405-b7d9-9ab9651becdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62599256-5897-4172-9076-61ee84962dcc",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e76fa046-f2ce-4d2d-a567-f885a54d5608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b22a7c9c-8e24-4b20-84f2-4f57ab115fc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cc6c422-1f5f-4159-b21b-b43168d04322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb60a807-d74c-4b39-a1b3-aedd8317a778"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d27dcc52-cecf-40ff-adcb-478ba38a1bbb",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c129d20-c6d7-4ac2-879a-501294f6432d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1596d3c5-9f83-43f6-9454-1056afb5b28e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67b04c23-4843-404c-a3f2-4fd59e93b8b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "511e41dc-a910-48e3-b7da-cc49b897d50d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8de14b2-95f8-431b-b7fc-e8a04ca0be8a",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b4af436-1d1c-4461-b557-cb83bd463309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9428ed50-ae28-4849-8418-54bf51e5b7be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d8d3c50-0a20-45b3-97f6-dd3de44a5588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6672bc8d-6d25-456a-bc81-080018c675d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "724f7b2c-7590-4c7a-a096-179254293463",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "591c02d7-5cd9-4ecf-89c9-96941650ff44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e867fad8-8739-4ca8-ac16-8e7015c54e7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eb28e29-7f38-44e1-8e41-68d55c4f2b4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "431be00e-b4f7-427d-82ed-e1a2c47bf69a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07bf1613-a9b5-4c45-8d85-51ae453a773b",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25f4da01-778f-4c8b-8905-e044e8c00792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70e3b359-dd4a-4bb2-a57f-d0336fa510f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5358b32f-cce1-4b99-8262-d31b2667104d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0be53802-c83c-4ae8-b2b1-72da39c9c0ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edc85fbb-6ab6-495c-85a1-be5d500a269a",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "919c5f5f-c63b-4388-8f22-12728103bc22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45bad8c1-fc9f-48d8-bfad-be076a289f8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3867fb9-0d6e-4093-b028-52d17ec04196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "375fd02b-5a7f-4886-8d17-e61b89bd4956"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14d273e7-aa5d-452f-a02e-29ae99255a98",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db2839d8-5084-4021-b821-25b4fd3ade08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afc77f6a-8a47-470f-870c-85e0cfc794c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01a8e6bc-8a67-450f-bf2b-bdd25eb5d7db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "768d5aa2-a4ca-44ef-92f7-f7122c2a69a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6425e06-cb00-4061-a7db-fbc103c16cd9",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e32f163-6450-496c-8ff3-0ebbc8249d1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "103d2508-f8d5-4b76-ad7d-2c0ce63922cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "071c6a0a-3e45-40ce-8683-d9d3835d3752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "166303f8-944c-4599-b867-77ce33c4e778"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fe3b84d-b6a4-4cb7-992a-a03f6aaefdd8",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d956fe1-0100-4ef2-9b84-41e602cc42f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20d27ccc-ebc2-4674-a272-8a362713c0b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1183777a-b733-44ce-8d1b-8de2bcb03be2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cdd07975-d3bf-4461-bf4f-9df66b138dcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7733888f-e371-4ae7-b4a2-3d99923c368f",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2927304f-5147-4b7f-ad9c-ea1ea6abc08c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a88067bd-025a-4b95-9715-a08469b9d092"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bc29dce-5083-40a7-9976-20b0a1edc158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6be69e19-fd96-4627-997f-f2b3bf11a1da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77bfe01b-c24f-4c5c-8497-5d034b12c4bd",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0f65102-7ab4-4d3b-aded-c466c4c9db99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6001fd3c-082d-47c3-ad14-9b7299c7de69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbf3b6d0-79b6-49eb-af70-6a7e1c960ce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1fc83b1-d169-4557-9e63-709a7cce9deb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebef2967-7025-42bd-94b4-6f76e4818db0",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35006a43-12ea-4adc-a21b-cb2dd65a08ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e5419b3-20d3-4e2c-991f-ba6b7714c9cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2def29b-be77-4265-8579-43001d218aa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ac79a38-44d1-431d-af78-f247af98d3d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a015aafe-c0d2-489c-ab93-60b4860b1f79",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3b88bf1-8fac-4b4b-b85a-409da742a0ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d0535ae-9240-4b76-81b4-9685296d82a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1822da1-0d6a-41dd-972e-b1b6ae8ff118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "26106e7d-a65e-4637-8410-0999b76387eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d702e873-58a1-43a2-8d46-0161d9f1cc9e",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1fa4b61-4fa1-4763-9dac-7b63e04913f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "782bf4b2-065a-4ddc-982a-301d5825346d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22a52e4e-0544-4f76-a8e4-702eeffb07f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c00ea49e-7649-42d3-9e2e-6d30cd2426ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "068c957b-255c-4411-b618-d2d6fe2716ef",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67782e1d-8285-46f3-a922-6ad1f0888cf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6c51cb7-8e2e-4c0e-b0bb-262a7b2a0e61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af6e8d1a-4999-4d7f-af4f-b8111a1056e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1787b4d5-ca93-4024-bf95-2f96e923c6aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4be47a7-bb73-41aa-99e0-6fc5396f82a8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb12bcef-098c-4fab-915c-c5f5f729ca68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f78def26-b4bc-4ced-a192-abfe7cd8dcd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7d669f6-f01f-4e8e-822b-ebb015746369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2e69d994-1b54-450e-b2bc-e489b4129600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a16c53b-eca8-4879-b4df-f9486d7e0a5d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e962775-6e36-429f-9fae-fa568d55aff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cef85a4b-9bfa-4677-8cb2-4cd3a54ac82b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4d4e0eb-2939-45d7-9a28-c078a1fae409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7bde13e6-57d8-465c-9dce-56d5329ea988"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2043ce70-fc4a-41f0-84e5-a6f88f173570",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f8c17e8-ce96-4bc6-9b65-42e00ac1ddab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6128284a-d37e-4d1b-a695-65cf1f44e6ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7c9f6f1-0c23-4558-a06b-591517dca950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c934bc9-5cb6-4702-b436-21552a86eac7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43b90525-df21-4599-ac21-ed6ca7b1b026",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "617931b4-28cb-4208-be0c-8033d23d3551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac880686-6644-42e9-8df2-b7035e4d2171"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a7ab489-1e6e-4490-9a59-c492554d733c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f6b9e57-7f87-44c8-9e5b-6af73dfdc746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "541eeb3b-e8c7-4dac-a9e9-bf345bf3cc0c",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "929dd20f-6bed-480d-88d5-16fc26c8e871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed03a82f-cccd-4a68-b24c-d14fc75740b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfabe2ff-461e-4c3c-907c-276481911ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc96ed1a-ccb1-4d7d-b6d9-28dfc0bc4289"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26f6943e-d8fc-42fc-a2ba-16a4c93fb32c",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98108b6c-e9a8-46eb-b3ce-dc9f054c2537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13741b29-2442-44c6-8730-e2453e828c41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c000717-3b8f-4430-9bf3-fa9900aa9519",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a12d4b22-3b6e-46b2-ae82-0d818f1227f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a73df17-8258-4644-9d93-c52645907fed",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02726761-89f2-4c58-a3b9-03f247a9a46a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8ecaaed-efa4-4d2f-93b8-8db83eb80cee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18e05c13-af6f-4003-832f-16278f30a46d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4fa61f9d-5888-42ec-9faa-b15b86894667"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06032281-0715-4da5-9f8d-9d2af3b98276",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa3a3c8b-112a-42ef-b6fb-d16e92a394af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47702056-0294-437e-8f6f-a13425d0706c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ea4a52e-a741-405b-9498-c836a3a217f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b35d7871-c18b-4709-a91a-58aede417eb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "055bd10e-1b69-44bf-9c2a-eef3241fa480",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e31b236c-393e-4361-8ec7-245d92f59b5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b70e7c1b-b146-427a-8867-56501d22f2ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e96652d0-7c2c-4709-ab67-45c18a7d0f0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "898cd7f4-8404-43d3-a8ae-67c94ca8ef74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0412280a-ef5e-4c7b-adc0-a39bea5d28ba",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25da54ea-d1df-480e-ba75-ee13900b5ace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb2418c7-1cef-4c11-bd63-ab0cb2926ca4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a79b22e6-6f53-4003-8ccd-6a93b649c783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec2446cf-249b-4455-a5c0-c50a4284177a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27c8f041-24c5-448c-92a5-be1cf9c08e56",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d81b08c6-01b8-4b78-985e-814e53561f0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa054420-c020-4c6e-99ad-fe532bbd539d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3a15789-5642-43e3-bd5d-d187231760ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0fa5968b-de08-4f2a-b337-96ed5644fa31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bce4d14-4ceb-4979-931a-b101f30c3a38",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6dc29cd-afb1-42a6-9f45-53891d89a19b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7180a3b-235f-435d-b07a-9c1c58ad8d24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97553271-48f1-472d-8b55-dec1b7829607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "39aeccb2-5694-4c02-9663-a81d3b6e47e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd69c497-3dd1-42fb-95ee-9e7cf032f9f3",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08d8b2ff-3ede-4fa0-9f7b-2cfdf470f2d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a97e383b-1bb0-4cb0-8e57-8539faea86ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d62d348d-febb-4978-bfe9-2dc146d20c04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "08d02aab-b9e1-4297-9373-b983b8f5b5ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c736b516-0757-4692-9a69-372e3914fc56",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "498fb12b-b134-48ce-bf7b-98d742e3ac01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9094fa58-8f5c-4399-8bb7-233f024abc1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44ba45d8-af29-4b59-878a-415bff005da8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f8df278-81ff-4342-83ec-b91b2f7214c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e53d4812-8929-49b9-a304-e619e1f4a2b7",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ba031fe-94ae-413f-834f-c95714fdc513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e87737b2-aeb3-4b7e-a107-380d8c3d8629"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5589cabb-9c27-4698-ad7e-5c84a93c57df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6312fef4-b32e-4233-a4a5-21ca9e1167b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "179c7305-f386-4fa5-a367-91f1ff2f261d",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94fb0411-17b3-466a-a9d7-e6763e60324d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15d3bc44-f861-4b4a-a06e-ff2377324755"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5d4e14d-fed9-4b9d-9413-d3d494af5f8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "faa8c3cd-1159-46b0-a0c7-357f54422f08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f944601-04f8-452d-b673-587aef8417f5",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e1a9b82-3c25-4e23-a2d8-59dceb325c64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fa14c82-7766-48f7-a888-77038ce2c983"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52f7a190-91ec-4045-9414-79eee192030a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a620a18-1f5c-4092-a8e8-e9d978d80b55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78a3f730-c0c2-4e15-8e5c-53a644aaf5b6",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17593587-c686-4e99-ade7-c76938e8f4c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34e588b8-26b4-4cda-bafc-531835225720"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4de64d46-9441-4283-b848-d897ac50e493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6427637f-e053-42aa-b2c6-7c2e6d673c10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba6886ae-053a-4570-b7b6-6eedc8aaf1f9",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9baeeea-b9c0-439f-b98a-4769c9993f57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef8701ff-d26a-41f2-ad78-8a9631f1aaa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79faddc6-2196-4c30-ab45-594efef4d608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "55f1118a-9803-4f1f-ab69-43389fce17d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "673cf11f-0f36-49ec-afb7-e96dfd2ad2e3",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "878107c8-5fff-401d-928f-5460618d823d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35096a5f-da27-4651-9143-d18aae86ec0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "326f39e9-8b80-455e-aa19-8e592d0f6396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "75655816-9b92-4763-9735-dcc35eca63c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ae076f4-dc3c-452c-8fa5-bf4520752769",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb3c6781-468a-430f-806b-3d7e53974bf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "077917ef-603e-427f-9745-753ee0688248"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c37c8b5a-c6f0-4a9f-9d06-e2e28838372e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b3f3848d-1b57-42c8-b491-24f751819066"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79ccc196-435c-41a7-b264-484d7a8d9dc7",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3048da7b-1294-42d1-a9fd-b56cf1b8c115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "949c12f0-0830-4db0-8acf-4804a9c8e6b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8d2d15f-51df-4db1-bed7-6e0886cffa97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a47fe84f-ab85-403f-b024-d044344e41a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca4fb7d7-ade3-44e7-8a22-9b42a015781a",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83080139-5487-4cdf-8623-18e0d8ba1436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff4905a4-1247-48fe-a477-911fe8961f94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d1cf63f-e364-4c56-9359-9488118d7ea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "668a21a6-e405-4276-83c1-b86d1810fb43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "292d8593-59f4-4201-93d4-1f826664bdce",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d012dcc6-4bc7-49cf-97ed-bf940c495f97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3393f785-3887-44fc-89db-3a83238bf41f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abaac4b4-962d-4003-9c48-70d835b23f62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8cc4bf71-9f5a-427f-8e3b-b8e791a5d9a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5205a14e-a92b-497c-934c-a987437d0ae8",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e55d30d-44db-4786-abbb-e9249ad2d356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "778ec346-20ab-44a9-af5c-8940f142f86f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecb62cea-4024-4dba-8bcb-8445ed007474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "52fa0dc8-aea8-4d3a-aee2-67d6d11cff7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94bc11c6-b6b4-4d13-bbb6-da3fe0b2d83f",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64550504-788b-4d59-92e1-a37b72ccb635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb440e0d-bd1d-4983-a719-aed3af175874"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b254576-cbc7-47a1-ad4e-72cf740070bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9babbfcc-a443-45b2-b258-16d99f86a258"
                        }
                      }
                    ]
                  },
                  {
                    "id": "361d459c-897d-4732-b775-25c8264d1d90",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec7923ac-8e1c-47e0-8a4b-5a4c658f09b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7313d41f-eaa6-4f54-8fa3-6218e15683dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ac15c0e-0732-4215-bb4a-8d96d7863c8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b71bafdd-d7d9-4bc2-ab60-8056173bb470"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a079497e-605a-4dbc-a496-9ebf432896de",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d76336c9-adcc-4018-beeb-926e95438ac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74270bf1-c089-476c-92a4-8790f454c7f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56b9bb4a-1b91-4daf-b816-a0820a9e4248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "195e0577-c16e-4abf-abcc-d57d53a1bbff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2469c73c-3239-4d32-b0b1-9594fef1a652",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83f9cf15-2e58-4650-abec-9b73fd6c315b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e053549f-9bcf-4eec-b65d-737a68b63005"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75551562-c4c1-42d0-8106-80d7ca10ada3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef9a204a-eeef-402c-aa62-619cf1eafbd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d35ef8c5-d3c1-4437-b25f-cdbe8931aa73",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b378bcf6-873c-4766-8c12-6e8b912419cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "060d02ed-901f-42d9-8722-0c3a42b9ccea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74fb02a0-2706-446d-b725-b7eec8260960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "794179af-8a73-4dec-a3c0-5a8509e6dc45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52a1b9ee-6199-40a8-8f87-a4af9720a2dc",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad7f476e-843e-4471-90cd-7b531ccb82c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e04133c0-be4d-4cbd-a8aa-05d2b443bca7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0213cf62-6461-49b0-b6f5-3c3d77e9ea88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b8e8a7dd-5c6c-4232-aada-6601c86297ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9437141-c970-4a12-ab0d-ee335766d391",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ac4e0a0-9791-42fa-a006-b52d29cce427",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ea80529-39f8-416a-b882-f8c539065cab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "208e466f-517d-49d6-968c-1be866bbdfa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d758733b-cfcc-4c92-b163-31752661dde7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "892a95f4-0f36-41c2-b1e9-b214a3e8e7d8",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bee35738-73f0-4848-b7bb-aa52485289c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc3a4be4-f484-4aea-af16-c929a29ba9cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79bd63b6-358a-4446-805c-0c3b60604e20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a0bb8a09-1e05-4972-b286-1fd8faef1949"
                        }
                      }
                    ]
                  },
                  {
                    "id": "309a7cbc-26bf-4a0f-8461-23ad6e03632e",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e0eba79-818f-464e-b2e9-d2d8e0eaae5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "93135765-8eac-403e-8ebd-9b441620ad8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16089f24-2140-4f00-83f1-bc31ca935ebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "0cbb7e77-e02e-46f8-8b3c-3382ac02cfb6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "86597764-cfe8-4920-ad42-eb29732ccfa1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "368e13c6-a5a0-4e8a-9c90-d91decfbb9e3",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf6d9045-5b61-49fe-a3c3-64afd11bb8fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6df32397-bdb1-4c17-977f-bc88c30a7126"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df4fa66b-b133-4bf3-b13b-1b54ddfb7b19",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "9092a883-16ca-49ad-9aab-327e276192c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d6fc31e-a045-49f5-a62c-0748ecbf8e82",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d952b3c9-a8c2-4e60-9e3b-d69b556406ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a26e0dde-1674-4d1a-92ea-64acbb493cd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d9efb82-89eb-4daa-a103-6013a8fb751a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "efdd22dc-536d-4a90-8ecb-1cd988c05de5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d079f980-21c1-45c0-87f7-d30e5364bdc7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3e731dd8-7c04-43f1-9844-555a7ea353c3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0590fb9d-5e47-4c5c-b3c5-13e1e8dc0eb9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9e8a4082-58ec-4f1d-a218-68a87dc1e607"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4d3d95eb-aad1-499e-9ceb-22ca3c291e53",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "aed38958-bf0c-45f5-8511-cb657bb420b1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "eebc0528-1e8b-4b1b-9fc4-df4de7a88eeb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2335be2b-69eb-4d03-a53f-696c59f62396"
                }
              }
            ]
          },
          {
            "id": "b17b381f-5ca9-4bf9-8917-0a5dec12cf88",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f2cbec06-7fe5-4053-a5db-909d8b7f506c",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "27b29772-bd96-44d6-a711-5e77b728866b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "05656405-b1fc-4d65-ac5b-c23c9e7ab313"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e4e4614c-3768-4f96-98ea-0f884aa71502",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2f794d98-5efd-403b-8ac8-294157c30e52"
                    }
                  }
                ]
              },
              {
                "id": "39b5618e-6eab-4db8-80fe-c9564766188e",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a312625a-b6cc-4e99-9323-e69e71d73232",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "955652dd-e5d8-4d05-a105-cae26e712854"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1f58e94f-04bb-411b-bba5-ea2be4b143fd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8ee8a5fa-8bf7-4a20-ad1b-d187afea8a12"
                    }
                  }
                ]
              },
              {
                "id": "cd1a6323-5b46-438c-bd1d-66c36c8b19a3",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2e21b463-eeb2-4f27-ac4a-4078218e0fff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ebf96418-0652-445e-bf6c-daf0d81ffc90"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c9186a9a-32e5-4b3f-be5b-c1d80dc57603",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "446c81c3-d4ee-4254-b7af-d0352bfd3e59"
                    }
                  }
                ]
              },
              {
                "id": "3f26b42d-cfbc-4db9-93c7-678355940bae",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "63aa732d-5e77-4726-94b4-3e09c4051a80",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "79edd3c3-d056-4eff-9bcb-8d6fc7a7a960"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dd3e1c6d-bd43-46a4-b70b-6d7f839a71cc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "5ad423d1-cb25-4422-ac26-c678145eb159"
                    }
                  }
                ]
              },
              {
                "id": "14c38b29-ee04-4b80-bef4-2fb8c586d174",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "07c0f3f1-ba35-4312-bab9-f54db6da073a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5aefb663-fbcc-43e1-880b-a70103d3eddd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2c89c328-4e75-4e73-bad6-9c1da226227e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0b84d8e5-f835-407e-9ec0-d42abd0fe309"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e7b0a08e-4238-4817-93d3-00d9f6d12713",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b27361c4-d20d-4607-af3c-1e1bf3375752"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2c43586d-5c62-43f9-aa8c-b9297bfac1cf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8324410a-85c1-41e5-b358-53f945f805c1"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c0c7ec63-acc3-444c-9867-c1d71b64e76a",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "9ba3bd26-31d0-4874-9b16-a66b3c8755e7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f73c80fc-a1c7-40ef-b72b-2c3dc53530b6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7f43606b-76bc-45f3-96a0-852cd132eac5"
            }
          }
        ]
      },
      {
        "id": "7491dd55-b313-4f71-be26-ff7a50b00952",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "fcd20d26-5503-4eb5-9b20-d4ccb7098e38",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5681bd92-93b9-4d02-956a-847666ac561c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a2ab0af5-1dc9-4671-a714-e1c92a14be47",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "219fbaac-c196-4b92-b50b-ae1ca70aaa5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df200207-641b-4884-b411-3615e7505b8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b1fe900-4e45-449b-bdba-12c80e91d4c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "ccde6615-61e2-4ffe-8dd8-815b5aba3aff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5667fdd-769a-42a8-a5cb-c43b4bd3a24c",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b678fd8f-f6d4-4654-8304-89c474482cdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da55c52e-1734-4a20-b8e1-b5a11c187403"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c06eab3-f131-41b1-854e-74900fe02b89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0db2b64-d6ea-4253-9762-70f6c043bfd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faf4543f-a455-44cb-b4ed-c5f93d14df79",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2be17126-b5cf-44e8-ba3f-7ae11771be3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de0f1856-7005-495b-ab57-63a3afb334d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2026dc6d-8ce0-4156-a5ee-08477a1c464f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3473c55b-544c-4790-b462-70a3e7be6a7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f51d08a-2de1-4cbb-8efb-e95418521965",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d8ded66-3167-4c6f-89bc-f497a4a234fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee61dc0d-6a5f-47f4-b2dc-897d0bcab6da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2e837cb-8f3d-4441-ae66-d4c021bb7583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e8f79c9-2e2d-4ff7-8a52-9747b77d1a81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a276b21-e0a7-4194-bba3-55b312733707",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65f5e470-079a-4c32-a102-94eede845dc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb9a1a60-ff61-494c-bcc9-35451d643cd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f25b516f-c53a-4fbe-b96d-57c009f8a5bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f11bec82-d561-4745-969b-ebb2f07f2057"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08151b57-89b6-471d-8e5b-35cb7bc06b74",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "971e972f-c9e5-4111-8f56-cc92331f4aef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86da88bd-2b94-4cce-84e1-cf241860d9b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54de458c-6c7b-4e3c-8b4f-ecefedc60351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d852f9d3-228f-4902-9f6e-91f9c64b737e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee8bb3a0-b58b-4cd1-ab39-efaa1cb5a39e",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e49afd31-a3e2-4124-8e6b-ae61f853ba0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b81792ee-c558-4ecd-807a-0b96470e6b4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd6a61c0-567f-4bc0-b64e-8c5a47dc2275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f7e36b2-2b4c-43e7-90ad-c92acbaf6c7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9153db6b-fda9-416d-b825-df8df09a6dc5",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8247ac30-a089-44b7-8633-25a6c971890f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a20eb150-5f7f-41a1-b1d9-77b561f3a9ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cea762fc-5973-4b5a-8690-d0032736bf34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7cd6d4d6-1bc7-40fd-ad2e-82fb0562fb36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97ab510a-cbb7-409a-b912-fc746044f509",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86444dde-ec24-475f-bdfb-99560eaf5eb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a71814f-259b-498e-8ee2-cc2d06fdf3c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b347d18d-bd38-48f0-8069-fa3b42cd240a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "af6e1107-08ae-49fa-815a-9b7952e47a3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fac6a76-ce33-43fd-a0e8-c90797089223",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a263571a-c9c3-484a-8109-787f7b45672d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "276b606d-4197-49ce-a02d-62ea8a56819f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e114111-ed86-4ae7-9fc2-31233715617a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a113045-89ff-4ce0-97a4-a09f9b1973b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4552c989-562d-457a-bebb-12d4106faf92",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab7f8330-211c-4a63-8719-6095e31580c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e50efab-8305-469d-b71d-e85a7269f0cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "935f18f0-109b-42f1-b907-258d8ca31742",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "d732deaa-f967-4836-ac4b-4dfdd55383d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebcce61f-e15a-49ad-be2b-82e0150bf2e4",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "665a7be6-c1fe-4ae7-b755-e3280c6069e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdb14ddd-34cb-454b-b883-941f9f3c99df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5de236c3-ca18-4bb8-b29c-4ad8bae1910f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d8c6ffd5-3d4c-465e-974e-4e6c2558ac1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0362b81-1db3-495d-b8f9-6f83de00bf5e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bfedfe6-8158-41f1-8e85-4c9e2416a426",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f258e97-f22c-4dc9-9cff-677a196fe268"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1737ab34-8500-42dc-ad98-d857a76611b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "12db8348-67fa-40b2-9b22-f10571dbe8ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fda58a4d-0dc5-4a1d-83b4-bef4b1f9778c",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c6eb9c5-8b46-44e8-a9a2-d16861697fc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "310f1836-512a-4647-8280-e19b8db1aa0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77fba5fc-8345-4100-9eee-feb2b77ff6fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "9444d66c-7d04-4c4e-9deb-264eb481d1d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3fed2a6-2d44-49b1-a8e8-564363d12f42",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26ba5ad2-c400-4e3e-ac39-a434e1b8d938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb0aed77-a397-4550-ae4a-2f8ec7e9209c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "503fef04-9365-4d8d-9391-0aa12e744d2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b049a51-f329-44a6-9495-5e5b5bc09d5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86c69617-8153-4bbf-9b9a-f95b40efb0a1",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "582cbe28-6e8c-4b02-9f53-dc67806432f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65d804e2-e587-4341-b916-bde44899d697"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e911413-2667-4ed4-b45c-d8f57912d6c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed70a1ed-e413-4e51-b080-abb8ceaeb6d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5909a4c1-d242-40fa-af26-fd65268932f9",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ee6b61e-e161-435f-912a-7d7c8e385516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "deb11b40-2591-4770-adec-0888fbad471e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3c44d63-9607-43a1-b192-ef81ad46c568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "9af5245a-5465-4109-bb3a-8aaeec72e0b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ea72e06-b04e-43d5-8f6f-72e5248c2f72",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a57e4e3-ac8b-4576-be0c-209d78e7a43c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91896ca1-6bcc-40a7-933e-9e2831d5d986"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ff03690-eeb1-44dd-8040-8eeb163c2da5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae63803f-e7ef-430a-b10e-26d79de0e6e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94f8cedf-7ae7-44e5-9556-7ee8aedcaa38",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e56ad2db-389c-4f72-ab99-3ba34aca2526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47bea7c4-2b53-41d7-b004-5804b2e76c46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5edb31e4-635a-4c03-9b66-db562c851d5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a411315-973f-4f5a-b9ea-753b5b565bcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e28ed265-b8f3-4767-91c1-b551f1fdc1a4",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfe5deb7-f41f-4e5b-aa33-8772c28e1786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a506d67-aab9-4230-930b-19e53ce04920"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58f72283-6ffb-491f-84dc-1ae24bfe5741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "180f1cfd-b1c0-498c-8ecb-58554ad0c1fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c1736e8-81bd-4c17-a294-35da09b509b6",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90fef257-cb9b-48f3-a9d3-80a713162213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e456fb08-efe9-42c0-b081-d2457aab6a97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcb8afd0-e32e-42f6-b562-38b88ce5ac69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9204b1d3-2b0b-49af-9134-574eb5941d68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68daaa3a-4218-4efd-b28c-496ac0f24052",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa8cc7d3-4319-4d5f-bf5f-ed0bbf4c5b92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb830785-e230-45c1-bc8f-90da51ff410c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca111b86-b5bc-4de5-ab33-58b12d7e61db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2f3f184-6c55-4f6f-a9ce-77098e02526a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f557c45-ce8e-418c-bb49-19a8f7c5b942",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f68db92-b088-4f79-b85d-7a3f9253ddf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f86a9bb-d615-49ee-94e3-6c1dffa0dcce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7688924-c09c-451e-8aa8-a1f09443d296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e227b504-a589-4cb0-9b9e-89ab097c9e5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71ad1581-b25a-467d-a5da-021952452698",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5ec6041-245b-4d1c-bdc8-a214a6d98881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59b9ceb1-3b20-4b52-80e7-5501f7bcdd2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55ea5368-6f48-49ae-9d59-dd41217036a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "58590678-a850-4f22-8abe-be605df46bbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5614983b-2eb7-4e19-800e-657ddbaec7ce",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "040468ee-e98e-45a6-be9e-09e710e7e988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f8b98eb-f310-4961-8d38-cb934892c257"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42e29adc-9664-4e57-be01-5cb76f2ffe5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c71531d-703c-4d5b-8045-4c29cb34fc1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "611a4f46-ef40-4e55-8591-5b95abe901a1",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83748bbe-6d1b-4dea-bc34-8ccae1c93499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfe45101-a645-489f-b743-eab2bc637599"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb4dc0f4-9bfe-4325-95ae-0dce4808f57e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5810420-cae1-4a06-8623-fd884ccf6c93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea43c445-cfce-4515-b7e8-41a2168fce45",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac710aac-3be9-4e0d-afa4-99fe04382c94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc4bc7ce-6cbe-4c72-84ad-5d214db0054d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cbf404d-6122-4be4-b99a-2db894caf508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8d0232d-6f1f-426a-8283-3e33af598a56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47966952-8218-4fc0-bdb6-b18d55e8b34b",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0791c25a-2b61-4e20-883d-f581d8f67971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8c86ad9-f73b-42ff-aa8c-73d086c39406"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30a8441a-1c28-4839-83a9-92fd668953ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "defbffc7-09f8-4d44-a8b7-051d7d7e588f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d0c64c4-adc5-4c7a-b5f5-fe8437841c00",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c518f051-b6f5-48fe-aa33-d6d47d5a0936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b38e057-2114-4b7e-936b-b8e72d8f5544"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "607afa37-9b1e-4ae7-8f72-da69e38e2c88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f14ac22-7cdf-44a1-bbb6-1e2cee058095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "644c3338-202a-4a47-b8eb-97a989b5693e",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0a870f6-d0cb-414f-8cc0-fc6b02664a14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52bff4aa-63c8-4272-9089-5228710ea8c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f259130-74b6-4b9d-a00e-d98f198b905d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa2cf2ad-ac97-44b7-bca0-703a416d6565"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6a512dd-286b-4c9c-8509-92182e581903",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cc41bd6-2980-441b-a4e3-470f1f974631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce25bad7-e03f-4b48-8c10-d076789f2f81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfbf96ea-6c29-4663-8b41-1c10caa7759d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1fc7c89-d770-40fc-ac5c-1500752f9e5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21b25c72-0ad4-4567-9f57-9a73bb4879dd",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b391105c-1bbc-4644-a595-664a891995eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c0ff6c8-78af-45c9-a365-390f687eee85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddfcbfd6-154a-4a75-bd91-954bd56b7be3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af4cd56e-cd3a-445b-aace-04dd3815d416"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0bd1fc3f-6890-45d9-b24e-48df93d2a0b8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "af6bf5d7-42a5-40fd-b2fa-fb6e1bac546e",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d618510b-091f-441a-ab58-945cb3e6da23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33eeacc9-25e8-4a0d-9e5b-ecabd8e6780a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ca50d2f-8802-4f4e-8936-c2ee5b26df27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "736a7ea1-c71d-463d-8d2e-27ff71e86db9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03b073c6-17a9-4d2c-845c-82b9465c2601",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b9d987e-72a9-4196-af8b-f0c55408de14",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "c90fd1d7-e120-4143-b4ea-fb23ed7d3fde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b70b74d-0196-477a-a2d6-c2bb06de7b73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8a18db78-5c42-4d91-9def-5210a5761b2b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "27117c0c-cc26-4237-954a-24994da5d08f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d9e157f9-fe60-4f75-812a-36f46edda3a3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "34ef1136-1b8b-48f6-a32e-70d00797799f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "da3d839c-9c88-423d-b6f5-110e1b70e6e3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "29c20035-ffe6-45c3-827f-b32e53592d45",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3615a957-bd9f-4cf6-9f0e-9709ee6f5f0d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1df1cf2c-ec3d-4fd5-8d4e-0e64753b25b9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c6b26f3a-e4b7-4e22-a4a8-d964467246a5"
            }
          }
        ]
      },
      {
        "id": "47f5607d-0244-4d1a-9317-fb3ff5b36bb9",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "54fad069-39c7-4003-8da7-e48a8a0f5361",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4befb26f-6e86-4630-b712-1fe6c1f0ef5b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ed7c32e5-02cf-4934-b958-464042db385d",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e4836f9-b4db-4cc5-ab5b-c3fb6f20ed2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f4f7eb2-97d3-4946-bfa9-4cb8a53b9dd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4da90b7c-f796-480d-b571-1649785e2777",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "446a15a0-44c2-4182-abe2-d755fe26b5af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6a57732-24b6-45ac-818c-e44a3f11ad2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55dd9d96-7f0a-4af9-8577-3f10faa5b5e7",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8aa9c52-8442-4966-8229-5a7448d46fa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41eb81ef-81a7-4912-ab3a-161935bc7bc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dad1681-b34e-4b75-91f8-c37d72ef3d5a",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c752729-95f6-44db-a583-ad6b006abd3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c528472-8b43-4d6d-99af-fc14d693c627"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b50ed8c0-703e-432e-b35e-63b89650296e",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe5f869b-cee1-465d-a578-27dfbb400fce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f377c6b2-f90f-40fe-9149-90ed8bd72555"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2be66aa2-361e-4e59-ada9-d0de46d4efab",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36c9f858-0aef-4194-b851-79cfb54cbe6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0006f8a-ab2f-42a0-b7d2-f06b2ed5a9c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "458c5609-052f-47dc-8f5e-24a1b6c6ce93",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09ac5204-2629-4af3-a280-c69fc87ce390",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a51bd056-d324-44fc-b713-bebe14d69c1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63cc6984-4161-46ae-a8a5-e1f60d8833f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "372a3831-7bed-43bf-8c0a-c4d54c5429c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbdc9e37-685c-4692-af88-128daa1ef3eb",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f294c8af-1e0d-4d7c-8b86-686fbb882a5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ba75fce-8c7b-49ea-8db3-507ad9d36f35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "570fc91c-46b7-4be6-acc9-d6aa0bf61989",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea1d51d4-f2a3-4a49-9a38-80e794e841f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e0a3ca3-41a3-4cf8-a2a4-13c95c69993b",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "869ee2ef-2a3f-4a93-bcc0-cfad3fd846a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "023430bc-e679-4dc6-99ef-22b8401dd1ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4f8c16f-edc6-4410-a7f1-0182df32aa80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e159e06-3ee7-4ffa-a286-76046dd1ba06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f6f243e-c8a0-4dea-ba8d-acdfdea708e6",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c21ce30-64d3-4bce-acc6-2728f25528ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d74cb177-add8-4fe1-b20f-63b7e2abb180"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a451ce85-6ca9-41b7-b849-d3aa002edff4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a041be0-f432-47d9-aab6-52f85b9b5550"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2972d9cc-fee6-4f99-9c7c-1e8b0a7b924d",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0c5733f-edd5-4c4e-bdaa-00f43bb626af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8b92a4b-6d70-4e48-a5c5-f7a9c62606c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cca88574-c71f-42bb-b0fe-5db950aa32f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f401121-ea0e-4cb8-8cf7-af50f7fb16ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6c6b1f8-3a2e-4a9c-9fd6-42121248b8e7",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54bb161b-51b9-4307-93af-f517b43999d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f83ce5f2-d810-4639-b9e8-1063437f3f0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "860a27d0-bf28-4b82-887c-0b1a183839ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "368b9d3d-a0cb-40f0-acd8-664fd19c4680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c9536ec-1946-415c-9755-587c50919ad2",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54086ff7-9641-4215-9991-3f52d308b10b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b67136aa-6508-402b-8314-5007216df1c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dad6362-fdb7-466e-a930-f8e04ec786e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd7b9ce9-3a19-4ae4-b14b-1b6b1dcceb7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bf3cfd0-0615-45b6-b120-e3d7285f52de",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6935dd2-2681-441b-890c-4b05cc02f00f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a6ab6b1-05b9-486a-9b61-e918c4e48b6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1999f7c-9387-4b21-8c88-2eb36613d56e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13ada10a-d952-46a5-b060-42ab4178b712"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65588e1d-2ee9-41e3-93a4-dfda3c99fbb5",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d7bd938-cbb1-464c-a9f0-c50b32c6d3fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18407d62-3943-4a55-b751-1d1b44430464"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97426433-10b2-4f43-b3a3-268d3f9df460",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f95f125e-19ac-4952-b34c-92c924f0e7c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c89729e-4fc7-4d8d-a793-20165db64826",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e78d869e-98a5-4f87-820b-5ea9f38328da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36339ab1-e671-4194-b3af-0aeb7c19bdc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3c7abb4-abb2-470b-8b03-d3db045c6893",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "932f7c16-f63c-4330-98a5-ff9b58eec329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40e0021a-a194-431e-ab10-9c0b9dc8656b",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbb04f29-515a-4be5-b0bb-2a112f3e9185",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dded892-6609-4f27-82f2-49779cd51862"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac7aa63d-98d4-45dd-85d8-718b9f4be0c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25fe3b9f-3b7a-4618-96ad-3710039e5408"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57f3c707-702d-478c-ae4b-f2229bbe0be6",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "478f0d43-1d3f-4486-9a4b-c01baf4d4a5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96de9ca2-8c2d-47dc-b846-f7f57ca0d919"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "336efd05-a532-4305-be5f-7f07ecf31bac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0a7078e-46b0-4740-9d25-d8caede8f047"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7817634-a1a5-4b05-a4b4-d9c9f0be85a9",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cd0afef-ae98-43cc-8261-d1b20c0ef0ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c1694c3-a66a-4e74-b68d-a7537b02a3fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b9b37b4-18f7-442f-937f-0c8dcebdaaca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33968d69-c688-4c50-bfa1-1c09031ac5b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "462d9332-f738-4c0d-9d0e-2d4fe51ead42",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d795f4de-06ab-4943-8de5-1a7f86f4e333",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d30f78d5-c93d-4b95-a739-3156877e40ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbb9bf30-4c13-4cc8-8f99-c1224cb1fa9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff307831-72c4-441c-be27-cf2a1e9f05bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aee4403-d511-46dc-9f12-cc3b4d792ed9",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5026060e-e5b6-47df-81ab-91d3674ea9ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1eab458d-6f5e-4681-b75e-305d649e9fb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc78634a-cee0-4595-ba45-8f581bca10e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3235364-1bef-4b11-b27a-c20064192c49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90906f19-d03d-45ad-bff5-f0459dc8b34e",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "766d372f-0577-4e54-a344-6d8feddfce50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "781d14c8-bb9e-4353-a20d-f46a1cbaa738"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83c4c6df-722c-425a-878c-603979864a3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "651a401b-a197-42b9-9f92-38cd5bd64bed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f80381be-a08b-4729-8eac-567058d74047",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "318aa6c9-b0ef-4e2d-b58c-9dc4fe11be2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaf6ecd1-2033-413e-9ca3-7a7f253eb90c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "772fa477-397d-4bf7-a302-c4e23f7b9441",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a14b5df-9a4e-48f9-8167-bcf075c4a177"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43f6824d-cc0c-4f23-ad53-b08878b5533f",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e631c042-b3f8-452f-b9b8-1ca12cffc4c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e8bd617-f345-4117-bc47-6f57bdd52f00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c1a404c-6bcd-487e-bfcc-bb0f7d7eefc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64b686cc-3c99-4f44-bb46-96eecfdc4ba6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf62fbee-d552-4418-ad41-75e9ea7831a3",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee8fc5bc-5553-4294-9da8-58aa3a83c9a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8984abae-fc1b-47cc-9f06-3d8bae7a30c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c437b45a-2431-4ab4-9e70-18b38014b01e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8142cf5e-bdd2-464f-b272-642e9cdf3e9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd7b8764-1032-44a4-bcde-aa7563a9c9ef",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d13db22f-8903-4c29-83d1-5f6bd3fa80d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d00dc4d5-ce59-44b8-9062-b6774ff30aca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29ada7ce-3c22-4ca4-95ae-a65c3ae14956",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eefa25f8-636c-4bcc-8529-20fdd1958564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f651f7a-c5f1-4487-8618-dbf64b43c37c",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f10ee9c9-1966-4810-b10d-daeee9727f8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b2de7aa-b9dd-4694-b5c4-c49a54adb10a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "320bdd07-4483-4322-8f78-79be81daa4ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26b61a79-6670-4f58-b83b-d71c05c4f100"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3529fe41-7925-43e8-aad6-6efcd46cce8e",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf345b53-e135-456a-a3d5-0559a1795d15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76e08043-b706-4236-85cb-1065691ae894"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f60561d0-ed5f-42aa-85e0-fa4a3a22c30f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "202d681d-6ae1-446b-b799-74243ac33ac0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e27a7cb-c12c-441a-ae63-84fe24fa551b",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f89e3382-f686-49d8-bbb5-d85d8fee4b81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38f23f17-3e76-48b5-b212-13f21a18d9cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f366b193-52b0-435c-af5f-ae61c213ac0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fe76fa3-cc0e-44c6-adae-7409b5cff20d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d094451-ceaf-46a4-a376-48bcb7084116",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8365682d-d78f-4fbb-b7a9-bf735db7a0a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca05fdca-abdd-4123-87ea-448a4a6fe260"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d962d6ab-2173-4cdd-8800-34c9c37937fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40279509-1399-47ac-8f97-efc46bdceb77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11b2627a-7099-48b3-8ace-59fd094b449f",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0116d3e0-063f-4ea6-a180-89aa0c576fed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67e86ecf-366e-481d-bc5f-710c5ddaa441"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37fc9b70-e844-4423-86b5-4c8357a4d7ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f41c29d-ab19-4ee9-bcd3-bc093fd98c70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad60699a-df3a-4745-81cd-1682840fca60",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc361d01-74a4-4f48-aba3-43f3802939fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94767043-f085-4abc-a3f7-2152e5237e72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c764d54a-18e0-4bed-8295-bb402fe21b9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54f5d67b-d1ca-46b8-8134-628202a8eac2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1258997f-4dbd-4e2b-8226-54360ff5043a",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e899fed-880c-42a2-8c9d-2f0a33f60a0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3a3b880-21a7-4d85-ad80-dfd92006f3db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c2812e7-5a0a-4a1d-9802-6a954f552cc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cbd6c7a-7d5d-44f3-a538-fd3be40089bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c19d29c-add3-47cd-9693-a5489e2d9204",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ff7f936-041f-47be-94d6-6bb2185e04da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41ff37ad-0fb8-41dd-b270-4f8532da863f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c7cdc6d-fb42-4186-80d4-c183a2cdb201",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd02aec9-7297-4338-9138-a5c5d254eaa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be29d61a-4aeb-4a91-bcc9-fe36cea6e214",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93e9b715-fb3b-44ec-8072-c9c461093cc4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bbd65c1-89ee-49cf-b087-2b4647811665"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "885e0004-fa77-4824-abbd-1406867f8a19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5279d3ca-a9aa-4464-a8e8-a269cac27d23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "666e888d-6d8d-4f54-8832-c977f481bcd3",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c84cd599-2ffb-4d5e-9fb5-162f3e90d376",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "121abf3d-d3ca-4cf1-a158-86e74e246f84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e694ab5-b820-41e9-938a-c1310610e2ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7910995-6f30-4e22-a1b0-36bfe666f56f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5da9fc0-9718-4866-9663-651e684c4eff",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7f4313c-d13e-426f-a5cd-9a06fbe1aa15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a5f56a3-f3c9-4ef5-b4b4-1467d626b97a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c41d87f1-76b2-4c89-8356-b464ca0111ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b35dc1c8-541c-4f7b-a0b2-73902f7a4026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22d2a029-a16b-495c-9354-8e62a9d2663b",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0cf41e9-c480-4af3-89db-06c0eabf91e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f87a320-45c7-4d4b-af76-fc0c7a420e83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79f3ef41-1f07-485f-b25e-82d5c87456ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a938652-09c7-4525-8115-c4392d57695c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8cce63e-184b-4705-944d-c49db45e9118",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "508497e6-b2c0-44ef-96d1-b854f3b1e506",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fa7c553-33c2-446a-8706-ad6216615db8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8d9951d-cbae-4a25-901c-4e53bdb6c95d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "807b4a40-f533-4c30-b8f6-800246f7cc57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff2c03f2-a278-4c25-bdb0-28ba58a3ffed",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfa5969e-23fd-4293-affc-8c293b47d240",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83c1963e-c129-46bd-8cbc-6568cd1e9193"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1e64722-b5ac-4c05-9281-c77557201f48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42df25d8-3aca-4f97-9607-65b5946f3586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64820919-3d62-475e-941d-22fe2d7aec8e",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9545b9c7-8b27-4afa-b84e-86ab8ee8c706",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7f3c263-9cc7-4cc4-9ab8-75fa22e6fc9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30ba7084-6b15-4c44-a369-7012771b3e25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86af8343-2330-4f7c-923b-cbc92f1a3dbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a291690c-fe59-4584-8e5d-fefbf052c5b1",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d674497d-7a45-4b27-aa09-e0d8f51f6972",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a94cbb9c-d9a1-40d6-bc21-63be8d1bf868"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39eff257-9495-438c-b998-5e67b206b6a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd8781fb-31ec-4f02-9873-c8c63611633b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5028f58f-42f9-4c4e-9971-554bceb548a6",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9c2b7c3-f57f-430e-ab81-a33f68e02017",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "867f3e77-c834-447b-a451-82c0e54ca218"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6862b006-8540-4e6b-b9cd-149f9dbfe699",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b46edcc7-ae0f-42f2-8310-82c6d85f2d37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65e750da-d1e2-43c4-a0c6-3775bedc8226",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a761207-e91f-43c4-a586-aa5f8418b714",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bedc8906-470d-4eb9-a74f-f4b9ca3962bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa692144-45e7-4c0b-b168-6d7a8c32b42c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9f28a6b-2c00-4832-8192-b88485825bb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "051f12d2-b301-461c-a37a-22da04faa382",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "458f9f19-8bc0-42b4-ad5d-4209c6f009ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea3664cc-6c10-46fe-85d9-babd368b2518"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c485b4ff-45b0-4139-bbc4-01e084bd9b94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15d0d099-424b-4678-9c45-39d3b2bb2c7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8758faea-e6d8-4632-840e-88310405da89",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c226e72-6eba-4447-b92a-cb704243f90b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e196a8f-e9cd-4d88-ab12-43b8743d98ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dafd6e8c-1487-4bf7-b7e9-f9f166d290d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6536956-486b-439e-80be-2e59efb412f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20fbcebe-3e2c-43f9-ab35-046aafa856fb",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d67506dc-1992-49a1-98fa-ec740517369e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3df7ad7d-6d06-4efe-8330-381027777ba9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85d6fb5f-d37a-40d5-afdf-8fd1e7cbeb6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ad636e9-0498-449d-b698-b376f0ed849a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f593a642-a09e-43eb-9b4a-4d644c0c16c7",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "483393b9-1a9d-402c-ae71-d3ed74cfee22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2263e56-223d-4823-8a91-139caa8c0647"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "252c9c49-06bd-4881-af58-822c9c256cc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68bd5323-c609-401b-b69a-f9e807321337"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d02161b4-7f2c-46ab-b75a-31ccefa81984",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff9ff12e-bffe-4bfb-b201-c8c8a09b8737",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13894244-f844-4c73-9c85-ea89d3dd49d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdd20489-8abe-4841-92dc-38940e073810",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d7f48bd-a047-4aa0-a36a-9f5a4a9b9284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b96310f-183b-411a-8e77-dbf0c7c8feec",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76819a82-3603-4a14-bc70-c91c6abb2307",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0c920c5-8704-465e-8851-bb19a73f920c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef81d3e5-59fe-4d59-8000-dce71dd6f5a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d3fed08-c27f-418c-a01a-5ca550603853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "832e93b7-090d-47ae-925b-d9a7785f0957",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23c76d18-9867-4072-bbb6-0cb43cfa8097",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "716d9704-3d6d-4f4a-a479-f7b88f590d8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8854efd-c208-4a89-9a0e-62527fbd3d97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48694bee-057f-4157-86d4-18be13dfab46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59d0d163-6ede-42c3-9caa-8f4b41bf27dc",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e5c448d-ec34-4037-83e2-e4d7cff41895",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0617df32-c687-473f-89d5-017aab7975f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73cd707f-6204-4573-a0e8-9ff32fa523f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b938d89-578e-4a91-a368-a6e289695310"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b8efe56-4ccb-432f-a329-2567ce114044",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f52701b-3295-470d-a640-0759f9a19501",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da4e8eca-b100-4129-bac5-cefdd5d06298"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c0fd763-db9a-4988-a644-0efb372697da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59413aac-ed03-417b-94f2-249c0f01cdd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c537a73e-7c23-436f-9cbd-680ca4728876",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b18e589-50a6-4eb6-8ba3-75069b116c84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63188881-b4ae-4728-8a0d-c81401289612"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f456d8aa-8704-48d0-895f-1e818fcd710f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3db081e5-bde9-4f15-89b5-efdc498d3a32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e13900e3-7385-4db2-95e5-dadcb4fbdf9d",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d0bfb3f-ce4a-4b78-aa9c-0de58a49a29b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0a2e0a1-2e1c-4d4a-8277-513b02e9ac8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0c39369-ced2-4ff0-968b-8e4040843177",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de3b71ba-be08-4932-9f25-7e43d7c6f07d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a01ca79-bb7b-44eb-b5ca-0547ba0ee70f",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1698234-5df5-4a25-bf61-02c9342ca0da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccc566e4-8747-4f18-8795-188aa28ac8ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea950857-9134-47cf-bb82-94516d495c0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81d70619-c63c-4955-8b96-cfeb3a66c52f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd3ee5f5-1297-4782-84af-1eb43ab00140",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7532954d-906b-475b-85d3-e38b8c4e1ecb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba1448f9-86d5-4476-a839-468af5647342"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd91e0f5-be66-4586-b2b0-b6de8bab6d14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d93107ca-fde3-4134-be4d-f665c987bd0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74f04842-185f-458c-8e4e-e8076fa4609e",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8d6ee00-aeb9-4674-b343-3b9411cf5cfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93165f19-3eb8-45ee-9cc8-c1058df30964"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a35a320-b9f6-4638-9ee7-f91e1f3d14fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb04beb1-4e8b-47e3-ba9f-5dfe6a1d8831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0a5e656-9f1c-48f2-bedd-07e4a2c3da11",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1dfc518-688c-4874-8bbd-1bd6e5309d6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33a2e340-7d77-4caf-8466-dc34d520094a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83eb2c97-686a-484f-9f06-919e53a5f16b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7820f1f9-e4d1-401d-9809-fd488b602c40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47a77405-5645-4b13-b58b-29459e118a12",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e65fb52-072d-4199-9f3e-e0068b42b2cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51029d65-e26b-4534-9a28-2243487cb74c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53f330a5-30b3-41ef-aa08-69593506ebe1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02d101d8-c057-4593-a122-8372be933ff4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8015a22a-9f7d-4f62-a17c-475e6b1475a3",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a200360-a6cf-4476-9469-53d59029f515",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b327cea6-80ec-4c41-8514-26900de890f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f17ca421-9f91-4083-9f1e-00ee7584838d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a4c5d18-6af8-4c4f-a23a-6d12f6ab5afd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "506140f5-5444-46bd-a503-f68846bfd720",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73c514a8-1b35-45be-8642-c471b478a518",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55d34bbb-312c-4814-bb9e-f22aa32c8912"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42e2c04e-795e-4763-859a-a58d51c5f29f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3c4cd1c-964d-41f4-8409-13dfe4a5f397"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0809d8e8-004f-497b-82b6-ad030a9dbdc5",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42bb7de8-33ab-43ce-835d-a91fd6d7f750",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48b5f5b2-af51-4c7f-9d55-5f0f8614c577"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce3998cd-240a-4edd-baa3-ae54eba918fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e0df9b2-a850-482a-8e3e-c8ccf0fa7161"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c52f4016-c69b-45c6-872e-3c4ec88d48fe",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e5ff82f-e55e-48f8-81aa-c541b0c234bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8767136a-3de8-4e74-943b-55e54f7bf77c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5abcc9ff-3b71-409c-899c-54cf24a030c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d114e1a4-8924-434d-a34c-c273137a56c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba1aa302-95ff-49a7-97be-66d6ea9a658f",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5e2ac0a-f7b0-4a05-a681-1fcda8257d3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f403083-0f3d-4df2-820f-5fe5edf44787"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bf197ee-aaa4-44b8-8d3b-0f8789912280",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c425817-b02c-42e7-9411-7a31a747e2b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45c5003b-0ad3-4f5c-88f9-0fdd39209f49",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05473421-2a76-4118-b0f7-67c92cfde1ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81c5f086-9216-4643-8b9e-57d1c00a8e88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6627d3df-26ee-4102-9bbf-52745209257a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03ed3f36-a49f-4051-8a58-51aad5d7e020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1297fbfb-95cf-4fde-923a-65113e8bd703",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a7b92c9-8e96-4bb4-ade2-116a0c4c25ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93473ff0-add0-4c22-8b45-cd6142d3961e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33281247-385a-4b53-8a94-c4326a5fe835",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e43e58f-0beb-4a04-93a5-0443a95b39a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5f2291c-4b69-42d9-b5c6-c6413bc0f5c6",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "130730f5-5fac-450d-8d7d-df3e83e99944",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53b71fcb-4a35-4250-9816-67a99d6016d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dea24be-10d1-4e10-9333-365f9269156c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca47a549-cef7-4e10-ab11-7f1ba90f4f78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb5793f9-9c6f-486c-8b07-d0eca188a1d3",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e482cb2c-c670-4050-940c-a5689e6358a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b387621-24ad-4241-baf4-861089150cbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c88ac3a-322d-43d2-97e6-b6cbd0e68c2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "122a617d-9860-4d95-adaa-65907e4eaf65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc4039a7-48f5-4e5e-a845-3c5a6b467db7",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6d404a2-9255-4a2c-8bdc-0423013df489",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04a0c96d-c8b3-4afe-8145-4582329b9698"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04176431-193c-458b-8903-67ad99b6c341",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5c497cb-8948-4bb0-9fb7-7872c379a465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "036f3b75-94cc-468c-b2e6-f757f7e0ed5d",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "436b2212-62df-4989-94ab-333cf984421b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d45453ce-7c02-4892-99e2-73ccd3692bde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1aacc06-cc89-4755-b620-cc7b939ffe0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5406c9c7-529c-4300-80fa-6d793213097a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8beeb21-1930-492d-a0f8-711456b513b2",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd0fe551-d9dc-43ac-881c-30dd2947c91f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2d8584e-3e41-4915-aaf0-6cd7174b6c80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d43d2088-9bf9-499d-9c03-81fedc4656a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79a850b0-cac6-4d44-9ae8-0fc95254361b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b439c30-ca29-40e0-89fb-ef76b25dd1f6",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bf58522-b1fc-4f7e-a4ff-cfc2016fa0b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "770fc529-f26f-4ed4-9f9e-d7de4f352f93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57b661fd-3f60-4b12-b6fc-3d99feba103f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e8a7b81-6db5-47a4-8450-dc2e62219d2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "132780f0-046b-4234-a890-696446f05a7f",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "417736ea-2728-4244-bf6a-2177cbd968da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "491209ac-8957-4a34-a0c1-840140273d3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8684de2-2740-4b64-bce3-86c217862d8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8ab329e-272a-4b0e-b8e3-70b047851b8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39b5c4c4-bf51-41fc-b1a3-ad32608e107b",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24aca956-d98f-4cde-9c96-a86a2470425e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1758e00b-a379-49c6-8011-3367c165fc0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71f2074a-31e1-4fa9-8885-3acbfa93db16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c471065-267a-4ee3-a656-317cb2ba3b4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "820607a5-ab25-44be-ad96-b2c0274a953b",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7223ebe8-6915-438e-8bc1-c6d53886707e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a25ed9c-51f4-42fd-b9a9-617d2ec07b31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d0a5161-b94f-4d3d-98ab-db33e2e636b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7807c120-e077-4596-b21e-6ddcb8c62e37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0acbce52-3d15-4f66-8bfd-65f00df76579",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e13a28e4-029b-47f2-9a7f-6b0f3f18bd75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a6521f5-5325-4fd8-90e6-9f9d1fda4f0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "703e11fa-88a8-4e13-b556-7aae24c08256",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aeb685e7-4ef5-4447-a1c1-0e0b17fc55c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc43c46f-b3b2-4123-9170-839e759468a0",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc17d03c-4695-4116-a6c3-06b2e9e607d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d07f4e0e-b3ff-47ce-815c-7b3d2127ded3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdcb6d7c-fe96-4e09-9c87-1d91e101faa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32e3bce6-5107-4336-9584-677cdfdb0841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f336526-0d9a-47f4-bbc8-e8cbbd74d82a",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fd233f2-527f-477e-af0c-c7e19586f52b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8ddf54b-9f82-4315-914f-ec924d99ba88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e88684e-709a-46f1-9b53-f7987aed2942",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36d8438d-c93d-46e3-9f51-32dcc4989700"
                        }
                      }
                    ]
                  },
                  {
                    "id": "769e4683-700d-4631-a9d0-86820251fe17",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8342964-1a9c-45d2-b56d-f15a892832c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09baacc6-88fc-4db4-a083-30d9d91d9ef4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ec5b9df-8fc9-4d69-b003-398f8f934d49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3e331ca-df7c-4758-80c3-5bffbdf60685"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fb46f46-f93a-484c-8d76-9f78513b49b2",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ce67d22-d492-4ae6-851e-fabe66b97bcb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cbbfca0a-5e4e-4be9-9523-1d52bd30242b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c81b3be3-803b-4e52-87f8-e78b79ed0cdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4a0be1c-0976-4fb6-b09b-7d818854435f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47f01730-876c-4cd7-bd85-e6bc6f618739",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74c639fc-29f3-484d-a41d-b1a2d0ef0164",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c3568c9-2e98-48a6-85c5-e807016ba1ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cf15d23-5b85-4461-ab80-4cd6e21eab23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb0a6834-1f44-43e2-9d0f-acee784abf0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecf88255-1ae8-4cc6-a535-c0fca726fab6",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d4ac762-d006-42b5-bd00-837e1588a123",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "114c6c48-9424-4aac-8f8c-348bd7ff5afe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f08d7b12-5b03-4810-81fd-8165277205fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "072e8228-ceda-4c62-ad22-887012983a43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cda20fb7-51f4-424a-8d33-561d1044b809",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53f24880-df58-4676-a9ef-71f4c35e72bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7ca53bd-e38d-47b3-83fd-8e3a02949f3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7fb5571-2104-4cf9-a65f-4e9158999ec5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89f10fe5-6cf5-4db7-b55f-ed8f176a6a5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51e70694-97bd-433f-a167-b0399510675e",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62a0989f-16f3-401b-9913-62e203f5e172",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "119eeceb-b46f-413f-bd6e-ba913fbd6fa6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc37eb05-04d4-4e83-8d6d-8318d9e29aba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95973591-bbc4-4f12-b261-b111da89f553"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3349979-6e8a-4d29-b5e4-d6a1c7e833a0",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6e611c1-db46-400c-90ce-d4c8d76f6281",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81403be1-3219-4f70-8911-eee031dae673"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8afa7292-735d-4d01-8723-45648387c1ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dbc5477-1a76-473f-b72f-74a11829c6f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae523b75-7763-47e4-b05f-95fec2b8418a",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "614c4c45-0621-4ed4-8e0e-9a08b6540ada",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a94c923f-7d77-458c-a059-e01d5136d9dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aca9c4b-db4f-47be-9384-abfafe335dd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0a5b1f0-e922-45d7-a94e-daa00ebc165b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f74c47c-5dc8-4186-bf77-926a12efbaf2",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f01c5249-d20d-4e0c-96ff-d749153b50f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6497fed6-69b1-4f17-bc33-21c4ad8cd0ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7308f53-ef3f-4c28-b551-b41fc2cf3e56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd0db91f-0650-4e03-a93d-d39caeea72b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dc2f05f-c1c2-4353-a221-5152ceff0d5a",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41753a1d-3117-48e9-b0c4-5d3eb5b004cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "574fdc90-9ff1-487e-88b5-3ab186535906"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf8ed018-3843-459b-9294-60cd2e6d85b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38676183-d3f3-413d-8d94-482644f0116a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccf479f2-1396-4f5b-9c62-06b24b33d3b1",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f96bbf2d-fa6e-4977-a584-edc934ba91ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eaac31b5-f8fd-42c3-b334-a2adde09ba76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af6831e7-7acc-4280-9560-5616c4cd7ff4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daab0240-ecb5-4819-b3a2-45660951b756"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34ff3e76-0d4a-4f95-83da-70eac1b395a4",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aea069c-2040-4be7-986a-2f5b324ed487",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90033937-f27c-4310-8f2a-56e8688b8f82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a4cafaa-f7ad-477c-a14e-68622313a1ff",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba2778f7-46f1-48bb-99b5-f03bfb29a9ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c53e326e-0236-41f2-b8a8-24e9908db039",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e394c842-2540-4b70-a2e4-8524cba71a9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6bc687bd-c74f-4107-9574-39bf7a2a1ce3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a881596-0b2c-4661-a79c-c0c399737f3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49001eec-6057-4682-8a4e-702c59aafed4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c090cf83-a70b-4046-a62e-d008b8c7165b",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce691520-f6c8-4a6b-ad13-a96ccf3d95aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5719acd5-811a-4178-876f-7c4c68e5c671"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1905be6f-07d7-4ddb-be57-1a1aaf33c314",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74619258-28b6-4603-be2a-25dae69304a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e84a111-ccb4-410f-9f6a-3224271af555",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9154eba7-f555-4392-ade7-bea4e2d5bd02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4a21e56-d1ad-4e83-b3a9-d8852f24643f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3783fe2a-a387-45ad-89e0-abd93c301021",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "376669c5-86a0-4a10-8b98-d119ab62dace"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25c7b793-0842-488e-b358-91506bffe258",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92897170-9e9e-41fa-9b89-12f2ab58fbe7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a97d78e-3849-49ba-99e7-87fe2935d28e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f1e83e0-05ca-4ea6-97b6-ba87e291fa21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fe5a125-d166-4269-9438-c55eced4a099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bc57f69-a249-43a0-833b-50c65fe74b02",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc11ae9e-3f0d-42e6-993f-81f048f55841",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b7ac5dc-20bd-49e8-9a4f-72b127bd5ee3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d49f8d0-b3e2-4f7b-9838-5c647192d9d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3de4a4c7-db33-4c96-adc4-829cc7cc2ca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2ae52e7-33a0-4bcb-84db-098cb898a12c",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b738bcda-3980-4988-b7ca-ebba677a8594",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46e9c884-2a1a-48f3-9c6f-ffc3cfada094"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3248fa8f-0849-4b8f-bd59-913ffc5684a1",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d437829-6551-4ef1-a4f4-a71fea70ff74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86c97fb1-6b63-4cf6-8892-65dc66a805c9",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c678226b-f4dd-4e7d-82f9-41fc128fa2a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be79eecf-c6b0-40b4-b405-2c7b4c222b3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cac0a730-d03e-41a0-89bc-1a86ce6585ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15ef77fc-0c2d-4bc6-90da-419261d6ada8"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "320af05f-5a84-4f36-9195-b539e7e71e61",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e6e2220c-5995-4d4d-9c8c-d5205d6e1251"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "91cf1748-82a6-4ccd-ae25-480c66c1cb93",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b1204da3-a293-4785-aadd-bae537920811"
                    }
                  }
                ]
              },
              {
                "id": "c79963fe-cf03-43f6-9970-71213d75d001",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3414f981-f0db-44ed-aca5-7ed9a43f5986",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2186c33-e040-4562-b873-1900ee18865a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "eb791616-0323-4f73-90a9-9abdb36642d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8b7de02-1419-40c2-b88a-cebd2ef293f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4fbb926e-56c4-4ff1-8160-a22f2874af41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6298d55-ccb4-4df3-af55-4bc324419a4c",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8b22870-0ab5-4081-95d4-a944df8a3f11",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "09c3f67f-1b91-4ce6-9e63-3e93be84c1dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d86ffbe-a175-4e94-b062-1b29030e0e40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "12b1c2eb-05bc-4b7b-bf5e-c5d4dd5631b0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "725ca4d1-706e-4eb8-bcd9-780f72b6e306",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e7bc132f-ebb8-45b9-8885-cf9d1678ee2b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "45a490be-874b-4aa8-b091-551895daed48",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fbc2bbaf-1963-4781-bc31-f9e4a2180bd3"
                    }
                  }
                ]
              },
              {
                "id": "a8064042-adfd-4ce4-b3b9-f849508402c7",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "d68c6e9a-629b-4d45-bbe1-a52d6a15be7d",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13f50f4a-29b5-4525-8f47-58b752d56956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "34c2315f-6293-408e-815e-13ca53aca66c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d334c15-8906-4e8a-a5eb-205b56ec8db6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4982e10-130e-413d-8396-7a8fa8b89219"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "648cc645-c230-4b9a-bf3a-45a20f02f57f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6116993c-6980-4666-ac3f-d348298bd031",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "71ddc4bb-1e88-4143-a9ff-8787d46c1eff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "146ca72c-a1a7-4cbe-9482-c4ecb5fdb2b5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0991001f-4b67-4b7f-849d-c9a0fdef811e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2815fe8e-9cc6-4175-8bce-9794bda1f939"
                    }
                  }
                ]
              },
              {
                "id": "9df2f42e-0e59-41c6-8159-2107111992d2",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "78d64f16-3fc4-483d-bae9-ab97dee7fa84",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "dca0c4a0-b838-4abd-b219-3e2bbdd60833"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1eaf827f-2400-4d07-a497-6865e7f6842a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "78a5cc2f-8eea-46bd-954c-bbe084852599"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "da2d2965-9994-4cd8-bf70-89b0df967e68",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "413eec0c-cb1a-4e36-9087-6ca7e08d2ae3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "75b393bb-8d1d-4309-86c9-9abd1f06b0bd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cf0268af-a8f3-4985-a405-a391bc07cd4c"
            }
          }
        ]
      },
      {
        "id": "60ee239e-7337-488d-8650-da3b8cd6e668",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "ba5a2c88-a55b-4cc3-a467-0fee4c09249f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f42ba15d-26f1-4b0f-ae39-044b6a248da2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "10eb6e0a-357d-455c-b8ec-13b4e6121793",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f9989f3-ce77-46cb-a534-8db0bd1744ea",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f0a2e931-b356-40be-908a-e6271d3167ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33173bc0-ac04-48fb-b1a2-6c8bb7805daa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "feac2269-49d1-4e17-8e43-075233e43897"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10973fa4-3ddc-44a0-9d12-d93461a325f1",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ec53c19-19e4-4ece-b298-992340294cad",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "058ee657-912f-43ba-b173-b7fbc9fe950d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b478f098-b303-4ec8-b791-539db0aca997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a102b2cc-3e0d-40a0-8896-60664b454ce7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a9475cc9-1a9d-4057-8744-6d2714e51c56",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f7d76be9-df60-423c-9b8c-885079bc2175"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "375cfd50-1cd0-45c9-a58f-5a83c331bca0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e6ceca0d-362f-4f40-bd64-8c1826770e6b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fc498514-0235-4f6a-a2fa-40c37d89bc98",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "0c1a34c8-6d10-4428-804d-bb85c7b5b5d5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e7a53492-fc4c-40bd-be6b-da2c0b0625b6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e5ccfe7e-1ae5-4ccb-850f-a1213f429baa"
            }
          }
        ]
      },
      {
        "id": "bb1fc41d-fb9c-4b27-86be-38d57a4885e9",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "ad627365-6b54-48d5-b04f-54f363258a32",
            "name": "Negative Testing",
            "item": [
              {
                "id": "397af92b-a99e-4488-9828-14ec3097c5c6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6dc60eaf-26a9-44c2-a35f-0bbe2f0b3c1a",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec0707e8-320a-4e83-b88d-7f08e1eb72d8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a61142b1-629a-440c-aea4-20efef9e774c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d1d01a1-8bb5-4f4f-baac-fff2d035957d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1b49f7e7-ce6f-4f98-8558-c45c572e1bde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bb7dd75-a6df-409b-8ca1-10d456c69840",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e8e8107-0c25-4684-be1c-89c261451361",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a64afb3a-9454-476f-8257-6ed7a02f86a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a0f8b31-a186-4a04-93c3-b6910b1ad35e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aee4f9f1-e483-4db9-b4d9-e9503378bed8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "367b8409-fc09-4571-88c8-3d4f2463c498",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1a15ecf5-0f42-4cd6-8b94-6cd024487299"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a58f5d07-3a45-4742-81cc-c89fbac58542",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "990d1689-cea9-40ce-9a49-e4899a6728e5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a6eedcb9-8d09-4f1f-abf7-b002f4ac7a58",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "ed6a9d72-4e09-48be-86f1-ddde3feb09f6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c64e1b53-8b2d-4b0f-9b5a-5a0db85213f6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b87d1f72-0fc8-46b4-882b-d273dba4d080"
            }
          }
        ]
      },
      {
        "id": "6ea8e88e-8762-4b58-999a-07da67022629",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "567e6de3-f996-4fae-8850-5f275f20cdb7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a72b12d9-c6d7-4b22-9076-9937cff0a22a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4972b30c-459c-41af-8717-1ea5bdf5853b",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2545ccd0-0b81-427d-a6ea-6d5affe9bdde",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2177efeb-c84a-42bf-9f79-6cb39ece6e0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d026867-a7c9-440a-b69f-5fbb5510919f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c8682867-f9d3-40a2-ac25-92902386c1ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2755120-c269-4fcb-a73a-36f1746b054f",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fa5a70e-bd27-4b1f-aae6-6222dbd1bf51",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0e13b78d-eeae-45a2-aed8-4090859498d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad77fd7b-206e-4eb7-a64c-6de1ead72393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1869b17d-ef35-4505-afda-54eb1eded948"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a71e0cf5-ba76-46aa-8520-5ef85a592018",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0d0d5b09-ab2a-4dfe-9a23-9134b980ade1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d645c870-b188-4a29-8405-150c22776bea",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "80536c0b-0eef-486c-9a1f-7502df942839"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2592db80-c8c1-4bbd-b8a5-160a232de2ff",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "fd05bc73-31d8-442c-b667-bcf5c830c7f5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cd463dce-e160-48e1-83ac-4a13f996f996",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bdd675e6-80c8-4d38-9b64-638397447d78"
            }
          }
        ]
      },
      {
        "id": "f44e336b-ebf5-4dc1-8707-80d8d85033cc",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6c3abb6f-342f-4eb3-9328-62da9497eeb8",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b8d42370-448f-46cd-b6ad-2da50ab56c33",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "ed549228-7004-4d73-83ef-2f5f4df632da",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7cca4301-84c3-481a-bae8-41454e1dfa66",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c132417d-fd56-483c-907f-0c208bb102c8",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 101
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 149.25190839694656,
      "responseMin": 7,
      "responseMax": 1248,
      "responseSd": 180.428617908801,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1671928791777,
      "completed": 1671928844561
    },
    "executions": [
      {
        "id": "9899a144-c171-462e-beb7-4b01f8bbca25",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "dd27dac5-67d8-49c9-a105-8f4b0d8b3dde",
          "httpRequestId": "a946fa2d-79f8-4351-86e9-9477a8b39646"
        },
        "item": {
          "id": "9899a144-c171-462e-beb7-4b01f8bbca25",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "3452b886-1b37-4393-99f8-ffb9b4f37fab",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 0
        }
      },
      {
        "id": "43ae82ea-a356-4426-93b8-89e047e56b19",
        "cursor": {
          "ref": "e21f479f-75f8-49d3-b4d2-de2a0e74dc5f",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f2d627cd-81d9-4ea2-a586-5b0b6996e379"
        },
        "item": {
          "id": "43ae82ea-a356-4426-93b8-89e047e56b19",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "9e1e8c37-e06d-4d8f-b217-dc3c2a68d093",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "1f1ad1bc-3e8f-4199-976d-15cb4e427d81",
        "cursor": {
          "ref": "8dc87223-df90-4459-bdaa-6ccd6305ff8e",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "6997edee-5d88-4fd2-90f0-ceb964b82c0e"
        },
        "item": {
          "id": "1f1ad1bc-3e8f-4199-976d-15cb4e427d81",
          "name": "did_json"
        },
        "response": {
          "id": "6a527e76-708d-4aa1-90d0-e509274ec669",
          "status": "OK",
          "code": 200,
          "responseTime": 213,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "176a7ce3-7ab7-4760-8b8b-d3ba96ba4844",
        "cursor": {
          "ref": "06687957-05d3-449d-b104-85e508a19a56",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "4a8fdebe-2867-467b-9a09-12ff8940f6cd"
        },
        "item": {
          "id": "176a7ce3-7ab7-4760-8b8b-d3ba96ba4844",
          "name": "did:invalid"
        },
        "response": {
          "id": "8796d23e-6aa6-4e39-94a2-f0ba2c506b65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "176a7ce3-7ab7-4760-8b8b-d3ba96ba4844",
        "cursor": {
          "ref": "06687957-05d3-449d-b104-85e508a19a56",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "4a8fdebe-2867-467b-9a09-12ff8940f6cd"
        },
        "item": {
          "id": "176a7ce3-7ab7-4760-8b8b-d3ba96ba4844",
          "name": "did:invalid"
        },
        "response": {
          "id": "8796d23e-6aa6-4e39-94a2-f0ba2c506b65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe225d20-13b8-42bd-b528-0e821fec4b74",
        "cursor": {
          "ref": "a826514b-8b7c-4b28-88e5-620d5207cf82",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e0a79b1a-bd37-426d-a8a6-5e61433cabe2"
        },
        "item": {
          "id": "fe225d20-13b8-42bd-b528-0e821fec4b74",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "19c5a37b-7b8c-4869-a1fc-322d0af1cfa8",
          "status": "Not Found",
          "code": 404,
          "responseTime": 102,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2660f7ef-1979-4135-bea8-b519b31fbe49",
        "cursor": {
          "ref": "c51e23a5-c0d4-455c-bc12-928606677398",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "ec990d18-6436-4986-ad9d-a22366fbcb0a"
        },
        "item": {
          "id": "2660f7ef-1979-4135-bea8-b519b31fbe49",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "ac9d7277-369a-4be5-a3bd-4a0f5ebec244",
          "status": "Not Found",
          "code": 404,
          "responseTime": 64,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38d5d00d-a987-429d-b129-f884226cb8ba",
        "cursor": {
          "ref": "914edb31-ead8-405f-9fee-4ddaf73c2c77",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "cf20a3b9-46b1-47c3-8b83-b5223806f9b1"
        },
        "item": {
          "id": "38d5d00d-a987-429d-b129-f884226cb8ba",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "66fb0e38-f38b-4dd6-8ef1-8ea83fb92d65",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb28b70c-2268-425f-b2e7-88a84f5f1a2c",
        "cursor": {
          "ref": "7aa4bf04-ac28-41e6-8ee1-1d30af3a8765",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "9c948e45-101c-4712-bc7d-545449841d48"
        },
        "item": {
          "id": "eb28b70c-2268-425f-b2e7-88a84f5f1a2c",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "a40cc1ff-e8bb-433d-9e53-1dd14d0506ad",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb28b70c-2268-425f-b2e7-88a84f5f1a2c",
        "cursor": {
          "ref": "7aa4bf04-ac28-41e6-8ee1-1d30af3a8765",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "9c948e45-101c-4712-bc7d-545449841d48"
        },
        "item": {
          "id": "eb28b70c-2268-425f-b2e7-88a84f5f1a2c",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "a40cc1ff-e8bb-433d-9e53-1dd14d0506ad",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8926542-24a3-4cf5-94a5-95e61ebf6695",
        "cursor": {
          "ref": "55aeb72d-ff6a-40e5-8a5e-71b8fc1334de",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6ce2edae-78e6-402e-8993-c5eafe0dd290"
        },
        "item": {
          "id": "c8926542-24a3-4cf5-94a5-95e61ebf6695",
          "name": "identifiers"
        },
        "response": {
          "id": "ab171cde-5257-4421-af4c-7f3c34f56f14",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cb8c133-6a78-4ef9-894e-bebcd842ddb5",
        "cursor": {
          "ref": "8038c9a4-6a87-4c07-9425-0265e9b8f520",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c68cc92a-9146-4dab-a42e-990112f5e601"
        },
        "item": {
          "id": "5cb8c133-6a78-4ef9-894e-bebcd842ddb5",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "fe92603e-106b-46ab-b37b-b5d86bd25014",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cb8c133-6a78-4ef9-894e-bebcd842ddb5",
        "cursor": {
          "ref": "8038c9a4-6a87-4c07-9425-0265e9b8f520",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c68cc92a-9146-4dab-a42e-990112f5e601"
        },
        "item": {
          "id": "5cb8c133-6a78-4ef9-894e-bebcd842ddb5",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "fe92603e-106b-46ab-b37b-b5d86bd25014",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40d501d3-059e-4529-aaf5-fd5d4b338711",
        "cursor": {
          "ref": "b802e856-2232-4fae-a51c-1f7a67963f5a",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b6b6feb4-fdc1-48ae-b10a-e0c097c617f2"
        },
        "item": {
          "id": "40d501d3-059e-4529-aaf5-fd5d4b338711",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "f707b5d2-4ff6-4865-a7c0-dd5e05fc6c7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3c9d1e3-0ec7-4aa0-9ac5-a72816efd7e7",
        "cursor": {
          "ref": "06e86b48-a48d-4ce0-86f3-c2f19c31e385",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "658ee0ff-c03e-4064-85fa-3c3364d1243e"
        },
        "item": {
          "id": "e3c9d1e3-0ec7-4aa0-9ac5-a72816efd7e7",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "34942ec7-c025-4e79-8769-581c7d00bba6",
          "status": "Created",
          "code": 201,
          "responseTime": 680,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "a18b0bdf-1e4f-4bbd-916f-e3becbe3f634",
        "cursor": {
          "ref": "f5719810-43a4-47ba-9ce5-fb24de40915f",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "941beb59-bb03-4c54-909e-3e9606560cc6"
        },
        "item": {
          "id": "a18b0bdf-1e4f-4bbd-916f-e3becbe3f634",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "6c1c755a-8f35-4d29-8e86-c63ad0fc3a9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de097217-2e50-4730-ae7b-f410723d01bd",
        "cursor": {
          "ref": "6a110ad5-9493-4808-a3a8-dcb056b76090",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "ad3490a9-85be-407d-8c2d-6c713c7f3639"
        },
        "item": {
          "id": "de097217-2e50-4730-ae7b-f410723d01bd",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "a3329e2b-4304-4e86-81c1-d0dc11b6dbd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ad43f8b-2b36-471f-9ec5-be9bbe234fe9",
        "cursor": {
          "ref": "9bfce915-593e-4b78-95f4-9d45dacd4e6d",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "5dd2ae95-06ba-463f-8d1e-9bb1b8fd9c21"
        },
        "item": {
          "id": "6ad43f8b-2b36-471f-9ec5-be9bbe234fe9",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "4391f0a3-f3e2-43a1-b770-1c76112add3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bbbaa07-3e38-4826-ae00-0dde80bbe644",
        "cursor": {
          "ref": "ccb8c8f5-319f-4a71-88ad-0daca2982d0f",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "00624ab4-f3dc-449e-8912-b78b70a630c0"
        },
        "item": {
          "id": "2bbbaa07-3e38-4826-ae00-0dde80bbe644",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "cfea3eae-9c7c-4382-a873-fead736bccbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02eaffbe-c4a1-4015-bebe-8868e01a33cb",
        "cursor": {
          "ref": "821ebfb3-33ee-41f4-b795-ccfb279ca0cf",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "3ed6435d-709d-4248-8362-4d84350c0011"
        },
        "item": {
          "id": "02eaffbe-c4a1-4015-bebe-8868e01a33cb",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "71da582b-6871-474d-a9e5-3272f1d304a8",
          "status": "Created",
          "code": 201,
          "responseTime": 570,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "1dd28fbf-da12-4c8b-9a62-a079d2e39234",
        "cursor": {
          "ref": "c03efe7a-cd13-4dc6-9769-ef4fa7c6765b",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "40219263-20ea-4a1c-8e73-cab482e9a2aa"
        },
        "item": {
          "id": "1dd28fbf-da12-4c8b-9a62-a079d2e39234",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "36351a29-b29b-44c6-bbdc-d6cac91a1628",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44194c2e-9c1f-48b6-ab62-224c6494d25b",
        "cursor": {
          "ref": "1a053020-bce8-4ddf-9c38-4da985bb5723",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "8c7e6bd4-033a-49ec-aa66-3461c5f2b32f"
        },
        "item": {
          "id": "44194c2e-9c1f-48b6-ab62-224c6494d25b",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "c04042af-2894-410f-a1fd-9a7d6d213c99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b763c9a1-7912-4122-a9cb-f6c2b7ea15ff",
        "cursor": {
          "ref": "ccab2d0d-bb90-4346-ab3d-be035c97c3a9",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "8f65f371-3be5-418e-9f14-4c58b07f4701"
        },
        "item": {
          "id": "b763c9a1-7912-4122-a9cb-f6c2b7ea15ff",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "46733ca0-d133-4e95-9cc6-dde7a4fe7213",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08b8ec66-6534-4211-baec-aeec70b54031",
        "cursor": {
          "ref": "39ecb163-364e-4879-a54e-e9f9bf01e4b5",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "c28db79d-14e1-4119-a31e-f2e853807bc3"
        },
        "item": {
          "id": "08b8ec66-6534-4211-baec-aeec70b54031",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "cfa939ca-3127-44f8-89e1-de1e8785f66d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ede4677-738b-47d4-81c8-83818b0b5609",
        "cursor": {
          "ref": "19b0b481-4868-48c1-ba3d-34182047e700",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "f5c928a5-2af3-41e9-8cc1-68a28ac7496a"
        },
        "item": {
          "id": "0ede4677-738b-47d4-81c8-83818b0b5609",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "503e9696-0394-4dc7-a725-2f4ecdbcd2e4",
          "status": "Created",
          "code": 201,
          "responseTime": 561,
          "responseSize": 736
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "ce9eaf49-64f2-4c53-9aee-6d9653714cf2",
        "cursor": {
          "ref": "662b5c1c-b7c0-4ae6-9d73-0f17c4f532c3",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "c65b3084-8010-4d82-9859-540fdfb9163e"
        },
        "item": {
          "id": "ce9eaf49-64f2-4c53-9aee-6d9653714cf2",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "ea413968-94f3-4b66-a6d0-1d21693b0069",
          "status": "Created",
          "code": 201,
          "responseTime": 1248,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "7e0525c1-4158-4efb-a88b-2e74fc0f311b",
        "cursor": {
          "ref": "915a241b-ab7b-4a3e-95e7-c375af7da29e",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f5065cbd-6919-4d21-9b79-470cd108f069"
        },
        "item": {
          "id": "7e0525c1-4158-4efb-a88b-2e74fc0f311b",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "efd1616e-44b1-481b-a5d6-03ac6fad3008",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7b8b2a7-7cf1-48b1-9b46-933f66030075",
        "cursor": {
          "ref": "07ea266a-17e5-4c8b-8ff8-db5e87021fda",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "274990fc-87a1-44e0-926d-bae11fe51e60"
        },
        "item": {
          "id": "e7b8b2a7-7cf1-48b1-9b46-933f66030075",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "4e9ccd6e-483f-4542-96b3-f3c3cadd1c92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a40e45d6-1fd4-4baf-a67f-d5c3476604e2",
        "cursor": {
          "ref": "2aaa0fd4-27af-489a-9302-1ff25c1a5c46",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "08519369-1cd2-495e-953e-f13fbe7a41b5"
        },
        "item": {
          "id": "a40e45d6-1fd4-4baf-a67f-d5c3476604e2",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "55773603-4fcf-413d-9ee6-75c3186abd8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7a2bd4f-0e32-462e-955e-cadf0ecbe079",
        "cursor": {
          "ref": "d7dd1442-fa3d-40b2-a58e-46dcf8536a10",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "9c56682e-75e3-42cd-bddb-26168dbfde01"
        },
        "item": {
          "id": "c7a2bd4f-0e32-462e-955e-cadf0ecbe079",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "f5359903-51f4-4a15-beb5-1993f929355b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "505756b9-fbea-4b86-944f-6f919df4f6c8",
        "cursor": {
          "ref": "526fd7c8-b215-4b2f-8d65-78e4307d68f5",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "987a1ea4-6bc6-4b3d-ba7f-fcf62a6779d8"
        },
        "item": {
          "id": "505756b9-fbea-4b86-944f-6f919df4f6c8",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "9fd9a1e1-c8f2-4a5e-b01b-c69dd0e66968",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54d467cc-6546-4442-aaf0-3435d1ca8051",
        "cursor": {
          "ref": "f2db39a7-d7ec-49a0-9c02-ad2ddc898cb6",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "99ab55bc-fd63-4dff-b54c-7e55af77047a"
        },
        "item": {
          "id": "54d467cc-6546-4442-aaf0-3435d1ca8051",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "96359943-914c-4f89-9b90-a6f7d690354b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84c65cb1-56ec-42ba-a32e-0be5c9ed893e",
        "cursor": {
          "ref": "8502c8f6-3b48-4089-bcb3-5374447115da",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "d1ea6da8-1b99-482a-a70b-3e121e3c6fda"
        },
        "item": {
          "id": "84c65cb1-56ec-42ba-a32e-0be5c9ed893e",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "98ff9d1c-23a0-4c55-bfc4-230ccd9123e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78269392-b33f-48ab-b099-784a44e4ae43",
        "cursor": {
          "ref": "2fc7a77c-250b-4c0c-9751-86b22be69e79",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "df2348e8-7957-493c-a903-448170628e6b"
        },
        "item": {
          "id": "78269392-b33f-48ab-b099-784a44e4ae43",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "164d60a4-f270-4e0d-9a3d-c683b579563b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f67ae5e9-3eee-4618-acba-29ac05a97bd0",
        "cursor": {
          "ref": "57129fa6-4c38-4544-84ab-8ffe911d1eb7",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "72d8ccdf-170c-4ac7-a4a2-ced5d1433b0a"
        },
        "item": {
          "id": "f67ae5e9-3eee-4618-acba-29ac05a97bd0",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "adca5f6c-e117-45f9-a191-c31dd4a70324",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e04eaa51-8fd8-4bd5-b7cf-1a00b7d2bbb6",
        "cursor": {
          "ref": "146bf402-d74d-46d0-b3f9-947254446e2d",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "8fc244c0-c140-49ac-a87f-421af5d86314"
        },
        "item": {
          "id": "e04eaa51-8fd8-4bd5-b7cf-1a00b7d2bbb6",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "bf69af3b-a5de-4b4b-acb2-5983cb97b0b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1589324-7ad3-44f2-ba20-cf95789f50c2",
        "cursor": {
          "ref": "ef475eeb-9486-497e-b691-975cf6fc3aeb",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "edc7125e-29e3-4d99-b8ba-2b4163ed7dc8"
        },
        "item": {
          "id": "a1589324-7ad3-44f2-ba20-cf95789f50c2",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "7212460e-f95b-4896-b133-a31d7cb633bd",
          "status": "Created",
          "code": 201,
          "responseTime": 714,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "bb01d8cc-f0a4-4149-b447-4daa92b5496a",
        "cursor": {
          "ref": "8b9a7829-2296-4e41-8822-d4bb07b6e6d0",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "0cb9db05-1b2a-44e5-8913-c9f6fc54edf0"
        },
        "item": {
          "id": "bb01d8cc-f0a4-4149-b447-4daa92b5496a",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "a1e8dcdd-a37b-4bf0-b060-ef1d7dad3bac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "078452e4-ac36-4f65-9938-aa914af55eaa",
        "cursor": {
          "ref": "bb60d979-371e-4e5c-8492-bf0578dcba63",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "06e5cfb2-61e6-4c93-9297-d0aec4c6d2e3"
        },
        "item": {
          "id": "078452e4-ac36-4f65-9938-aa914af55eaa",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "99117a39-5816-4dba-b3f5-5b4013152dc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b79fc42c-29e9-4ffe-b508-f0c2a49e2d0c",
        "cursor": {
          "ref": "f0d81421-c915-48bb-8c78-5000a92b0cb5",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "76cd7151-7472-472c-b6a6-cc5ff9720d1d"
        },
        "item": {
          "id": "b79fc42c-29e9-4ffe-b508-f0c2a49e2d0c",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "bd05d4b3-0382-4232-80ac-8c8392f57761",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e61ce199-a10a-4263-933e-5b04c7a1a14d",
        "cursor": {
          "ref": "52a26a12-b839-478e-843e-c37b8c5efd82",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "e8582a38-1d92-4455-a5b8-8c34642a3b36"
        },
        "item": {
          "id": "e61ce199-a10a-4263-933e-5b04c7a1a14d",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "88ae4df6-f016-49f2-8fec-810933dfbc39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80b7895a-c00a-48f6-8424-ed40f8bea82f",
        "cursor": {
          "ref": "2872e716-03df-4fa1-a6ba-ef53ef0a2dbb",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "a42c11db-7fcd-4e6c-8dfb-bdc0941238d3"
        },
        "item": {
          "id": "80b7895a-c00a-48f6-8424-ed40f8bea82f",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "3ca72910-4c01-4688-9ff9-76ceb43a0d6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc2e7612-804b-4236-bdad-d228880709fa",
        "cursor": {
          "ref": "82f9fb52-a168-478a-8caf-3d5522710a7d",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "3ef31f57-6fa6-48a0-a351-afce296ac550"
        },
        "item": {
          "id": "bc2e7612-804b-4236-bdad-d228880709fa",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "303c4475-2e3f-4283-ae20-cfd6afe124cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7becb7c4-b78c-4e7a-8c29-b8c5d8f749c9",
        "cursor": {
          "ref": "bf03e50c-ce9d-46da-b289-3cbe9f3eb324",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "40e9cee3-7249-42cf-a8cc-e22860e0b128"
        },
        "item": {
          "id": "7becb7c4-b78c-4e7a-8c29-b8c5d8f749c9",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "48be9ea3-8243-4801-bfde-5bcc05c123b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "427e35fb-05a7-4c4e-bc18-448d13aa0b0c",
        "cursor": {
          "ref": "b0e005dd-be7c-495e-9201-93af39021e6c",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "965b5293-f747-44a3-8dbc-363c9b9dc72c"
        },
        "item": {
          "id": "427e35fb-05a7-4c4e-bc18-448d13aa0b0c",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "ffef71e6-e0b3-49be-be28-2b91d9c688e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d58fbdef-a507-4f57-9823-4b614bed0402",
        "cursor": {
          "ref": "84508ec2-6609-4a42-8cfb-5a61db755e7c",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "8b77e040-0e64-4fbb-b194-92d7a0749b0f"
        },
        "item": {
          "id": "d58fbdef-a507-4f57-9823-4b614bed0402",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "c52fdb8e-ff0e-4099-9bb3-b7d930893a22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbba41e7-d41c-479d-b242-4527fe632fe0",
        "cursor": {
          "ref": "e64269e3-f65d-4b37-b690-56fa4c98bedc",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "72d30838-8a96-4bf4-b10e-76c64fcabca3"
        },
        "item": {
          "id": "cbba41e7-d41c-479d-b242-4527fe632fe0",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "e731711c-ecfd-49ab-a85e-1a60ac933504",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62cc55bc-35d1-4565-ad60-aba167cfc128",
        "cursor": {
          "ref": "c4acbec2-67fa-4c0c-919a-2502f8940420",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "1fc3594c-6ff8-4d24-ad85-314031fb10f4"
        },
        "item": {
          "id": "62cc55bc-35d1-4565-ad60-aba167cfc128",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "8d160657-4b0b-42d8-9c6e-99e801e0b37e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14aa75ec-f175-4db9-bc98-c16d76d39e57",
        "cursor": {
          "ref": "bc0849f2-c139-4a08-b46d-a9987fda7c92",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "7e30dc64-2845-42f6-9668-0878173e5a4f"
        },
        "item": {
          "id": "14aa75ec-f175-4db9-bc98-c16d76d39e57",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "0b7fb24a-eff0-4b1e-9c8f-f6d180015d3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6bb9609-574e-4b1d-8938-29f3aef79b53",
        "cursor": {
          "ref": "e5f2e815-c653-4c77-ba25-569e4383a965",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "49094cc3-678d-433a-ad01-ce8f851d68f8"
        },
        "item": {
          "id": "a6bb9609-574e-4b1d-8938-29f3aef79b53",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "8671989c-2f50-4921-9279-f908f4372cef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 498,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "410b4009-3aea-460a-94da-4ffdc1f37e75",
        "cursor": {
          "ref": "53b09e51-58d8-4e9d-9f02-3ffd848e8687",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "22c524e5-f40b-4f71-888a-82f6ca25ef67"
        },
        "item": {
          "id": "410b4009-3aea-460a-94da-4ffdc1f37e75",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "45174869-1b39-46db-ba2b-46f14a87c356",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "955ca9e2-6a64-43a0-af20-f725362fe5d0",
        "cursor": {
          "ref": "f226ce89-37a3-4bbb-99de-a3eb7267fadd",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "7bb91254-61c9-415b-b561-ae38d850f609"
        },
        "item": {
          "id": "955ca9e2-6a64-43a0-af20-f725362fe5d0",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "0d854c97-c696-4a86-8805-bc50831d4300",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09bfa38b-aa23-4b73-9652-2bc7b497a00b",
        "cursor": {
          "ref": "d668f11d-9607-44d8-ae81-9a0344e4c289",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "fa8f8728-4e74-4739-bb05-c92a8201cd9b"
        },
        "item": {
          "id": "09bfa38b-aa23-4b73-9652-2bc7b497a00b",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "67acdd6d-a55f-4ff2-aed7-046ffeecb149",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f70c946e-e709-445e-930f-6070f53f52b2",
        "cursor": {
          "ref": "e4e6d9d1-b4be-4466-bbdb-f128bb6a17dc",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "e3fefacf-2f27-4946-b548-0123f92a0bf7"
        },
        "item": {
          "id": "f70c946e-e709-445e-930f-6070f53f52b2",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "e00f44d9-2495-4596-b857-8f8e547e4301",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5059e02f-311e-4bd1-b690-af133c56dd7a",
        "cursor": {
          "ref": "0739e68c-ba86-436d-85e9-2a805afbb5a8",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "32df3af9-c31f-4885-99d2-12ff131bfe4d"
        },
        "item": {
          "id": "5059e02f-311e-4bd1-b690-af133c56dd7a",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "9c855970-fede-4c76-be7f-4598f860ae58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da10d420-cb61-4a27-ae04-8fa7d771ec64",
        "cursor": {
          "ref": "98ba89c0-3e96-4cf2-9c8d-6e4af0899f4d",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "4927a322-7bcf-4c42-ab0e-5bf1b7d3a468"
        },
        "item": {
          "id": "da10d420-cb61-4a27-ae04-8fa7d771ec64",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "9b5ec5ee-c816-4983-8405-627c049010e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0622637-7199-4e76-9b19-a7c89f271b3d",
        "cursor": {
          "ref": "9f8998f7-fa45-40c4-b9f9-85e834b74a0a",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "bf68826b-dc5e-40ee-9eb3-775fd5dcf0af"
        },
        "item": {
          "id": "b0622637-7199-4e76-9b19-a7c89f271b3d",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "0a70c1a3-bd3c-4972-b22b-47d0f9014820",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 402,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "62599256-5897-4172-9076-61ee84962dcc",
        "cursor": {
          "ref": "dc12974f-489e-4d33-9def-8f23516f9899",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "5c1ed6dd-1da6-46b2-a5db-fd13a892eace"
        },
        "item": {
          "id": "62599256-5897-4172-9076-61ee84962dcc",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "4cd10170-d8c8-496e-9c58-5e9d802dbfe8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d27dcc52-cecf-40ff-adcb-478ba38a1bbb",
        "cursor": {
          "ref": "9accce3b-bf41-411d-a37b-d081f4ea4da8",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "00485c5f-dd6d-4c84-89f3-f26d51e57e70"
        },
        "item": {
          "id": "d27dcc52-cecf-40ff-adcb-478ba38a1bbb",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "81c273f6-0b9a-4114-8a91-583eb6e6ac0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8de14b2-95f8-431b-b7fc-e8a04ca0be8a",
        "cursor": {
          "ref": "5a973be0-7d33-4712-9214-76e67f8fd907",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "b7d5312e-b34d-4658-819f-22ec42bbd6e0"
        },
        "item": {
          "id": "c8de14b2-95f8-431b-b7fc-e8a04ca0be8a",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "ebb368f1-554e-4d20-8f06-af8a394916e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "724f7b2c-7590-4c7a-a096-179254293463",
        "cursor": {
          "ref": "e711ccfb-3e32-4568-b8a8-291d8e4835b0",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "3d17d17b-d393-41f9-b6e2-97996184226d"
        },
        "item": {
          "id": "724f7b2c-7590-4c7a-a096-179254293463",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "dd14813f-d8f6-4698-b7b5-d25763d26b64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07bf1613-a9b5-4c45-8d85-51ae453a773b",
        "cursor": {
          "ref": "e6104b3b-4a73-484c-a9d6-b7b723f52de4",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "629d04f7-12d5-4998-b903-888d68178b82"
        },
        "item": {
          "id": "07bf1613-a9b5-4c45-8d85-51ae453a773b",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "22bcf783-0155-47a3-97bf-0581c74814ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edc85fbb-6ab6-495c-85a1-be5d500a269a",
        "cursor": {
          "ref": "ca691b97-0570-4e98-96c1-c820d17cfe0e",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "74e3c623-b1fb-4f23-8390-fd7d1e3efe6d"
        },
        "item": {
          "id": "edc85fbb-6ab6-495c-85a1-be5d500a269a",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "eabab1e5-1214-4ad8-84ff-2eaec7dff414",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14d273e7-aa5d-452f-a02e-29ae99255a98",
        "cursor": {
          "ref": "179286a6-7b20-435a-af99-6ab81887ab5f",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "4d34de6c-0eeb-41d1-b348-640b4e46efd3"
        },
        "item": {
          "id": "14d273e7-aa5d-452f-a02e-29ae99255a98",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "36a4f865-f0fe-4799-b630-1805db9859cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6425e06-cb00-4061-a7db-fbc103c16cd9",
        "cursor": {
          "ref": "7260dec5-fc35-4901-b69a-7650c101a907",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "3201a1ec-437e-41d7-a15b-efbe710045ff"
        },
        "item": {
          "id": "e6425e06-cb00-4061-a7db-fbc103c16cd9",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "76e65d42-ccf6-4102-96a0-f83b452576bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fe3b84d-b6a4-4cb7-992a-a03f6aaefdd8",
        "cursor": {
          "ref": "0a7ac546-3e4b-4da5-bce2-4e9f6fe1b283",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "8e17cdbc-a20b-4fa1-b39f-54c017d5fd29"
        },
        "item": {
          "id": "2fe3b84d-b6a4-4cb7-992a-a03f6aaefdd8",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "d4dc43c9-a11e-49b5-b899-41c5c665307d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7733888f-e371-4ae7-b4a2-3d99923c368f",
        "cursor": {
          "ref": "1594dff4-6f11-43d3-be24-1cd68cd3a598",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "34f2743b-12f0-4fe0-acd3-66e3ae1fdc66"
        },
        "item": {
          "id": "7733888f-e371-4ae7-b4a2-3d99923c368f",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "c45a9e7c-abab-4c1b-aa65-b27fa47c3eac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77bfe01b-c24f-4c5c-8497-5d034b12c4bd",
        "cursor": {
          "ref": "f13b5520-72ba-45f2-8295-a2b623040fb8",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "8691a0c2-106b-4b90-83c1-619e9a730e9c"
        },
        "item": {
          "id": "77bfe01b-c24f-4c5c-8497-5d034b12c4bd",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "52fe0258-55f3-4e81-9bc2-21b562c0d678",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebef2967-7025-42bd-94b4-6f76e4818db0",
        "cursor": {
          "ref": "41c9bb54-6d84-4da0-9765-ad2d3084478f",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "536e8f22-8d4c-47a5-a011-31e163e68e49"
        },
        "item": {
          "id": "ebef2967-7025-42bd-94b4-6f76e4818db0",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "1828c4a5-3706-4453-894c-9c87df376515",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a015aafe-c0d2-489c-ab93-60b4860b1f79",
        "cursor": {
          "ref": "8f1dd352-b76a-4cc5-8e47-757a1733a4c3",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "825b9d54-7d51-4724-8e8c-2141faefba64"
        },
        "item": {
          "id": "a015aafe-c0d2-489c-ab93-60b4860b1f79",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "2d0e1c80-6b3b-4c10-88d7-e04159d2387f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d702e873-58a1-43a2-8d46-0161d9f1cc9e",
        "cursor": {
          "ref": "c6e0f368-2699-4ed0-9aca-fe4a434f6b82",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "7a615697-a004-40bc-8841-918e84c7f499"
        },
        "item": {
          "id": "d702e873-58a1-43a2-8d46-0161d9f1cc9e",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "3af3fbcb-1fd9-4f20-8e7e-1671bc4c7c6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "068c957b-255c-4411-b618-d2d6fe2716ef",
        "cursor": {
          "ref": "3e0d12c7-a12b-4a58-9248-9c830f8deab3",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "125a0b82-f093-4fc9-9ff3-390578d30325"
        },
        "item": {
          "id": "068c957b-255c-4411-b618-d2d6fe2716ef",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "29af6664-ec6f-4f11-a7df-a2602b14f3a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4be47a7-bb73-41aa-99e0-6fc5396f82a8",
        "cursor": {
          "ref": "b3802583-f751-4bda-ad29-67c947641647",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "011bc6bd-9858-46ad-a9d9-57fc05c5d283"
        },
        "item": {
          "id": "c4be47a7-bb73-41aa-99e0-6fc5396f82a8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "edd8a9a8-5380-455f-83c4-14f863b1f870",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a16c53b-eca8-4879-b4df-f9486d7e0a5d",
        "cursor": {
          "ref": "8298d8e1-86d5-4d42-8f81-937393f5c463",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "a4d85100-3573-4be3-b0cc-5e89fdcf4076"
        },
        "item": {
          "id": "8a16c53b-eca8-4879-b4df-f9486d7e0a5d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "55535408-4790-4359-8823-cb92ce9fcdb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 226,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2043ce70-fc4a-41f0-84e5-a6f88f173570",
        "cursor": {
          "ref": "c1cbc229-1033-41cb-8a0d-85a207e1f154",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "b1cca8e2-f2f5-41e9-8f6d-769ea0e70c83"
        },
        "item": {
          "id": "2043ce70-fc4a-41f0-84e5-a6f88f173570",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "0c45e15d-70c4-4d0b-9d67-60c5eeb1ef7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43b90525-df21-4599-ac21-ed6ca7b1b026",
        "cursor": {
          "ref": "6aee36ea-f0fc-4143-81e9-926fb5226867",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "1ead7227-26a7-4b7a-81c5-fd5a5a4256f8"
        },
        "item": {
          "id": "43b90525-df21-4599-ac21-ed6ca7b1b026",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "fc4dc147-3665-4641-8129-afa9cf94275f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "541eeb3b-e8c7-4dac-a9e9-bf345bf3cc0c",
        "cursor": {
          "ref": "9af2a923-464f-4687-9824-1f5a4b6ad4e5",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "03c7a31f-4b38-4ec5-8026-abaa652fceb2"
        },
        "item": {
          "id": "541eeb3b-e8c7-4dac-a9e9-bf345bf3cc0c",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "6056aa6a-3acf-4f4b-9594-9ef5a538a84d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26f6943e-d8fc-42fc-a2ba-16a4c93fb32c",
        "cursor": {
          "ref": "ba874105-5794-42c8-9873-3322dfe3b066",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "faa90911-42cb-40b7-8d8c-a729549fc56e"
        },
        "item": {
          "id": "26f6943e-d8fc-42fc-a2ba-16a4c93fb32c",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "a9d25896-b144-4f54-8521-c2927784b145",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a73df17-8258-4644-9d93-c52645907fed",
        "cursor": {
          "ref": "ec47791e-5c07-4e26-bdc4-5726156a94ca",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "ae5ab825-4cef-43eb-89bf-4d00f9956e85"
        },
        "item": {
          "id": "0a73df17-8258-4644-9d93-c52645907fed",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "1d0c80b7-799d-47de-8a40-cf917be9dbb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06032281-0715-4da5-9f8d-9d2af3b98276",
        "cursor": {
          "ref": "1db0b909-300d-4563-b0ae-16a803c5268d",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "e3aa3e2f-2ae2-4461-98d7-a27839c5c284"
        },
        "item": {
          "id": "06032281-0715-4da5-9f8d-9d2af3b98276",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "3e7e8576-09fa-42c4-889e-39b71afff1c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "055bd10e-1b69-44bf-9c2a-eef3241fa480",
        "cursor": {
          "ref": "de9e07b7-4df5-4592-b1b3-09e1e9f8997b",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "3f36c612-19c0-4bf0-b769-e63184dc8055"
        },
        "item": {
          "id": "055bd10e-1b69-44bf-9c2a-eef3241fa480",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "2fea5160-93af-49f3-ba8d-e54e9d5b7b0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0412280a-ef5e-4c7b-adc0-a39bea5d28ba",
        "cursor": {
          "ref": "4d17f4d5-ef6e-4dde-8a3e-8909ac5e5a24",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "c3d07c9d-d48f-4b82-b1a2-269c2ef56bee"
        },
        "item": {
          "id": "0412280a-ef5e-4c7b-adc0-a39bea5d28ba",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "bbe31019-eec5-4ac9-ac7d-16dafac4808f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27c8f041-24c5-448c-92a5-be1cf9c08e56",
        "cursor": {
          "ref": "c67c3f60-fe54-432f-b541-5ad571e8ec11",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "4bc8dd14-0c9c-4e8a-9894-4cdd37fcd33f"
        },
        "item": {
          "id": "27c8f041-24c5-448c-92a5-be1cf9c08e56",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "e6665fef-7b89-46c8-aaa9-ca16605cd89e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bce4d14-4ceb-4979-931a-b101f30c3a38",
        "cursor": {
          "ref": "17075b0f-07a2-41d1-841b-2ab4e0aa1568",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "3bf704e9-662d-4b35-9bfe-dd7dce890a04"
        },
        "item": {
          "id": "4bce4d14-4ceb-4979-931a-b101f30c3a38",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "1139d40b-e5ee-41ce-8cc3-6cd8f65dc13b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd69c497-3dd1-42fb-95ee-9e7cf032f9f3",
        "cursor": {
          "ref": "5c3eb812-2e4e-4f72-8290-3c68e1947dea",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "9c5e7ccd-f8f9-4ece-b2fe-43d1b951fa30"
        },
        "item": {
          "id": "cd69c497-3dd1-42fb-95ee-9e7cf032f9f3",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "db7129c6-f0b8-476a-860a-fa37c42f8ac1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c736b516-0757-4692-9a69-372e3914fc56",
        "cursor": {
          "ref": "f68605c0-077b-4801-b0cb-880a17530531",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "38031882-d5ed-40e1-8176-daa844cc3164"
        },
        "item": {
          "id": "c736b516-0757-4692-9a69-372e3914fc56",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "fb64cd61-ce8b-4b7a-af69-56522b7c9b4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e53d4812-8929-49b9-a304-e619e1f4a2b7",
        "cursor": {
          "ref": "5fd07a0f-07cb-4ab9-b23b-ee77d40c3873",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "4895a2b1-400c-437b-9771-c24d1bb89b01"
        },
        "item": {
          "id": "e53d4812-8929-49b9-a304-e619e1f4a2b7",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "d9e67651-d91a-4eac-bfa4-0013f9e6d0a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "179c7305-f386-4fa5-a367-91f1ff2f261d",
        "cursor": {
          "ref": "0ed445c3-2a21-46cc-b06e-7b2f56a9e450",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "88dc3239-9ab9-468f-996a-82953078530a"
        },
        "item": {
          "id": "179c7305-f386-4fa5-a367-91f1ff2f261d",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "9d9ed34f-f389-4085-9b3d-7c633818958d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 394,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f944601-04f8-452d-b673-587aef8417f5",
        "cursor": {
          "ref": "43c50c37-2a91-4c4e-9ebc-fc086ccc99f3",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "8c674d91-adaa-445e-886c-75678d9ac6ce"
        },
        "item": {
          "id": "9f944601-04f8-452d-b673-587aef8417f5",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "9b8ca268-e978-48cb-b793-884a4efc7c26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78a3f730-c0c2-4e15-8e5c-53a644aaf5b6",
        "cursor": {
          "ref": "53d51e3c-c0e7-42c4-aef2-ed1469e04cad",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "72dffd2f-32d0-4dc8-9767-bc220b9881fc"
        },
        "item": {
          "id": "78a3f730-c0c2-4e15-8e5c-53a644aaf5b6",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "6610b872-d7d4-4b9e-b382-9d6caacfc2fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba6886ae-053a-4570-b7b6-6eedc8aaf1f9",
        "cursor": {
          "ref": "002db0fc-0f40-4154-9cb8-5bd0a9122188",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "9c64d24e-19a1-4872-af1f-f86eabc7f8eb"
        },
        "item": {
          "id": "ba6886ae-053a-4570-b7b6-6eedc8aaf1f9",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "cdcdfc3b-7f82-422f-878a-e9bfb4f6d808",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "673cf11f-0f36-49ec-afb7-e96dfd2ad2e3",
        "cursor": {
          "ref": "86f9b2e1-71dd-4a35-b45b-12adcc1421d4",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "341ab0c6-3b19-4f42-bb41-44728913febc"
        },
        "item": {
          "id": "673cf11f-0f36-49ec-afb7-e96dfd2ad2e3",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "d47853f4-e4e7-473c-909a-e0cd4d10f95e",
          "status": "Created",
          "code": 201,
          "responseTime": 722,
          "responseSize": 724
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "0ae076f4-dc3c-452c-8fa5-bf4520752769",
        "cursor": {
          "ref": "5774af39-1d35-483e-a3b0-7c18a3cc1354",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "4110678b-99c8-4fcd-98f0-a0d4d7d38456"
        },
        "item": {
          "id": "0ae076f4-dc3c-452c-8fa5-bf4520752769",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "02d16a37-2a16-4bfa-ab14-6173ddd1e2fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79ccc196-435c-41a7-b264-484d7a8d9dc7",
        "cursor": {
          "ref": "a094c334-5b1e-456f-8ca1-46647ddcd946",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "a9b37f69-4b4d-448c-8bfa-4cfe899d3704"
        },
        "item": {
          "id": "79ccc196-435c-41a7-b264-484d7a8d9dc7",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "273a8162-dfaa-4107-8a03-c81f9eede439",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca4fb7d7-ade3-44e7-8a22-9b42a015781a",
        "cursor": {
          "ref": "60d6bc44-1804-4943-bc3c-aac6fda62c6f",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "fb4ddf5b-0cff-4372-8ae6-d64d614a5461"
        },
        "item": {
          "id": "ca4fb7d7-ade3-44e7-8a22-9b42a015781a",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "2c24a2ac-e7fd-4de5-a0d9-7f4c26a57d1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "292d8593-59f4-4201-93d4-1f826664bdce",
        "cursor": {
          "ref": "0e643b88-d798-43bd-bc0f-e637738e963b",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "5d690d09-5be6-4ad7-9423-549754782894"
        },
        "item": {
          "id": "292d8593-59f4-4201-93d4-1f826664bdce",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "1355794e-aa9c-4d3b-b685-613766a73881",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5205a14e-a92b-497c-934c-a987437d0ae8",
        "cursor": {
          "ref": "b3825977-098b-459b-9a27-0e41948a2055",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "a0ff632f-e66c-47b4-bc20-cc564023811f"
        },
        "item": {
          "id": "5205a14e-a92b-497c-934c-a987437d0ae8",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "225d1b05-e663-4f91-9bd0-26e9fa10a7c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94bc11c6-b6b4-4d13-bbb6-da3fe0b2d83f",
        "cursor": {
          "ref": "26a1ae14-a10f-446f-bdf7-60cd600f15aa",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "84299dec-1654-4922-9d44-2ed6ef16081b"
        },
        "item": {
          "id": "94bc11c6-b6b4-4d13-bbb6-da3fe0b2d83f",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "c6a07c22-e641-40ff-896b-58c8f910ff3c",
          "status": "Created",
          "code": 201,
          "responseTime": 733,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "361d459c-897d-4732-b775-25c8264d1d90",
        "cursor": {
          "ref": "c24ef5f6-39c0-46cd-9e90-7fbe7a803040",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "8a96d7c7-058f-46cf-be56-b0630750deb2"
        },
        "item": {
          "id": "361d459c-897d-4732-b775-25c8264d1d90",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "1cdfbfd0-fa61-4858-8807-654d2efa82be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a079497e-605a-4dbc-a496-9ebf432896de",
        "cursor": {
          "ref": "70ffd721-b88e-4509-9f62-d5735e464725",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "bbaf369b-f5d9-4097-9875-7a95f1ba2f07"
        },
        "item": {
          "id": "a079497e-605a-4dbc-a496-9ebf432896de",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "a7aaf767-9a6e-4507-b63d-b4421605eb4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2469c73c-3239-4d32-b0b1-9594fef1a652",
        "cursor": {
          "ref": "2156188f-9530-4c2d-bd2b-ae11aa3e0c0c",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "47cbd99f-4322-45c3-994d-276472ca1881"
        },
        "item": {
          "id": "2469c73c-3239-4d32-b0b1-9594fef1a652",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "dfa6291d-91fc-4ad8-8f46-7a7252e0e8f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d35ef8c5-d3c1-4437-b25f-cdbe8931aa73",
        "cursor": {
          "ref": "5f8ae4a7-22ad-48fe-a15a-09ed88f6799a",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "18799f54-e08f-48d1-a19e-2bd73e14a369"
        },
        "item": {
          "id": "d35ef8c5-d3c1-4437-b25f-cdbe8931aa73",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "13b16771-f9bc-4114-b52b-0d6f1a9b3690",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52a1b9ee-6199-40a8-8f87-a4af9720a2dc",
        "cursor": {
          "ref": "d076afc8-ecb3-44be-b1f7-1a4c4dcabc63",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "58caa4fe-3d2f-49f0-8f02-f54396c30607"
        },
        "item": {
          "id": "52a1b9ee-6199-40a8-8f87-a4af9720a2dc",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "60f7cf41-e319-4986-9e59-f6b239c84fe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9437141-c970-4a12-ab0d-ee335766d391",
        "cursor": {
          "ref": "fb550341-2113-4480-8b76-26709c053d21",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "3ed80a80-1167-4067-b481-5cf9e5e5fe78"
        },
        "item": {
          "id": "e9437141-c970-4a12-ab0d-ee335766d391",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "e2f27eb8-96c3-4aac-9c17-c86ff579407c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "892a95f4-0f36-41c2-b1e9-b214a3e8e7d8",
        "cursor": {
          "ref": "c9e206ff-5b17-46ca-9932-ef7bb2665282",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "15b181bc-97a5-4fc9-beaf-1538ccf2ab9c"
        },
        "item": {
          "id": "892a95f4-0f36-41c2-b1e9-b214a3e8e7d8",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "e83d5d91-39ee-45a1-a65b-9cff0499a7e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "309a7cbc-26bf-4a0f-8461-23ad6e03632e",
        "cursor": {
          "ref": "84b78097-0c02-46c5-b934-5b189cc8e402",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "961b1a8c-d093-4f0d-aa88-2613b54cd175"
        },
        "item": {
          "id": "309a7cbc-26bf-4a0f-8461-23ad6e03632e",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "78efabbe-b865-4259-be49-9d24e08bf182",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 460,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "368e13c6-a5a0-4e8a-9c90-d91decfbb9e3",
        "cursor": {
          "ref": "8019fb1c-21db-40f9-866e-3b0a70afef04",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "e8d800ac-56d1-403a-ba4e-40d6534c8263"
        },
        "item": {
          "id": "368e13c6-a5a0-4e8a-9c90-d91decfbb9e3",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "3988c7f2-2762-4cde-a9b1-55414c1ac94f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "0d6fc31e-a045-49f5-a62c-0748ecbf8e82",
        "cursor": {
          "ref": "c3d9fc2d-ad9d-4800-adf7-39003c9b2a8c",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "0899c700-afc5-4fcb-9816-f8e8d0a9e539"
        },
        "item": {
          "id": "0d6fc31e-a045-49f5-a62c-0748ecbf8e82",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "0bd0e04c-efb6-48e5-a6e7-a0bee738e48f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "f2cbec06-7fe5-4053-a5db-909d8b7f506c",
        "cursor": {
          "ref": "cd552868-9c41-4e8d-8547-797df7d1c892",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "69cc0948-8b66-4ddc-b176-ace46ba4b618"
        },
        "item": {
          "id": "f2cbec06-7fe5-4053-a5db-909d8b7f506c",
          "name": "credentials_issue"
        },
        "response": {
          "id": "6abd71a2-64c8-45c2-9f3d-4e9400493678",
          "status": "Created",
          "code": 201,
          "responseTime": 713,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "39b5618e-6eab-4db8-80fe-c9564766188e",
        "cursor": {
          "ref": "e7e14898-437d-402a-938e-3759c24133e7",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "5d8f5efd-1bbc-4119-925b-24a9fb9c5876"
        },
        "item": {
          "id": "39b5618e-6eab-4db8-80fe-c9564766188e",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "e66ab7a8-3e49-4e75-91e8-69af8907ea7c",
          "status": "Created",
          "code": 201,
          "responseTime": 715,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd1a6323-5b46-438c-bd1d-66c36c8b19a3",
        "cursor": {
          "ref": "5718049c-9d4e-4118-b590-0f7321066488",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "db2c38d3-4b1d-4c52-a2b2-e54700e2bbc8"
        },
        "item": {
          "id": "cd1a6323-5b46-438c-bd1d-66c36c8b19a3",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "4a3b7d11-1f63-478a-8458-b739aec6399f",
          "status": "Created",
          "code": 201,
          "responseTime": 757,
          "responseSize": 747
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f26b42d-cfbc-4db9-93c7-678355940bae",
        "cursor": {
          "ref": "910c201d-1e6f-4c50-a8dc-7a28a9ba7440",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "8275f393-af14-4b50-8332-692f1f258a1f"
        },
        "item": {
          "id": "3f26b42d-cfbc-4db9-93c7-678355940bae",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "5717a1d2-38fb-459d-9066-327b0d23ad89",
          "status": "Created",
          "code": 201,
          "responseTime": 703,
          "responseSize": 715
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "14c38b29-ee04-4b80-bef4-2fb8c586d174",
        "cursor": {
          "ref": "cef27cc3-6e08-4684-b475-6e8151f84261",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "d4770da5-635b-4b4e-83f5-30e7d56a6bc3"
        },
        "item": {
          "id": "14c38b29-ee04-4b80-bef4-2fb8c586d174",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "f27cb589-abae-42fa-a350-d4368466641c",
          "status": "Created",
          "code": 201,
          "responseTime": 724,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2ab0af5-1dc9-4671-a714-e1c92a14be47",
        "cursor": {
          "ref": "0e2a5e48-aefa-4c9c-9429-be9b1a06397d",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "cc889587-a30f-45e7-9dd1-f53bba43a57d"
        },
        "item": {
          "id": "a2ab0af5-1dc9-4671-a714-e1c92a14be47",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "84f17b09-5650-4bff-a838-fbdf814e79f2",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "a2ab0af5-1dc9-4671-a714-e1c92a14be47",
        "cursor": {
          "ref": "0e2a5e48-aefa-4c9c-9429-be9b1a06397d",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "cc889587-a30f-45e7-9dd1-f53bba43a57d"
        },
        "item": {
          "id": "a2ab0af5-1dc9-4671-a714-e1c92a14be47",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "84f17b09-5650-4bff-a838-fbdf814e79f2",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "e5667fdd-769a-42a8-a5cb-c43b4bd3a24c",
        "cursor": {
          "ref": "29c662cf-40ee-4e72-8098-5072dd893b66",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "2df20c77-6136-46de-a8bc-a7bc0973715e"
        },
        "item": {
          "id": "e5667fdd-769a-42a8-a5cb-c43b4bd3a24c",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "b3c5a2ed-afac-4b64-90a2-32d384a797d5",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "faf4543f-a455-44cb-b4ed-c5f93d14df79",
        "cursor": {
          "ref": "48864d90-b2d6-4c76-8329-e496f9cb08b0",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "26a4f138-0e57-4fba-bf64-27cc4c478c59"
        },
        "item": {
          "id": "faf4543f-a455-44cb-b4ed-c5f93d14df79",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "d1e7c872-2cb7-4466-b7d2-f52a610bc891",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "4f51d08a-2de1-4cbb-8efb-e95418521965",
        "cursor": {
          "ref": "c8f622b3-8e75-4b60-a468-af198b4e8ed8",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "1fb4cf7c-1a45-4c2b-ad85-3f96e8651dd5"
        },
        "item": {
          "id": "4f51d08a-2de1-4cbb-8efb-e95418521965",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "b5e536cc-eb6a-4280-a54b-46fb70558218",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "6a276b21-e0a7-4194-bba3-55b312733707",
        "cursor": {
          "ref": "005bc7c4-6a4d-4548-861a-21e6d4cb9aac",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "878fa8ef-968d-455a-9c1d-0da7cb882fc5"
        },
        "item": {
          "id": "6a276b21-e0a7-4194-bba3-55b312733707",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "1b6b6bd8-d8b0-4a08-ab40-3bf239d85557",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "08151b57-89b6-471d-8e5b-35cb7bc06b74",
        "cursor": {
          "ref": "6ac106d2-948f-4729-b1d0-64afd3a3c97d",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "08dfbf52-bd95-40de-85a1-82fbd0b3e610"
        },
        "item": {
          "id": "08151b57-89b6-471d-8e5b-35cb7bc06b74",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e7039af3-ccce-434b-af09-78c904dec4fb",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "ee8bb3a0-b58b-4cd1-ab39-efaa1cb5a39e",
        "cursor": {
          "ref": "7ba6b9ac-23bd-4804-acea-95207b19f417",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "7fd5439d-87b4-4a93-ab81-91c4b1448060"
        },
        "item": {
          "id": "ee8bb3a0-b58b-4cd1-ab39-efaa1cb5a39e",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "e18f8348-3c7f-4780-90f9-d600ec22e417",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "9153db6b-fda9-416d-b825-df8df09a6dc5",
        "cursor": {
          "ref": "62cac14e-5cd1-4b92-b07f-f57a1d9c4eda",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "d1a8d46a-4d30-43a6-830f-be2cea67439b"
        },
        "item": {
          "id": "9153db6b-fda9-416d-b825-df8df09a6dc5",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "d1ce8abe-bae2-49a5-b5f7-06def3132b65",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "97ab510a-cbb7-409a-b912-fc746044f509",
        "cursor": {
          "ref": "0b8306a0-5cfa-4840-a811-f08b93f04dfa",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "daecc493-0a07-4c3e-9b5f-d591be2f3b24"
        },
        "item": {
          "id": "97ab510a-cbb7-409a-b912-fc746044f509",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f8830ad9-36d6-4f4f-872c-c1106ec7a0f7",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "3fac6a76-ce33-43fd-a0e8-c90797089223",
        "cursor": {
          "ref": "b4905b24-cbc8-4e46-821a-cbc1cade5519",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "7054b0cc-042c-4123-8bc9-9ee9847000ac"
        },
        "item": {
          "id": "3fac6a76-ce33-43fd-a0e8-c90797089223",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "27e6a71c-76b9-4b3f-b52a-2f58ef9e3c4a",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "4552c989-562d-457a-bebb-12d4106faf92",
        "cursor": {
          "ref": "1150deb9-9d3b-40a5-ad9e-0f75c9b3eb72",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "610e1542-c1e2-4ceb-89ea-93bed2a95d96"
        },
        "item": {
          "id": "4552c989-562d-457a-bebb-12d4106faf92",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "30481d82-6f11-4517-a499-d8438e40847d",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "ebcce61f-e15a-49ad-be2b-82e0150bf2e4",
        "cursor": {
          "ref": "4e3b1a1f-9e8f-4a82-85d3-c518473efed7",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "425cf3e5-8bdf-4626-ae6c-6cddd0a5c21a"
        },
        "item": {
          "id": "ebcce61f-e15a-49ad-be2b-82e0150bf2e4",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c02d966f-0037-417b-8b66-779f49b0d7c1",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "b0362b81-1db3-495d-b8f9-6f83de00bf5e",
        "cursor": {
          "ref": "f5159d28-52aa-4bc4-a43d-e48c7e938732",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "c04c3d4c-4c8c-46da-8571-d63166abe08e"
        },
        "item": {
          "id": "b0362b81-1db3-495d-b8f9-6f83de00bf5e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "c1b2fd75-4d1d-4dec-a584-8bdfcfe530e7",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "fda58a4d-0dc5-4a1d-83b4-bef4b1f9778c",
        "cursor": {
          "ref": "df7d5cb6-0b79-4335-a06a-e77a11da76c0",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "514f5018-7d8a-4463-8492-b8503b8ef1a5"
        },
        "item": {
          "id": "fda58a4d-0dc5-4a1d-83b4-bef4b1f9778c",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "98c37077-6751-4861-8511-38675ab6f371",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "e3fed2a6-2d44-49b1-a8e8-564363d12f42",
        "cursor": {
          "ref": "ee6e98bd-f2a0-4036-a64c-a069146c0056",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "3bdd47b6-6836-4818-a868-e84f3719ae88"
        },
        "item": {
          "id": "e3fed2a6-2d44-49b1-a8e8-564363d12f42",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "c99f351f-c8d9-4444-aac6-cf8547c09c45",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "86c69617-8153-4bbf-9b9a-f95b40efb0a1",
        "cursor": {
          "ref": "38031821-6cc4-40c9-acb8-d86799e841e1",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "dd402fec-f007-4563-96bf-8abc98a27579"
        },
        "item": {
          "id": "86c69617-8153-4bbf-9b9a-f95b40efb0a1",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "9c3e3479-6e0a-4ac8-a828-04b203290f9e",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "5909a4c1-d242-40fa-af26-fd65268932f9",
        "cursor": {
          "ref": "c0a05bdf-35b8-4e5b-89b2-6b56e31b8628",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "7bdc4e6a-d275-4b9e-999b-c22c6ae30b33"
        },
        "item": {
          "id": "5909a4c1-d242-40fa-af26-fd65268932f9",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "2c0ee336-96d0-4549-934c-b00318fb03b2",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "1ea72e06-b04e-43d5-8f6f-72e5248c2f72",
        "cursor": {
          "ref": "ca315b8a-51dc-429b-9343-a2ea2c182205",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "c9c6c8fd-5556-4705-8530-63528bbad5ff"
        },
        "item": {
          "id": "1ea72e06-b04e-43d5-8f6f-72e5248c2f72",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "8e0cb569-225b-4ed3-bfda-85a778d9f137",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "94f8cedf-7ae7-44e5-9556-7ee8aedcaa38",
        "cursor": {
          "ref": "26ba0c30-22d8-4848-aed2-ede1123c3cf7",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "a70e730d-92d0-4d12-9646-8c519dae4bd3"
        },
        "item": {
          "id": "94f8cedf-7ae7-44e5-9556-7ee8aedcaa38",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "8bdd36f5-1e5b-47eb-9c44-bdd232aec3d3",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "e28ed265-b8f3-4767-91c1-b551f1fdc1a4",
        "cursor": {
          "ref": "d176b3bf-7a82-49d3-802a-0dc2fc072248",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "4d6d0c8f-dd75-4c5c-a75c-d76f58f4d76a"
        },
        "item": {
          "id": "e28ed265-b8f3-4767-91c1-b551f1fdc1a4",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "9d816efb-79dc-4367-b685-8eeeae910016",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "9c1736e8-81bd-4c17-a294-35da09b509b6",
        "cursor": {
          "ref": "338b5e3b-efd3-4f42-b84b-b4b487390f46",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "783a9b91-9ba9-4de1-a7c7-16f25233bc27"
        },
        "item": {
          "id": "9c1736e8-81bd-4c17-a294-35da09b509b6",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "eca300c2-d15d-4623-9f8d-317c8717db16",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "68daaa3a-4218-4efd-b28c-496ac0f24052",
        "cursor": {
          "ref": "f53287a8-de36-4f00-87e9-703aa3a48d72",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "18aab1d6-681c-48c9-bbff-5f98ec355e97"
        },
        "item": {
          "id": "68daaa3a-4218-4efd-b28c-496ac0f24052",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "3beab822-8d10-44d1-8e56-2c91db723064",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "0f557c45-ce8e-418c-bb49-19a8f7c5b942",
        "cursor": {
          "ref": "31853909-ad59-4045-b8d7-9b4e1fe94e9c",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "e71b0741-2eb5-4f21-94c5-d3173ed22d66"
        },
        "item": {
          "id": "0f557c45-ce8e-418c-bb49-19a8f7c5b942",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b70e4a8a-8cd6-44ed-8c7c-9b0323fec1af",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "71ad1581-b25a-467d-a5da-021952452698",
        "cursor": {
          "ref": "a0a27705-0065-4e31-884f-9072b1f0ec3b",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "e70945f2-3c9e-46bd-8c1f-291bc2c94be8"
        },
        "item": {
          "id": "71ad1581-b25a-467d-a5da-021952452698",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "2f9cb212-da2b-41c0-8d50-f4d05261dc36",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "5614983b-2eb7-4e19-800e-657ddbaec7ce",
        "cursor": {
          "ref": "96ab98a3-8d6c-4f26-89a1-10bd97b53cf8",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "0625a77a-6551-43f5-9739-922ef75dcf4f"
        },
        "item": {
          "id": "5614983b-2eb7-4e19-800e-657ddbaec7ce",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "e214f56c-e0b5-43b1-bf83-70835d37ce1b",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "611a4f46-ef40-4e55-8591-5b95abe901a1",
        "cursor": {
          "ref": "3e2f991d-26db-4949-b8e1-8f96251effb6",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "c27c3113-9812-4371-88c9-1f82474c3bde"
        },
        "item": {
          "id": "611a4f46-ef40-4e55-8591-5b95abe901a1",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "df632af9-b363-402d-adca-631573231e3d",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "ea43c445-cfce-4515-b7e8-41a2168fce45",
        "cursor": {
          "ref": "51290c26-9a82-4541-bd20-7eb14670e149",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "77a57200-9359-4bf0-a558-ee23e9d71889"
        },
        "item": {
          "id": "ea43c445-cfce-4515-b7e8-41a2168fce45",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "adcc811b-0e67-4975-84f7-c6dfeb3157b2",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "47966952-8218-4fc0-bdb6-b18d55e8b34b",
        "cursor": {
          "ref": "0a736a44-0676-4eca-8375-378585857333",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "3aab4439-6449-4a98-ae8b-194da1eab788"
        },
        "item": {
          "id": "47966952-8218-4fc0-bdb6-b18d55e8b34b",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "19a4199f-a355-48f7-9d0e-04ce14876f5b",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "2d0c64c4-adc5-4c7a-b5f5-fe8437841c00",
        "cursor": {
          "ref": "4663ca63-a776-4ea7-b52b-c83229520be7",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "3ad490c6-d900-4a2d-80f6-263842d616fa"
        },
        "item": {
          "id": "2d0c64c4-adc5-4c7a-b5f5-fe8437841c00",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "3dca21e7-a341-4344-b205-a64c0dbb24c7",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "644c3338-202a-4a47-b8eb-97a989b5693e",
        "cursor": {
          "ref": "cea55e96-6d26-494e-93ff-1b89cb967e37",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "f14a3d18-cc87-4da1-b127-c2831a5e36ad"
        },
        "item": {
          "id": "644c3338-202a-4a47-b8eb-97a989b5693e",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "daeeec5c-6526-4b88-a964-7c84061f1727",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "f6a512dd-286b-4c9c-8509-92182e581903",
        "cursor": {
          "ref": "23407fd3-c954-430b-86ce-4893b8a9d505",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "f6e51cc4-9157-498a-b2f9-2fc53291803e"
        },
        "item": {
          "id": "f6a512dd-286b-4c9c-8509-92182e581903",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "1e0cef24-ce16-498f-910e-02f96bce6a85",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "21b25c72-0ad4-4567-9f57-9a73bb4879dd",
        "cursor": {
          "ref": "b169f61b-b8ae-4b90-8e4e-48ea2b5cd0b6",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "a4f283cd-3c1c-4eae-a12f-dccd2f5d416e"
        },
        "item": {
          "id": "21b25c72-0ad4-4567-9f57-9a73bb4879dd",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "6fb8ac5f-4856-44d7-a1e7-1390352c705a",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "af6bf5d7-42a5-40fd-b2fa-fb6e1bac546e",
        "cursor": {
          "ref": "5451c799-ba6f-412b-9bf3-6fcaa66a5e91",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "0191b501-9a34-4543-8288-39c3e07c9cdf"
        },
        "item": {
          "id": "af6bf5d7-42a5-40fd-b2fa-fb6e1bac546e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "ba379725-af9a-4004-beea-3b566b1e20db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03b073c6-17a9-4d2c-845c-82b9465c2601",
        "cursor": {
          "ref": "e4ac0c35-a6e8-462f-9a5a-98b3401f2aaf",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "6ff23b19-df7f-4870-8a5c-4d068845c793"
        },
        "item": {
          "id": "03b073c6-17a9-4d2c-845c-82b9465c2601",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "5894f68d-895d-4d09-8372-1f8f09b5e691",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 63,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed7c32e5-02cf-4934-b958-464042db385d",
        "cursor": {
          "ref": "76dfa2a8-b4b1-44f6-bdd0-c61b0412f660",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "a8449246-eb62-4eda-9bb5-4916b997194f"
        },
        "item": {
          "id": "ed7c32e5-02cf-4934-b958-464042db385d",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "d8fa5e69-a4ea-4634-bd3b-6f97b145b315",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed7c32e5-02cf-4934-b958-464042db385d",
        "cursor": {
          "ref": "76dfa2a8-b4b1-44f6-bdd0-c61b0412f660",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "a8449246-eb62-4eda-9bb5-4916b997194f"
        },
        "item": {
          "id": "ed7c32e5-02cf-4934-b958-464042db385d",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "d8fa5e69-a4ea-4634-bd3b-6f97b145b315",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4da90b7c-f796-480d-b571-1649785e2777",
        "cursor": {
          "ref": "47b7ef40-2d78-4e99-b173-f961287c79c6",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "260b8a41-53c5-44d2-a576-f9eeb2834594"
        },
        "item": {
          "id": "4da90b7c-f796-480d-b571-1649785e2777",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "a516202c-186e-48ae-a988-5973f7361ea4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55dd9d96-7f0a-4af9-8577-3f10faa5b5e7",
        "cursor": {
          "ref": "d373474a-e30e-49b2-882a-027bd3f36ba6",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "be309888-795d-4dcf-9f34-515c8dbe3f38"
        },
        "item": {
          "id": "55dd9d96-7f0a-4af9-8577-3f10faa5b5e7",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "9d61c137-5ebe-47e3-a2b7-7b9cb246911a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dad1681-b34e-4b75-91f8-c37d72ef3d5a",
        "cursor": {
          "ref": "4654074c-ae48-409d-9ca7-e356ae2ea58b",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "1b385eb0-2743-44fb-9857-1f6342a4fe67"
        },
        "item": {
          "id": "4dad1681-b34e-4b75-91f8-c37d72ef3d5a",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "7419897f-b327-4d87-ade4-512b91d2e06f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b50ed8c0-703e-432e-b35e-63b89650296e",
        "cursor": {
          "ref": "9d7e3345-83a2-4b26-adb8-1ba51ccef2da",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "f0c1c856-7833-4c58-bb0b-4bc7242cba0a"
        },
        "item": {
          "id": "b50ed8c0-703e-432e-b35e-63b89650296e",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "2d506cf4-b2ce-4780-8d06-09ac6d949775",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2be66aa2-361e-4e59-ada9-d0de46d4efab",
        "cursor": {
          "ref": "e92d10ec-4895-4cea-b5ac-d4ee70fa7309",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "ded6d21c-5b4e-4cc2-b721-829a4e0e7aac"
        },
        "item": {
          "id": "2be66aa2-361e-4e59-ada9-d0de46d4efab",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "432cb2a8-83dd-46ae-a743-64655b699e29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "458c5609-052f-47dc-8f5e-24a1b6c6ce93",
        "cursor": {
          "ref": "3cf4b796-0900-4629-8c9e-3076f485ecf2",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "11688241-6fc6-4a7c-81cb-e8c0b1f7f9ba"
        },
        "item": {
          "id": "458c5609-052f-47dc-8f5e-24a1b6c6ce93",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "474d2008-2940-4682-8da1-df5bca0cd0f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 542,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbdc9e37-685c-4692-af88-128daa1ef3eb",
        "cursor": {
          "ref": "a11c66ff-5875-4cef-a574-dc6e771550aa",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "f902bd4b-0e09-458c-8148-0c1db67f4f23"
        },
        "item": {
          "id": "dbdc9e37-685c-4692-af88-128daa1ef3eb",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "71519b0d-ac58-47cd-aa1d-7827a2c2e375",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e0a3ca3-41a3-4cf8-a2a4-13c95c69993b",
        "cursor": {
          "ref": "360e0a63-d878-40b9-ae7e-8e2874b6f476",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "d2e81097-d392-45da-9c10-28e4ba005cc3"
        },
        "item": {
          "id": "2e0a3ca3-41a3-4cf8-a2a4-13c95c69993b",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "a496f94d-2825-4d6d-b4f8-6cc5e6000d56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f6f243e-c8a0-4dea-ba8d-acdfdea708e6",
        "cursor": {
          "ref": "1347bddf-e01f-4bc5-8386-4a42ea3a393b",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "94b36295-8835-440e-b150-22adfd3414f1"
        },
        "item": {
          "id": "2f6f243e-c8a0-4dea-ba8d-acdfdea708e6",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "7d8b8661-9d63-4ba5-a5cc-6ddeff3064ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2972d9cc-fee6-4f99-9c7c-1e8b0a7b924d",
        "cursor": {
          "ref": "e2c23807-95d1-4bed-baa3-dcf65bb99e10",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "46d37460-c24c-4281-929e-05235dd2fe53"
        },
        "item": {
          "id": "2972d9cc-fee6-4f99-9c7c-1e8b0a7b924d",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "b518f36d-62d4-4e0e-872c-a96e0f75e1f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6c6b1f8-3a2e-4a9c-9fd6-42121248b8e7",
        "cursor": {
          "ref": "3fe0148d-b84e-4123-8c20-e45d2442ba30",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "d92eb1da-f422-4ad8-915b-2284d9a5595c"
        },
        "item": {
          "id": "b6c6b1f8-3a2e-4a9c-9fd6-42121248b8e7",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "22979001-0624-4b61-b36b-f423ec683a9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c9536ec-1946-415c-9755-587c50919ad2",
        "cursor": {
          "ref": "4a4f1568-a7a9-45c2-8d50-062d540907ed",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "18ebdcaf-1eb6-4afd-814c-2d768a283f1e"
        },
        "item": {
          "id": "5c9536ec-1946-415c-9755-587c50919ad2",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "c26b59b6-3604-448d-8998-986cb9500633",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bf3cfd0-0615-45b6-b120-e3d7285f52de",
        "cursor": {
          "ref": "26439bce-8f78-4b01-909d-cc066bdd8ae0",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "73b5316c-5e06-4d32-8873-af4ebb62e30b"
        },
        "item": {
          "id": "9bf3cfd0-0615-45b6-b120-e3d7285f52de",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "a9dcb339-5c00-462a-8c0b-5177494352d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65588e1d-2ee9-41e3-93a4-dfda3c99fbb5",
        "cursor": {
          "ref": "57405f23-06b3-4077-9e00-535fa7fcf798",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "144dcf92-6390-4073-b504-9909e0682081"
        },
        "item": {
          "id": "65588e1d-2ee9-41e3-93a4-dfda3c99fbb5",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "d4e0723a-b1bc-406c-8c88-947508c393be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c89729e-4fc7-4d8d-a793-20165db64826",
        "cursor": {
          "ref": "b5076735-1512-4c2e-8167-726e86750237",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "d3de0a05-54fd-4ee2-bbc6-eeea2dbd6f0e"
        },
        "item": {
          "id": "0c89729e-4fc7-4d8d-a793-20165db64826",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "cb2fb744-eb60-4a4f-abcf-b259e427bca7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40e0021a-a194-431e-ab10-9c0b9dc8656b",
        "cursor": {
          "ref": "534b96b2-439e-4fb1-9395-784317d1e983",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "1f40f513-1f8e-4415-81a9-1c4526caa69b"
        },
        "item": {
          "id": "40e0021a-a194-431e-ab10-9c0b9dc8656b",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "c8e82ddc-1d62-4b7a-91e6-030a14d6db79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57f3c707-702d-478c-ae4b-f2229bbe0be6",
        "cursor": {
          "ref": "eb684753-a856-4fbc-a47a-000f3f38c5d3",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "12693b29-6e00-49be-a28a-b60ba96eee2b"
        },
        "item": {
          "id": "57f3c707-702d-478c-ae4b-f2229bbe0be6",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "1e575c5b-300f-4860-8c35-5a71ce4c7b62",
          "status": "OK",
          "code": 200,
          "responseTime": 727,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "a7817634-a1a5-4b05-a4b4-d9c9f0be85a9",
        "cursor": {
          "ref": "3a18ae9d-3381-4365-a7d9-266e49a0cf13",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "6bcdb317-724a-4f4d-bdd6-979248fa62fb"
        },
        "item": {
          "id": "a7817634-a1a5-4b05-a4b4-d9c9f0be85a9",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "2d1d85b8-7ca3-40ea-b75f-e95499913498",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 344,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "462d9332-f738-4c0d-9d0e-2d4fe51ead42",
        "cursor": {
          "ref": "f55f01ef-a46c-464c-b879-c7ff0b4cafa8",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "bdc3d8b2-156a-478f-be27-e3eb1a2df7e3"
        },
        "item": {
          "id": "462d9332-f738-4c0d-9d0e-2d4fe51ead42",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "e5345059-3a9e-4cd4-909d-f395a76e6278",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 336,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aee4403-d511-46dc-9f12-cc3b4d792ed9",
        "cursor": {
          "ref": "eabc6130-178b-4517-9c18-043c1f57a131",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "5fb2c306-e78b-4672-9be2-d8ded68e09fc"
        },
        "item": {
          "id": "9aee4403-d511-46dc-9f12-cc3b4d792ed9",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "6c246813-5bb0-4569-a6b9-2bc14fa3b2f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 324,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90906f19-d03d-45ad-bff5-f0459dc8b34e",
        "cursor": {
          "ref": "b5f236f6-6465-4eed-930d-184859a3e864",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "fb0d5fcf-ef17-43f9-b8e8-9f5646571d97"
        },
        "item": {
          "id": "90906f19-d03d-45ad-bff5-f0459dc8b34e",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "bacbc57d-346c-4beb-92b4-c3cd3dbd7e80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 332,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f80381be-a08b-4729-8eac-567058d74047",
        "cursor": {
          "ref": "d9afb5ff-bdda-4e04-9002-71b0dcc6863d",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "5f04828b-9063-4e13-957b-1d57c39d2cb0"
        },
        "item": {
          "id": "f80381be-a08b-4729-8eac-567058d74047",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "8eded33c-5e78-4062-ac3e-d5b9ee196478",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 330,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43f6824d-cc0c-4f23-ad53-b08878b5533f",
        "cursor": {
          "ref": "7d0f512c-cec6-49dd-9f15-8b408f946aeb",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "c25b7503-2e52-4b08-bf30-46bd25b54261"
        },
        "item": {
          "id": "43f6824d-cc0c-4f23-ad53-b08878b5533f",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "2900cc05-a7cf-4c90-b7ea-11489b38184a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 324,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf62fbee-d552-4418-ad41-75e9ea7831a3",
        "cursor": {
          "ref": "adf33a81-f312-43c1-bdea-1b73713f51cb",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "1014b351-2616-47e4-b7a4-61f352fd439b"
        },
        "item": {
          "id": "cf62fbee-d552-4418-ad41-75e9ea7831a3",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "fff4af4d-34d6-49f1-a081-758b79439b83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd7b8764-1032-44a4-bcde-aa7563a9c9ef",
        "cursor": {
          "ref": "27dc7145-2a4e-4a88-a74e-7bb2e5c45a38",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "285c9f51-263f-4c6b-810c-4a37a1c39942"
        },
        "item": {
          "id": "bd7b8764-1032-44a4-bcde-aa7563a9c9ef",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "fbb217d5-30ec-4a44-94af-e717a5d1b27e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f651f7a-c5f1-4487-8618-dbf64b43c37c",
        "cursor": {
          "ref": "00103eb7-2d98-474d-8303-2aec9a57020c",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "412a5c93-cd66-4bd8-844d-a0865e5861b6"
        },
        "item": {
          "id": "2f651f7a-c5f1-4487-8618-dbf64b43c37c",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "1c52e751-a37e-4aa4-9e7d-7ffdf3e313b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 313,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3529fe41-7925-43e8-aad6-6efcd46cce8e",
        "cursor": {
          "ref": "49771fcf-a192-416f-bb30-acb838554215",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "e036b81c-e6c5-4d47-8b78-1b5b7f99ca8a"
        },
        "item": {
          "id": "3529fe41-7925-43e8-aad6-6efcd46cce8e",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "38ddf7c9-93ed-49c1-8ae3-c15e3cb8df23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e27a7cb-c12c-441a-ae63-84fe24fa551b",
        "cursor": {
          "ref": "9ef0b298-ee6e-4bfa-9f11-af92f2c3ab4f",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "8ad8e3d6-225f-4306-b263-3d372c89c145"
        },
        "item": {
          "id": "1e27a7cb-c12c-441a-ae63-84fe24fa551b",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "7ab5c47b-762d-4cad-8830-062cfdcecd1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d094451-ceaf-46a4-a376-48bcb7084116",
        "cursor": {
          "ref": "697609c1-305c-4dfd-8822-f7b493e348c1",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "48576898-395d-4ffb-ace6-b47dbce6c5c4"
        },
        "item": {
          "id": "0d094451-ceaf-46a4-a376-48bcb7084116",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "4e0cbd8f-610b-4548-8a5d-dbe3f164239f",
          "status": "OK",
          "code": 200,
          "responseTime": 315,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "11b2627a-7099-48b3-8ace-59fd094b449f",
        "cursor": {
          "ref": "768363eb-d7d5-402c-b82f-ceb2d81b5f04",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "dc0b9421-9f9a-44c8-85b0-5a1429c8dd0f"
        },
        "item": {
          "id": "11b2627a-7099-48b3-8ace-59fd094b449f",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "00b1accc-0feb-485d-829f-f3f3bf08e20b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad60699a-df3a-4745-81cd-1682840fca60",
        "cursor": {
          "ref": "729e82bf-a7f8-494e-bc47-0d0095caab45",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "e7420be9-8b9f-43c1-a81c-0cc5a1280093"
        },
        "item": {
          "id": "ad60699a-df3a-4745-81cd-1682840fca60",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "8b0372a6-9910-44c2-b46e-838a35ad9e7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1258997f-4dbd-4e2b-8226-54360ff5043a",
        "cursor": {
          "ref": "6d1e0b71-2dc6-44b4-ab13-db2fc9fcf3fa",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "c04eacb0-1052-492b-bc04-27360ed532f3"
        },
        "item": {
          "id": "1258997f-4dbd-4e2b-8226-54360ff5043a",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "56ff0461-819a-4016-a600-210029e9e4dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c19d29c-add3-47cd-9693-a5489e2d9204",
        "cursor": {
          "ref": "30fba514-70bb-4d72-b0f6-23277249b983",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "7fd4ad47-1570-434c-9eea-6686d16564e9"
        },
        "item": {
          "id": "6c19d29c-add3-47cd-9693-a5489e2d9204",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "7e40d2c0-4b50-4e8f-976a-94bfa3d3e1d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 287,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be29d61a-4aeb-4a91-bcc9-fe36cea6e214",
        "cursor": {
          "ref": "373c0caf-2f02-4a6a-a367-d4648bbbb1d1",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "fa45d4eb-ec75-459c-a6a2-cbd45d4afacb"
        },
        "item": {
          "id": "be29d61a-4aeb-4a91-bcc9-fe36cea6e214",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "754097ea-1971-4fa1-8c8c-6211e7096364",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "666e888d-6d8d-4f54-8832-c977f481bcd3",
        "cursor": {
          "ref": "9df94823-414b-4d75-8177-258977b3a35b",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "fb3f9162-9ff2-4a0f-9cb6-a7dc0cb057a3"
        },
        "item": {
          "id": "666e888d-6d8d-4f54-8832-c977f481bcd3",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "32c8d54b-9e67-4de8-b908-796cf42a2704",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 350,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5da9fc0-9718-4866-9663-651e684c4eff",
        "cursor": {
          "ref": "f59a39fb-53f4-42ed-a7c7-5c232acbace0",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "5c5e1e80-53d3-4dcf-88a7-9ba99afa564b"
        },
        "item": {
          "id": "c5da9fc0-9718-4866-9663-651e684c4eff",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "387db11b-c182-4772-81aa-c87d3ee99d1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 347,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22d2a029-a16b-495c-9354-8e62a9d2663b",
        "cursor": {
          "ref": "e21e149b-7c08-4d41-88fb-58138ab3c116",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "197f152e-4aa7-4bcb-b869-f4819fcf2fea"
        },
        "item": {
          "id": "22d2a029-a16b-495c-9354-8e62a9d2663b",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "0a177ee9-7ceb-475e-b797-84fa7b463d4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 340,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8cce63e-184b-4705-944d-c49db45e9118",
        "cursor": {
          "ref": "1291f47d-4ef8-4d9a-befb-48eb98035446",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "afa66f17-2f17-46e2-a2c8-833492f05a0d"
        },
        "item": {
          "id": "b8cce63e-184b-4705-944d-c49db45e9118",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "675f5682-4144-4825-9f38-f774efa0a90e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 345,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff2c03f2-a278-4c25-bdb0-28ba58a3ffed",
        "cursor": {
          "ref": "78ae34cd-3574-4212-9858-38d7e1368a72",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "f0a49b3b-8572-444d-8199-3a0cf50ac220"
        },
        "item": {
          "id": "ff2c03f2-a278-4c25-bdb0-28ba58a3ffed",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "ea63dc68-317b-478f-99b2-dcdc84caca45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 345,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64820919-3d62-475e-941d-22fe2d7aec8e",
        "cursor": {
          "ref": "2a01a476-406c-4b04-9b6b-1a3252d50513",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "c68bfaf4-79bf-4e3c-9b30-8bab6e297b79"
        },
        "item": {
          "id": "64820919-3d62-475e-941d-22fe2d7aec8e",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "f3c04e46-f1c8-4737-b2b0-381d104c9cb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 338,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a291690c-fe59-4584-8e5d-fefbf052c5b1",
        "cursor": {
          "ref": "1e2a5e5a-e00f-429d-8665-89406dc392a2",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "f687998f-4ad2-47e5-b644-c012a4ce91ab"
        },
        "item": {
          "id": "a291690c-fe59-4584-8e5d-fefbf052c5b1",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "b019ec4d-d87c-4d1d-9d06-dddda1c74afd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 331,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5028f58f-42f9-4c4e-9971-554bceb548a6",
        "cursor": {
          "ref": "5a64d5b2-329d-41ea-92d3-45adb037e812",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "89fc3c05-969a-4351-8deb-689e55b5d801"
        },
        "item": {
          "id": "5028f58f-42f9-4c4e-9971-554bceb548a6",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "9a631338-fb8c-4765-a5d6-50cfe9d30cdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 325,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65e750da-d1e2-43c4-a0c6-3775bedc8226",
        "cursor": {
          "ref": "cc05bc34-e2c2-4166-a80a-a1c3e8b2331a",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "47f48059-ee6a-414a-a528-1b5ccec241ff"
        },
        "item": {
          "id": "65e750da-d1e2-43c4-a0c6-3775bedc8226",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "d126233e-1c35-4a68-a4bf-f4667a26950e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 333,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "051f12d2-b301-461c-a37a-22da04faa382",
        "cursor": {
          "ref": "fbc15bd5-8103-4b83-99c7-5e1c575335c1",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "323b908c-1339-4b72-97ef-e3ebe94d9711"
        },
        "item": {
          "id": "051f12d2-b301-461c-a37a-22da04faa382",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "a88727b6-941a-486c-bf0a-24a2863ce6a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 331,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8758faea-e6d8-4632-840e-88310405da89",
        "cursor": {
          "ref": "db4e1869-c08b-42aa-9c3a-6b4b15700c42",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "9ccd2f75-a3ed-4354-8c7a-99fcab7fe780"
        },
        "item": {
          "id": "8758faea-e6d8-4632-840e-88310405da89",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "c3466e7f-cb4c-4888-9cee-2e657f1e2205",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 324,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20fbcebe-3e2c-43f9-ab35-046aafa856fb",
        "cursor": {
          "ref": "7c66dd68-8f01-420d-830a-8449eaebbc44",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "d4a59e2c-23c3-4e04-8ee7-9aeb7acc2d17"
        },
        "item": {
          "id": "20fbcebe-3e2c-43f9-ab35-046aafa856fb",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "370020de-998f-4929-a289-0d267b9787aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 329,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f593a642-a09e-43eb-9b4a-4d644c0c16c7",
        "cursor": {
          "ref": "97e42666-66b4-4213-9699-12605378adcd",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "fd68072b-1d23-4925-860a-8477415f778a"
        },
        "item": {
          "id": "f593a642-a09e-43eb-9b4a-4d644c0c16c7",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "b5264d75-93b9-4c26-8df5-9d8439079388",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 457,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d02161b4-7f2c-46ab-b75a-31ccefa81984",
        "cursor": {
          "ref": "d9fafc56-6472-4fe9-9ec7-3985b92dc2cf",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "543411c5-2d46-436f-b440-c661245064a1"
        },
        "item": {
          "id": "d02161b4-7f2c-46ab-b75a-31ccefa81984",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "39abbdd6-f32b-4c5d-9de4-91f9776c808a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 328,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b96310f-183b-411a-8e77-dbf0c7c8feec",
        "cursor": {
          "ref": "1c4a64a1-f209-4f3f-a3de-159903ad4031",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "4426fccb-e547-4fb0-a86c-8e84857216ab"
        },
        "item": {
          "id": "3b96310f-183b-411a-8e77-dbf0c7c8feec",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "f102ce8d-c90b-4b1e-9416-c9c7a5810406",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 491,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "832e93b7-090d-47ae-925b-d9a7785f0957",
        "cursor": {
          "ref": "c044c939-cb27-402d-a8bf-2ceacc4d57c0",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "0efd2826-910d-4f88-91ef-72284a625839"
        },
        "item": {
          "id": "832e93b7-090d-47ae-925b-d9a7785f0957",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "a5b41c15-2777-4ad8-bf43-c5cfa62428a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 322,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59d0d163-6ede-42c3-9caa-8f4b41bf27dc",
        "cursor": {
          "ref": "9b82158c-d0b2-4d8f-aa63-21ee4efbf10a",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "e3581143-e60e-44fb-8b38-da46c1eec4ea"
        },
        "item": {
          "id": "59d0d163-6ede-42c3-9caa-8f4b41bf27dc",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "87e2043d-7cb8-46e1-bdf0-368b1f52d3b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 335,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b8efe56-4ccb-432f-a329-2567ce114044",
        "cursor": {
          "ref": "066ee22b-e5fa-4fe6-bc8d-1faa2e57e217",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "ec0083c0-8e14-4621-b5d7-137c4544995c"
        },
        "item": {
          "id": "2b8efe56-4ccb-432f-a329-2567ce114044",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "72199da2-63fa-4f73-b91e-721affb94a84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 364,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c537a73e-7c23-436f-9cbd-680ca4728876",
        "cursor": {
          "ref": "70bcb439-b308-4c09-b380-118bc3b57731",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "60cc7e6a-ef8b-4cb9-adeb-aadbfa581f94"
        },
        "item": {
          "id": "c537a73e-7c23-436f-9cbd-680ca4728876",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "ecd46e03-ee23-4671-b646-0a445d4985ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 323,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e13900e3-7385-4db2-95e5-dadcb4fbdf9d",
        "cursor": {
          "ref": "86c17f0e-a41c-45a0-98d3-124253e4c29c",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "ebe570f2-337d-44f6-bb21-f0681d5209d5"
        },
        "item": {
          "id": "e13900e3-7385-4db2-95e5-dadcb4fbdf9d",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "2d6ded24-d6ef-4686-8a50-db05d711e085",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a01ca79-bb7b-44eb-b5ca-0547ba0ee70f",
        "cursor": {
          "ref": "28481c40-af82-4811-89e2-d9524a78c190",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "ff98ef62-0627-40ec-9494-6677020262d9"
        },
        "item": {
          "id": "5a01ca79-bb7b-44eb-b5ca-0547ba0ee70f",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "7d1bcc30-d4a1-48bb-91a2-9afc93b5f21c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd3ee5f5-1297-4782-84af-1eb43ab00140",
        "cursor": {
          "ref": "d9ca717d-d854-4ea1-9863-b3d1b7528b21",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "744386fe-f7c8-4efd-ad3a-a4a1b018ffa8"
        },
        "item": {
          "id": "cd3ee5f5-1297-4782-84af-1eb43ab00140",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "0386f0cc-3abf-4c9b-aa27-62280bc27345",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74f04842-185f-458c-8e4e-e8076fa4609e",
        "cursor": {
          "ref": "e2b5ca5b-4cf8-40c9-8827-411a2ab1eabc",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "879ad9c3-d739-417c-b05d-57678ada1e6c"
        },
        "item": {
          "id": "74f04842-185f-458c-8e4e-e8076fa4609e",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "1f87d649-170c-4d3b-aac7-1dc9bc3a1b12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 336,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0a5e656-9f1c-48f2-bedd-07e4a2c3da11",
        "cursor": {
          "ref": "ba481958-4d1a-44d4-9704-9826e526d41b",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "a3335ff9-ca68-47f9-807e-af6e8fda5aae"
        },
        "item": {
          "id": "b0a5e656-9f1c-48f2-bedd-07e4a2c3da11",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "bb7b9df9-1001-44c5-8bb5-96e214d71e8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 217,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47a77405-5645-4b13-b58b-29459e118a12",
        "cursor": {
          "ref": "aa641088-bd4e-4e11-9ca3-30bf4b0857bc",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "866647b9-e7e2-4a31-8645-c7e0097a2e56"
        },
        "item": {
          "id": "47a77405-5645-4b13-b58b-29459e118a12",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "d5be57dc-46f9-48de-b909-b67d130583f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8015a22a-9f7d-4f62-a17c-475e6b1475a3",
        "cursor": {
          "ref": "347f68eb-f4fb-4c83-a197-782c544c5d0e",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "c1b2dabc-8559-4177-b324-09b6d89e7dca"
        },
        "item": {
          "id": "8015a22a-9f7d-4f62-a17c-475e6b1475a3",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "55c2a855-db32-499d-89d2-aa090e7994da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "506140f5-5444-46bd-a503-f68846bfd720",
        "cursor": {
          "ref": "4cad8169-1602-4846-acb6-76c45c7a13c7",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "f07ead3a-bd2d-4ebb-93f8-e431cc789e5e"
        },
        "item": {
          "id": "506140f5-5444-46bd-a503-f68846bfd720",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "4fddae2d-bace-456f-8595-6d1ea789a150",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0809d8e8-004f-497b-82b6-ad030a9dbdc5",
        "cursor": {
          "ref": "b1c1cf2e-e514-40a5-9ca5-601f97a6e257",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "ba3be1f0-3e0c-4678-9680-d97d617e0790"
        },
        "item": {
          "id": "0809d8e8-004f-497b-82b6-ad030a9dbdc5",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "26c291c6-ac9e-4181-b419-91a1e54f644c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 319,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c52f4016-c69b-45c6-872e-3c4ec88d48fe",
        "cursor": {
          "ref": "5c72e3ae-69ee-4803-9f42-5a222c6d6005",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "47c83117-d7c1-4630-a3a4-a9d92bf1f121"
        },
        "item": {
          "id": "c52f4016-c69b-45c6-872e-3c4ec88d48fe",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "0af8cb52-64e9-4db2-aff1-f9713c55a855",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba1aa302-95ff-49a7-97be-66d6ea9a658f",
        "cursor": {
          "ref": "35c0d7c8-8524-462b-9085-4127e9657361",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "b16b8e84-9916-43ae-aa7e-33f0f28cdbe0"
        },
        "item": {
          "id": "ba1aa302-95ff-49a7-97be-66d6ea9a658f",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "1da1d401-3b74-4d0d-80ba-35cd4fae9311",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45c5003b-0ad3-4f5c-88f9-0fdd39209f49",
        "cursor": {
          "ref": "b35b3db0-c663-4352-bd1b-3775006d993e",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "3e4a0403-bcd5-43d2-a772-1362cb7c0345"
        },
        "item": {
          "id": "45c5003b-0ad3-4f5c-88f9-0fdd39209f49",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "eea20df6-7165-4712-aa2f-7afba543a7c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1297fbfb-95cf-4fde-923a-65113e8bd703",
        "cursor": {
          "ref": "be986c4e-63f8-402a-ba0d-d1b343c6f6f7",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "9607bd9d-6eca-4d39-a039-76e229b70ecc"
        },
        "item": {
          "id": "1297fbfb-95cf-4fde-923a-65113e8bd703",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "f514a1b7-6ef8-4396-b3f0-e3c798ff14f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5f2291c-4b69-42d9-b5c6-c6413bc0f5c6",
        "cursor": {
          "ref": "b2a220a3-12d6-487f-b4fb-e60d8bb5fa77",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "8f517131-3de9-43fb-8025-bb80905e6806"
        },
        "item": {
          "id": "c5f2291c-4b69-42d9-b5c6-c6413bc0f5c6",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "96fddeab-c017-4403-b811-430b54883aa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb5793f9-9c6f-486c-8b07-d0eca188a1d3",
        "cursor": {
          "ref": "57049653-8bfd-4765-8046-edda2c439f2d",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "260c84d5-7083-41a3-b2d2-30b673ada1b4"
        },
        "item": {
          "id": "fb5793f9-9c6f-486c-8b07-d0eca188a1d3",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "2a97cbd6-d5a0-4f79-86b3-1a3e5900e638",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc4039a7-48f5-4e5e-a845-3c5a6b467db7",
        "cursor": {
          "ref": "dca34fdd-b6e1-44f8-837b-7501d5b4689a",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "61d69e17-8f7b-4115-999e-3ffc03675cce"
        },
        "item": {
          "id": "bc4039a7-48f5-4e5e-a845-3c5a6b467db7",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "a96bf09c-0c11-4ab8-97f1-995f31eb480e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "036f3b75-94cc-468c-b2e6-f757f7e0ed5d",
        "cursor": {
          "ref": "47c5d5a1-53ea-4b98-a7a0-aff465ab034d",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "e379de05-c028-4672-a63b-dd4bed45fdfa"
        },
        "item": {
          "id": "036f3b75-94cc-468c-b2e6-f757f7e0ed5d",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "8a947b39-8bb4-4d14-9c7e-c38c7880af4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8beeb21-1930-492d-a0f8-711456b513b2",
        "cursor": {
          "ref": "ccf5614a-f2d7-4342-9c4e-8b2ce12484d2",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "b3ee1eda-150b-4e49-a370-81be27d04907"
        },
        "item": {
          "id": "d8beeb21-1930-492d-a0f8-711456b513b2",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "50bf8340-88dd-4823-98b9-31aeac83ff56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b439c30-ca29-40e0-89fb-ef76b25dd1f6",
        "cursor": {
          "ref": "59e0fce8-047d-4116-850c-b03dcbab71fb",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "ddba9b64-50a5-4a9f-a12f-d4350bfd63d6"
        },
        "item": {
          "id": "1b439c30-ca29-40e0-89fb-ef76b25dd1f6",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "148dd843-02fd-4019-a37a-1de16ed55d9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "132780f0-046b-4234-a890-696446f05a7f",
        "cursor": {
          "ref": "887b8bce-6559-48bd-9206-2a2b0aa4d808",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "02bc5fcb-e2db-40a5-88b6-42ae28c99282"
        },
        "item": {
          "id": "132780f0-046b-4234-a890-696446f05a7f",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "813ef7c9-a3ea-4699-9ac2-f745f5598cf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39b5c4c4-bf51-41fc-b1a3-ad32608e107b",
        "cursor": {
          "ref": "21c5b38e-1257-41c2-870d-bc8c43285616",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "d343c10f-208f-4cf0-9d79-eb3acae616db"
        },
        "item": {
          "id": "39b5c4c4-bf51-41fc-b1a3-ad32608e107b",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "5860f781-2035-4c6c-a2b3-436240301130",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "820607a5-ab25-44be-ad96-b2c0274a953b",
        "cursor": {
          "ref": "cf8198d3-102c-4616-ae1f-4f121c7134ab",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "ca704bdb-49c0-4a2a-9271-e2d3c4ff1352"
        },
        "item": {
          "id": "820607a5-ab25-44be-ad96-b2c0274a953b",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "d0dbbe18-cd0e-47e3-b879-64fe6e148543",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0acbce52-3d15-4f66-8bfd-65f00df76579",
        "cursor": {
          "ref": "ed8167e5-e0d4-45b1-9f5d-addf4b632b66",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "08291dfe-eaae-4148-b7db-ca0f142e4281"
        },
        "item": {
          "id": "0acbce52-3d15-4f66-8bfd-65f00df76579",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "ba26811c-a757-44ad-b048-d679f7cba68d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc43c46f-b3b2-4123-9170-839e759468a0",
        "cursor": {
          "ref": "947158b4-a144-4c95-b09f-7640bccf2c72",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "99dcc2ed-229d-4011-b1bf-da07e0357051"
        },
        "item": {
          "id": "dc43c46f-b3b2-4123-9170-839e759468a0",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "e1cd365a-9520-4929-a9df-75bd61272070",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f336526-0d9a-47f4-bbc8-e8cbbd74d82a",
        "cursor": {
          "ref": "4e9149d4-9948-4839-a112-40688994574d",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "a7458290-b154-4cfb-be73-1f37e8abdafb"
        },
        "item": {
          "id": "9f336526-0d9a-47f4-bbc8-e8cbbd74d82a",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "90c5e7d7-92ba-4b3d-85a2-49683ca69467",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "769e4683-700d-4631-a9d0-86820251fe17",
        "cursor": {
          "ref": "e86e1e85-6c84-474e-b22c-7b218e654dfc",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "d5020a46-86a3-453e-92b1-817397429861"
        },
        "item": {
          "id": "769e4683-700d-4631-a9d0-86820251fe17",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "cfd582b1-df2e-4e25-aeec-735b985d1b5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fb46f46-f93a-484c-8d76-9f78513b49b2",
        "cursor": {
          "ref": "72f85708-8026-4c89-98fa-87e2c530b2cf",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "b39fd174-560d-44e3-a90b-01ec1e6f4ec8"
        },
        "item": {
          "id": "7fb46f46-f93a-484c-8d76-9f78513b49b2",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "24c877d5-4368-4aad-918f-78c78eda8662",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47f01730-876c-4cd7-bd85-e6bc6f618739",
        "cursor": {
          "ref": "da3b9bae-2426-4f27-949d-3abab3415532",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "541b7f39-828a-4634-8287-189ef4e2273b"
        },
        "item": {
          "id": "47f01730-876c-4cd7-bd85-e6bc6f618739",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "88c3ab18-118d-4c9e-b613-5e53921e5928",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecf88255-1ae8-4cc6-a535-c0fca726fab6",
        "cursor": {
          "ref": "1e59f6cf-e010-48e6-bfa3-bf23dfa2503b",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "5012b229-c23f-4715-aa03-316a532f2b5a"
        },
        "item": {
          "id": "ecf88255-1ae8-4cc6-a535-c0fca726fab6",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "294f0a36-12b0-4cfa-ad62-8d37c6313679",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cda20fb7-51f4-424a-8d33-561d1044b809",
        "cursor": {
          "ref": "aab3b967-8525-4641-a370-59b04cb8af7f",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "98884f75-4d8b-4b70-8608-44c1c961a126"
        },
        "item": {
          "id": "cda20fb7-51f4-424a-8d33-561d1044b809",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "bfea244b-4ca7-474b-8b38-fc609cff5b47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51e70694-97bd-433f-a167-b0399510675e",
        "cursor": {
          "ref": "82d811e8-0086-49ff-a053-bd28bfe0be03",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "6fcf5cbf-ea93-4fc5-ac1c-200fafccc77e"
        },
        "item": {
          "id": "51e70694-97bd-433f-a167-b0399510675e",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "a4e2b15a-44c1-4893-ae65-40f9b4d83908",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3349979-6e8a-4d29-b5e4-d6a1c7e833a0",
        "cursor": {
          "ref": "b4966ac7-eb7d-465e-8ca5-6d1135cb63ad",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "bdd26bd0-bd81-4d8e-9db0-b5b9e1eca567"
        },
        "item": {
          "id": "b3349979-6e8a-4d29-b5e4-d6a1c7e833a0",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "46412495-9679-4528-8824-36b231a0d815",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae523b75-7763-47e4-b05f-95fec2b8418a",
        "cursor": {
          "ref": "cb816e91-1098-4b95-84be-21611c76b17c",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "e031b3bd-f531-41ad-bfcf-4d8b6817caa6"
        },
        "item": {
          "id": "ae523b75-7763-47e4-b05f-95fec2b8418a",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "446531be-d401-4830-ae65-0d5eefa2baf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f74c47c-5dc8-4186-bf77-926a12efbaf2",
        "cursor": {
          "ref": "1321e0b2-df34-46bd-95f8-c31cf446fb93",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "90a1669b-35dd-498e-a738-b5a2d2fbea6c"
        },
        "item": {
          "id": "7f74c47c-5dc8-4186-bf77-926a12efbaf2",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "000c456d-3c04-41ea-a158-cf71fdeba959",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dc2f05f-c1c2-4353-a221-5152ceff0d5a",
        "cursor": {
          "ref": "9e07707a-428c-4fb4-9afa-c152142a55c1",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "48899cdd-f2f3-4324-a7ae-be2753447053"
        },
        "item": {
          "id": "6dc2f05f-c1c2-4353-a221-5152ceff0d5a",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "03c1132f-f7a5-43cc-bdab-577337e98896",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccf479f2-1396-4f5b-9c62-06b24b33d3b1",
        "cursor": {
          "ref": "22526714-b342-44e7-bbaa-aefb024e28f8",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "be310b37-ca26-432e-b53a-78eda005373c"
        },
        "item": {
          "id": "ccf479f2-1396-4f5b-9c62-06b24b33d3b1",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "c1b810b8-0162-43a9-bebb-e895975195f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34ff3e76-0d4a-4f95-83da-70eac1b395a4",
        "cursor": {
          "ref": "348d4727-b057-4e67-ad6f-a906da9ba066",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "6d3f203d-fd8e-4ed9-8376-6cdcc8621b7f"
        },
        "item": {
          "id": "34ff3e76-0d4a-4f95-83da-70eac1b395a4",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "595499af-ae63-46bc-9b61-4605b55ce010",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c53e326e-0236-41f2-b8a8-24e9908db039",
        "cursor": {
          "ref": "4ddda5b5-7bca-4627-88fa-99e67663e4d7",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "71e0de38-7a10-40ce-b929-ee091866918c"
        },
        "item": {
          "id": "c53e326e-0236-41f2-b8a8-24e9908db039",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "6ae87fa1-5966-45ad-b55b-03237214e7b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c090cf83-a70b-4046-a62e-d008b8c7165b",
        "cursor": {
          "ref": "01ec663e-2a8b-4578-b72c-04fe6db12a56",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "74c5d92a-a54a-4056-b833-1cdb8b482b98"
        },
        "item": {
          "id": "c090cf83-a70b-4046-a62e-d008b8c7165b",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "39c1461a-553f-44dd-9557-b0062bfe7b22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e84a111-ccb4-410f-9f6a-3224271af555",
        "cursor": {
          "ref": "4708f484-1631-4cb5-a0fc-e76938fff9f8",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "9a675ca9-f356-45cb-94c7-1328a608779c"
        },
        "item": {
          "id": "6e84a111-ccb4-410f-9f6a-3224271af555",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "4a46fda6-74d3-490e-89dc-17de3a68be09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25c7b793-0842-488e-b358-91506bffe258",
        "cursor": {
          "ref": "c4e19982-5bd0-46d0-b2d4-89abc9fc42d7",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "094eaab1-e794-4368-914f-2f87b9ac7055"
        },
        "item": {
          "id": "25c7b793-0842-488e-b358-91506bffe258",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "e703db7c-8dee-41af-9f81-395d7b190762",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bc57f69-a249-43a0-833b-50c65fe74b02",
        "cursor": {
          "ref": "d8bcc96a-67d4-46b9-aef4-a1bc5b1aebad",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "db05bfd9-b019-4a1c-ba57-86ccc31b768e"
        },
        "item": {
          "id": "4bc57f69-a249-43a0-833b-50c65fe74b02",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "9270c510-9e36-45b2-bf0d-58ee592ba1c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2ae52e7-33a0-4bcb-84db-098cb898a12c",
        "cursor": {
          "ref": "fcc03964-d268-4558-9f6e-11531a4f5fce",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "ef6bd809-c673-4a26-8870-a7f97ed85ebf"
        },
        "item": {
          "id": "d2ae52e7-33a0-4bcb-84db-098cb898a12c",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "dc8c4c3e-197d-4794-a389-41064808a6a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86c97fb1-6b63-4cf6-8892-65dc66a805c9",
        "cursor": {
          "ref": "dec42dac-ca3e-4790-968d-4bb9f7e75853",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "1eeb2e44-bd6e-431c-a9b6-ddf4131cb970"
        },
        "item": {
          "id": "86c97fb1-6b63-4cf6-8892-65dc66a805c9",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "792a2dbb-47ca-4bd0-a55e-6e01b7f424f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3414f981-f0db-44ed-aca5-7ed9a43f5986",
        "cursor": {
          "ref": "36d10250-7ca4-4af3-b447-3aabd0eae06c",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "925efa4b-3752-4548-a28c-32c05115869b"
        },
        "item": {
          "id": "3414f981-f0db-44ed-aca5-7ed9a43f5986",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "933aa17f-1609-40ca-829a-95c672c9dca3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6298d55-ccb4-4df3-af55-4bc324419a4c",
        "cursor": {
          "ref": "4afa7a18-5443-411e-815a-88c7bb10d9d7",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "f39f4e7a-8b14-4268-a950-6a3fc1e0300a"
        },
        "item": {
          "id": "a6298d55-ccb4-4df3-af55-4bc324419a4c",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "a1362fff-ed30-4a81-ac5a-5a1123123325",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d68c6e9a-629b-4d45-bbe1-a52d6a15be7d",
        "cursor": {
          "ref": "33501972-7a01-48c9-98b3-ee6833a05971",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "46bbf9bc-b451-47ff-91cc-deb7b97dfa32"
        },
        "item": {
          "id": "d68c6e9a-629b-4d45-bbe1-a52d6a15be7d",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "8cae0794-d11d-4080-a3ba-e82e9115b576",
          "status": "OK",
          "code": 200,
          "responseTime": 295,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "6116993c-6980-4666-ac3f-d348298bd031",
        "cursor": {
          "ref": "81723353-09d9-4821-8c53-1ce7a5757978",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "a3b4137d-12cf-4fee-b298-fb61fffb12d7"
        },
        "item": {
          "id": "6116993c-6980-4666-ac3f-d348298bd031",
          "name": "credentials_verify"
        },
        "response": {
          "id": "f8bd7906-0f75-4688-9185-82b814987404",
          "status": "OK",
          "code": 200,
          "responseTime": 635,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "9df2f42e-0e59-41c6-8159-2107111992d2",
        "cursor": {
          "ref": "13b7dc92-e9bc-495d-98a3-f82f306170f5",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "eecafd5c-5cd1-4cfa-afd5-89bc4c50f32c"
        },
        "item": {
          "id": "9df2f42e-0e59-41c6-8159-2107111992d2",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "2c85d19d-4b99-4b7d-adbc-6a113f7ab163",
          "status": "OK",
          "code": 200,
          "responseTime": 662,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "10eb6e0a-357d-455c-b8ec-13b4e6121793",
        "cursor": {
          "ref": "4b187369-fd05-4695-8259-460b2641e4c4",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "4dc5094f-7ac0-488d-809b-6c3b31e9c254"
        },
        "item": {
          "id": "10eb6e0a-357d-455c-b8ec-13b4e6121793",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "fdc89bc0-4f03-4867-9cb3-12e83d69eb92",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10eb6e0a-357d-455c-b8ec-13b4e6121793",
        "cursor": {
          "ref": "4b187369-fd05-4695-8259-460b2641e4c4",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "4dc5094f-7ac0-488d-809b-6c3b31e9c254"
        },
        "item": {
          "id": "10eb6e0a-357d-455c-b8ec-13b4e6121793",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "fdc89bc0-4f03-4867-9cb3-12e83d69eb92",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10eb6e0a-357d-455c-b8ec-13b4e6121793",
        "cursor": {
          "ref": "4b187369-fd05-4695-8259-460b2641e4c4",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "4dc5094f-7ac0-488d-809b-6c3b31e9c254"
        },
        "item": {
          "id": "10eb6e0a-357d-455c-b8ec-13b4e6121793",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "fdc89bc0-4f03-4867-9cb3-12e83d69eb92",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10973fa4-3ddc-44a0-9d12-d93461a325f1",
        "cursor": {
          "ref": "6f3fd141-54e5-444e-a193-7913843e493a",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "d0eb9cd5-3031-4fd4-94f5-a97827494cd9"
        },
        "item": {
          "id": "10973fa4-3ddc-44a0-9d12-d93461a325f1",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "f9cc74a7-4212-4e42-b058-c25e046d3870",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dc60eaf-26a9-44c2-a35f-0bbe2f0b3c1a",
        "cursor": {
          "ref": "4d3af499-9d0c-4dca-9ceb-1d91024ea00f",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "3f799938-68d6-426e-ba7c-1ebf464798b4"
        },
        "item": {
          "id": "6dc60eaf-26a9-44c2-a35f-0bbe2f0b3c1a",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d5448334-3e8e-4d66-a71c-f09e60f3f17c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "6dc60eaf-26a9-44c2-a35f-0bbe2f0b3c1a",
        "cursor": {
          "ref": "4d3af499-9d0c-4dca-9ceb-1d91024ea00f",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "3f799938-68d6-426e-ba7c-1ebf464798b4"
        },
        "item": {
          "id": "6dc60eaf-26a9-44c2-a35f-0bbe2f0b3c1a",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d5448334-3e8e-4d66-a71c-f09e60f3f17c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "9bb7dd75-a6df-409b-8ca1-10d456c69840",
        "cursor": {
          "ref": "9b3c2455-2047-4aae-9970-f9884c3a2dd7",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "934de176-7e55-4faa-ac59-0d2b8cfbc0be"
        },
        "item": {
          "id": "9bb7dd75-a6df-409b-8ca1-10d456c69840",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "b9a7e816-9e08-4444-9c74-98a9dd4503ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "4972b30c-459c-41af-8717-1ea5bdf5853b",
        "cursor": {
          "ref": "51d97801-ff3a-44f8-8705-d03b469d1dc9",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "db3766ec-ce52-4892-92db-db6a16a94afc"
        },
        "item": {
          "id": "4972b30c-459c-41af-8717-1ea5bdf5853b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "d31dae57-8e93-4be6-9222-0d9213965133",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "4972b30c-459c-41af-8717-1ea5bdf5853b",
        "cursor": {
          "ref": "51d97801-ff3a-44f8-8705-d03b469d1dc9",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "db3766ec-ce52-4892-92db-db6a16a94afc"
        },
        "item": {
          "id": "4972b30c-459c-41af-8717-1ea5bdf5853b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "d31dae57-8e93-4be6-9222-0d9213965133",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "c2755120-c269-4fcb-a73a-36f1746b054f",
        "cursor": {
          "ref": "c9e07553-b1fa-4b26-87da-b10bfd47cde8",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "d9f993fb-88f0-4569-9c91-faf0f097e07f"
        },
        "item": {
          "id": "c2755120-c269-4fcb-a73a-36f1746b054f",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "b85d0210-c314-49f2-9d9a-1a76f657d3c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}