{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "fe640040-bb31-46e6-9197-cbf274c363d2",
        "name": "Clear Cache",
        "item": [
          {
            "id": "f5b2c05c-1945-4835-b97f-f1a3672d3bdf",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1abb1759-5cd8-4967-bf35-c1d51f468896",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "689ff5b4-5994-45d7-9d16-91e28d399efb"
                }
              }
            ]
          },
          {
            "id": "fd31cdcf-55c1-44a5-a813-b808221775ad",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "85771926-ce9a-4e48-8e5b-62f81dea52d2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "0cf4a27b-5db4-440a-b0b1-926b0d6a289c"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "db30f21e-a5d1-4a37-a9b9-93baf0e49db0",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "aa0ebb81-3547-44b6-addd-7961205b0210",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0e6891fb-1e1f-4ce0-9c5d-1c5dcad47b12",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d4736a66-ab43-4f07-bb74-1cd3e3c46af3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "039b50af-fbe8-4459-96e4-c24b423b4e09"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2a918a43-bed8-48b5-a14f-df2dcb8d73d9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b7720afb-8aa3-4b81-937b-7123c920fbc0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d1597e01-88fb-4e19-b738-ff9c98bd446c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b52c15df-5503-4752-8000-91e888653a0a"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bb7f02d6-cb6b-49c0-b1a8-8417a69fb4ec",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "ce7937b6-09c9-42a4-b77a-79af309ba3f0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ac207f5d-efe9-4a95-adbe-3a563ee2c173",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "56999c2b-d831-44fa-8df7-52190b2cd5c9"
            }
          }
        ]
      },
      {
        "id": "c48d6c11-a073-4473-9906-dddd22daca44",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "bee66f91-7ad9-4b1a-8224-bbcc14092031",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ef20b00c-389b-4b2b-b06f-58f2a5e97f68",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "bc67b5ae-60b8-4a62-8dc1-e9fe29e9fc43",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce7bb224-61f5-4573-a746-e5a8d86884dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4a2454be-1dd9-414c-bdc8-8e07a78b7d92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41660af7-b2a6-450b-8dc4-cf0e9af33265",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74185186-7b06-4abc-be02-59b0d4380c22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d4728d53-3d68-4400-8ac9-cb93eb77924b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67859dd2-062e-4ace-8f18-0878e2e4777c",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "520cf3d0-9fc3-4f03-b81a-52b6f6e22aef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "555967a4-9af8-4e06-9612-d07342de3565"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a08f3e51-55b3-4508-9ef6-b9105ad64611",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3f5e23d5-8a18-4c33-81b2-5b3f3a94be06",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4be9316b-8048-468e-b3f4-1025226526f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "62643293-7d34-46e2-9357-67b45fa1c804"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14586bd6-cba5-43cd-ac0b-bdda850f8d77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9f24821-fc4c-4e16-a71d-799381beac6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbb2b17a-adc7-43ed-8b4a-13a19befb074",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98e3bfc5-8cda-47c4-9f11-6697f27fb820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aeae1b4b-92fd-4c3a-94ea-0c5d7325b40c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d4345c9-0ee9-41ba-adbe-2cac1f87633e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "d3ed4c9f-8993-404f-8534-4bde7a6469f3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9454d7bf-7245-4e9c-a3c4-5be8c79beb01",
            "name": "Positive Testing",
            "item": [
              {
                "id": "366b2b69-bd3f-4b43-934c-ded3a52d2ce4",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7dc138df-1b2b-4f49-a035-f8d0374404fe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "8402e5e7-e56f-489f-a0cb-0b839fd2651c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3fb8ff5f-c988-4211-8795-5e8fb02920e9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "69c074df-422f-4997-89bf-d4f0e64fbb66"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7f57af6a-739f-4aa2-9457-6c7eda6e81ab",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3e967ee5-41c3-48a8-95b3-59fc23dc6874"
            }
          }
        ]
      },
      {
        "id": "1433dd39-6895-4fa7-9b67-3c908ea553b4",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "7cad16fc-8bde-450a-b6d1-22efbbc93b1a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d0cd72f1-31fa-4eab-ae8a-a4bebf861606",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "f742dd42-5dd4-4f68-b8c0-b28ec286fcf5",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7dccf7d-d983-4d8c-a4ca-e6bc475a8e02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b052a91-5c1e-40aa-b535-4cfa5d9c5489"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8518c9a5-be08-4d64-8316-5baaaa9eea25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2d818125-99db-4376-9f5e-30c18c91c78e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f3a58d5-5a84-4f45-9685-efc7a79aacd7",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "575275d7-0a3e-4e84-9ad0-431981fe910d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2281ee30-c46e-4d33-87b2-19eeaf1d8261"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ad0f3ec-4767-426d-b62a-141ba887b567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bab525da-d22d-42b8-b378-46334409b084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "396a2d3c-5f40-433f-af99-29454fa1bc83",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ead3facc-7c7d-46e5-9c9d-7cddc5043b10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9e29561-f70c-4e9a-951d-139c7b2b9c3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9862e038-a75d-4b10-9af8-608dd95ac31e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "297e58e5-0077-4248-bfcb-a500abf1aa5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0f9998c-f8e8-46aa-9143-1ad5b6f3f000",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cb88f09-e310-49ed-a4f9-c96d4288d531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1da93f3d-8744-46c7-bf5b-d20661a7b6e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93ad2cf0-78e3-41d3-8ba0-045fcc7bfab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "da2d8a39-fe13-402d-bab4-2a00171c33ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0cc2232-6430-49ff-bccc-dbdc436d9176",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f94e9f23-fdbf-469f-b58a-0e5d0eaca8c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d45aac00-a58c-4737-bd52-b24af132ce60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29f8d149-5d74-4d29-bf08-a8b8b36578aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e35e1c1e-823d-4961-807a-f00c765109a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe26be76-864b-48e4-a633-9f26e32bfc6e",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c06e0e75-5002-4c27-8cdf-a3f4501af762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79ecdac3-e51a-4f68-b31c-244002e43a8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2e8f29d-9a99-4533-9f0d-8315bc6cceed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8216e46f-2dfe-4469-96fb-25b8a1dd669c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d45e030-f0c7-4171-8951-ec73192b8333",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b480b58-aeb1-4b23-8dd5-8033f4a068a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89d90231-9c4d-434e-b628-b1a593a198ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6589f059-d972-48f0-b03e-44c7259b84de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6d35b43f-3781-4cae-a1bc-f1b229ba2225"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf591351-ab9e-46de-9c0c-a7b066ed67b5",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "356ca500-1497-4363-b075-ade6af3116c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62a4cf5d-5919-4a90-b25f-00029ca38adc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8b26b58-a38f-4427-b6a5-c3dfbb687f6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "838e5181-1910-4ed1-8700-3929214961c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d65ea9a-9b37-4695-bef2-7bd9162f447c",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14a16ad6-23cd-4246-8a3d-faf521bad944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f832b813-3d81-40fd-a329-45fd2e6cf142"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6b3c57f-22ec-4958-af0a-f9b6a99a1669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a4a49d08-27c8-4759-b4f9-183a60b027f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23338454-c1ed-4012-b9de-99c6f72739a8",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73660b34-7be1-4b99-a58f-c08161701956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5be5e416-1dee-4e51-8066-fe10948438a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "540e18d9-33c1-48b6-ac55-167b72180ab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f13de3b6-aff6-4060-88d3-106b8d25c22d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2966a89-80ad-4d5f-a1d5-4336ddb06a3f",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55a690f4-e9e1-4ea0-aa03-996de0e0e8d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73fccd69-b097-4b72-90c8-b0cb368a7c5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0bd8e09-06f4-440c-9e1a-9f0a00c636f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4e66639c-8e24-4004-8f9e-7a853cdffedd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "442bc612-9c83-4c1b-9db5-eb7c457cd061",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53164272-2fb9-47e9-81d4-175dbf2acc9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d23c4f6f-b479-48e7-9404-01f769aa9f25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5097953-327e-4b81-88a1-c06492912a91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7885b518-b495-42cd-ad95-61b74c002ab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79ba1334-918c-423c-b832-0152a34a8a65",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e51751a0-1d15-4f32-84e6-596051368799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfe0efdc-5ad2-4f9b-a725-88336c0d1e16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8574235-ea01-46a0-ab73-04707e332fd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "21de9c59-78bf-4c1d-bf84-f01bd04863b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdcddd06-537e-4ea0-91bf-ce3d8c9464f6",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be265b23-b74a-41b3-983e-9daaefcf367f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ef388f3-5bc5-4200-bc62-e2a8aedd5706"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "000750a0-b272-45a1-88f9-277f256adb3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "0cfffdad-519a-4ceb-961e-b646b73740e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feabf8c9-62e1-4988-b50e-e2b4f4080271",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6e321ab-d6f2-48f5-9980-174aae72563d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef40bfd9-92dd-4389-ae31-356dbb8fd0e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52366a36-bccf-45d7-bd60-820f55274d22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9e7e55e6-7375-4e19-9c9e-5e1b071f720f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb77f4ec-c644-4814-a784-3a117b9797b6",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43f5e15b-a8f9-4305-8a3e-b567cac0028d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81e6e1b8-9b85-4709-bc93-3cccb6828516"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46296394-2967-42f0-a339-5a3a0c97c76c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "99477e80-d7f7-44fc-a9fe-e37b06c6bf52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88ef61c8-ad70-4ca5-b19c-ab1924563ac0",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10269cc8-0e2e-4ebe-b877-7766309fcd69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3c16bda-ca19-41f5-b953-a0651a1b2ef8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8be3f3c-6322-4c0a-8fdc-5e4b4dbae673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0a69e508-dde4-4ead-9704-58aff7e0524c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cca2ae44-58a0-436d-a949-065a797feeab",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cddc748-8f6d-4fff-afd8-aad00154d0b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d297e4b6-0233-4340-9f33-6d076db5db63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "473663d7-6ef6-4b83-8074-81e9d06032f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "18ac89bd-6fb6-42b1-9465-1810407299b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e46e4df-d530-4c93-b529-f40cedb34f55",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d0fc1fc-6eff-4fc7-b59b-fe91092870fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8951b0d-a99a-4af2-a991-7f0ceef52296"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65583de0-afc4-46ac-8260-480fb8215bb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8eea5594-9ea3-4393-a542-2c06a419602f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "206a7c76-09e9-493d-b7f6-15045e1a81fe",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a88eea9-28b3-4a06-98ba-f4799296dfc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23c50fb0-b5ba-4040-b6e2-c8ee96370bb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b884bfe-b00f-44d2-93bc-55c492453bf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "43a7fea9-cc9b-4534-8309-03178e6d36d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc6cabcb-c1ba-483e-b225-e3943e2dead3",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2711501-db6b-4c4e-84ba-472d99d46502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06b0910a-0274-4aed-8f68-63c4b8764466"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddd34879-2a19-4fd1-a471-6a6b1c111ae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb4acba5-92ce-465e-ad4b-02804c5ae3b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b32389d-a2b2-46c4-bab3-27e415b09744",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32e1b007-534f-4fc5-910d-e71a726da9fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c4e9d0d-5763-4c9b-adc8-d4c04e2abc1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8976bc75-d326-41e9-b172-863dbdae7218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e07fee7c-63ce-42b0-9a2a-ed7ed69b6712"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0baee89-4f62-41d3-8f87-7dee7242ab13",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb8ae04b-7b6a-4c20-a99c-efaf0310b776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51bd6eb3-d6f0-41b0-a059-a6e726fe3653"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a771922e-6e93-4675-9400-b40283a2c524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9fa81436-8dae-41aa-a09b-1cdff2e3b1ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ed0c7b3-3286-424a-8a76-9ca990738ec2",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd0fdb2b-b4f5-4759-9598-85deae7aac7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95675f16-b34e-4065-a617-d23cdf2e800d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "952995f5-14e3-4df7-bcc5-1655762db539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "60882e3e-0610-4a38-8cf8-74077ced770e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ccfcf1f-db6b-4fb6-af37-0b46a5b0a28b",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6d2e97a-883a-4159-bf13-9311f1a8efaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c42fa418-ab70-4a84-b3ae-66653fae896e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c10f5d39-a503-4b2c-9268-3347ac194b37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "56f1b4da-39b4-4c52-8d1d-b84fa9ea1b24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "346bd74d-550d-405b-bb3b-72c104d59fcf",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1cf3d1b-a883-4f4f-a643-e2502cebc29d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb227610-7e1e-4067-8bf7-952a58440d39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93f627b8-a288-4d53-a277-1484c5927fd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "8dc4ae0b-9fc2-41cc-ad7f-f015cbfe300d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30034558-f3da-475a-a590-9a5c9e582d63",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77c353cc-5a88-4414-9179-319bff02c601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e59aeecb-97bb-454e-ba50-2673dd100e3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd69a00a-b54f-4a02-9ed1-1c70388cf6ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "65d20c7f-96bd-4225-854e-bc29692bd718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89affc9f-f8c5-461c-b0a7-699e17ea92d1",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc9bdad8-dfaa-4a12-8b58-fd53d0458ad6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80d4fa99-3448-4602-ad28-2a7c24ef3c98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e6d7190-fd89-4ff8-b405-0e2811eb729d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7497852b-fdc6-46be-8bf3-c1694f916150"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec1c2f3f-2354-4884-8649-9721d1970613",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e1930a5-77ac-46c0-8210-21f1026849b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e904a13e-fc27-4943-b910-3ba5d0d9c7ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df3fffa0-a142-4976-a3ca-49199940961d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e720667-ac1d-4526-91c8-355b533007f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b82e3e6e-85e9-481a-970e-52cfeadf6f9c",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2df01b95-cfe5-445b-8954-ace56dcb3304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d68a130c-adcf-4469-ae43-4fa3a328fd9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "020f0dd9-3df7-43bb-a509-7f39a25636df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "41f3e87e-b4f0-480f-ab6c-64fc1c4060c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "497d5cc0-3c95-4418-8548-f90316528c6f",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6df40a03-9e83-4f3b-8811-eb213b7df772",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9444ab73-a0f2-4cd7-928f-86cb994c6e32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "971c6e72-0862-461b-ba79-d08b847e560a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6d26e37-8681-41fe-843e-d8cec00bca55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd57a75a-d904-4c59-a0d6-62f6090b7c8d",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09199e22-8c22-40ba-b88d-6644674f6ee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3887494b-1ef3-4e9c-b5ec-e4adea074de7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c37ef60-ff3b-41a5-b0e9-994b1470294e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c15b44d-b4a7-4218-a000-13920114185c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e131c30e-bfa3-4a29-9205-84b8746b0f01",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7757afa-de96-4e77-9f03-4612a11cae8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49b3427a-4f04-4753-9af4-163558010ac2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8822123-f31e-497a-88b8-4930b0b61dbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e3d1f56-25d6-4317-9162-5148ee46b068"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0247d6ec-6d17-4f86-b458-10394282e96f",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "489f3828-9d5d-466e-80cb-bdeb12efe3ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a84d8d2b-f21c-4cd9-a868-8787dff82d4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d16f921-c9f8-4255-a66b-7ce1892dead4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4670a6e-2b51-4030-acf2-c2275018c373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27db4ad9-5187-49fc-8f40-cd3f98a91734",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46891046-5001-4587-b92a-5b1a56a1732b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54fbb37b-3f44-470e-9fe5-df2c420252a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "447e4a01-9975-4a35-9f0d-2365e2f84221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f20dee88-1fba-4f03-b9c5-24c396849ddf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22e65cf4-47c2-4e7b-ba0d-2198158e87b1",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6fea31e-ff34-4d70-b92e-ac15f14402bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62999cc5-49a7-4314-86fd-8b629f9157e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31af7c92-75c9-412c-880d-c8f8fd16ecfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad7e6cf3-728a-45e4-8f04-39130a75970e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "416bd899-501e-44ea-8014-d0eb5c4276dd",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6b417d9-f77e-4ef8-855e-e9e69f5d9a71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b84f0c8-be3f-4d3b-b3c2-f3548d550440"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02da62e1-82e8-4e2d-8161-bbec76fe5821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "a389d3ab-18c5-4753-b83e-872e50ab9d70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1452a48a-f862-4066-8e86-d4bac29e606d",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29423dd9-9fb3-412b-af9c-2e41d5a82307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fc54f49c-6d2a-47ed-9186-ae9c7e054140"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "274190e0-28bf-4b7c-a0ed-1fdc07ddc9ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a63bfaa5-3eb2-490c-999b-cce07e148bf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "049f79e7-5b7e-4bc5-9dc1-f0f7142ea72a",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f9c48ea-c444-4fe8-8850-9621cd28c046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "444aff87-38e1-408e-839f-45f903463e90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e65c9b87-f5d5-472e-bf84-1eb2c3407799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "85922034-39ea-4801-be12-b36abe091174"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58310fb0-bd43-4e22-81cc-979c60e08ab6",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9f1746b-964f-4ed2-9955-af528069cc64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c266e80-c4e9-4c2f-9832-f6fecda5162b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39e575e1-2cf2-4307-8965-80e4ce2b818b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b0df95c3-3628-4f4b-b33a-a9bce09b6967"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fb6a1ed-6500-4fd5-b6ce-9fbcacfa83ac",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "554e2f81-c37b-4d87-9a7d-a81d733a60ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3092df8-d5fd-4da1-8421-3d1b38cb07f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da0ad314-f93b-4852-b4b7-5ba3a7e77f65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "43af49ed-824c-440b-866c-1444cd82df5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf6e700b-7738-4204-be7f-326ac2725b68",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2149204a-9d94-44c9-b387-c32e3c31cacd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9bf8d8c-6b3e-4f75-b44c-0ce9e07601d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d61bc6f0-cadd-410f-8f0f-128ab9e0ac6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a0e621ea-5822-431f-8731-f59dcb9f3384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "730e4a54-9439-40f6-9194-5d253c6f8102",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdacdd31-d378-488d-9c47-5dd24a5708f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f896d4e-3087-4a22-bbfb-53d6c93f079f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbaf608f-1158-4919-9653-7178bd375407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8824127c-2b70-4f84-883d-af62a02379f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fe8d04a-557a-464d-acfa-e7d2bf97e09b",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7a4ec3b-8d12-4c41-a038-1b5ce8dae74b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f160f527-5bf2-4cf6-b981-68b747b98010"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9a3a812-3d95-4421-906f-c31b95a2bcf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "bb5ce53c-e8b0-44f4-bfe6-51a44cefffb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41882a14-4515-4318-86e5-61381ba6b64e",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a41906af-4507-4cd2-bf76-380673cdc477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9480115-7e9c-4e66-82dd-72df3c05c5b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93f28bb3-2e33-4826-810c-87901c7b6678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7285efab-1ba9-4e2e-baa2-90634ebe7a2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5506ea81-afaa-433b-941c-4a4b19462725",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c6a9969-33bc-4a94-9bcb-7bd696de4722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba2df27e-c264-410a-88c4-a5cac7fe89bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1b8709b-9c68-4ec9-8b35-d2a5a983cabe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4da5d2a-bc69-4861-8f33-8338de8655ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa517bfb-fbae-4e77-b393-a17c7e33c97c",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8c81a1d-a817-4aed-9387-1d6701086a58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "001e948c-4a7e-43e6-bfbb-883d2df61e5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a453e0a-76b3-43d8-a50c-4202888275b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5317f96b-7f6e-4d44-8b67-eb5c5258ffb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "043e6bbd-fe9f-429f-836d-6fe75b129342",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d5b6470-3da3-4d03-a585-6f7b7c7ba4a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79d7b69a-f0d6-44c0-963c-36804399c622"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80bbf85f-27ff-4507-bbf2-ad0ff551685a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f03c0f1-2f6f-4bad-984a-8948807a9df3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66d47895-f3f0-4b16-9428-e88ddb58a3ac",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01838145-4f2e-424d-94cb-8d2d196dfe72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd980cca-cf58-44f5-9c4b-a9fd1fb53ada"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c5baa5e-5292-4dbf-87ba-d81e531a4976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "38eaf9f7-8774-4821-b522-afa598376cdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43aadcd2-e45e-46bc-890d-8bb7ef3dec18",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01e2d3d3-13bf-45fb-80b6-1f673278b4f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3452dac-5aeb-4057-90ac-027b24ea4a1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61d3789a-29bc-41c8-9ce2-12f8f7348e2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "73f8f30d-b490-4b3a-a425-97afaad6b0da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54ac8936-60bf-41f1-aae0-4b4684537d09",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ca9ceda-3c9d-4579-8024-1f8ac3075117",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0f25acc-549f-44ae-94f5-b82bdd04f652"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0969992-6a38-47c5-8333-884c2bbf02bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7675a0f8-6c8e-41de-a561-7a58f580f01f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28701b2b-70cf-49bc-90b6-d7bb0cbb0e19",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c192d5bd-6692-412a-891b-32ec139bea2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f63fd814-ede9-4c68-9eca-86bd0350d1c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6258b874-e184-4815-b0f1-a7e813bddda0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5f2a42b1-daed-4130-a01f-14678a8bba6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2ccbfb8-d71d-476c-80ed-969209007ce9",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "266d5688-a7a6-4d1c-a67c-85ab5c920b7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7557a90e-97c8-4065-aef5-12539fe64f6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94e1b9e6-9bf2-4070-90b9-44778df6c91c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d845a10-298c-4645-8532-2965b7dafa3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4803350-0a5c-47b0-be32-51d054aae217",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df45f1f0-5616-4b4e-a44b-ce6791fe7c17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e04d56a-c10c-41c7-b363-5debe1731f62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a035704-fc85-44b2-92c9-fd316efbd080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a59e94ac-6a30-4bf9-ad0b-70e1a895af11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f65e801a-6e07-4d38-8ec2-ca1c0a0eead5",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2861fcb9-8dc8-4a46-9192-bd6d55b1d133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8c4846e-0204-49c0-8e7f-c9b9b8e4891a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "476b2bdd-e072-478d-9b35-16a441040b96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "01ca59c4-04ce-459b-a535-793daf63a595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e83b8686-56e1-4d86-9eaf-00b06de521b2",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d045bd9a-af20-43b9-b6b2-45067411405e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22e16d4d-88a0-41dd-928f-b825d15c9805"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d7548e2-c976-4ce7-a623-da9fdecd38f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "be27d669-898a-433f-be49-5593d52f5466"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf488133-4ef8-4b3b-a367-defebc370d20",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdb82332-85bd-4ee4-a9f7-39059c6ec8a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9b37991-2ba1-41e8-969c-d068ef30e6c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a561f09e-1010-47e5-b9c0-17be5066e385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a4cb41d-2501-4634-98c5-2580e760ef91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bc8095a-9ce7-47d1-99e1-252e3f0e6d1f",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae81cc09-8c91-4b25-b639-6623023c3c6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67207408-7cb5-41ee-987e-38723392d2ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f66664d3-6e94-464e-a886-1b71b1fa66b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "d4a46a3a-0e52-4c8e-a9ed-edde86988205"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eb9f660-4589-4379-acea-bdb4710c13b1",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bba84879-4145-444b-90ca-27a4a08ece28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04a80a66-4a85-44b4-8bb9-6d7bbe2d5f6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4d3e88f-7cb2-4970-bcf9-9c15e86aa137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2ee98ddf-cce4-48cf-b390-f99c729b55e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a04cf523-6a11-4305-8d86-0a7bca720f69",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06ba62dd-cead-4701-be0a-699c46a4bcd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2c9b0ba-c0da-4e20-a64f-0b69cd84dde6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0dd54dc-baf9-4394-8ff0-d1b5f5587dbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "be0ccd22-7e1a-4d26-bec5-becc8d36cefe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f07a915-1c54-4ab9-ba67-cab4dce9eaa7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48e66274-f8f2-4eca-9fb5-025196c14a1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5b02fd0-23da-4ab9-8946-e772ad871a3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df2b9c37-a9ac-43c5-aa36-399a00a51554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1412ef72-98f8-4355-a53e-361a581c7aed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f156d4cc-26da-44b5-aba9-4ab88322753d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "566845f8-9773-4447-bfb2-e44152c5b886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b62165eb-ea29-45a0-80af-d30bf25a7868"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76e2a457-cfd0-40db-bb4a-dd029dbd465e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "36bf0419-d3a9-4eaf-869a-274b1b3f74db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f409804f-ae3c-4e72-b123-52fdbb8f843a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93a0f5ef-11c3-4a59-8023-82876b56855d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e55bd0d-cfd3-44c9-8822-90ca103fc29f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3a66f69-78fa-4035-8122-28b37d97baeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ebc4266c-a5ab-4d0b-b35e-f635e94a1113"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cf8e9b2-6110-4f83-8871-803c02e2841f",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7111989-5a67-46cc-97d9-5a940f23b228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1a40bc0-44ef-4dfb-893a-2c721f369113"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffa667aa-576c-445b-a187-cf1e5eff47e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "48a3c041-7823-44bb-9cb3-b53397f3fa81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d187dc12-2136-4a0f-9681-e09d86e4b769",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d5eaa8a-3cd8-4a7e-84df-0e7fd682e38c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4699ca96-8245-42e9-9c51-4a876dccce81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6072c436-fce1-46cd-8e69-0899e2c00d0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e595e66b-d52f-41ac-b45e-f28551efaa86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2986585-bb4a-4928-b974-14caa62aa8cf",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16d05589-33ed-4546-aeef-80b905d7210c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4183d3c3-b632-4970-8fe6-fbc561c35d9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bed3a782-1033-40b1-b129-fe65eb2d47c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3768ca40-2d45-4bab-84b8-5685fff106b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "021168b5-f1b4-4cb8-934d-b2468169d0d4",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd9c1da1-d8a8-4ea2-af9c-81ecd0746094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34326a72-360f-43a9-afae-2f446bc0cc48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f2092d9-c2a7-4601-a7cd-12765fe241d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "57dce35d-a62e-4ad5-ba9f-29403b9ca418"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ee2000c-6684-421f-8608-5af3b82b9eca",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3388a0e8-2623-4bff-b2a3-60f0af18a24f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e97097c9-0d8f-4b82-88c8-82527f130558"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "372926a0-392c-40b0-ad79-6719c3499d14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2abc1e09-0c07-428f-84d5-8dde3dbe6a8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80de97a6-1994-4df8-b88e-7367390263ac",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "108a3d56-c460-47e6-afb7-724750bc5570",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce07c2bb-f266-4a3e-94f6-00a73696a968"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31573958-02ab-40c0-8e0a-c178a6f5315e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "15ca254f-7bee-44f0-b7e9-47374f860a64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be35f40b-0eae-4551-b6cc-88c761128547",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b5fd5ae-b272-40be-81c2-0cbe83a96e34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad3ae034-887d-4369-92e8-374026a47635"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a18b3bd-c855-4d09-b0d4-e8f9036b1d9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b8b2f2c-f95b-4a9d-b24a-03ee305a6903"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c80d65e5-af37-4958-8498-f404e2d4f7fb",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b533d40a-da12-4734-a430-aaa6d00df844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ba579c8-e8da-42ca-b173-e2c0654786d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f51b82a-9ec3-4ef5-9f25-7cc8880cc2c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f6dd0f9-c729-427c-8a57-e09172ee9e08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3117b647-f22c-462d-8886-d4a96853c9c2",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de2fd12f-0d01-453e-91f2-fd6b62d4d0c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ecf7c59-abd9-4219-b0ee-807a3f4d3de1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8a88c80-f34e-4977-b360-25e04a329aaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "295aedd7-f6ba-4771-8001-891b1412b416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e24fb268-93e9-4613-ad44-1519d1944890",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52868435-b16b-47e4-84b0-1f650a0284f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df5b4a67-8433-4bbd-9552-147747896824"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f3fa5fa-5ae5-4da2-933a-5f86902d4a48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9936e766-e452-4f18-ad32-a4656bf9cae4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be2fc64a-5720-4978-94ec-85503810488a",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "958e4aeb-0766-470a-80a5-e698ce3a0264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56fc8d6d-441d-415f-afee-fe56d0e924e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e063880-7c4f-4ea0-b17c-14338847b9d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "563446d9-8cdc-479a-a039-73c9b1af3f3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03fdf363-2e69-4604-9fcd-a7b447b73e57",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff0817e6-c73e-477a-bcee-6676e33108fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d86aa3e9-297f-4ac3-a565-7b987842f677"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3263d52b-e116-4ee1-8ee1-4adcf4022180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c6f7beb7-8081-4dab-93d9-5bbf1051a0d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f620159-f1f5-4b19-84d4-5c14df841eca",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "916a3306-bb11-4235-913c-ad53487dfe35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b98a54e2-6929-4db7-b10a-cf7a8a4fa9f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5af28bd1-df7d-4edd-93bf-346dfb770e3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e1e884c8-a582-4f24-b08c-dc8fb72f0536"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30781d4a-5f3f-48a8-bcd0-58b8a2de412c",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c5a050b-caf9-4cd1-8fff-2bf002f3418f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee47e28d-1128-44c3-80fc-5de3757e2ef8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc13a728-2a7a-4fa5-b69a-5ab6880f1c8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "142718b6-042d-42d6-b7b9-e240b58589a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea41ef0d-f72e-474d-b498-e06ad0a2e577",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4600ddd-b17b-4bca-b177-7344a5056d27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d362e42e-69e8-4301-b00c-fc9978c674c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df1d2128-0611-4e17-acf0-85df5f1e6e38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "86855245-ad83-495e-b3ee-3710cede0e7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37b298c1-2cec-4780-9231-612dc566ea7c",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46cd933f-e0f6-402d-861c-32f0d3296a4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98adff49-f9a9-46c3-98c9-8eeb3c54d353"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69fec495-fda7-4a21-97e6-94237198e16f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1f80fc2-ae49-41a5-8f64-e3a64a3e4be5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6dbd68e-619d-4b6d-98a8-091d91a5341f",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3bdd5a9-16e6-41fe-b737-bef9e7a01d66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e167ee3-ab23-49c5-b804-4807fa9e5a9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebecf98e-1308-43de-bd18-fe2032081a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8d9c448-48d7-487c-81ef-66ea53d14f91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd044e15-0a71-4acf-9871-378a126f568a",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72d1f04e-a26c-4151-80e3-b4b204b36750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20d432f5-1008-4744-aff0-072b69743826"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa4d0924-b2a3-4886-a192-2f69a09e3507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "09c0a2d3-5e3c-41ab-93a3-86877602d061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52714d37-5d7a-44bc-8804-f8b163ca7431",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a83e188-8233-4d5f-90ad-03e6c5823ae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "422a83d0-2458-412c-8cb8-d7e4989ef77a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b4308ea-a79d-4ee9-b76c-0fd5e3a8c8cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dd92ceb1-78a8-4d44-b914-cce916e999bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c961e2f4-be67-4d0f-bca6-d231bcaf9278",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81cdf5ca-c634-4fe7-a804-53c3dd37b72c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffdcc51d-3c16-4922-a49d-0c82e71e7612"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fdacfab-b270-4df3-8f9e-c97aa45bc988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ab89207-a759-45d0-b678-b64f29af12d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b7c31ea-a8dd-4a47-93b5-9b61801a7a1f",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a454a8c-f5d9-41e7-9f38-84b7096b5e5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18e6bd4f-cd51-4301-8662-866cb766d816"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80df492c-37ea-40a4-8d63-66fc6f50b600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6086c5ae-fb2a-4f44-bc7e-23fbb3d2d5c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1329e07-fc5a-4739-90cb-c278e7e1d37c",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf61f539-6854-45f8-8b9b-d955edfbc510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5dcf46b-d2f8-4f6c-8afc-45f248fbff56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eda60701-e5e7-4ee6-9055-51510c56e337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9644983e-590d-40d5-9007-f8d8d4a738ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9584043-8a68-4a52-bb02-18d4f16f72b8",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d75313a-07af-46f4-8ad6-82cb543d3c88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9edbd505-3aa9-485f-8a40-f3b909d1457c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2abe9ce-ca63-4c15-ad85-887a77d7a070",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc9156ac-6076-4bcc-b8a3-d520f5644b06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7aa74b9-43ed-43ad-92bb-51fda2c96968",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4d868a0-a5ee-4b73-8ca1-9f567c27456f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dccba47-2016-40bf-946d-96b4ff9c541c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e8083f0-a3b7-461b-a333-c388b0c46a68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4e6c5936-8bf7-42a4-8df3-289bd19ee850"
                        }
                      }
                    ]
                  },
                  {
                    "id": "641f0c67-1790-49ff-a406-e8ee8e9135c3",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e01e6ad-0e92-43f2-beb2-24c0f6fbdccd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f0ad782-d482-4660-8342-5ba36246f322"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c4284a8-c6ea-4ea5-ab70-7355973bb7d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "70056368-9924-4592-91c8-3acd1bc54bec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbf275f5-fa27-40d9-ae98-c8eb975ccf09",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cea26694-1f34-4da9-95c8-41af8a7fd4e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f1eb9e8-46ca-4d8d-9955-9f7b0277c4f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3cdfac1-b61e-4289-9746-b95a9a44f2bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3cb32f3e-fec7-42c5-8393-05e2e496c8f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59e21569-ae89-494e-bda1-010b30c53e74",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "422594c6-e952-4976-8a68-6fad61b298f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6053c574-a6d4-417c-8ac6-09109811bc02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de852489-b14d-452c-9e09-1b8df0cb8bd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "60fe8650-3732-4735-8915-8ed967b94b3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "947b15a8-4a8e-4e11-aa22-07b2c17d0034",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfea674b-4af2-46c4-a640-0c96c6ae5e1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99ba94bb-336f-4607-8538-e05bd1346460"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33e6c142-b1da-481d-91cb-7395e8666965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d0f76437-05bb-4de6-b9c9-b8fc86ef0099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f90e06e7-b711-4f67-999c-173ce0488677",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4b079a0-07d4-47bf-8702-532c41be5801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e3ed910-ac44-4be9-946b-b8b0c68aaab8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf3a4c4b-916a-4be4-8777-4f43e6f367d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "21a31fab-ba7d-4d4f-96c5-c06a1e225682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d84d243-b1cb-47f9-aee5-2976564cdcb0",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18202278-379e-4ead-acaf-5788f5093baa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "552a29f8-2351-40d6-a1d0-0290792b0e33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac095e16-fe95-4cc8-ad65-f2ab2d0e9f05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "820bf825-2288-446c-96b0-8d07949d5a6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f75d5933-2f86-48df-81a4-fdeb87c749fc",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8c0cfa9-98c0-4626-abb4-9bd577c6ae01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "09bcf9f5-de7c-4ba2-ae40-b7a2d030a29b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7708c8be-db0b-4ee0-9c09-1317543038d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "48ded102-eae0-4834-87cd-f78cbb7b8063"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "58e19139-6302-4799-8e92-e9bfbbdb0c6f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2ef41055-37ea-4f41-9d33-063509eb32ae",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "310e0d6f-ab8d-4e5b-bf30-130443390577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "199410ad-3dfe-44ce-96d7-f862944ae2e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2794b98e-6787-4ae4-9143-f0ffc74a85a4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "6c086ac4-f5fa-4b24-8cc9-c4e6176c8ad1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9073bc1-3502-48be-aac7-c03fc32120cd",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9b96421-556e-4bc0-b412-f2ec823a4bf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6ce36731-070b-4655-aee7-ac33733eb834"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89a416e8-f6a8-4e4a-b524-08b0cb025901",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "b8eae59a-d70b-499e-a3dd-57f027ff6bc7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c25826da-0b30-46ac-8bdd-ca893a924035",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5d102751-0d91-418e-b1ec-e8626d07e253"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dfac85a6-3cc1-4d99-90ef-5898fa55c833",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b341a3b5-f119-430e-970a-2640cca9b391"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a6d5df16-281f-48db-a77a-f9ca81ce1119",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "22ee8e17-162f-4bb9-bc0a-213db564bb81"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5cd0eced-e074-40e8-9968-b464d8dc4c86",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0a22f401-85dd-4fdb-8526-5ed3ae6497cb"
                }
              }
            ]
          },
          {
            "id": "f8751655-7c6b-4779-bb44-4595e6ed634b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ed96634f-13da-4b59-a603-a2338b95b9e0",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b4ae53a-ab6c-4798-b958-36d0d0f1d5a3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1c1fd7e4-e349-4fa5-8b39-0f958155c7df"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d40c94dd-f259-426f-8ea3-1eb0f9fc1d8d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "72cf38b5-2463-4e8e-883f-1b64376e2988"
                    }
                  }
                ]
              },
              {
                "id": "aa5ec682-3668-414e-9165-f8008171de5f",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6ab3dfc2-a3b5-4d17-aada-673d874b06e0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "98c0e8d4-6c81-4645-b449-28f81bb7050c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8d0cb36a-ade8-43ed-b7ee-1677e7ddb19b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0b817bfa-d0ac-4201-80b0-1804084ef60a"
                    }
                  }
                ]
              },
              {
                "id": "bb334f51-7036-4594-94b1-0a75443bb4c8",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "12b63506-6984-41f3-bfcf-d22c64eeb85f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1fac72a5-4f2e-42be-bee1-560f21486b06"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5f8ddcee-2634-4086-bce4-c3fca1a14933",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "258c0ca3-267f-49f5-b93d-36a224f2e6bf"
                    }
                  }
                ]
              },
              {
                "id": "16b7ce04-130c-4cac-8f12-2c30e61af1e6",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "18bad412-d498-42b0-99bd-3f2ba34e9d20",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a7cce8dd-547e-462b-aa4e-c95d6c7f3e1d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c5e000ab-ff88-43b1-b8f0-8fbeb62e635c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "8d211f63-b9eb-432d-a8d9-5cdf4d61a1e7"
                    }
                  }
                ]
              },
              {
                "id": "4f8674fc-9165-4ffc-ae27-f1733738a743",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4c85b197-6ecc-4eb7-b106-2de7ca9b64ba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a9835a6c-fa7b-449a-b196-e7ac0fad0c64"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b53e1d33-32e7-4dc8-a9f4-1f349593a17a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fc39f701-b190-4ea1-91a7-f9a2060a49ea"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ed1b0323-4b8b-4d9f-ae96-2fca4704b723",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4c6eb07b-830c-497c-aac8-4d6ce10aca06"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9e32480f-976f-4a5f-8049-2247541be5e4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0bfa7a66-50d7-4359-a50a-24520a134774"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b7b70089-a3b2-4a20-9b40-fb1c3610eb0a",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "37014d76-6040-49a4-98fd-7a34642e582e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a3e047f1-698f-4f1c-986e-5aa67ea5d702",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b9b35314-d7b9-4426-8bc6-369d8c018249"
            }
          }
        ]
      },
      {
        "id": "1db5e829-aa60-477a-a56b-76481e53ca83",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "28aff572-8a6e-48db-b48b-7eb93ce3b541",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f4dad8d6-1eb7-4ecd-9647-887766719199",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7fce2682-69f3-4fcf-bc1a-faba1262c4ba",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9edcfd92-ad3b-4069-80ec-6a290953084f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47ea77ff-0f54-4d1f-b08f-cf415b9b91c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ea529b9-794e-438f-a0b0-4027d0b30310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "7123fbb5-c42f-459a-b9da-dc7eb666eefb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ee60185-15ca-4e55-9647-6257501ab450",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ece2828e-9cbd-4f58-920a-568ab2835dde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41186f74-9d9e-4e99-a228-a97bc0c37b12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b118c1a-e847-4b10-8e52-a9479695a153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "648ff4d5-58d3-42e2-8411-4c9c8a8fbc39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f70bebb8-c8e8-4e94-a3d0-71b25d5ce47c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee92c90c-0e96-4ac4-89a6-79ec127cc0ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1152c5ef-3c12-4d5f-8dcf-d70a6619fde6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa4884b2-014a-45b8-898e-122b42c7bd4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "161a6439-fa06-4b62-a4ba-c796e09b82de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9245faa0-223f-438c-82a7-74c22d6610f8",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "139e3d80-dbbd-4b16-8d23-b2eeaf635078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05de5533-00a3-497e-bdc4-daa80f856fa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f48c7c9b-1493-488d-add8-6dbb020e8a9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cefd0baf-6f59-4663-9298-1514a278cf23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7d90675-8665-4db3-a025-3a7798369e68",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e825b586-7de7-46d3-93f3-6b2a4c324514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2b54396-dbbd-4ebf-a65f-f64edee9f540"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a5ff078-fea8-4c69-87d2-f4542bb4e98a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8192bc5f-5064-4cc7-a273-17d941672f0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f816da1d-459b-42db-9129-74e31454c1f4",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ec752ff-f95d-46ab-917e-2f410284565b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82f9d01c-a6a8-40e3-874e-971ab84c8e08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64127694-6503-4f93-96b2-ad5a2a0a0f84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7863033f-0912-4e9e-a977-d65d20485331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4130a92-2520-452a-bc14-8f47cda5f8ca",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1be55a8f-30b2-460d-8b59-2542598bd5cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb9f66b7-5882-4527-a09d-9450fd66c7b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9405e0f6-694c-426d-b5ad-d13599e5db9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "7665dd5d-94c8-4726-9f99-ca44070e89d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd2b5774-4698-46d5-a4ae-299d03c254bd",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad8cdba0-8d03-4dff-811e-5e0c0cf81e3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "904c95b5-57f5-4ed3-858e-4072af1d4e59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98e353bd-283c-476b-b739-d3e6eff1ada4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5794edb-cbb9-453a-bd3a-3fc1ee929ad4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff48c1a6-6c08-41d7-98f4-c547ef61af05",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c39361b-d44d-42db-8ee7-215eb0548048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8171bba9-957d-456f-8e80-d2913807300e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9a5cb3d-a903-4673-8535-4079253a45e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0910308d-8457-4848-be91-e15ca37f661a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a43ff3b4-7cfe-4a71-9186-2d4f08d3f7f7",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "156fee99-23a7-4093-ae02-2b82173b17db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac08acb7-7fb0-4c69-8a00-9b7bfdff0e86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f427270-9da5-44be-8440-82c56310795e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e73b19d-5acd-4f21-8614-223028f87d58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fc06aa1-46cf-4a6b-8098-6dbea98204c6",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8979b196-cd99-4b01-a962-3494c8351766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3061fbb9-4b21-4b60-9f90-0f8277845b09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39e34987-d941-4a21-ae84-0cb14b500a12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "3a7694f2-ee1e-41e6-b2fd-3694274b9d49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24c3a466-5031-4e3c-bf96-133f6bcb00a4",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "484334cd-fd54-40b1-a0f3-9fba774184ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e547804-1681-445b-86dd-06120d5eb958"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56be57e5-b93a-4db2-baff-b7954674103d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e0145e1e-169c-430a-9935-56210c81dfa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fde8a776-42cf-4dac-9de1-d60f5f268f1c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f3a0a2f-b79f-42f5-9f27-33aaade5d1b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c405f3c-2b4d-4f6c-a779-7c7de99d0a22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81007f2a-a5de-46aa-8ded-b4b139532bb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7ee1e1c-5aad-40cc-b990-a35db886ad50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c08cb88e-2f82-420a-8fb7-73d189f95453",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d77d88a5-6019-4168-a17e-b2bc96f4aed1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e7ecffe-9485-45dc-a0d8-00a35e3b20a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69b7b304-f35a-4ff0-a1c9-5ecdd9837206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "8cac6f86-4875-443e-b306-c3b6f5d42665"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28517d68-63f5-460c-b5f1-eb393056197c",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9db1b272-e151-4382-bec1-5a449b9589bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d6ecb30-07eb-4cbb-b1b9-bb65f2260cdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78aefb6d-34ef-46e3-835d-931288a04d95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4fa09d1-0f16-4863-a8c4-4a45f2bfb1f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b0343a9-b5d5-47ed-acb1-db9e20f84645",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "573f8b46-bfc7-4a9d-adc4-4e9f080b14ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5bce6aa-e40f-44cf-ac37-7af6ede0775a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0133ae53-adef-46d2-8fbb-5af476bbbdef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbc05207-361d-4289-9327-8a84dc8f9aff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "951ff91a-4ddf-46ce-97e4-78f080f02dab",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f44d4d74-1a3a-4c2e-beeb-fda6334df889",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed19f3ea-2454-441f-84e5-13380cf8c636"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06e41db8-794e-4daa-92e6-a31a00f5a7a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "7adebe4b-0968-4c01-a6c1-faa3f8d0e774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "614ef8b1-2e91-4042-9806-84490c3710c3",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "198995da-13b8-479d-856a-e059c7b906c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d39ec2e4-1ac2-45a2-97bf-487c50278e8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a5538d2-605c-4ab3-9b56-9ff9cde15824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa6d3338-9908-4082-827a-26b1b13d8f1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d02098c2-d9ab-43da-8c9e-b1065bc0b37a",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42716130-be12-4366-bf4d-640fa6b15e9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad70f7b7-9e12-41c4-aa5b-fef01c1d841f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93b0b0bd-aee1-4930-bdfd-96a52acef08b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a78b0554-7ac2-4f06-8f6f-c0c5d04a8908"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de7c4397-ae1b-41a9-ab47-5088853e2f17",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a26149b-4c5b-45a0-86e2-5550c2f5e321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54dd6d78-dcd7-43bb-8f4c-c130d74ef0e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "568cf4ea-c395-4696-8812-7ca8e7ad2bf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bedec92f-3c70-458e-a9a4-81670cf7f3ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ee8b2a3-129f-4c5d-b890-f35725bca282",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "937ffafb-9db8-4e10-aa8e-aaf75e72f675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ff02f8c-1435-4e88-97df-c59c9f45267b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e26d2b0-81f7-4b76-9116-0b527626b577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "523baa97-6b8e-4503-8e1a-3b0f27fb3f9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d47f31a-63b2-4922-a1ca-d194fc7fd733",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "123b2275-00a9-4c3d-ad8c-edf1b6c630fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3da5c5fa-6f1a-4913-b646-3f92077b9949"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41f1107a-adb9-41cf-b631-221e234b254f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2508ca8f-98ca-4962-9698-2dbfc9912a93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bff1a59-c4c1-4ac9-830c-06e80532bb1b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7262e58-2110-42ff-a2e0-b37a0eade3a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15d28bf7-79a3-4334-bf90-f7d99e10d879"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b76b56c-c714-41c2-9082-2abc5fd18a7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "07132ddc-9780-4214-9405-67003cfe4546"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ac648a4-2df1-4d20-880d-487768ee42bc",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b199def-d6a2-43ee-884c-5002a6d74f42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8f16f63-ca37-40cc-b769-cfc29a567442"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17cd036c-cd4a-4b3c-9864-612438d95d28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "649df29a-64e6-45a1-9f5a-4edcf9d20ba3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "842f0133-1a85-40d2-8a35-c0b95c8ff7d0",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7985181-451b-4e6d-b099-d9a05af513a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd9e2132-f002-4208-a63c-f3502294948b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b42e1c10-8120-471c-8f42-015735e79e48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0600594-264a-42fa-8f91-ed105200ca7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "471ad86a-6029-45b3-b56d-e41dd3a88ab5",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4ef6163-a2e5-4fcc-933e-f043a9e292f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d293bd2d-901f-4686-9957-48442c679eb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19921cca-5056-4426-9f34-ec34691310a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f855612-bd02-46de-80ac-a1c483558b6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22943112-3a5c-406e-983b-2066005e1ac1",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "793b88f3-ac03-4113-b54e-e21e0c1aa1cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7b84cb8-c396-4f6c-8e2a-7177a66d0843"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba9ff7ac-4040-4407-8b9c-33da89cbaeda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5c3eafa-35dc-4b9e-8bd7-fb85d2accff0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd379db8-3873-4dd3-845f-02c3e27b248f",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc46c03b-c197-4b97-9019-6b4eb892e163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0ce2ce8-9739-45a5-8c42-7a3431fe00a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70bcca46-d507-4785-adbe-6dbd70eb68f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f59a5a8-00d6-476e-86f7-069c9135b418"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d6bca2a-1143-4f95-8ce2-e14cb83c83ba",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "569249ee-cfc7-4f14-ac67-b1c30ea8aaa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e3db755-b5d4-48bd-999f-8f16f61cf746"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "044d659b-b547-49d0-8a35-083fccedf427",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f81fb4a-725d-407b-a5b2-feb0535ddaf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e55c4870-d029-4e9c-964a-acb05578c5a6",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "751a2db7-cb00-47ab-a061-518dc393dee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d047dfd4-b51a-4c10-b646-7cb0aaa93da6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6fefeea-02b0-4e35-8346-cbd9efe4bd65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "15da4f09-c191-4c9d-a040-c834ee1ff69f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17a06c53-bc35-44c0-904a-43ccdd07a1bc",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbd58c00-2866-4c63-83e4-0443972918cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97290c88-8ba8-4ed7-b06b-5a7a3609ad76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7470134-ae18-41f6-8229-3ce71e9f26ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8073a37f-e6a9-4527-9618-95ed6a64462b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e81f6829-1900-4a12-835e-53f6aa36cad8",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7bf7db1-7dda-427a-a467-7d2fd8bb6801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07e7f5d6-f435-4c7e-9872-4f1def800b32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ba7cb27-c6d8-41d0-aa0d-cc497083bd7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "43ca41d0-8e01-46d1-a6f3-283a1dc33235"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "89db874a-0d52-4b95-9ce1-8efa1cee323e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7b841aeb-9ba5-4ae9-a19b-593cd29f260d",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9831ce3-463d-4730-b64b-6b1827db62f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a2624e1-a93d-45c2-85a1-06cdb7717b92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f27a6bd1-71ee-4a9b-97df-a35d71709621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "176e4e5c-f37c-4508-93c6-02bf307be770"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da59355a-7681-47c7-9a9d-dec1413b0967",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77a1abfd-4ff0-4191-93f6-e91b440c33a3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "cbc2a627-7ff4-42fd-bb08-bfe2ba695d8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4af138f8-b561-4c0f-866e-3b70e1ba6ee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3fe30417-1bea-4851-94bc-e538daf11a11"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7d6c7243-7b79-4037-88b8-64c5ebb6c6fb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8b567abc-7363-4ed0-8654-309f1a7b5b17"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4ea4ad38-7d5e-4be1-a79e-21c33c4c44f4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3032f52b-d4e0-4f5a-bb2f-bb40352a1085"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8e95f7a7-554c-4e56-9ea5-5fbb297e6c68",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "60afc22c-4550-4904-9c36-37f0616187e5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bf63314f-965e-475e-ac21-c67387215d6b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7a6e11fe-5ae7-4a94-8916-cb63ae91e81e"
            }
          }
        ]
      },
      {
        "id": "ca8f7784-4195-4e12-bf36-5a878d7a1866",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "8b6f98f1-ad8e-477a-82f9-ec906eb093ba",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ba0bbf34-80c6-449c-a0ec-0122498e84dc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "20020a4c-acf8-42ad-ab9e-c2382603a4f1",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfa35bf9-1357-43f7-9c02-e531bf874777",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1beaeb6b-6fe6-4d75-a8a1-3fde78decefa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "037ff0e0-0149-4111-ad84-f91347329889",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81dd0d33-3049-48cd-8517-e3dadecb2969",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b01bac40-a986-4273-a7d6-c48943f42581"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4914358a-2a85-4060-852f-2f9d20c0b322",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2196923f-966e-48b9-8f37-17ab248d29f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1416ec8-905a-498b-b1b7-cb67b7e9a4fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "159b4387-7bab-4c71-a2fe-bbf06fff186f",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "455ba25d-6a95-4630-b9dd-489a9beb20f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e34af00-8414-49ab-98e2-86258711a46f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcb4f6df-1ecc-4002-8683-41bea6a26675",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc115820-a72f-4761-a9a5-d2843414d276",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edafb1ab-b0cd-4adc-84fc-660c07a121f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77806c72-d60c-4769-bd1c-1c5a60e40f15",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2e661a5-55ab-4a02-9188-df05bef1dc7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6eee0e69-c333-4c6c-ac9c-855a05227fa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c785e849-97de-4c09-ada4-a6656369a0dc",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81859ed4-9da0-48dc-9c2b-5e33928e8283",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75902676-e58d-4295-8862-031a00aa6286"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d82b636-791b-49df-b16d-3a99c86fdf78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3bff9df-926a-422f-b00c-4e4d3469bcfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b582e88f-f7d8-4ad4-bd23-6cac303e25c9",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce64b5fc-41b9-4f4e-bae2-7fd7814c7d5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b2d474f-65cb-4cd2-9907-d95ddd614bb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddadcb68-5145-40b1-9743-e1cea2760717",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "759c3835-a10e-469f-9975-9ff00ec0f98a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7d02acc-232c-4442-998b-6de8afa6da37",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f9c39d4-2cc7-43a5-9083-e16267c33a08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "426cbef6-f10e-4e44-94a2-508611abd1e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb54acaf-8485-46f3-b0d9-e89c683b11e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1b7948d-a4f9-486f-a675-df6b667563e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d87595a-0646-4756-9146-e626c5a4ccb4",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71b15f3c-eab3-43da-ab33-b749f63cb92f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc6b4b67-18a8-4fcf-b80f-06010840d2d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71f40542-b6d2-4db3-a2de-0a3bf309e308",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3701249-acf1-472b-b2d4-ec2c61629467"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd4b2b49-e1f0-4464-809f-7ff5158b813c",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fddcbf41-4e73-48c8-beff-81a165c4b5a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fff67b4-64a1-4d73-834d-600f78a0a6fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "022dc42f-b28f-4f76-9349-01b5971ad42a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1df40d92-6c21-43e3-bddb-de7a58a1cb84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7346544a-041c-4cb5-8337-ce54370fd5e8",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89360ec9-d04f-45a9-b953-09343b0843c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ba2d31f-8407-4f25-8c49-bc6a50447c36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06e97538-4860-4481-8cca-73abca3927c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8aedb878-077c-45f9-830a-d2bc1e75ccfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce6bb31c-2e43-4838-b503-16a9dab81da4",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3bc0a43-2e24-4dbd-9e63-d83d238275be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72f43700-6bca-4689-94f4-07ef92f876af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b37a06b-e1b8-49bb-b250-5bee32422482",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2895f0a-905a-4b7c-abda-fc3858fb4ff7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "568438ea-d774-4ecd-8dc2-87f48b27c60a",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89b281fc-af4d-4b0b-b285-6c11f01319c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1cf12017-7239-4621-8354-0064bd2c6d0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76de5e9b-b935-4d1d-a660-b5caba3a3955",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8d2e07a-f153-474f-9dc5-13143e8ef5b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e79ac389-c1fa-4a1a-aab5-4e82df538bf1",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a09f3df6-eb04-4d2d-b120-63694ab4fc2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c19252d-dd3f-4840-b701-38a662065c5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f5c761a-df13-4571-a8cf-dbb485cbd340",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f75a4636-9dbd-4d73-b2a4-2521af625aa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "449904f2-6af2-4c9b-8fdf-7fbf4cf20f7f",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5698de94-8f67-4853-b267-fba1c5cadb9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67f19dcf-3453-4007-b426-703571c67ea3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1642bd13-f099-4dfb-8cfe-cd16f6943214",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5801cdcc-73f8-4362-b6c8-bb968f1bf974"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ff59ad2-8b4d-46c8-9b1b-f6f3c9bc64dd",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8a01aec-5261-495e-b34b-64df2859b5ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6698bcf-26fd-4c75-8488-0c8e18128799"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eab82bdf-e228-4038-9da6-2cb1b5894cf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8550e36-ce4b-4a0d-8655-e0cb85c30741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5174113e-2335-4a16-a53b-fac139c6492a",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d7a425e-322b-4788-965f-ae861655464a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25b93a3b-270e-42d7-b448-f9e7a7780695"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4881eeaa-9446-4051-828c-24bb2c05ce85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9eaebc00-4c8a-48d3-8412-996e6196d991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0e66fac-26ca-4fe8-8bb5-08de5f119a6f",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca226eae-5df3-473e-b941-595d3bac92a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7897094c-a594-4764-bfcb-6a8ea3b971f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81692faf-512d-4592-83f8-97337253a4d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5676a958-cb36-4a29-8735-3dde0ec7a9e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fe199f0-2346-45d1-b46a-d1f31149154c",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4894268-b36e-4dbf-b48d-98073c30a771",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a968dffa-5544-4325-baa6-32eaeaf96834"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a939a69c-4654-4c95-93a5-2c4c459d6baf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed46a7b8-9d13-49ae-b6b7-315694439de7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bb4e5aa-84e1-4d11-867b-852245e9b0f6",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d94d88b-3bb6-4a94-bf9a-f15290688226",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfabe151-c65a-4ffd-ae65-e4cd7261c40a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a834de75-1f6d-4c01-9147-11cb5f40587e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c312385-b577-4e1e-af5a-d33ca5820d99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ce9e3f9-9151-4642-ab11-a6b4d84c80f1",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f44edd11-1fd0-4b2a-b211-4d33f85f077c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3746cfd6-cecf-4a97-bb06-459427ed84c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ce3b7b1-0ef6-46f2-baea-a16707455273",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84281e21-64fd-4117-8aff-99d11972785e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2b6153c-013f-4ea3-a5a2-c5ed5ed99a59",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "969cb800-78b5-40c0-ab05-62345d3d8909",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a00e642e-38d1-4fcb-acd6-51b10cc4bffd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "549cc100-fc5b-4782-af66-16e24e8c2b7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cc5fc7f-3d43-47c3-9d7a-006984351d6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5613668e-6e5a-4588-9954-8410a587e498",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e70864c-3ed4-422a-ab4b-870876ebf1db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78c08ff2-9d67-4a17-9b82-540d634c9dae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ff637d3-6992-4f71-a2f8-e2f4d6da9689",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a20f9f2-43f1-4d2a-995d-8752d36874f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4e6ff4e-5bd9-4d1c-a990-3ebbc3498f8f",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c1fbc4b-ea41-4b03-8a22-385887cf066f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89542ad1-ad77-4bd1-89d0-77c0f9017208"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a1d5f06-f4fb-41c1-86c3-3a9cad56f58a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65c43baf-be65-4499-b097-b5a6293b6931"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf6baad8-3f7a-4e50-8ef9-f4e708ecd173",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dc262c2-4f4b-4e31-8896-1f25474860b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c8ca6fe-99f9-4a36-880c-9d23a6773a0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e099ef1a-0a8d-43c7-8ee9-580e656b6315",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34304290-df0d-41f5-a087-437a50ffea68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8af8e13-035d-42fa-906d-600db0a5fd50",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c8bdab5-d1c9-4ffb-bf48-d2e1b4fee52c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "168a78de-1101-4fa8-81cc-067b356a4de0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc78e83b-32da-4f0d-8c01-160e936ec304",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e432aaa-5496-403d-9c6b-922705a334eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f74b8b27-05b2-472c-ada0-9835ccaa46c3",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2626d3e2-74e9-455e-9d85-3f61bc4a7afd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fada0003-42fa-44bf-830a-0ff4e9887d97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f63fe1a7-47f8-4952-ad57-33c5a2d3446f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac925ccb-a0b8-40b2-8b46-10822e884004"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a866decf-d157-4228-b900-c0cf3aa2681f",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da57a090-3d9d-43fe-b867-1770b6ed0b5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8433c09e-f356-44d1-a1df-52e50b5693dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d234927-1d6a-41cc-9c6d-027805ef68f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd2ec773-a85e-4d9a-b928-f0830ea8117e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "157748db-c40e-4027-ac06-f566bd46bd23",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51b7d61c-c43a-4973-8f04-2e355f6ffd48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b8cb695-963e-419c-a08b-cbed6ccae38b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fadf208-e2d5-4a79-88eb-bd16a2359488",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b00cd1d-5717-49b9-9d79-6b8843583eda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4a87bbb-cf62-4610-ae52-be89b1f1cd00",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6df2cd4-c20c-4fa0-bba8-d0feb90b875b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "201533d3-8328-4e3a-b84b-8808ccc17696"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba710d28-c80b-49f0-8400-591f50db280c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abb19281-457b-4217-87f3-9c731ed31680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "306916dd-59cd-4b60-b08e-22a666dbc0a8",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5448d7c7-75a8-4458-9ce7-9abf7e2ef835",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b126cc13-eee9-4f93-bc79-8c52b0cbe688"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6189fffd-b2b3-4a33-a8b1-d1c64d8172c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cff6d37-a90f-43ae-b543-b45b7fc4c2bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2775806e-139a-418d-b7bf-cab0d12a9445",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92c446c4-63e7-4d96-abc3-0205f064ee9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4aac9f2-4acb-44f8-9c9d-283eb4ec6d21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20fc52df-ea40-470b-a5f1-c712aac84e49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50430301-5660-4ac6-85c1-ec63f3c86074"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e1ceb6d-a5b8-4e3f-8619-a356e17c0d71",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43a9c384-9e96-44fe-b552-bfb7c9921cc8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32d9e8fd-2ece-4754-ba9e-8a0504064147"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c3e547e-cd4d-493f-837f-023d14d1ee9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7b8781d-f8a6-49fe-8a08-b10843314c9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca35bb73-648f-4827-b334-9dcffedf05a2",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00cfad06-2d4b-475a-bb88-a9edb848919f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b20fe0f9-8740-47a3-a35b-fc778c6f473b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e43fa25b-2d8a-48fc-bf27-e4c96106ccde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e599af93-f3d5-43f6-a027-48dee094002a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b84916d8-d874-4b7c-ad54-d5fa47b2ab06",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a54001d8-33fc-44e3-8537-0547e904c390",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "331c390d-8e62-470b-811f-1bb108cd82d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "253377f9-c27c-4a84-8f55-4e84bf4ba422",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5addf73-8130-4c80-8de1-d56989eaeefc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42e1ce5e-5616-4290-93a9-402641b3e23c",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b8ed221-ef99-468b-93e9-d794cacd0842",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e04e73b3-33c7-4183-9650-71dfecab7a3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b17b94a-bf7e-462a-8535-0830a4246f2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45b3697b-b059-4a80-b959-453c1bdbfcea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1184244-8423-47cc-a434-70108ef934da",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19f9c0d0-a6a0-49a6-ad57-efd773fd4417",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "910871ec-b708-4cf9-8946-4e0abca3e879"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5f2418a-18b3-4691-86a7-f1bd08b5a627",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52bb6d5e-b6dd-4393-82e7-2c53ac95e8ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "436f7c3f-4389-4947-903a-390a409135ba",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ea28405-eb21-47d9-8163-6b44813a09db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70d61f00-e19c-49bb-8efc-b772ddcc21cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "402517b0-6371-4718-a30c-42975cf9a918",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b97de231-b5fd-4369-8183-615b3a5fcc70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04e3864a-1201-4893-a821-3a839e6079e7",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76d91054-e982-4e05-bda3-b16fd7f76c94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f38f6e8f-7f86-4487-9462-a4a1f5413481"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "891df310-ff84-44fd-b2f3-caeebc1f8890",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3eaa8b2d-5249-4c5a-a509-e038e889fa7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "440b02ba-599a-4ecf-840e-cc7b7d77ecaf",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09242bee-8fb0-4abe-bb42-2f897123d778",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45f5ffd8-c1b4-41db-b609-d70f87a3ac12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69db8894-8ac3-45bc-b227-2fb486d4d431",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69bbf574-4985-4b08-89e8-9f7bb73a7972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "184b41d4-611b-4747-8147-702c812e345e",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbafd5f0-b14c-48c0-a34a-922483e44325",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26c66a19-cf55-485a-b66f-8a092a09979e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "572801fa-ccda-4153-afff-3b4b8e1f17da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b372022-429f-4c69-bf03-f0434124546e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d4bb1b5-0cb2-4c6b-9d89-85ddfe23df98",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32f2965b-b19c-431d-a7ee-a490eb1f3a42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26f59fb9-9972-4d4c-b6f6-d2d0ff164cf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fa3f988-22ad-4206-80ea-b58733eb4df1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a070b8da-2ceb-4527-8e98-efe7b8a86562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc6071a5-37e4-46bf-ba31-8903a72ca2c0",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bacb7b81-d872-4f66-ac86-1f8281a748a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c30376e-acfd-4af1-a9ca-6ca01c6b0157"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d99cd90-cefa-49be-8a38-3cf268ba1605",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef2c8056-a7b3-4f82-bb4e-85095be876dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf4379e6-4886-47e5-9633-d8362d346ac4",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b454644f-4eee-4e54-99ec-43c6e4057208",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "033e674c-84e8-4736-b282-dcbb75a8bf82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad12d80c-fa07-45d6-97f6-92b52cd5670d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81609a93-0881-44b8-88b9-576501ab1e58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa6ab6b0-03ad-4f59-8e87-0c7588472ba7",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db8cba32-cd06-4a78-8b77-9581f6df3831",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "673e9da6-7ce9-4276-9329-5d28465c4729"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bc9b15b-8151-46e8-a151-1117c6db4653",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c82c7cd-b7b7-434f-b296-fe745c46ba43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6444aa80-3449-4b6b-872a-5639d3bb9a72",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ed0a659-65b1-44dd-8a53-ac4186af5575",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b497599-01b3-4db1-bcb1-306f3a25aba4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11776c40-9bf2-4937-b6ec-1c85c1ed58d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16cfc41e-9062-4dd0-a93d-532504ac0fe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d26c29b-03f8-449e-a413-7eeceb862ad9",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e3ff2a1-b079-447a-a36d-8fd9f81f6399",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52e1ec73-b930-4177-85e6-ef048805af16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8853cbed-a7c1-40e0-acb0-7d3512a14efa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccbd7cbe-548c-4b06-8c3c-8ff5140da063"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a1eb85b-eacd-4f50-b540-1e033fc6529a",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a547796a-353a-441d-bdf9-c3428a27d04f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8171afd8-547c-43e3-868e-6b324c0a7163"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46c796f3-602b-4e31-a85a-3142e074adef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8803b79-43d7-4634-b644-e6aabdc78d22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af2712af-4b0e-4791-8f43-60065013c9a2",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d4c3e78-cca9-4415-9bf4-1e5ea4aedc02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "968d79c2-3dd5-41d4-8795-66ceb97be5c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf634ae8-b895-491d-bcb6-5508496970fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1969a2c6-936f-4386-afd5-eb416e76426e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81e84956-e97f-427a-829f-1688fa384e6c",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1756c6ab-47e3-47fa-943b-1a9ffb95df2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c46d621c-21f7-406e-a3bd-e9efe19cfd0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5989584e-97ce-42e1-ab1d-aa34d46f9964",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "271698b3-7677-485e-bc1f-e8ba48ecdba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be98156c-80ed-463b-94ba-b35844f33d28",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3d9d229-8973-4a6e-a8e5-325151a7620e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b273b981-17c6-44c5-aacf-22cb44f0bd62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5653a87-c69a-4ec4-958f-88000b1c649b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86b4d123-5180-4349-9fc8-a1b62b065ba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83527a90-c574-4183-b8db-0ec10377ec44",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13f459e8-1030-4910-b763-2d833b429fb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5682b37f-78a7-4d90-8309-512c97adea10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e9b35d6-8f66-46e8-a5b1-7bc0aa3c4c08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7945aa13-8b33-47bf-8d0f-1dca24b2d021"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9697aa0-c1fd-43fc-adfb-f4116b9ad709",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee357bff-6833-411a-ba55-4b400d854c08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dea0bcf0-87ef-4caa-abc4-cd8993e83a7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e8b8c97-3822-418b-a4a1-6d2e914008c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d901176f-d7cf-47d4-91fc-1a73a419c4e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8abd3f1-b3be-4db2-86a0-69588d5d5e67",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d6281a3-653f-4fe6-ab0b-af1eb35dedd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80524ab8-11fe-47c9-b85e-4fb22c58a707"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "617a4ec1-6bbf-4fb0-8224-f67d1bb76d81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0643c569-4736-458c-b31b-c65428b13d60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b75522c7-66db-40f2-904d-3069d80a979b",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "495cc379-ed2e-4892-9fcf-f4b38be04fde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5c3c61c-bdd5-407a-b5c0-f57e1bf8ebed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b643fd5-1970-49df-928c-0118aa6940b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03d626e7-c527-44e5-a894-d4b1cb3c40ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4693c7b4-c229-4456-bf6a-d8fc0f2e9d8b",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eacf74e-3434-4975-bfc8-2e03fc24b0ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdaeaa26-a49a-4e64-99bb-b68a08ab0b01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bafbcdef-a4a6-4b45-b737-4e5a63332550",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "067aad58-cfac-4aee-91d2-1c582f8b9da1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "691b4f94-855e-43ed-8b05-008b630ff1bd",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "659c5a5c-5d75-415e-b1e2-b3db34ffc437",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dd9d52c-423f-44c9-b3cb-e61b9749fb50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4570ca1e-062c-4574-85c7-133853cf96a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f44f4460-f02c-4a54-8fe2-adb996f586ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31d958db-b93d-405a-8728-439ee2153f96",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65ed7afe-fad0-4b45-9ea2-5043c0081617",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f396d596-8fae-4f09-9ea9-95c6b089af6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb691637-a628-4f98-80da-cbfd3bb7b94f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91c0833c-5674-469c-8358-eacc5fcb80ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ab0dfd3-18b3-485b-80c5-700ca9e438dc",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb8bf61e-3c7a-44d8-8512-564911b381d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "152bee9a-73cf-435a-a95c-d70662056a8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb3e42a7-8fe7-4c74-a899-58a0bde88dc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8b51679-52f6-4260-abc5-6ef06bb2a4d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb6820ee-be92-49c3-9c19-8eb80d95434f",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7b17a04-d421-4296-8331-3f09d693ed91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "756bd2b3-2a2e-4247-b1fe-23ca8832cc44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a5365b2-a86d-4c2b-9bf1-151d4b9ad2ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d703165b-7296-452d-8bd6-7d44859c6c89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "684bd4b8-8404-4a2c-a072-bf9fbda8d6d1",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c62219a1-51a9-4c68-b20b-f8c72f6b9a27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72808e23-6ba9-47a8-965b-0d1c9383b22c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d18bbb84-681f-4495-a9f4-5f7475726610",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2da1bd4-08ae-4f31-b097-6fffa726b927"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c574041f-6be7-4042-8489-9ec024ab5db5",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e27fe41-98dd-4769-95e6-b3700e393e2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "903a39dc-8dd9-48d2-b2b3-f0f15781cd8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3216a7ec-56a1-42f1-acd3-060ffb5f0da2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82991a18-8f4b-45ba-97d1-449c4f8a4dfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4154d7d7-92f7-4fd9-add5-aa014a220537",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "942a5cfc-bce4-450a-9233-8737925fe9e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fceef064-8844-4542-8472-480d0b27934e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f77a6363-ad8e-45a8-a7cb-020871baf98a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8cd8f2d-dffa-42c8-95fc-ec1694052993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63643fd9-bf9c-4143-a0d1-e749fb31f67e",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb3fa425-ee15-49d9-8ead-f52f049cd2de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a1c8980-d393-4d07-9316-c204d477f5f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b602bd7a-ec53-472c-9045-2e1e19149e08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3292c50-ac8a-4cc9-92f9-dd3f8eafa3eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce3d7fee-fbaf-4e49-bbd2-34ad3ce35b6c",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b7de0f4-4c99-4a2f-b0d6-a7eafa9f409a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d88880b-52d6-4f0d-bed8-d305322fd65f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaa11366-0343-4653-8d9b-d72e6e131130",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30bb1db5-3d2a-40d2-8c41-b6a304ec1431"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdcc7afe-9c40-4c18-b853-8f0cb4d4b8e3",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1a9a243-6f78-4187-916b-68ad117d2672",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1772814-f45b-4845-9ce4-08b52d4ba733"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a33cc7b-2876-4ab3-a566-d963d600828a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac860922-5f17-4864-87b4-bbcd731da8d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71e47406-9854-43cd-b9e0-961a26d891e9",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79757f87-43fd-452c-896d-0dd9c3cedac4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a90a9cb4-25a7-4dde-a3b9-b72572446e1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9585d5aa-3aee-42c5-8bb7-d9dbaf44cbfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89429b0c-e579-4a40-b37d-b8ef6621046c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9a20f4b-0652-42f6-a4ab-cc35d1fce6f1",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af882d4a-5be5-4ec5-9147-41d5e9cec8df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8be1745c-74e6-4e81-99e6-438af75ecf83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3070b6a-682d-4784-9775-7852eb662be9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b73d68c-4d6f-4107-b50a-6cd55135d77c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4f03296-a7fa-466f-bdec-3c8cb2c19313",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "633ce507-bbec-441d-b106-432913a2336c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6f1003c-c38a-42db-a189-22bde9cc037c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a58e671-fa8a-474c-af1e-cdebf9dc7939",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "632483b9-79dd-489d-b52c-4bac23392741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "412337f5-ff6a-4293-b1a5-6b3111c12473",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad7508bd-1e3c-48d1-abe5-0c64dbcc67c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6eefedbf-7e12-413a-a321-b972aa59700f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b684d4e8-f5fe-4cc2-b8ef-4f679a5e9192",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de792a2d-80c5-46fb-9255-d21abbb2e8b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5bbf267-6579-4b99-be62-bf89c5d45ad2",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59db2f20-d1a7-46f2-8229-3dd9bf507c5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "693b3d4e-2684-46de-bf20-958efd8267d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "041fff23-ccd4-411a-98e3-e198c87b95c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65fe8b7d-bfcd-47d7-b6e8-25c2a3cfb1e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e02f5012-fd3e-473d-8752-9b4d284ff406",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ae75538-a729-4072-b822-99f89d722b89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dcb6858e-babb-4eef-a080-d0e8e6ce3fe6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9538f4f1-fcfe-4d9a-961c-f4a140811abe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "757745ff-5e34-4f80-a4df-836a56e5d586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97966b61-de96-4215-bdf2-1e6d910eae29",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32b6e11d-0b8f-42d2-8413-7f4f8afb1220",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3ce05dd-82be-4e33-a94e-6453ebee1ae4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85f5259f-10ba-4066-bd7f-d710ae3c8a72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd6bfb55-67e6-478f-8995-51c4d1cdb582"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec2153f5-7f34-4b5f-812c-41c97d004f4a",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac92a150-49cb-43f3-9b8d-9581ce36d85e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "736365fb-66eb-40c5-b04e-085719e7c441"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07e9b1f1-5dec-4eb8-8493-ebf8ca59e063",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d1b3bde-d869-40e5-8f58-1dddc3f33750"
                        }
                      }
                    ]
                  },
                  {
                    "id": "566106d9-3507-49fa-9a42-3de403b5d67b",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbaa1836-5cbc-4a17-8e11-5c1c526eb139",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a50df61-0fd8-4534-b7aa-2333340388b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f444debb-fbaf-426c-bc39-6f0ce2de1cb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c79d17c-88a1-4a28-98f4-1efe490fc5f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceaba0ae-8ae0-4fe9-94a4-f4312a565654",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7361b442-a9b0-4e19-aa27-d378f80ade90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6be6fd8-7ff4-4bc9-90cb-b01ee8ae6a3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bb950a1-fa3a-4606-8964-a07a98a1bec6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8b9c7b8-030e-4ede-b516-906e8a469195"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f06d6e7-eb62-459c-b14b-7aa3fb9c8ebc",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27b0d4e4-dd4e-4b35-b46e-1c53ff3ae1ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b05458c-1daa-4a94-9b34-a635078bd1ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50138f30-9f5d-4b88-9d85-a54fdcdb980a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a9f3dbb-2eb0-4696-a723-422f500dc4f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad5ca88f-4b16-41d8-a619-5e3e1f4c2e0b",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fe02205-5f41-45c5-b540-99733acc580d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b59d226-d410-4bc1-b67a-4b4c50446d37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d32c7429-e509-45ef-8c41-d84dfe43005c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f879d08-9244-4e50-a9a5-9620e86175e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "092ae511-298b-458d-8329-af2645fbe2cd",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af1a1b68-1d62-40a7-9ad3-138a02c600a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9ebf8fa-160b-4d41-b845-7570fd4cfec3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71ae6e2e-8e36-459f-90c9-d97a669749fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec4a980e-c7cc-427d-8059-6ec1c8152a4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ca96355-cc17-4175-aac9-ffd5f91a2409",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c384e272-d1bf-4704-bbf1-90e8e4d9e06e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d73148d0-bf39-4271-b03e-f3631c4a123a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b66d434-76c6-4a34-ac1a-70562f29e579",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe4a0404-45c2-480b-9231-2e2c53cb5cd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55d3da4d-8af6-4a4f-8061-cd7cdf1fb6c4",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85018e20-1403-40b1-9b20-beec3c78cb9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5340d82-1eea-48d8-b784-7e0e3eaac174"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eb6b74f-b3df-45e0-8612-7bb9b13af1f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bda6f110-3464-480e-b425-c2eb44008787"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86b5f8d0-d790-4aef-b1cb-3e19efd7a5ac",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e1b0256-c59b-402c-8516-00c6c9a17e77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a53bf671-cc8f-4c5e-a5cc-bbf52fa374ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5a4251c-22f9-4757-8e9e-834a50e8224d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c86edee8-4b1d-40fe-90a4-f17dab36d001"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f00b44bd-4074-432c-8ff8-c85c9ec6b390",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "851edb21-e33d-4210-b0c7-51002f146eec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1418b4e7-f419-4a0a-bec5-960952499b1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d5a8a88-3fb8-442a-87ea-7119b6e60e94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaa88a93-f592-4a92-b984-ceb0f592ce44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7a74b47-1cca-4bdd-aaf4-90df0374c96a",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b97f782-50ac-4b00-bfc0-1cb462c26e68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4710689c-2197-4002-a70c-eec4b214b9e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "125b779b-7c70-4757-922f-bb8e2dc0a58d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72518da0-1213-4da0-abde-14707d3bda4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3329420f-ecdf-48e6-9c93-515289868b69",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fe990be-6e79-4fbb-8b07-243f1414ccf0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95065835-e34e-49d6-94ce-efbc0b858fde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14924ac6-ba62-4208-8fb8-f3dca31f110c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5450db4c-68e9-4c43-a313-9a6ca3be6593"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96960fd0-72e1-4211-9b45-5e4c5306dfbf",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d7373bc-74ea-42e7-92c6-f389eee0ea1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0fb7a4d1-d826-4211-88e5-05c5f86fa62f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5b7ff06-9295-457f-aa8e-54b496e95203",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08c96051-b5ae-4ffd-8abd-fe853b93cce6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "debaf862-2406-494d-b9aa-acc1c6eb20d2",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60e3664f-6334-49a3-a5c2-e4dc6286b789",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66e84bc4-66bd-429b-80c2-cd82697c56cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5766fbe0-8f2c-418f-8d34-1f77320dfa09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5e3e2d8-d4c4-4f1c-9609-c3287fdc1153"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68c973cb-586e-46dd-8443-b8298fa61f4f",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a37ed95-41df-427f-b1fb-5c663396c126",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49743119-41fd-4a9c-a38e-affd2f87320c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5abed42d-b709-43fd-914f-242674748461",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62bd0c81-535b-4f5d-bff6-9d300ba2daad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f15bf623-9b0d-4db8-bf68-33a8352e68ac",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d10ff671-7fe2-479b-bca6-e2ced717d1b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "730f66f7-13e4-448d-85c9-27ea2be33365"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0722af36-1b86-446c-b473-e08335406f35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d56be037-6cc4-41a6-b9be-7d088320f6fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3420ca92-47d9-4991-a524-923e22e5ac8d",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a2f41da-57ce-43e8-b8c5-8aece3a374ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e60dd232-8b3c-4bed-bce9-a1d48a89b2dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef866a06-9225-422b-9089-ffbb79815787",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "597791a3-4928-4435-8fb6-dabc7f82b482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cecf8df-b58d-4f45-bc20-60bddf7d7bc1",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae3fb9e8-c07d-41fc-bbf1-94b37c5a81d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c79be05-699d-46db-9268-d1ece6ee83df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "733db836-4ae3-4ae4-b411-7cdcf5424f0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5397b32c-b7ae-41cc-9b19-d57116f9cba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50f5ef5e-657d-419b-af91-1c91de517cab",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5c54906-74f5-4c36-9e2a-5b9a740739da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9eff0269-ba54-4207-a46a-ce01ec542a33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ae79e3e-1dbd-4514-9fa9-2f94a7776cc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8420793-4691-488d-bf98-5fab00e33213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd4c7a46-4387-4e6d-97c6-8d510ddfa118",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "505e98e9-39a1-4920-bf8e-2e9a01182778",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "429e19d5-da7f-4bdc-b6e6-cd633ab5f9b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff3c07b2-ec4f-4701-a2ec-2514dd6754c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9c5737c-0a45-4c73-8472-e9a6b99e627c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "255e17ab-a456-46b1-9b77-73bbb73d045c",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b80eebcc-13af-427e-bbb8-6d99d3440cae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6596592-3f13-4e65-8bee-059a3e8b4f03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be80ed5b-6151-4972-9dbe-817cd94037d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6841dcb-9322-4270-b70f-a5c3383d0883"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b32a1bf9-acef-4d3b-ad38-5367257384cd",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47e417e2-40c9-4cbb-a087-f1b7089a0e61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad2989c0-87c1-4058-a4a5-9d621d729528"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bac9c874-79a0-414e-96b7-203987212214",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ecc9a9a-f070-425a-a264-069e4d20e726"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1803f48-e6db-4d89-a368-23cb2e0dc38e",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d95c5c05-750a-4fd1-96c1-b753d82e6da4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ad3e2d0-9f93-4881-8127-db8196308b8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6f3fa2c-bbad-43fb-872b-fe348322bcb4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5f9d38c-ff93-48bf-922a-1fc181720849"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcdf5bf7-2309-4240-ad09-964b8e6079d7",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64c3ab25-8149-4014-bdbb-1de7c258aea9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2fd6e8e-0a79-42ae-a5b3-c48dca9d4246"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9951ff5d-25da-4630-9225-e005b281c680",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5bbd800-9a68-4cbb-bf92-d2c7813daff5"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ebdc3f45-f541-4f99-9738-fefa97159028",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cbaba19c-8d37-41c6-9d3c-5bb2d8b4e0c6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8b043c7d-9954-41ff-9590-e8d101ae41dc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "95f9f0bd-4050-469a-9792-b5e7dcbca2d2"
                    }
                  }
                ]
              },
              {
                "id": "70097091-b28f-4ea9-8185-3bd7cce8b3be",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a1c5d189-f066-4b6d-9903-3937bd7e40ce",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "958615ec-6773-4717-aabe-2d553a4ab105",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "a04e5cb2-ac9b-4b7e-8565-e0383552190f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fcc4df3-9181-47aa-a955-787b9878da2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a9386a5a-6666-49f1-b4a8-23ab6cb169b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f398148-e378-4907-b6cc-99ffe68f9b29",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ad1e0f4-4f07-4cc5-84e9-f56aac17e24f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "168cdb5a-2795-420f-ae7d-b2b86ab9f8ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7af14ddf-7f9d-4890-b12d-b240cc8aba0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0c0daffd-f141-4bd9-aa6c-ba86c1d50320"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ab98f1a7-320a-4bde-b76f-ec0a52be33df",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7d5523c3-6a0d-4e44-8701-7dbceb0a7df4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cc9720b8-9255-4be7-8152-47cf8dc80a98",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c64ae960-95e5-4fb3-a83d-5c6094b7451f"
                    }
                  }
                ]
              },
              {
                "id": "617616ce-b39c-45b4-944d-3fb9fb0a1c9d",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "dff746a1-2750-4ed1-82aa-67dfff6f2a50",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2aed5db-2ada-4396-a170-8a2cb62b3c46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "51887241-8efe-496a-9f4c-a07fac595923"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba0c3c8c-5c36-4fa5-8708-bcc3079161d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63acd8ac-2409-4690-a7a8-4b71eb70ac00"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "bd7b276c-282d-4d55-93ef-f61f1cc8eed1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "48a2f867-e491-49ff-a9f4-2b2b3f2a980a",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b69e749a-13b7-4241-b0a0-578bf731e766",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "efde105c-23a7-47da-a1e7-2dc29cddb698"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "045641f5-fea2-4b24-b22d-2985b8b904cb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8436c6af-2064-443f-a4be-d7645eaf06e9"
                    }
                  }
                ]
              },
              {
                "id": "2d2fdf46-0e73-4ff4-8326-fce877630321",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "59cda36a-55e0-4526-a31d-4af24b5aa597",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "dfd635aa-dc0d-4dcf-85df-bd187fd39971"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5ed38eda-2f35-402e-bca4-993fc7d76c22",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "78768ccc-52c4-4edd-a1d1-cf39e170804c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "830eded4-ae14-469e-8a73-421a5a3cf13e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "d8ac658b-7d03-4a5f-a191-8eca27831b05"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1f89410c-a592-4169-b686-b47f665e9ca6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "13ca2c83-e002-43d8-9eaa-edf71aa8301e"
            }
          }
        ]
      },
      {
        "id": "735d325a-c10e-4e16-955e-3c2e4e0f674b",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "4f5488ed-fabd-4e9a-93f8-642c6f1302dc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e45b4f85-148e-42f9-b3a2-253da31deab8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "08c9ea7d-0643-4ccf-ab5b-fa3943df874b",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8355d22-39fd-4492-93b2-7f6e1b5d065f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3c316151-5291-40f8-a480-2913913ab24d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e159fd39-9f5d-4869-94d8-3d5932c3ba19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1ac507af-6b50-4924-aeb7-2a2935b9fbd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3ebf3da-6086-4049-944e-0140a6aed04d",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ebc7486-5386-47a9-bf9e-48409f4d0aa9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "bceebac6-31c9-4a82-9ca1-c0540b8e21e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4be3e69b-d0ab-482c-84bb-14c28799bd86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e322f39e-846f-482f-9f31-81cf671fabc9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8ae4e941-0f4f-4df7-b98c-4031030bcdf6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "41301613-3409-4032-bda5-8cf45bb3735e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6628bfde-7ae0-44a3-91b9-78582a484319",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f2f8d513-8a3c-4dbc-ad03-4467e34c6529"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "698a219b-64cf-4062-b1af-f4cda3895270",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e12a0852-ad93-4c39-a59b-3f6cb3cff3ca"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ae61f711-0b1e-4fb9-a461-f84cc43bb27c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ec2347cc-586b-4af5-9915-91976e8c75f1"
            }
          }
        ]
      },
      {
        "id": "d88b14ba-54ae-4504-8142-40978598e115",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "eecd5146-20d8-4f00-97d3-176ae9d88019",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7dd9dba7-6c56-4af4-ac0b-821777a6a442",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d6661dcc-51cf-4eff-ac01-833d67e050fa",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eba1ab5c-30c5-4ac8-842b-3d132c11c99e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "289d6175-aa3b-4877-b443-ad6f9634f7e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "614cee64-b605-417d-888b-2c4e8f7e69c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d8179684-0ecd-43ae-ab65-3eeae7277663"
                        }
                      }
                    ]
                  },
                  {
                    "id": "793c2394-19f1-4cba-b1bc-b516a203856a",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4052f14e-5dc9-4977-a2b1-bdbb6c8aa3ce",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d01c4636-5f80-4855-9a9b-0459fa90a01c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8175cca0-9bd1-4567-90d5-d0ad034d0e4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c49716a9-af87-4da0-b1e9-e6738b0bcf48"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f4e5f35c-03e5-44f4-87ff-67e1518b685f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "35f15514-edbc-4621-9520-2543c5f2c17f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cab5829c-a8e2-45dd-8cc6-0c6900333706",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "239d917c-3762-4354-b0bb-452ce4f83e3f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cef435ab-0a4e-4385-a980-be07ba0646d6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "154ad645-a310-4120-b405-455f035547dd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b6d93f95-3bec-417e-bc1b-e9212fba7d86",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "76dd25f4-9e36-4454-b490-16aa5820cdd6"
            }
          }
        ]
      },
      {
        "id": "0e9aa22f-5645-429b-b042-947871c32a7e",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "2a414e68-342e-4cc3-9ccf-4b215e6e6860",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9716094a-3636-4cbc-a41d-2ebffad0c323",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2de274af-0ba3-489c-a24c-06b426a94df7",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93d05d9a-b124-4135-9425-037e462ed6b9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "78d66b0c-74da-479e-8064-af28065d69db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a3ea0c1-f7a4-4fcd-98de-1293e3bda234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3f9d34c2-679c-4cd7-a7b2-c976e735fce7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23a3dece-6863-454a-b8d0-df9a2c250416",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4f54622-4b0a-4852-807c-4889f93936bd",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c8e21656-9c65-403a-9bda-71415e56f366"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d786e471-e397-43ce-b0fc-d33993fa4ba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "24b75717-ec64-46f6-8c54-f914f0053c4b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f41048e6-1aab-4ca3-b089-78417a739d35",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a7833b0f-30a3-4ae7-8e94-384bfa7d403d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0e504d1d-7f4c-4855-8d3a-c638f8338081",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a0b360ce-c876-4ebc-b534-aaabc3adbbe2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "80047f2e-aba0-4d82-a444-2fd0e4829f0c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "371b1e36-445a-4ec7-902b-9a0dfddc8dfe"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6a33e009-f3f9-455c-973e-a7ce5ec5e849",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "50482dfc-40ac-4ee6-b56f-e9f093d97cd2"
            }
          }
        ]
      },
      {
        "id": "777ab000-6053-44be-9690-fac1d5de9b29",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e98b4282-fc4d-4afd-8347-57c780761a29",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a386ac8e-b27c-49c3-98ff-bdf611b0015e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "6c68a121-5343-4398-a30f-575f132e9664",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "09cad7cf-e363-47fa-bf71-155f4fae5c85",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f8a5cb2d-fa8e-42d4-bbe6-ac9c385d466e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 6
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 6
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 443
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 6
      }
    },
    "timings": {
      "responseAverage": 189.03809411581713,
      "responseMin": 10,
      "responseMax": 3857,
      "responseSd": 364.16459309399954,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1671928781779,
      "completed": 1671928840882
    },
    "executions": [
      {
        "id": "f5b2c05c-1945-4835-b97f-f1a3672d3bdf",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "e9669714-504f-4924-abf1-ae10ad23a8c4",
          "httpRequestId": "7d1f9072-32dc-4266-a411-f84d828f3c2c"
        },
        "item": {
          "id": "f5b2c05c-1945-4835-b97f-f1a3672d3bdf",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "c714b16e-870c-4c7a-a080-9a795e331dd8",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 0
        }
      },
      {
        "id": "fd31cdcf-55c1-44a5-a813-b808221775ad",
        "cursor": {
          "ref": "6c85d98d-aece-47e6-aa26-05112625791c",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "36455481-c7ce-4955-92a3-38db886df6ee"
        },
        "item": {
          "id": "fd31cdcf-55c1-44a5-a813-b808221775ad",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "857e1764-b8fc-4b5d-96b0-cbecda4c777f",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "0e6891fb-1e1f-4ce0-9c5d-1c5dcad47b12",
        "cursor": {
          "ref": "8a6eff96-5365-4f32-adea-45fdab6e71d5",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "0afd439d-8ea6-4948-86e7-af2fe3b5d44f"
        },
        "item": {
          "id": "0e6891fb-1e1f-4ce0-9c5d-1c5dcad47b12",
          "name": "did_json"
        },
        "response": {
          "id": "7eea152e-6217-4d95-974d-aefc0595710a",
          "status": "OK",
          "code": 200,
          "responseTime": 442,
          "responseSize": 1290
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc67b5ae-60b8-4a62-8dc1-e9fe29e9fc43",
        "cursor": {
          "ref": "3fbf8473-ffa3-47e1-9302-d81846b1b251",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8f67c08f-20b4-4639-b4bc-f1fdc362ea2b"
        },
        "item": {
          "id": "bc67b5ae-60b8-4a62-8dc1-e9fe29e9fc43",
          "name": "did:invalid"
        },
        "response": {
          "id": "07dea5e8-f9a6-4333-9505-3ec8f3656d91",
          "status": "Not Found",
          "code": 404,
          "responseTime": 946,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "bc67b5ae-60b8-4a62-8dc1-e9fe29e9fc43",
        "cursor": {
          "ref": "3fbf8473-ffa3-47e1-9302-d81846b1b251",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8f67c08f-20b4-4639-b4bc-f1fdc362ea2b"
        },
        "item": {
          "id": "bc67b5ae-60b8-4a62-8dc1-e9fe29e9fc43",
          "name": "did:invalid"
        },
        "response": {
          "id": "07dea5e8-f9a6-4333-9505-3ec8f3656d91",
          "status": "Not Found",
          "code": 404,
          "responseTime": 946,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "41660af7-b2a6-450b-8dc4-cf0e9af33265",
        "cursor": {
          "ref": "d0a875fe-b24b-472b-a051-1e9221c87b71",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "9a8077dc-3f07-4c6a-8bf4-b68067546a5b"
        },
        "item": {
          "id": "41660af7-b2a6-450b-8dc4-cf0e9af33265",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "690ef425-493e-4d5f-8b5a-de8f72e8632a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 35,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67859dd2-062e-4ace-8f18-0878e2e4777c",
        "cursor": {
          "ref": "fed8c2f7-cf2d-4f56-a4c8-9748c96b9ee4",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "daddf2e8-4f82-4ec0-bb36-8648b4478e61"
        },
        "item": {
          "id": "67859dd2-062e-4ace-8f18-0878e2e4777c",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "8d92eb1b-75bb-45a2-b7bd-2c9ca9812ae2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 37,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f5e23d5-8a18-4c33-81b2-5b3f3a94be06",
        "cursor": {
          "ref": "cdba0a11-c9bd-493d-93d0-0bf68929fce0",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "8584774a-698b-4609-b178-25459d2be4db"
        },
        "item": {
          "id": "3f5e23d5-8a18-4c33-81b2-5b3f3a94be06",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "057805f7-4168-4e4b-8611-aaf9da6eb949",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "dbb2b17a-adc7-43ed-8b4a-13a19befb074",
        "cursor": {
          "ref": "c7df4a45-2281-43bf-9fcc-aad7baf96d0a",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "fcb1d7e4-1eca-4493-b487-e77649eb8166"
        },
        "item": {
          "id": "dbb2b17a-adc7-43ed-8b4a-13a19befb074",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "6fb14929-3225-4ae3-8160-dc3d9a7eab58",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 1185
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "dbb2b17a-adc7-43ed-8b4a-13a19befb074",
        "cursor": {
          "ref": "c7df4a45-2281-43bf-9fcc-aad7baf96d0a",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "fcb1d7e4-1eca-4493-b487-e77649eb8166"
        },
        "item": {
          "id": "dbb2b17a-adc7-43ed-8b4a-13a19befb074",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "6fb14929-3225-4ae3-8160-dc3d9a7eab58",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 1185
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "366b2b69-bd3f-4b43-934c-ded3a52d2ce4",
        "cursor": {
          "ref": "7e398cf6-c6b7-425b-b513-cb048a0ffbd2",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "57b221b0-d771-4a5a-8fb9-b294d82f216b"
        },
        "item": {
          "id": "366b2b69-bd3f-4b43-934c-ded3a52d2ce4",
          "name": "identifiers"
        },
        "response": {
          "id": "1082076a-17aa-454a-9751-b307a3c74279",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 1185
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.didDocument should have required property 'service'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.didDocument should have required property 'service'\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "f742dd42-5dd4-4f68-b8c0-b28ec286fcf5",
        "cursor": {
          "ref": "a441e4f4-969d-429f-86ac-de0ec7074e4f",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "170fe35b-4a60-4934-bdb6-a666dc7f6aeb"
        },
        "item": {
          "id": "f742dd42-5dd4-4f68-b8c0-b28ec286fcf5",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "13c201fb-48a9-4851-b909-10b9f2c4ad0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f742dd42-5dd4-4f68-b8c0-b28ec286fcf5",
        "cursor": {
          "ref": "a441e4f4-969d-429f-86ac-de0ec7074e4f",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "170fe35b-4a60-4934-bdb6-a666dc7f6aeb"
        },
        "item": {
          "id": "f742dd42-5dd4-4f68-b8c0-b28ec286fcf5",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "13c201fb-48a9-4851-b909-10b9f2c4ad0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f3a58d5-5a84-4f45-9685-efc7a79aacd7",
        "cursor": {
          "ref": "8c383dd8-cf7b-4777-923d-0e1b42670eee",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "01ef97d8-063e-471a-8d2f-f18cd6b155bc"
        },
        "item": {
          "id": "2f3a58d5-5a84-4f45-9685-efc7a79aacd7",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "39cbd3bd-df7d-4ccb-ad72-4f30e7d6f7e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "396a2d3c-5f40-433f-af99-29454fa1bc83",
        "cursor": {
          "ref": "b47db79b-c6b9-4dcc-8346-6f5352cee312",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "d944a830-fa1a-423b-8df1-9546c2dcbb5f"
        },
        "item": {
          "id": "396a2d3c-5f40-433f-af99-29454fa1bc83",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "6d3163d5-fb22-40ee-889e-745d7d17dcb2",
          "status": "Created",
          "code": 201,
          "responseTime": 1249,
          "responseSize": 955
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "a0f9998c-f8e8-46aa-9143-1ad5b6f3f000",
        "cursor": {
          "ref": "794b5af5-0015-4fc8-9239-dab1e6fd77b2",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "73ee8630-a124-4b02-9e17-08c617d6620f"
        },
        "item": {
          "id": "a0f9998c-f8e8-46aa-9143-1ad5b6f3f000",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "d4c1a7ca-3b95-4226-9232-def22d753e37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0cc2232-6430-49ff-bccc-dbdc436d9176",
        "cursor": {
          "ref": "efba8924-1170-475b-af02-4954f19f0843",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "4e039de1-3400-43b3-a2ad-06b5541fbfc0"
        },
        "item": {
          "id": "c0cc2232-6430-49ff-bccc-dbdc436d9176",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "a80780e0-37f5-42a7-9183-550dccbf2be8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe26be76-864b-48e4-a633-9f26e32bfc6e",
        "cursor": {
          "ref": "d327275b-2d32-4cd1-9426-9d799a51705d",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "b4681635-5739-423b-a517-94c3f22fe756"
        },
        "item": {
          "id": "fe26be76-864b-48e4-a633-9f26e32bfc6e",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "f343d0c7-bb83-4e7f-9f9c-f63366ae1414",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d45e030-f0c7-4171-8951-ec73192b8333",
        "cursor": {
          "ref": "85aac434-de72-4577-9d0d-eba60a859a0d",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "c3162f95-5aaa-4dcb-8170-34f095b543c9"
        },
        "item": {
          "id": "7d45e030-f0c7-4171-8951-ec73192b8333",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "a0ce38f1-cfab-48ca-94dd-154393c9c670",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 224,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf591351-ab9e-46de-9c0c-a7b066ed67b5",
        "cursor": {
          "ref": "a93b8e46-6834-47e8-8423-ff876c2cdfc5",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "25005840-a968-4641-8e4f-b2335ae7edb9"
        },
        "item": {
          "id": "bf591351-ab9e-46de-9c0c-a7b066ed67b5",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "4ede4f94-b870-4bcf-8484-08a704769f1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d65ea9a-9b37-4695-bef2-7bd9162f447c",
        "cursor": {
          "ref": "11aac6e6-b660-4957-87b7-6a4eb2b53bf6",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "ae758521-aeb1-4604-9687-b5829f774612"
        },
        "item": {
          "id": "8d65ea9a-9b37-4695-bef2-7bd9162f447c",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "539e8709-9e01-4c06-bfae-1d840c17d77f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 631,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "23338454-c1ed-4012-b9de-99c6f72739a8",
        "cursor": {
          "ref": "e6ab2894-06f6-488f-8831-62d1bf849dfc",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "7e6aab39-bc30-4b36-97a8-24f29f7ef3c7"
        },
        "item": {
          "id": "23338454-c1ed-4012-b9de-99c6f72739a8",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "bb206636-935a-479b-b6d6-fe64fe7ca722",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 562,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "a2966a89-80ad-4d5f-a1d5-4336ddb06a3f",
        "cursor": {
          "ref": "d59fbc0f-2d31-44ce-b8a7-922cba365414",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "2957c340-fe90-4530-9f9f-c24370863724"
        },
        "item": {
          "id": "a2966a89-80ad-4d5f-a1d5-4336ddb06a3f",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "a0e06c6e-a6f0-4f63-b482-d85cab154d1c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 651,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "442bc612-9c83-4c1b-9db5-eb7c457cd061",
        "cursor": {
          "ref": "de97ac00-7df6-4d58-8424-5f19e62e7836",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "3ce05a9f-0fef-4ff8-a622-1a3d4c6a892b"
        },
        "item": {
          "id": "442bc612-9c83-4c1b-9db5-eb7c457cd061",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "e739c6fe-ae73-4c49-8074-6ccfef027d96",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 510,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "79ba1334-918c-423c-b832-0152a34a8a65",
        "cursor": {
          "ref": "aea0e4cd-3388-4fa8-8dc3-9f184784504d",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "fa2edacc-eb3f-4ecf-b811-cef9dc38dcf2"
        },
        "item": {
          "id": "79ba1334-918c-423c-b832-0152a34a8a65",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "13be188d-f15e-4d34-8bd1-3534ef883973",
          "status": "Created",
          "code": 201,
          "responseTime": 410,
          "responseSize": 1001
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "cdcddd06-537e-4ea0-91bf-ce3d8c9464f6",
        "cursor": {
          "ref": "a90ba012-017c-484f-991b-f430558b17f7",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "a0616824-5920-424f-b1fd-036c06363898"
        },
        "item": {
          "id": "cdcddd06-537e-4ea0-91bf-ce3d8c9464f6",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "9ba3da9d-0f37-405c-b928-14141457c4e2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 219,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "feabf8c9-62e1-4988-b50e-e2b4f4080271",
        "cursor": {
          "ref": "dfa6b4e2-98f5-45d3-bddd-87985b67a5bc",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "74d91915-4cf1-4ae6-aee3-d79af82ba9f6"
        },
        "item": {
          "id": "feabf8c9-62e1-4988-b50e-e2b4f4080271",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "ee7fe81a-dd96-44d4-b05e-0271bcfe5976",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 197,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "bb77f4ec-c644-4814-a784-3a117b9797b6",
        "cursor": {
          "ref": "30a1da83-cc6c-452d-941d-5e77e1727f44",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "9cf56303-559a-46b6-8ef5-7b29224b2b91"
        },
        "item": {
          "id": "bb77f4ec-c644-4814-a784-3a117b9797b6",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "d4d159b9-e1c3-4c1b-a3d5-6fa942af7f2d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 227,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "88ef61c8-ad70-4ca5-b19c-ab1924563ac0",
        "cursor": {
          "ref": "429ea28d-33ce-429a-92ea-f4752cdb7982",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "09f63880-ceb8-4fd9-b6a7-e2588cd8b765"
        },
        "item": {
          "id": "88ef61c8-ad70-4ca5-b19c-ab1924563ac0",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "0e3e6685-7815-44bc-b919-243244b915ef",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 180,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "cca2ae44-58a0-436d-a949-065a797feeab",
        "cursor": {
          "ref": "52bc141e-fa25-4059-9c75-ad0b529b140d",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "080973f5-5406-4481-abdc-f7efbbf18f47"
        },
        "item": {
          "id": "cca2ae44-58a0-436d-a949-065a797feeab",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "5e60d5ef-e73f-4af3-a737-6546befbfed1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 209,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "0e46e4df-d530-4c93-b529-f40cedb34f55",
        "cursor": {
          "ref": "91caac5f-cc20-42a5-bc9b-545946fb794b",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "1580f55b-1341-4705-ab49-ce7e52da2bb7"
        },
        "item": {
          "id": "0e46e4df-d530-4c93-b529-f40cedb34f55",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "e1087e43-56b1-4087-889c-b7976b68df00",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 203,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "206a7c76-09e9-493d-b7f6-15045e1a81fe",
        "cursor": {
          "ref": "a4271b40-c54d-421c-b7cc-520166b277a4",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "004d491c-4379-4c59-af8f-1ffcc454032f"
        },
        "item": {
          "id": "206a7c76-09e9-493d-b7f6-15045e1a81fe",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "e5024127-3912-4923-b2c4-c1e536b10712",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc6cabcb-c1ba-483e-b225-e3943e2dead3",
        "cursor": {
          "ref": "c2065c43-f093-4ffe-80bc-011c0d43a516",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "cc3776a1-f2c2-4a38-bffb-8b4772bd4fe1"
        },
        "item": {
          "id": "fc6cabcb-c1ba-483e-b225-e3943e2dead3",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "2f8a8497-9847-46ec-820c-830052db4a58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b32389d-a2b2-46c4-bab3-27e415b09744",
        "cursor": {
          "ref": "5e2c3d18-e450-40e3-a6fe-fbf246a17fe8",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "f5bc478e-8711-4b6d-9111-d3b6a6c6604a"
        },
        "item": {
          "id": "9b32389d-a2b2-46c4-bab3-27e415b09744",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "5536d626-09e1-4b34-beab-3008b673cb13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0baee89-4f62-41d3-8f87-7dee7242ab13",
        "cursor": {
          "ref": "fa481abe-a1e1-4caa-9fa9-f3da4e4b8db7",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "40eda78a-f3b0-4a77-9107-04e490ce81e3"
        },
        "item": {
          "id": "a0baee89-4f62-41d3-8f87-7dee7242ab13",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "75eae148-177a-487f-8768-f615c6db146e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ed0c7b3-3286-424a-8a76-9ca990738ec2",
        "cursor": {
          "ref": "4a54d56b-f060-4bd0-b93e-eebd85c8dd63",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "41bb63ef-f8c9-4257-9d29-75c243ff1b11"
        },
        "item": {
          "id": "9ed0c7b3-3286-424a-8a76-9ca990738ec2",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "35e0f649-4ef4-4a08-b83b-01d235e237cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ccfcf1f-db6b-4fb6-af37-0b46a5b0a28b",
        "cursor": {
          "ref": "d26b65e3-f355-4a24-8182-fd0d83a179b2",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "28140a33-1f83-41e0-819a-6a0c3d6c1204"
        },
        "item": {
          "id": "7ccfcf1f-db6b-4fb6-af37-0b46a5b0a28b",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "af50575e-c8b0-4425-ad96-7ed8ec4ec77e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "346bd74d-550d-405b-bb3b-72c104d59fcf",
        "cursor": {
          "ref": "7d2dff3d-ff8d-477a-8da7-6112db927b2c",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "d7d846f1-43e4-48cb-a5c9-26196169ab15"
        },
        "item": {
          "id": "346bd74d-550d-405b-bb3b-72c104d59fcf",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "0b6b22be-4382-4bd4-a69b-7fbc14fdff36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30034558-f3da-475a-a590-9a5c9e582d63",
        "cursor": {
          "ref": "c72d0602-ebe6-4764-8f33-70e87c951fef",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "9ce2c3cd-bbf6-4ced-9b23-179e4bfc4343"
        },
        "item": {
          "id": "30034558-f3da-475a-a590-9a5c9e582d63",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "531f26ca-4cf5-4dc5-8605-b6e0acfea254",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89affc9f-f8c5-461c-b0a7-699e17ea92d1",
        "cursor": {
          "ref": "16bcd9e2-a5c9-4e4d-bb4f-8a3b3d03ccac",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "aafc9598-ec5a-4e9b-847b-ceee0b4192bf"
        },
        "item": {
          "id": "89affc9f-f8c5-461c-b0a7-699e17ea92d1",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "87db6b3e-7cb8-45ca-b973-2f89d0d42408",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec1c2f3f-2354-4884-8649-9721d1970613",
        "cursor": {
          "ref": "87cc24df-544a-4fbd-8ccc-f03122f828b0",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "c0d0d79b-510e-439c-8f48-c8625231b705"
        },
        "item": {
          "id": "ec1c2f3f-2354-4884-8649-9721d1970613",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "a6ef7ab3-e8a2-43a0-98fb-66bd1fa5e675",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b82e3e6e-85e9-481a-970e-52cfeadf6f9c",
        "cursor": {
          "ref": "c747cbfc-c85f-46ea-9d62-d3ae415771e2",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "685df407-b681-46cc-a24d-46e1d02978bd"
        },
        "item": {
          "id": "b82e3e6e-85e9-481a-970e-52cfeadf6f9c",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "30c3fbc0-0cf0-4413-98d4-0fc00895006f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "497d5cc0-3c95-4418-8548-f90316528c6f",
        "cursor": {
          "ref": "371dc7ce-5c12-48c3-8bd6-0747aaf342f5",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "ea9ef3eb-8722-4020-98dd-b99252eadee4"
        },
        "item": {
          "id": "497d5cc0-3c95-4418-8548-f90316528c6f",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "8c7b36ca-54b4-4220-907f-f8c8f0f80a7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd57a75a-d904-4c59-a0d6-62f6090b7c8d",
        "cursor": {
          "ref": "26585882-5614-4f4f-b898-fc8434be592e",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "20937edf-b725-4a48-baee-f4ce9eace4c7"
        },
        "item": {
          "id": "fd57a75a-d904-4c59-a0d6-62f6090b7c8d",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "162c0806-3dcc-4084-aec4-dfb47574e9dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e131c30e-bfa3-4a29-9205-84b8746b0f01",
        "cursor": {
          "ref": "57ef23bc-4ebe-4948-b79b-addf96b9af8b",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "61584cd9-2440-4ab6-a449-e899c9c39540"
        },
        "item": {
          "id": "e131c30e-bfa3-4a29-9205-84b8746b0f01",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "354f5c7f-81f4-4652-bdac-813395a414a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0247d6ec-6d17-4f86-b458-10394282e96f",
        "cursor": {
          "ref": "4192d798-0693-4e8b-9111-e3570c2eff1b",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "758d90fe-2af3-419e-9786-792fd22266df"
        },
        "item": {
          "id": "0247d6ec-6d17-4f86-b458-10394282e96f",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "b1124aab-51be-478d-934f-a8e880a1244e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27db4ad9-5187-49fc-8f40-cd3f98a91734",
        "cursor": {
          "ref": "7ca5ff8d-94c7-4883-96e1-e22555f25672",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "dd4025b5-95ca-4a5b-b4a1-29098f938d06"
        },
        "item": {
          "id": "27db4ad9-5187-49fc-8f40-cd3f98a91734",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "77af2fb7-1410-4e09-ac25-366a10f34b27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22e65cf4-47c2-4e7b-ba0d-2198158e87b1",
        "cursor": {
          "ref": "ff229e80-0582-48dc-9e0b-678f802b7e75",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e7e1952f-0628-427f-b59e-21fa34f33ccd"
        },
        "item": {
          "id": "22e65cf4-47c2-4e7b-ba0d-2198158e87b1",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "31c8377c-b734-4016-ae8c-296a219ac8f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "416bd899-501e-44ea-8014-d0eb5c4276dd",
        "cursor": {
          "ref": "aff83f96-80a3-48e0-9f8b-6b47566d7977",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "81fc3991-8bf9-4c8e-831d-68255277fbd7"
        },
        "item": {
          "id": "416bd899-501e-44ea-8014-d0eb5c4276dd",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "cae5a08c-8148-4316-9a2e-576a231288b6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 212,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "1452a48a-f862-4066-8e86-d4bac29e606d",
        "cursor": {
          "ref": "c9953407-0bee-4f8b-b62e-bb724d0e9dbf",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "491c927c-d54a-42ba-b361-40054a02c6b3"
        },
        "item": {
          "id": "1452a48a-f862-4066-8e86-d4bac29e606d",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "666be819-a438-47da-a965-c4c3969152c7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 192,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "049f79e7-5b7e-4bc5-9dc1-f0f7142ea72a",
        "cursor": {
          "ref": "22d978d8-6df4-4cca-97cb-d9b5c9d6ea6b",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "0f1ee0d7-fc14-4b8d-9bf8-4dcdf4f9a8c9"
        },
        "item": {
          "id": "049f79e7-5b7e-4bc5-9dc1-f0f7142ea72a",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "eeaab460-5c7c-42bb-80f6-f089ca7c5f85",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 242,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "58310fb0-bd43-4e22-81cc-979c60e08ab6",
        "cursor": {
          "ref": "38eed7e2-55bd-4729-bc2e-1e4fd2b5ff33",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "e863d454-bd41-43a4-abba-9d201ac97c99"
        },
        "item": {
          "id": "58310fb0-bd43-4e22-81cc-979c60e08ab6",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "c19cb9dc-fc5c-4a0f-9619-c6a5da7832f6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 630,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "2fb6a1ed-6500-4fd5-b6ce-9fbcacfa83ac",
        "cursor": {
          "ref": "07702fcc-4f27-4807-9b78-b5cba56cef3d",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "e1e892e1-ae9d-4b07-bb9a-ff75bb60baab"
        },
        "item": {
          "id": "2fb6a1ed-6500-4fd5-b6ce-9fbcacfa83ac",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "aa94bd28-9588-4f37-b4a6-14a1b0efa82e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 217,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "cf6e700b-7738-4204-be7f-326ac2725b68",
        "cursor": {
          "ref": "6a7e5831-69a0-4de6-95cb-19aa827d00fe",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "846d3140-2615-4a5e-9931-36ee0acfcff4"
        },
        "item": {
          "id": "cf6e700b-7738-4204-be7f-326ac2725b68",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "77ee8c93-f1a1-4e41-87df-f9afcce22020",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 238,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "730e4a54-9439-40f6-9194-5d253c6f8102",
        "cursor": {
          "ref": "669b3799-3722-4b68-a0ae-e0cddcfcefac",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "58745397-9861-4d18-930c-fed523ddadf4"
        },
        "item": {
          "id": "730e4a54-9439-40f6-9194-5d253c6f8102",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "3779b0a3-eb8e-4f8f-924d-4ac3a49a9da3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 212,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "2fe8d04a-557a-464d-acfa-e7d2bf97e09b",
        "cursor": {
          "ref": "b94d4a42-7c08-46b8-9657-69f37c3e7171",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "38deb591-f606-4d66-9299-6867b16e7097"
        },
        "item": {
          "id": "2fe8d04a-557a-464d-acfa-e7d2bf97e09b",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "ae5d9c6e-1f0a-4d42-b6db-c6ec24e2c8b6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 309,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "41882a14-4515-4318-86e5-61381ba6b64e",
        "cursor": {
          "ref": "d84fcd2a-c92e-4680-a8d2-fbe762c60579",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "dd05a05a-c555-49c2-ab45-4bb2d79ee096"
        },
        "item": {
          "id": "41882a14-4515-4318-86e5-61381ba6b64e",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "b9523d56-b17d-4648-b28a-9a6713a14297",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 223,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "5506ea81-afaa-433b-941c-4a4b19462725",
        "cursor": {
          "ref": "3e1af2ac-ffcc-4fd6-8749-c7e981e8bb06",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "07bebc3b-0242-4eab-beef-8b129a721c7a"
        },
        "item": {
          "id": "5506ea81-afaa-433b-941c-4a4b19462725",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "e46c2dfc-b73a-4848-b039-94636a142741",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 226,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "aa517bfb-fbae-4e77-b393-a17c7e33c97c",
        "cursor": {
          "ref": "f8d38399-a861-415a-b5e6-ecf9d121eff4",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "3d616f3e-26cf-4e8b-867a-79cad7e7992d"
        },
        "item": {
          "id": "aa517bfb-fbae-4e77-b393-a17c7e33c97c",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "e0b44021-8a47-4c3a-8dd8-42a3d12a9d91",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 315,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "043e6bbd-fe9f-429f-836d-6fe75b129342",
        "cursor": {
          "ref": "c07933c8-9ff3-4fb5-8238-83cf3c9a8bf5",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "2b9eacc1-d779-43f0-99dc-17242c8c8dbe"
        },
        "item": {
          "id": "043e6bbd-fe9f-429f-836d-6fe75b129342",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "c52268e8-466e-4cce-823a-9fd6796a7b45",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1055,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "66d47895-f3f0-4b16-9428-e88ddb58a3ac",
        "cursor": {
          "ref": "64a8904e-1dae-42e2-aae5-35f90904b24b",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "1f5a3c86-b9f4-4af8-9815-2864240ac034"
        },
        "item": {
          "id": "66d47895-f3f0-4b16-9428-e88ddb58a3ac",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "221d6e24-5862-4d05-8f83-ee5a779d8e0f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 239,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "43aadcd2-e45e-46bc-890d-8bb7ef3dec18",
        "cursor": {
          "ref": "0fa53bf2-9b88-44e8-b4aa-b9313ec595f4",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "fb217d58-fb7a-41e2-a0bc-f3757d9160db"
        },
        "item": {
          "id": "43aadcd2-e45e-46bc-890d-8bb7ef3dec18",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "e0e3f4f9-e091-4155-be3c-1f4540438f63",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 192,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "54ac8936-60bf-41f1-aae0-4b4684537d09",
        "cursor": {
          "ref": "0e49e103-353c-4a91-8c6e-cb4cd2e803dc",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "af410583-5852-4efb-ac96-4e16152ce897"
        },
        "item": {
          "id": "54ac8936-60bf-41f1-aae0-4b4684537d09",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "19e9f36d-0b49-4c24-9537-f124acafdbac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 254,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "28701b2b-70cf-49bc-90b6-d7bb0cbb0e19",
        "cursor": {
          "ref": "5232a47d-f555-48b1-9472-ece1ddb0d36d",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "dc2094f9-beb6-431a-b591-2e5057dd9bbd"
        },
        "item": {
          "id": "28701b2b-70cf-49bc-90b6-d7bb0cbb0e19",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "d73ea0b4-ef65-4798-a584-9e0c42fdb89f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 239,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "d2ccbfb8-d71d-476c-80ed-969209007ce9",
        "cursor": {
          "ref": "ff793dff-9f99-4bf4-84d4-f5e18a0b65c4",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "bcb75e3b-2600-42af-a00b-271ca379fce1"
        },
        "item": {
          "id": "d2ccbfb8-d71d-476c-80ed-969209007ce9",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "d7772e92-7382-4f3e-8968-c9697f4cccd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4803350-0a5c-47b0-be32-51d054aae217",
        "cursor": {
          "ref": "411d63d6-ede7-4517-8ab4-44eaa2a1c25c",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "b3b01e81-acec-4bdf-bb1b-1c03b7bad1db"
        },
        "item": {
          "id": "d4803350-0a5c-47b0-be32-51d054aae217",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "1a7f1e8b-db64-45a0-8ab3-482e63a84a6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f65e801a-6e07-4d38-8ec2-ca1c0a0eead5",
        "cursor": {
          "ref": "cc9411c3-10de-40a6-bd30-d66cab6b6ad5",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "6dda43dc-a49b-47b3-b8e4-58c694e8f24b"
        },
        "item": {
          "id": "f65e801a-6e07-4d38-8ec2-ca1c0a0eead5",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "13b9596c-2162-4d84-af3e-c06815cf351e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e83b8686-56e1-4d86-9eaf-00b06de521b2",
        "cursor": {
          "ref": "fd2667fe-b01e-4e09-9411-64966f033803",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "26a8c5d6-35d3-4c8d-9771-aad3eac67068"
        },
        "item": {
          "id": "e83b8686-56e1-4d86-9eaf-00b06de521b2",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "c5094c8f-9ded-4411-83ee-bb592f84b3ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf488133-4ef8-4b3b-a367-defebc370d20",
        "cursor": {
          "ref": "a2e52528-a3c0-4098-9261-595319712e24",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "2fb146ee-b6c2-43b4-95d2-8137e54f0464"
        },
        "item": {
          "id": "cf488133-4ef8-4b3b-a367-defebc370d20",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "ee91454a-afc5-47e9-a949-e4349bedf575",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bc8095a-9ce7-47d1-99e1-252e3f0e6d1f",
        "cursor": {
          "ref": "dc13020d-bd3a-454f-997a-670fcae7c52f",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "678ebf51-413c-4457-9ea5-8a3ecf3c776d"
        },
        "item": {
          "id": "8bc8095a-9ce7-47d1-99e1-252e3f0e6d1f",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "6476e102-3d5e-4fb7-94c0-369e236f66fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eb9f660-4589-4379-acea-bdb4710c13b1",
        "cursor": {
          "ref": "2db80d4f-60c4-4f94-9490-11049986b448",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "6e4c134f-1f54-4286-ab29-f2fbbf36cca1"
        },
        "item": {
          "id": "0eb9f660-4589-4379-acea-bdb4710c13b1",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "ab154a5c-533f-40b6-9529-f0f9da1bb1ef",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 218,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "a04cf523-6a11-4305-8d86-0a7bca720f69",
        "cursor": {
          "ref": "bebd6c98-5fc8-4e09-b45c-9f5c449d5a27",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "4c334973-d71f-4eed-ae19-1242297d8610"
        },
        "item": {
          "id": "a04cf523-6a11-4305-8d86-0a7bca720f69",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "d3d9472f-997c-43b4-99c8-47b2769aa03c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 815,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "2f07a915-1c54-4ab9-ba67-cab4dce9eaa7",
        "cursor": {
          "ref": "484f57b1-db0d-4eb1-a8e7-d26f67e5e8b8",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "6e2f48ca-97c5-405a-8acf-70632a1fcfb4"
        },
        "item": {
          "id": "2f07a915-1c54-4ab9-ba67-cab4dce9eaa7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "1907e826-7a14-4ba3-95e5-0178281486d2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 311,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "f156d4cc-26da-44b5-aba9-4ab88322753d",
        "cursor": {
          "ref": "743d8692-1f80-435b-b824-ea01ad968f0d",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "fdc9281f-7ffb-44b9-a921-7e28ba071af4"
        },
        "item": {
          "id": "f156d4cc-26da-44b5-aba9-4ab88322753d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "e9a7508a-951c-4f35-b58f-5e5abec2ec8e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1469,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "f409804f-ae3c-4e72-b123-52fdbb8f843a",
        "cursor": {
          "ref": "02004e77-fcfe-4cf8-9882-ebe01dad8069",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "4a91cb8b-93ac-4dab-9d2e-b1f4d433237f"
        },
        "item": {
          "id": "f409804f-ae3c-4e72-b123-52fdbb8f843a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "29bd3c0a-d0f6-4151-963f-88a44a1c8a54",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1944,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "7cf8e9b2-6110-4f83-8871-803c02e2841f",
        "cursor": {
          "ref": "f09f459f-30f1-4d5b-871d-30b9dfe87292",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "2c9a8354-18c0-4256-ac56-78fe707338cd"
        },
        "item": {
          "id": "7cf8e9b2-6110-4f83-8871-803c02e2841f",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "691a154d-22d8-43c3-b240-e71c0875c90c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 420,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "d187dc12-2136-4a0f-9681-e09d86e4b769",
        "cursor": {
          "ref": "0a8f3915-831a-4d9e-88a6-3c55d5cb1cab",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "0cc0f38d-5c7a-4b77-9c16-a2e5441e0b80"
        },
        "item": {
          "id": "d187dc12-2136-4a0f-9681-e09d86e4b769",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "338f38d8-ba9c-4cca-b89c-80b1fcecc6e9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 413,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "d2986585-bb4a-4928-b974-14caa62aa8cf",
        "cursor": {
          "ref": "3a88175b-144c-4a90-b53d-7d301ade5e26",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "675315c4-ec5a-4d74-9b4b-289269b09269"
        },
        "item": {
          "id": "d2986585-bb4a-4928-b974-14caa62aa8cf",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "88838bda-fb94-46b5-9f9e-8e6d983456a8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 280,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "021168b5-f1b4-4cb8-934d-b2468169d0d4",
        "cursor": {
          "ref": "20a1bc91-6eba-4063-b02a-ac3ab480d129",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "08c14aeb-5515-43a0-af53-7f894f79b182"
        },
        "item": {
          "id": "021168b5-f1b4-4cb8-934d-b2468169d0d4",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "01910b0c-c4db-467d-b14c-b6e69563bfb2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 226,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "5ee2000c-6684-421f-8608-5af3b82b9eca",
        "cursor": {
          "ref": "4e535b55-a26a-43e6-adcf-71288090282d",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "d48baa3c-23c2-47c2-8cc5-616df187fc8f"
        },
        "item": {
          "id": "5ee2000c-6684-421f-8608-5af3b82b9eca",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "f8518fa5-f949-4328-af92-c53ca75c5b1e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 215,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "80de97a6-1994-4df8-b88e-7367390263ac",
        "cursor": {
          "ref": "2a9e2012-5682-4292-8f3a-1a5cde3170bf",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "8ea91069-321b-4236-bedc-758b44136419"
        },
        "item": {
          "id": "80de97a6-1994-4df8-b88e-7367390263ac",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "242ffd7e-2c0a-46b7-9d8b-74f79d2eaaa4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 262,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "be35f40b-0eae-4551-b6cc-88c761128547",
        "cursor": {
          "ref": "e6ebc9d1-84ce-4bab-a581-b13d51207960",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "8510b31c-2b2f-4da8-96fd-b8a8fb9dda8a"
        },
        "item": {
          "id": "be35f40b-0eae-4551-b6cc-88c761128547",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "e48057f0-6031-4ba0-829f-830e2547414b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3857,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "c80d65e5-af37-4958-8498-f404e2d4f7fb",
        "cursor": {
          "ref": "071ea274-0c0d-4e62-b01c-d00b9d2a0484",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "578ae337-7b7a-4f06-b7af-f08aa3338fe6"
        },
        "item": {
          "id": "c80d65e5-af37-4958-8498-f404e2d4f7fb",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "e3e2aa6f-3815-436f-be65-181d508ce38d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1312,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "3117b647-f22c-462d-8886-d4a96853c9c2",
        "cursor": {
          "ref": "a8d0cbb7-db54-4e2a-a65f-cfead4bb3d97",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "f4aff761-52a6-44ac-af64-5ad360611f1d"
        },
        "item": {
          "id": "3117b647-f22c-462d-8886-d4a96853c9c2",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "a381ec30-d7d1-4c15-9f7a-9c4358c09e6f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 589,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "e24fb268-93e9-4613-ad44-1519d1944890",
        "cursor": {
          "ref": "ed9b82c7-48e3-4ae4-b3df-f55b503e9744",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "6e317b64-530f-44af-ad07-8f7fb26ba8dc"
        },
        "item": {
          "id": "e24fb268-93e9-4613-ad44-1519d1944890",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "902d2a28-d0f5-432a-9ab5-8ba4118d3a03",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 544,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "be2fc64a-5720-4978-94ec-85503810488a",
        "cursor": {
          "ref": "45adb79e-f06b-433d-9953-9d85b44e868c",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "1639e543-54cd-4012-895e-88fd7ad7707e"
        },
        "item": {
          "id": "be2fc64a-5720-4978-94ec-85503810488a",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "027814d7-8598-4817-938c-9e800ea60931",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 599,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "03fdf363-2e69-4604-9fcd-a7b447b73e57",
        "cursor": {
          "ref": "75f7748d-9522-436b-bea3-d9fdff6eba8c",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "df3a29c4-b0b0-4e28-b7dc-25531d099ba9"
        },
        "item": {
          "id": "03fdf363-2e69-4604-9fcd-a7b447b73e57",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "717b71c4-d859-4d43-a4a0-b56321fd1ebc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 597,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "0f620159-f1f5-4b19-84d4-5c14df841eca",
        "cursor": {
          "ref": "e66c191c-3c08-460c-8bbb-872b60c08d21",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "ebccb487-b486-4082-bd2f-720a557da976"
        },
        "item": {
          "id": "0f620159-f1f5-4b19-84d4-5c14df841eca",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "2500a8c7-b15b-4a06-b392-cb31cfd7cbf3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 572,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "30781d4a-5f3f-48a8-bcd0-58b8a2de412c",
        "cursor": {
          "ref": "d01aa445-fbb1-499c-b6bb-0c1b56cc6e0e",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "e05bc587-aa3b-4b13-a445-584daccdeb3f"
        },
        "item": {
          "id": "30781d4a-5f3f-48a8-bcd0-58b8a2de412c",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "bcd388d4-e39d-431e-b443-2df2c690abc7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 727,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "ea41ef0d-f72e-474d-b498-e06ad0a2e577",
        "cursor": {
          "ref": "0502f81c-9c9a-4747-8b1c-b8dae94a2b19",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "1bd7a76e-0fd7-4a06-8bc8-4c5daf3bf756"
        },
        "item": {
          "id": "ea41ef0d-f72e-474d-b498-e06ad0a2e577",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "ba88f73b-aa4d-4830-bda0-7ef2dc573cb3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 468,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "37b298c1-2cec-4780-9231-612dc566ea7c",
        "cursor": {
          "ref": "32c52ed0-f29e-4fcc-b445-8f98fcbb91f8",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "f9adf22a-879b-46ab-a933-3eab8b6cb38f"
        },
        "item": {
          "id": "37b298c1-2cec-4780-9231-612dc566ea7c",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "7390439f-18a5-4c50-8d49-0d7eb548ea1d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 396,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "b6dbd68e-619d-4b6d-98a8-091d91a5341f",
        "cursor": {
          "ref": "42ddfd53-478f-4860-b085-cb1e938ad987",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "42100b5c-c13d-4b15-b474-1c2f415891e8"
        },
        "item": {
          "id": "b6dbd68e-619d-4b6d-98a8-091d91a5341f",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "fda00fd1-ae5b-4fcc-bc3b-ab523c128bf8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 364,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "dd044e15-0a71-4acf-9871-378a126f568a",
        "cursor": {
          "ref": "8401b8be-fbfc-47dc-893d-d9302589bf6a",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "9a7d73bf-83b1-43f4-a306-8d17fc2c11f7"
        },
        "item": {
          "id": "dd044e15-0a71-4acf-9871-378a126f568a",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "e5601fbb-240b-4809-9621-0e4562066345",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 399,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "52714d37-5d7a-44bc-8804-f8b163ca7431",
        "cursor": {
          "ref": "5e27b348-ff73-4e81-ac0d-ce68d370e2d7",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "c9117168-702d-4cb1-99d8-0e4b4b6bb18a"
        },
        "item": {
          "id": "52714d37-5d7a-44bc-8804-f8b163ca7431",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "654650de-acc3-4468-b6fc-a2a31b8fe727",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 438,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "c961e2f4-be67-4d0f-bca6-d231bcaf9278",
        "cursor": {
          "ref": "46b0f38a-6b60-495a-8947-962c465a6f0e",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "8f4cb557-9b4c-4c4b-9d2b-7d490e1e5e78"
        },
        "item": {
          "id": "c961e2f4-be67-4d0f-bca6-d231bcaf9278",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "9367e124-b659-4e21-a9b8-a9b25867f902",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 363,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "3b7c31ea-a8dd-4a47-93b5-9b61801a7a1f",
        "cursor": {
          "ref": "5fb1abae-c7d3-4bb2-81dd-9660a5287521",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "1d3438b6-27c4-42cd-b209-66ce08608e25"
        },
        "item": {
          "id": "3b7c31ea-a8dd-4a47-93b5-9b61801a7a1f",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "2a4ab818-6002-40ac-9650-4c1fc4ef2b15",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 385,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "a1329e07-fc5a-4739-90cb-c278e7e1d37c",
        "cursor": {
          "ref": "844c38d6-bae2-4b36-9b1c-a629ba159208",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "360ef922-a44d-468d-89eb-3404927397f6"
        },
        "item": {
          "id": "a1329e07-fc5a-4739-90cb-c278e7e1d37c",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "6d891b3e-0439-411d-98e6-269f620ea47a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 464,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "f9584043-8a68-4a52-bb02-18d4f16f72b8",
        "cursor": {
          "ref": "fc174633-29dd-48c4-ac66-b4c203c56338",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "da5f3956-65c9-4971-99de-b30499792ce3"
        },
        "item": {
          "id": "f9584043-8a68-4a52-bb02-18d4f16f72b8",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "04898e18-8a0c-4e4b-9fd3-869614c2279a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 537,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "e7aa74b9-43ed-43ad-92bb-51fda2c96968",
        "cursor": {
          "ref": "cb83d8c0-cd37-4d8d-befc-b608361a4cdf",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "c57dfa26-414d-481f-a89a-bc6a4e4ec0c3"
        },
        "item": {
          "id": "e7aa74b9-43ed-43ad-92bb-51fda2c96968",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "a534270e-b912-4585-ac8e-e51435d85aa3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 684,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "641f0c67-1790-49ff-a406-e8ee8e9135c3",
        "cursor": {
          "ref": "f79deea9-b946-4d2b-953f-42dc6762fc69",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "dfc8a4e9-2c31-46df-9dde-fea256032934"
        },
        "item": {
          "id": "641f0c67-1790-49ff-a406-e8ee8e9135c3",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "19d9d142-f33f-45d4-97b6-9afc1d5c7935",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 594,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "cbf275f5-fa27-40d9-ae98-c8eb975ccf09",
        "cursor": {
          "ref": "17ab27e2-55d6-4b9c-b55a-d24a89b954a2",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "73423cec-c65b-47d4-9110-9989d7b0dfc7"
        },
        "item": {
          "id": "cbf275f5-fa27-40d9-ae98-c8eb975ccf09",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "741b0981-6430-477d-898a-348cbf95e6d5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1580,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "59e21569-ae89-494e-bda1-010b30c53e74",
        "cursor": {
          "ref": "3a6b59ea-9fae-4748-885d-5e4441f9034f",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "a6bfe830-5d04-4f8b-ad3f-4ddfb17efa9f"
        },
        "item": {
          "id": "59e21569-ae89-494e-bda1-010b30c53e74",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "22c7709d-d14d-4a14-bc9b-ab6ed030068d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 570,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "947b15a8-4a8e-4e11-aa22-07b2c17d0034",
        "cursor": {
          "ref": "49a2c9bc-5a84-4ce3-9a60-96685b8f5cbe",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "80486560-301e-477e-a83a-f4a01184cd4c"
        },
        "item": {
          "id": "947b15a8-4a8e-4e11-aa22-07b2c17d0034",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "761bd0a1-c96f-46a0-a611-bf9f3f8d7404",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 636,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "f90e06e7-b711-4f67-999c-173ce0488677",
        "cursor": {
          "ref": "13fc5cad-97d4-426f-83f7-40e33db401fe",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "0ca9890e-383c-41b1-90b3-3599fb401e42"
        },
        "item": {
          "id": "f90e06e7-b711-4f67-999c-173ce0488677",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "4def16cf-4648-48bc-91fd-f5c38a27181c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 582,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "4d84d243-b1cb-47f9-aee5-2976564cdcb0",
        "cursor": {
          "ref": "e1074ab5-d558-42e0-8a32-86f3828330d9",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "9d404e8a-fbc8-49fb-ad55-a8348b26d21a"
        },
        "item": {
          "id": "4d84d243-b1cb-47f9-aee5-2976564cdcb0",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "6128e440-e874-4a96-a589-d62d69831739",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 520,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "f75d5933-2f86-48df-81a4-fdeb87c749fc",
        "cursor": {
          "ref": "26913dc2-cab1-4878-8da1-13fdaffdbab6",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "08bb0b79-d896-4b4b-8efc-e86b084a4e07"
        },
        "item": {
          "id": "f75d5933-2f86-48df-81a4-fdeb87c749fc",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "c04169de-e046-4779-a794-c41ae8c9127c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 426,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "2ef41055-37ea-4f41-9d33-063509eb32ae",
        "cursor": {
          "ref": "fbb4307b-806e-496e-9da4-58409e304c1e",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "24514b39-83ae-4d17-8f99-3ac4e861a596"
        },
        "item": {
          "id": "2ef41055-37ea-4f41-9d33-063509eb32ae",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "ee0f327d-d635-4ff6-93d0-30cd4fa0dbbc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "b9073bc1-3502-48be-aac7-c03fc32120cd",
        "cursor": {
          "ref": "d720d888-1683-498a-84d1-4a6e89214168",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "01f91b92-06c6-437a-ad53-d0f8a8840d87"
        },
        "item": {
          "id": "b9073bc1-3502-48be-aac7-c03fc32120cd",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "ddb5e03b-902e-4807-9e70-7fe07f2fdb9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "ed96634f-13da-4b59-a603-a2338b95b9e0",
        "cursor": {
          "ref": "fc14cca2-591f-4e73-bd0b-767545f6ce34",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "f2380785-3395-443a-9ceb-53c9d5d1fc13"
        },
        "item": {
          "id": "ed96634f-13da-4b59-a603-a2338b95b9e0",
          "name": "credentials_issue"
        },
        "response": {
          "id": "6888858c-b50e-4a3c-9172-c36644bdad94",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 274,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:3:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response issuer matches request credential.issuer",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:4:106)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:5:106)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 5,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:6:106)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 6,
              "test": "response proof.created is close to 'now'",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:7:106)"
            }
          }
        ]
      },
      {
        "id": "aa5ec682-3668-414e-9165-f8008171de5f",
        "cursor": {
          "ref": "81a84d65-14c7-4f58-9eb0-97fcf9e71db1",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "c9a762b9-b91c-4005-a957-15765b9dff1e"
        },
        "item": {
          "id": "aa5ec682-3668-414e-9165-f8008171de5f",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "23ee06cc-477e-4630-a23b-e5d75efdfecc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 210,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:3:107)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "bb334f51-7036-4594-94b1-0a75443bb4c8",
        "cursor": {
          "ref": "429c9907-3779-4366-8ebf-712a939d8a62",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "284a5b24-d9eb-42d4-8e60-1313034d5f6d"
        },
        "item": {
          "id": "bb334f51-7036-4594-94b1-0a75443bb4c8",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "1cf22b1a-3180-456c-8fda-f9417ae197af",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 208,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:3:108)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:4:108)"
            }
          }
        ]
      },
      {
        "id": "16b7ce04-130c-4cac-8f12-2c30e61af1e6",
        "cursor": {
          "ref": "d031c6af-72dd-4455-92c7-663ecf657b8b",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "187a50bf-cebe-498b-a165-4085d47d5d03"
        },
        "item": {
          "id": "16b7ce04-130c-4cac-8f12-2c30e61af1e6",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "f25cea17-bfdb-43b7-a455-c5c610f54ffc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 194,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:109)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:3:109)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:4:109)"
            }
          }
        ]
      },
      {
        "id": "4f8674fc-9165-4ffc-ae27-f1733738a743",
        "cursor": {
          "ref": "4110708e-5a9f-48d1-b2ed-22773f5cf5d4",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "b4afebd5-9ba7-441b-8211-d354bdd75a32"
        },
        "item": {
          "id": "4f8674fc-9165-4ffc-ae27-f1733738a743",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "dbe1bccf-4613-47f2-87aa-868bf3708db4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 242,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:110)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:3:110)"
            }
          }
        ]
      },
      {
        "id": "7fce2682-69f3-4fcf-bc1a-faba1262c4ba",
        "cursor": {
          "ref": "ba406d94-86ff-45a3-8408-eeb54eb52bcc",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "51d57534-c1c5-40b5-9578-9c5ad6e25b28"
        },
        "item": {
          "id": "7fce2682-69f3-4fcf-bc1a-faba1262c4ba",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "657ddc01-d3b8-41c8-92ed-581ad57e024a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 107,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "7fce2682-69f3-4fcf-bc1a-faba1262c4ba",
        "cursor": {
          "ref": "ba406d94-86ff-45a3-8408-eeb54eb52bcc",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "51d57534-c1c5-40b5-9578-9c5ad6e25b28"
        },
        "item": {
          "id": "7fce2682-69f3-4fcf-bc1a-faba1262c4ba",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "657ddc01-d3b8-41c8-92ed-581ad57e024a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 107,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "3ee60185-15ca-4e55-9647-6257501ab450",
        "cursor": {
          "ref": "278ad1bc-6fcb-43db-94c8-eea62ef7c87d",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "ac220d0d-2a46-4656-9d5c-9c0b910b5894"
        },
        "item": {
          "id": "3ee60185-15ca-4e55-9647-6257501ab450",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "6cbc9b34-3c35-4cca-a4b6-0cecb3056b65",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "f70bebb8-c8e8-4e94-a3d0-71b25d5ce47c",
        "cursor": {
          "ref": "667df069-dcd7-441a-82a6-8bd921b62433",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "abbbb7e9-edbd-417f-a37e-9e6872d43022"
        },
        "item": {
          "id": "f70bebb8-c8e8-4e94-a3d0-71b25d5ce47c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "5ef05ab9-37ba-45be-9160-dcf98486a239",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "9245faa0-223f-438c-82a7-74c22d6610f8",
        "cursor": {
          "ref": "037416ec-5b9d-40ea-b86c-7a2dec032680",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "047bffe3-8bdb-4fb4-a5df-778e6fe764ae"
        },
        "item": {
          "id": "9245faa0-223f-438c-82a7-74c22d6610f8",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "f61861ec-78af-4dff-adfd-4ac2617872c5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "d7d90675-8665-4db3-a025-3a7798369e68",
        "cursor": {
          "ref": "28d86ef8-ee1e-4a8e-822a-1333f6b9df23",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "a70406d1-81d4-469e-947b-dc20e222d5f2"
        },
        "item": {
          "id": "d7d90675-8665-4db3-a025-3a7798369e68",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "b8e92eb2-83bd-4106-be82-52a609a99ec7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "f816da1d-459b-42db-9129-74e31454c1f4",
        "cursor": {
          "ref": "a8f42c9a-bbea-4cb7-93c4-54fcaf284492",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "d4358ee2-689d-4de5-8142-3439d478a02c"
        },
        "item": {
          "id": "f816da1d-459b-42db-9129-74e31454c1f4",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "7256a4d1-5287-4331-adcd-fdc419683aeb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "e4130a92-2520-452a-bc14-8f47cda5f8ca",
        "cursor": {
          "ref": "6218f2c9-41e0-4044-9e25-9822f9a597e2",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "28baaee9-fcfe-4e7d-bfc2-fd43f28febfb"
        },
        "item": {
          "id": "e4130a92-2520-452a-bc14-8f47cda5f8ca",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "fd2485ee-457e-458d-954b-83ad19b1274c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "fd2b5774-4698-46d5-a4ae-299d03c254bd",
        "cursor": {
          "ref": "496bb0cf-bb7d-4ddc-85ee-bfa1e672cae3",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "4f1f09f5-1f2e-4321-aed7-60f178c922fe"
        },
        "item": {
          "id": "fd2b5774-4698-46d5-a4ae-299d03c254bd",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "514039bd-2a87-41e7-9270-b96fbf1ced00",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "ff48c1a6-6c08-41d7-98f4-c547ef61af05",
        "cursor": {
          "ref": "28225f73-c633-45c9-831c-6a026c846716",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "60ade626-8efd-4c3c-9df9-6c9c4e77de09"
        },
        "item": {
          "id": "ff48c1a6-6c08-41d7-98f4-c547ef61af05",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "41cc0b6e-8ed2-41ba-a826-b6bef18e411f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "a43ff3b4-7cfe-4a71-9186-2d4f08d3f7f7",
        "cursor": {
          "ref": "acbe2576-2c57-46c0-bf03-5b68f019d607",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "688fa60c-4d0c-4b6a-ac68-a7cf1d1c079b"
        },
        "item": {
          "id": "a43ff3b4-7cfe-4a71-9186-2d4f08d3f7f7",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "8b0a3d14-8266-4faa-b870-8f577ea20ce9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "5fc06aa1-46cf-4a6b-8098-6dbea98204c6",
        "cursor": {
          "ref": "f6034777-579f-44f8-a90e-be2b60eeff9b",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "f7d15bbc-2b15-4c7f-9755-6d63e3a584e4"
        },
        "item": {
          "id": "5fc06aa1-46cf-4a6b-8098-6dbea98204c6",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "a0dda5ff-9010-4bc3-8415-09bb10e74e18",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "24c3a466-5031-4e3c-bf96-133f6bcb00a4",
        "cursor": {
          "ref": "677a6022-158f-415c-970f-d1c50b13ce00",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "a24e305f-aa4e-4c4c-a591-5bcd176ab45e"
        },
        "item": {
          "id": "24c3a466-5031-4e3c-bf96-133f6bcb00a4",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "f14f2a5d-0785-4884-bd0b-af0482255cb6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "fde8a776-42cf-4dac-9de1-d60f5f268f1c",
        "cursor": {
          "ref": "58bcd7de-d53e-4c0c-a222-801b0c0e78de",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "c0dbbbe6-d1a8-4d25-8fa5-d0584832333f"
        },
        "item": {
          "id": "fde8a776-42cf-4dac-9de1-d60f5f268f1c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "2f2d0098-85e1-48f3-9b28-80a12a782328",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 42,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "c08cb88e-2f82-420a-8fb7-73d189f95453",
        "cursor": {
          "ref": "9736d184-f400-4334-b786-af3fbca83498",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "092bcdd3-0120-40a7-bebe-89043f1eaf7a"
        },
        "item": {
          "id": "c08cb88e-2f82-420a-8fb7-73d189f95453",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "dbde9db8-eedf-43b2-b8f5-599bda6323a4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 42,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "28517d68-63f5-460c-b5f1-eb393056197c",
        "cursor": {
          "ref": "dea48bb1-55c9-480c-ae89-9406d3c3bcfe",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "28ab6c5c-4d91-412f-81d4-459477f769a1"
        },
        "item": {
          "id": "28517d68-63f5-460c-b5f1-eb393056197c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "751b4ca3-0849-49b6-8ea2-3d4ed3108e03",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "5b0343a9-b5d5-47ed-acb1-db9e20f84645",
        "cursor": {
          "ref": "fc517110-8240-4f52-822e-607c193f7f8c",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "a8c83c7e-5089-4372-87d6-85442bc1ef61"
        },
        "item": {
          "id": "5b0343a9-b5d5-47ed-acb1-db9e20f84645",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "7b9615f0-5c0f-4d25-adbf-88c49d256165",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "951ff91a-4ddf-46ce-97e4-78f080f02dab",
        "cursor": {
          "ref": "fa2404c5-c5da-4074-ab7f-9fdc554d50b0",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "5523d244-1abf-4212-b410-a9d3fc19ec54"
        },
        "item": {
          "id": "951ff91a-4ddf-46ce-97e4-78f080f02dab",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "5d6598c1-d92a-4f38-978e-68b1544bb37a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "614ef8b1-2e91-4042-9806-84490c3710c3",
        "cursor": {
          "ref": "94dad12c-b009-4489-b88a-93aca53d8b51",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "f06175fd-48f2-46e3-8e46-99781d564bd1"
        },
        "item": {
          "id": "614ef8b1-2e91-4042-9806-84490c3710c3",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "84de8dd5-0c2b-4186-afcf-135fce225d4c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "d02098c2-d9ab-43da-8c9e-b1065bc0b37a",
        "cursor": {
          "ref": "83085eed-91dd-47f3-bf6c-8f28e5519aa3",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "eb88aaa5-9c14-46c8-8096-86d124a69be4"
        },
        "item": {
          "id": "d02098c2-d9ab-43da-8c9e-b1065bc0b37a",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "71dc652f-a9ae-44b5-9c9e-279f239ae14d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "de7c4397-ae1b-41a9-ab47-5088853e2f17",
        "cursor": {
          "ref": "b93de66b-cc38-4694-8612-fda8105234ee",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "8abce63b-193d-4145-a2ab-ef040aa3eaa0"
        },
        "item": {
          "id": "de7c4397-ae1b-41a9-ab47-5088853e2f17",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "a0965a78-293a-4b5a-82e9-439b0315b00d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "2ee8b2a3-129f-4c5d-b890-f35725bca282",
        "cursor": {
          "ref": "de2f8eac-54a9-4bd3-b79a-847bf825f6e5",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "35ea68ee-59d4-4a73-b897-7fc4b2a5eee0"
        },
        "item": {
          "id": "2ee8b2a3-129f-4c5d-b890-f35725bca282",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "907085fd-209a-448a-ba6b-b60b65a41320",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 42,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "5d47f31a-63b2-4922-a1ca-d194fc7fd733",
        "cursor": {
          "ref": "2fcbd0b1-67dd-496e-b05c-ebfd73228332",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "089e16dc-edea-4838-b515-68f372d7175f"
        },
        "item": {
          "id": "5d47f31a-63b2-4922-a1ca-d194fc7fd733",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "af016e57-c0a7-44fc-a3d9-d16f07f14ca4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "0bff1a59-c4c1-4ac9-830c-06e80532bb1b",
        "cursor": {
          "ref": "699a92d4-46db-4875-814c-ecc25fa506ef",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "c2055395-5f02-471a-ba94-df8f32adabd9"
        },
        "item": {
          "id": "0bff1a59-c4c1-4ac9-830c-06e80532bb1b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "7180131a-a9c4-4e3c-afd5-d397e265bd73",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "3ac648a4-2df1-4d20-880d-487768ee42bc",
        "cursor": {
          "ref": "2fce7103-1473-4192-a9ca-30f7b7213b44",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "460b6f14-6174-4d9c-8612-358c5c03f479"
        },
        "item": {
          "id": "3ac648a4-2df1-4d20-880d-487768ee42bc",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "85da1bbe-332a-442c-a13d-7d89b5908f36",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "842f0133-1a85-40d2-8a35-c0b95c8ff7d0",
        "cursor": {
          "ref": "b8caaf93-ed38-4fff-bc37-9eb6294ad557",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "de319a03-5c2b-4e74-a1a6-9bcb4d351b55"
        },
        "item": {
          "id": "842f0133-1a85-40d2-8a35-c0b95c8ff7d0",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "997df332-592b-456f-9997-9248b3dfa830",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "471ad86a-6029-45b3-b56d-e41dd3a88ab5",
        "cursor": {
          "ref": "5535b159-3218-4b95-8cf4-e910fa6e837a",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "40d86baf-5a67-4797-b54d-0f741fbced95"
        },
        "item": {
          "id": "471ad86a-6029-45b3-b56d-e41dd3a88ab5",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "69c29a75-3498-446f-97f0-b087865fc3de",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "22943112-3a5c-406e-983b-2066005e1ac1",
        "cursor": {
          "ref": "a5a4cce2-0fc2-49be-a6ef-146c9fe88b5a",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "83a66387-124e-4db2-847e-a383cfee4813"
        },
        "item": {
          "id": "22943112-3a5c-406e-983b-2066005e1ac1",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f1bd86f4-a492-413a-9b12-4c13cd034deb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "dd379db8-3873-4dd3-845f-02c3e27b248f",
        "cursor": {
          "ref": "a3e19412-89fb-401d-ad10-5014db6b8bb1",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "8c137ee1-5405-4850-8157-547962edcbbd"
        },
        "item": {
          "id": "dd379db8-3873-4dd3-845f-02c3e27b248f",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "0954369b-cf1d-4430-9e37-3ef42c627535",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 41,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "5d6bca2a-1143-4f95-8ce2-e14cb83c83ba",
        "cursor": {
          "ref": "28fddd53-4fee-4cbb-bdd5-ab005e5dc1e6",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "d652c994-93d9-4e92-a720-17dbb1c437be"
        },
        "item": {
          "id": "5d6bca2a-1143-4f95-8ce2-e14cb83c83ba",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "d6fe8d0f-f422-4498-9a96-a73acfb71358",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "e55c4870-d029-4e9c-964a-acb05578c5a6",
        "cursor": {
          "ref": "5d75f0a1-fb34-4bd9-8cb4-63ebc425d37c",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "0f3e4952-499c-40a5-a362-3b3c6c137da2"
        },
        "item": {
          "id": "e55c4870-d029-4e9c-964a-acb05578c5a6",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "261f1b96-ced6-4a33-a5bb-d60dd99bb213",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "17a06c53-bc35-44c0-904a-43ccdd07a1bc",
        "cursor": {
          "ref": "c0563dd8-4bba-45fd-a056-9f0e5eacee5f",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "6ac4b41d-78fa-4b97-9bfd-11defa7bcebf"
        },
        "item": {
          "id": "17a06c53-bc35-44c0-904a-43ccdd07a1bc",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "28341ace-d48b-4c29-aa51-eaff04eff17c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "e81f6829-1900-4a12-835e-53f6aa36cad8",
        "cursor": {
          "ref": "7702bd98-1d57-41d5-b63b-f1160988cf50",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "1c238f83-16e2-49ab-bd4b-99d7427d9107"
        },
        "item": {
          "id": "e81f6829-1900-4a12-835e-53f6aa36cad8",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "126e8ac1-4325-4a62-88df-505b19bbc882",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "7b841aeb-9ba5-4ae9-a19b-593cd29f260d",
        "cursor": {
          "ref": "6b12be89-022f-4fe3-8235-a8b002493078",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "b3764db7-b974-4d0e-954c-ecc824f79438"
        },
        "item": {
          "id": "7b841aeb-9ba5-4ae9-a19b-593cd29f260d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "05b85463-8d07-4a4b-92ff-55e06cdce250",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "da59355a-7681-47c7-9a9d-dec1413b0967",
        "cursor": {
          "ref": "1169909e-d678-4ca6-a39e-4b35b836bdce",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "9ea0f8cf-4f2c-4ecc-a05f-f7d2c278c4fb"
        },
        "item": {
          "id": "da59355a-7681-47c7-9a9d-dec1413b0967",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "0519a593-6be3-42da-be9c-48af0a6a1e06",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "20020a4c-acf8-42ad-ab9e-c2382603a4f1",
        "cursor": {
          "ref": "71f11e0b-78be-458e-8914-7b5999f6fc22",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "45f29af0-3867-4832-b8fd-145d208c7bb8"
        },
        "item": {
          "id": "20020a4c-acf8-42ad-ab9e-c2382603a4f1",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "92a5cb0c-e746-441b-a574-14556960f1e4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "20020a4c-acf8-42ad-ab9e-c2382603a4f1",
        "cursor": {
          "ref": "71f11e0b-78be-458e-8914-7b5999f6fc22",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "45f29af0-3867-4832-b8fd-145d208c7bb8"
        },
        "item": {
          "id": "20020a4c-acf8-42ad-ab9e-c2382603a4f1",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "92a5cb0c-e746-441b-a574-14556960f1e4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "037ff0e0-0149-4111-ad84-f91347329889",
        "cursor": {
          "ref": "b786217a-c2a8-4321-9839-b71be2491e3b",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "c02b3297-430d-43b9-b3bc-d615d89a5ab9"
        },
        "item": {
          "id": "037ff0e0-0149-4111-ad84-f91347329889",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "e8d47520-2d5b-46a9-bc60-a379032faca5",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "4914358a-2a85-4060-852f-2f9d20c0b322",
        "cursor": {
          "ref": "33251f57-46ae-4500-be71-2e8aaa25a448",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "17b492ad-c1c3-4904-ab90-96b6471e26c6"
        },
        "item": {
          "id": "4914358a-2a85-4060-852f-2f9d20c0b322",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "3534b267-fe67-4e45-b83b-e2c422f7b3b7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 12
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nServer Error\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nServer Error\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "159b4387-7bab-4c71-a2fe-bbf06fff186f",
        "cursor": {
          "ref": "e1b69103-892e-4e97-afea-f53b8e36b211",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "8d6d497a-4f46-4f4d-811f-fcb233cff534"
        },
        "item": {
          "id": "159b4387-7bab-4c71-a2fe-bbf06fff186f",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "ab462b01-5a8e-4932-a622-a794a431d115",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "fcb4f6df-1ecc-4002-8683-41bea6a26675",
        "cursor": {
          "ref": "4282fe64-076b-408d-a506-3d294d6a658a",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "0455bc15-62b4-42b4-85d0-1d3c858951af"
        },
        "item": {
          "id": "fcb4f6df-1ecc-4002-8683-41bea6a26675",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "efe6841c-b336-40ea-aef9-36b34e108d5b",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "77806c72-d60c-4769-bd1c-1c5a60e40f15",
        "cursor": {
          "ref": "6a45b510-f479-488a-9c33-d07f535b6ebd",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "cd12a570-ffc5-4f12-9065-62ead86c9ef1"
        },
        "item": {
          "id": "77806c72-d60c-4769-bd1c-1c5a60e40f15",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "732329cd-e9d3-477f-816c-49683db8d9aa",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "c785e849-97de-4c09-ada4-a6656369a0dc",
        "cursor": {
          "ref": "48e4d1b5-1371-4846-8037-b0984a17ee70",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "0da4fd74-bb2d-4055-978a-67a82b66eb35"
        },
        "item": {
          "id": "c785e849-97de-4c09-ada4-a6656369a0dc",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "12cac343-c495-4e2c-91a9-e730bb73796e",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "b582e88f-f7d8-4ad4-bd23-6cac303e25c9",
        "cursor": {
          "ref": "9dfdc95d-9bae-4346-9772-79019bcc9079",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "717767f5-46f3-4ef1-b7d5-210c6728d95d"
        },
        "item": {
          "id": "b582e88f-f7d8-4ad4-bd23-6cac303e25c9",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "37202042-95a7-4baa-bd57-54c5f6339cb8",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "d7d02acc-232c-4442-998b-6de8afa6da37",
        "cursor": {
          "ref": "496b14ea-5a72-476f-9bf3-86e55bddcab6",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "4f84dfba-82dc-490a-bdef-72412e128d0d"
        },
        "item": {
          "id": "d7d02acc-232c-4442-998b-6de8afa6da37",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "ba464043-b15f-4aa7-a4d0-493be519d88d",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "7d87595a-0646-4756-9146-e626c5a4ccb4",
        "cursor": {
          "ref": "3df5bc13-6123-4d01-abba-bcd9a615d36c",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "dedfcc45-76a2-4d5b-b7aa-79f76c07d655"
        },
        "item": {
          "id": "7d87595a-0646-4756-9146-e626c5a4ccb4",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "2a431527-17dc-4281-811b-09dfb3b1079d",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 78
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "cd4b2b49-e1f0-4464-809f-7ff5158b813c",
        "cursor": {
          "ref": "612e6de8-bb8b-4b03-827a-07724d746b04",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "c7b1dd8a-5966-4a14-8c65-0ba32a768e0f"
        },
        "item": {
          "id": "cd4b2b49-e1f0-4464-809f-7ff5158b813c",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "fccdb128-42c2-407a-95c5-2d49c40a928f",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "7346544a-041c-4cb5-8337-ce54370fd5e8",
        "cursor": {
          "ref": "eaf63f64-1938-44ab-b366-926fba90afe5",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "b16ddcbc-7711-41bc-92e4-737831d3b225"
        },
        "item": {
          "id": "7346544a-041c-4cb5-8337-ce54370fd5e8",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "e252acb6-7e84-496d-a427-92d31f44b6a9",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "ce6bb31c-2e43-4838-b503-16a9dab81da4",
        "cursor": {
          "ref": "a32d748a-9610-4d08-b41d-aee8715b1008",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "bf313943-d3f1-48a9-9a7c-5f03ba6eca47"
        },
        "item": {
          "id": "ce6bb31c-2e43-4838-b503-16a9dab81da4",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "72e8bd4f-0c6c-4cb4-a66e-d03587b4e171",
          "status": "OK",
          "code": 200,
          "responseTime": 57,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "568438ea-d774-4ecd-8dc2-87f48b27c60a",
        "cursor": {
          "ref": "b871f6ae-35c1-4f00-a224-69ddd7c39cb3",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "75b1904f-8d56-442c-8508-a160f65332e8"
        },
        "item": {
          "id": "568438ea-d774-4ecd-8dc2-87f48b27c60a",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "777a4fc6-b24d-4499-b258-13d834c171be",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "e79ac389-c1fa-4a1a-aab5-4e82df538bf1",
        "cursor": {
          "ref": "8166d9b5-bd43-4531-8172-44b32edb749f",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "198d6fa1-7be7-44ca-8b2d-a4b39266f724"
        },
        "item": {
          "id": "e79ac389-c1fa-4a1a-aab5-4e82df538bf1",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "ba382b14-0754-4cf4-9a87-d56fc4950f1d",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "449904f2-6af2-4c9b-8fdf-7fbf4cf20f7f",
        "cursor": {
          "ref": "2386358d-f036-4c2d-b7e5-35d045662828",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "98e81904-066b-426c-bba9-84ab733fa6b9"
        },
        "item": {
          "id": "449904f2-6af2-4c9b-8fdf-7fbf4cf20f7f",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "40697db4-2559-4dcc-b3b4-e7e00cd8fc0b",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "0ff59ad2-8b4d-46c8-9b1b-f6f3c9bc64dd",
        "cursor": {
          "ref": "cba8177e-bfd6-474d-b015-a472ba7c617a",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "997c68fe-49d2-4982-9064-e4a0c5532990"
        },
        "item": {
          "id": "0ff59ad2-8b4d-46c8-9b1b-f6f3c9bc64dd",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "cafe575a-4abc-46fd-ba7d-e56670d1d96a",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "5174113e-2335-4a16-a53b-fac139c6492a",
        "cursor": {
          "ref": "f9ceabe1-e82c-4041-b3b3-f005e1b9fc8b",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "296c8833-e19e-4918-81b9-a3b67c2a353f"
        },
        "item": {
          "id": "5174113e-2335-4a16-a53b-fac139c6492a",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "f0b69979-e24a-4ab4-a01d-fb758cfeef90",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "a0e66fac-26ca-4fe8-8bb5-08de5f119a6f",
        "cursor": {
          "ref": "8b5c766b-ebdc-45fe-87f7-a31e79f1b0bc",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "052612a6-ce67-4ed4-83da-74c093b57b71"
        },
        "item": {
          "id": "a0e66fac-26ca-4fe8-8bb5-08de5f119a6f",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "c5433e04-a304-4ee7-af89-f020b026c05d",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "6fe199f0-2346-45d1-b46a-d1f31149154c",
        "cursor": {
          "ref": "c3344b22-0624-4d92-80c1-1206d4d59ebe",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "e6f46ca4-fa05-4338-a55f-9dca46b66407"
        },
        "item": {
          "id": "6fe199f0-2346-45d1-b46a-d1f31149154c",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "ba3ced92-8ad4-47f3-bdb0-6cb8bbeb7cbf",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "5bb4e5aa-84e1-4d11-867b-852245e9b0f6",
        "cursor": {
          "ref": "79b516f2-9148-40bf-8ae1-a2b41d0965cb",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "3ad43f03-ae92-4f97-b169-66a07c9a1fd6"
        },
        "item": {
          "id": "5bb4e5aa-84e1-4d11-867b-852245e9b0f6",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "a4cadba4-9053-48a3-b0ef-1281b912831a",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "2ce9e3f9-9151-4642-ab11-a6b4d84c80f1",
        "cursor": {
          "ref": "50eee65f-32ad-476f-b2d4-59f288d1deb7",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "090a8b4c-5f71-4cd5-8caa-d752e24c2351"
        },
        "item": {
          "id": "2ce9e3f9-9151-4642-ab11-a6b4d84c80f1",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "49e8f5df-1cfe-4200-a697-b32da0083d4a",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "e2b6153c-013f-4ea3-a5a2-c5ed5ed99a59",
        "cursor": {
          "ref": "edda4965-8f50-41fb-9299-c35a861326fd",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "846dd12a-f270-4d0d-8fcd-3c30611f9813"
        },
        "item": {
          "id": "e2b6153c-013f-4ea3-a5a2-c5ed5ed99a59",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "937c68bf-bc01-42fc-a1f6-d5ffd3b4db12",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "5613668e-6e5a-4588-9954-8410a587e498",
        "cursor": {
          "ref": "0152efa0-0a8c-4533-8afb-86b4ac9c804a",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "22536fa2-c9fb-4811-b024-dafcb7b18a38"
        },
        "item": {
          "id": "5613668e-6e5a-4588-9954-8410a587e498",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "a1d97a24-41a2-4f9c-a000-6d87c58eacfd",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 64
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "f4e6ff4e-5bd9-4d1c-a990-3ebbc3498f8f",
        "cursor": {
          "ref": "de942cfd-8e93-4bf6-83b7-deae61f26ae1",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "07312528-748b-4bc4-ba76-50f004e37c10"
        },
        "item": {
          "id": "f4e6ff4e-5bd9-4d1c-a990-3ebbc3498f8f",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "8fe24626-050f-401a-a89d-0118da3bcaf0",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 79
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "bf6baad8-3f7a-4e50-8ef9-f4e708ecd173",
        "cursor": {
          "ref": "77d8ebc4-6e50-4130-8cdc-83e1bb006aa1",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "38d0db0a-83d0-45d3-a65c-b1fd0b2dd411"
        },
        "item": {
          "id": "bf6baad8-3f7a-4e50-8ef9-f4e708ecd173",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "9412b82a-1188-4c54-a519-827a8b23ab96",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 79
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "d8af8e13-035d-42fa-906d-600db0a5fd50",
        "cursor": {
          "ref": "d9ce6438-1024-470d-a430-fc3f4a7e15e5",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "f12a3889-8b74-4662-9554-15225f900cb3"
        },
        "item": {
          "id": "d8af8e13-035d-42fa-906d-600db0a5fd50",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "718470d9-adbb-44e5-b2b7-cae92ce52620",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 64
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "f74b8b27-05b2-472c-ada0-9835ccaa46c3",
        "cursor": {
          "ref": "0139f881-576a-4b95-9c3d-56c86daaa051",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "a327702a-d219-4bbb-83c3-f514e66bd151"
        },
        "item": {
          "id": "f74b8b27-05b2-472c-ada0-9835ccaa46c3",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "d66cea08-029b-4340-a9a2-1130ea3d7901",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 79
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "a866decf-d157-4228-b900-c0cf3aa2681f",
        "cursor": {
          "ref": "7a2fdd18-9abf-4382-b394-328030c50956",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "a68dd41e-ae3d-4601-a33c-90b7271e7572"
        },
        "item": {
          "id": "a866decf-d157-4228-b900-c0cf3aa2681f",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "3b5e05cf-62ad-4318-b428-80c5254dbf6c",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "157748db-c40e-4027-ac06-f566bd46bd23",
        "cursor": {
          "ref": "1ffc6275-4c80-4956-8fe0-cd0745b0e857",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "b59bf3e5-2422-439f-9a86-536567b62349"
        },
        "item": {
          "id": "157748db-c40e-4027-ac06-f566bd46bd23",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "0179ea08-2bc5-4891-8dc1-b9c5fb267280",
          "status": "OK",
          "code": 200,
          "responseTime": 55,
          "responseSize": 79
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "f4a87bbb-cf62-4610-ae52-be89b1f1cd00",
        "cursor": {
          "ref": "d80af90b-8e06-4379-ab74-75377fd1146f",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "4d4126d7-c0cb-4be6-b753-bed3306c0d2b"
        },
        "item": {
          "id": "f4a87bbb-cf62-4610-ae52-be89b1f1cd00",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "6a7d8d36-3e8b-439f-99f3-dd15b6904072",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "306916dd-59cd-4b60-b08e-22a666dbc0a8",
        "cursor": {
          "ref": "746ae794-7fca-4c17-b8cb-a04ed907b400",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "7cbca199-ee7a-47e7-9fab-48628e76fd4a"
        },
        "item": {
          "id": "306916dd-59cd-4b60-b08e-22a666dbc0a8",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "6e2629ef-2967-4e4e-999e-fea44e8f6152",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "2775806e-139a-418d-b7bf-cab0d12a9445",
        "cursor": {
          "ref": "937a432f-7f27-48d6-888a-ba8cde1796be",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "19f10af6-595e-49a3-a534-9c8fbfbcf426"
        },
        "item": {
          "id": "2775806e-139a-418d-b7bf-cab0d12a9445",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "8558dce4-45e1-4b42-80e5-0283a935c9ea",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "0e1ceb6d-a5b8-4e3f-8619-a356e17c0d71",
        "cursor": {
          "ref": "d049ee7c-3381-424b-ae0f-f1f8dd1acaab",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "d3e388da-a8e5-47ec-93a7-8f33f5dc7f09"
        },
        "item": {
          "id": "0e1ceb6d-a5b8-4e3f-8619-a356e17c0d71",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "8e84397a-249e-410d-88d6-9f37b8b78e4c",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "ca35bb73-648f-4827-b334-9dcffedf05a2",
        "cursor": {
          "ref": "59049b29-5866-4ced-9937-2b49581331a1",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "f01b8d55-ed10-4cdd-8dca-c0a7a0c5d587"
        },
        "item": {
          "id": "ca35bb73-648f-4827-b334-9dcffedf05a2",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "542a15c3-93dc-4f58-a829-0f2aa4986a39",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "b84916d8-d874-4b7c-ad54-d5fa47b2ab06",
        "cursor": {
          "ref": "a48fb00d-56cd-4731-b490-64c7ad61b3a8",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "a84dbf60-b4af-4411-848e-18a54cc46b37"
        },
        "item": {
          "id": "b84916d8-d874-4b7c-ad54-d5fa47b2ab06",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "63843836-7a12-4f8d-a97e-fac7c338556c",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "42e1ce5e-5616-4290-93a9-402641b3e23c",
        "cursor": {
          "ref": "8f7146ce-2bf5-46ba-a8cf-4b73ce4f1fb2",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "e1a93dfe-eeed-40fb-a21e-bdae7d0a51f4"
        },
        "item": {
          "id": "42e1ce5e-5616-4290-93a9-402641b3e23c",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "69622a7d-e09a-42e5-9889-8117be58c65f",
          "status": "OK",
          "code": 200,
          "responseTime": 55,
          "responseSize": 60
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "d1184244-8423-47cc-a434-70108ef934da",
        "cursor": {
          "ref": "88ebfa2c-2462-409b-af1b-dbf1d94c883d",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "6f87b790-1da8-40ff-897c-537e6d02ad4f"
        },
        "item": {
          "id": "d1184244-8423-47cc-a434-70108ef934da",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "38176985-3ae4-4fd4-a8a4-b93665c7201d",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "436f7c3f-4389-4947-903a-390a409135ba",
        "cursor": {
          "ref": "c1c3f74d-1e26-4160-8c91-5779e182adfd",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "8fc2cba4-f80d-415c-b29c-eb0c98d93aca"
        },
        "item": {
          "id": "436f7c3f-4389-4947-903a-390a409135ba",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "3c246e7b-2988-4f71-a45d-7255d0e81e3c",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "04e3864a-1201-4893-a821-3a839e6079e7",
        "cursor": {
          "ref": "87d7d7eb-f690-47fb-98c8-4aad407bb5da",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "1be5bdcc-8b00-4f0c-a82b-bf8b02ec17d7"
        },
        "item": {
          "id": "04e3864a-1201-4893-a821-3a839e6079e7",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "e2ab3419-0d1b-4330-8971-51aa91284780",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "440b02ba-599a-4ecf-840e-cc7b7d77ecaf",
        "cursor": {
          "ref": "58852d0c-4724-4fb8-8c3a-5cdb87bad67e",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "2f5d4dae-76f6-4bb8-8b47-b5a965dadbcd"
        },
        "item": {
          "id": "440b02ba-599a-4ecf-840e-cc7b7d77ecaf",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "ce67ab88-ac02-4e2e-87b8-b564ae8b405d",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 60
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "184b41d4-611b-4747-8147-702c812e345e",
        "cursor": {
          "ref": "f16aa4c3-ac24-41e0-a102-f2247f82beae",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "b3bd102c-0b86-4f1b-bb0e-be74fd34bcc5"
        },
        "item": {
          "id": "184b41d4-611b-4747-8147-702c812e345e",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "aea863a3-0be7-4797-837d-cfc2cbce9042",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "7d4bb1b5-0cb2-4c6b-9d89-85ddfe23df98",
        "cursor": {
          "ref": "95f5004e-cafc-4224-bc69-f2979a98d45d",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "02d61148-037f-41d3-ba64-b5fa71b86123"
        },
        "item": {
          "id": "7d4bb1b5-0cb2-4c6b-9d89-85ddfe23df98",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "06a22ade-6efc-4532-a946-2f109c2c4043",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 60
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "fc6071a5-37e4-46bf-ba31-8903a72ca2c0",
        "cursor": {
          "ref": "71c0ec79-b356-4ea1-8215-ee3083d3fec6",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "36d73535-bfef-46e6-a7fe-d201d924311b"
        },
        "item": {
          "id": "fc6071a5-37e4-46bf-ba31-8903a72ca2c0",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "e64a0fcf-48a2-4c1b-97ee-79b152e05c9a",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "cf4379e6-4886-47e5-9633-d8362d346ac4",
        "cursor": {
          "ref": "a879207e-7f7c-47d8-a3fe-5247e52b6741",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "33e84723-679c-45d0-8990-24f2d7d84b86"
        },
        "item": {
          "id": "cf4379e6-4886-47e5-9633-d8362d346ac4",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "8337b9b9-cc80-4a86-a2a6-dd82de35637e",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 60
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "fa6ab6b0-03ad-4f59-8e87-0c7588472ba7",
        "cursor": {
          "ref": "b0246e5a-80a4-4722-979c-9db37c07ee13",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "2e150d2d-15ef-4521-95d8-77bcc0db4514"
        },
        "item": {
          "id": "fa6ab6b0-03ad-4f59-8e87-0c7588472ba7",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "c8d2f1c9-c053-4373-a672-51fbf630ec37",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "6444aa80-3449-4b6b-872a-5639d3bb9a72",
        "cursor": {
          "ref": "753bb3f4-c579-426e-9d83-8a97882077cb",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "d9bd6c58-63a3-45e2-a73f-789f31827b79"
        },
        "item": {
          "id": "6444aa80-3449-4b6b-872a-5639d3bb9a72",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "58da2aef-fc69-452a-93d6-c44c26a10c5a",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 72
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "1d26c29b-03f8-449e-a413-7eeceb862ad9",
        "cursor": {
          "ref": "443197fd-958d-4609-8f75-3bad4cf10985",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "95efbed3-a01c-4040-a7bb-42ad6771c6b4"
        },
        "item": {
          "id": "1d26c29b-03f8-449e-a413-7eeceb862ad9",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "e203f3cf-0b14-40da-9661-be66bd972207",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "7a1eb85b-eacd-4f50-b540-1e033fc6529a",
        "cursor": {
          "ref": "d83c0128-fb41-4f93-8d3b-e6bd6ed64753",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "8c3073b2-1c9f-48ac-8858-57cd2a369fb6"
        },
        "item": {
          "id": "7a1eb85b-eacd-4f50-b540-1e033fc6529a",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "d9dadabd-2e2e-4712-8480-dc5e1da1b762",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 72
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "af2712af-4b0e-4791-8f43-60065013c9a2",
        "cursor": {
          "ref": "a0dd79e9-41ea-4473-8520-a289509f67a6",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "5d066823-9e33-40cd-be56-7b3fc5bda466"
        },
        "item": {
          "id": "af2712af-4b0e-4791-8f43-60065013c9a2",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "f2430f59-12fe-4323-9339-58f0a4de4ed2",
          "status": "OK",
          "code": 200,
          "responseTime": 55,
          "responseSize": 76
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "81e84956-e97f-427a-829f-1688fa384e6c",
        "cursor": {
          "ref": "8d6ecfcc-7edf-4f96-89d8-8457e4bfdc0a",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "2812aeee-205b-4704-bbeb-03db5ac4433d"
        },
        "item": {
          "id": "81e84956-e97f-427a-829f-1688fa384e6c",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "bb156788-090f-4e2f-bbe5-8733ba5b7e62",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 72
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "be98156c-80ed-463b-94ba-b35844f33d28",
        "cursor": {
          "ref": "5fb5cb8c-c82d-4903-bbc5-241a41a7ba35",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "7ed31af5-fc64-4166-be0b-2c97de1b8884"
        },
        "item": {
          "id": "be98156c-80ed-463b-94ba-b35844f33d28",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "56ddb3d1-f1f4-4013-8dc9-747d17387eb3",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 88
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "83527a90-c574-4183-b8db-0ec10377ec44",
        "cursor": {
          "ref": "29ea5c5c-fb75-4f84-9156-fbfdc614b0f4",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "bd97dfc7-406d-48b9-8c3c-1a4bde5fe76a"
        },
        "item": {
          "id": "83527a90-c574-4183-b8db-0ec10377ec44",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "4e4f32cf-ffb8-4687-802c-ae5f048a387e",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "b9697aa0-c1fd-43fc-adfb-f4116b9ad709",
        "cursor": {
          "ref": "6135771a-8b8e-41ba-a20b-3f30a968f89d",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "acc9d552-7ab1-462c-8235-648c87cfdf17"
        },
        "item": {
          "id": "b9697aa0-c1fd-43fc-adfb-f4116b9ad709",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "e9772761-8aeb-407d-9697-7b79dd118ddb",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "f8abd3f1-b3be-4db2-86a0-69588d5d5e67",
        "cursor": {
          "ref": "707cd02f-489d-404d-b80f-3a407bd5b622",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "499a9f6a-3b56-4710-90ca-016e937843d2"
        },
        "item": {
          "id": "f8abd3f1-b3be-4db2-86a0-69588d5d5e67",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "1c60efd4-a1b4-4a39-9ee4-99433583ef82",
          "status": "OK",
          "code": 200,
          "responseTime": 106,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "b75522c7-66db-40f2-904d-3069d80a979b",
        "cursor": {
          "ref": "a41c0253-fb59-43cf-8fbb-612238983e7d",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "50e0f054-d3d6-4287-860e-cf2a2be052a2"
        },
        "item": {
          "id": "b75522c7-66db-40f2-904d-3069d80a979b",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "522c395b-1d31-4b91-bbd8-39b5e0dff97b",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "4693c7b4-c229-4456-bf6a-d8fc0f2e9d8b",
        "cursor": {
          "ref": "bf98e0ef-79ce-4496-b1f6-1fc4626d1525",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "7e4b7ceb-5660-42ae-98b4-21736d1038d3"
        },
        "item": {
          "id": "4693c7b4-c229-4456-bf6a-d8fc0f2e9d8b",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "9edcdb92-09e8-4903-8ef6-723e667ffb48",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "691b4f94-855e-43ed-8b05-008b630ff1bd",
        "cursor": {
          "ref": "7a18283d-bb1a-4d0e-8225-5d0fb224f180",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "b32758e0-690f-40e1-889e-75bb94aa9661"
        },
        "item": {
          "id": "691b4f94-855e-43ed-8b05-008b630ff1bd",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "615f3f2e-6e6c-4a42-a1e1-1ec9bd977be2",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "31d958db-b93d-405a-8728-439ee2153f96",
        "cursor": {
          "ref": "86a0b88c-1499-46d8-89a5-b5f5e04b7ddb",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "58bde3db-a335-4022-953b-41eb0837ec30"
        },
        "item": {
          "id": "31d958db-b93d-405a-8728-439ee2153f96",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "23464607-54ec-4652-9ca1-515b662d308d",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "1ab0dfd3-18b3-485b-80c5-700ca9e438dc",
        "cursor": {
          "ref": "5afed283-148c-4668-abd6-8c324e976b0d",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "79d045a0-c495-46e8-8efe-f52df11c72e7"
        },
        "item": {
          "id": "1ab0dfd3-18b3-485b-80c5-700ca9e438dc",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "bbf73d4e-6625-4e4c-b04a-4ad595165507",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "fb6820ee-be92-49c3-9c19-8eb80d95434f",
        "cursor": {
          "ref": "b46e51f9-cd6c-4982-a4e6-12d4c22a0433",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "3f587598-acfe-4d91-aa0f-93ea7e5bc8c8"
        },
        "item": {
          "id": "fb6820ee-be92-49c3-9c19-8eb80d95434f",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "0fe5d52c-4efd-47a5-9436-be22e79bb425",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "684bd4b8-8404-4a2c-a072-bf9fbda8d6d1",
        "cursor": {
          "ref": "919a3f96-3e96-4cd1-b896-d561bc2fefac",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "794306c6-caff-4fb8-a7a3-37b02661f8f0"
        },
        "item": {
          "id": "684bd4b8-8404-4a2c-a072-bf9fbda8d6d1",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "26d33ddf-225b-4c22-9570-cbf76f8ddf85",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "c574041f-6be7-4042-8489-9ec024ab5db5",
        "cursor": {
          "ref": "6cd00165-bc68-4fd2-be21-3b8bc275df2e",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "e2134f1a-51b1-44f7-9923-77783616b96b"
        },
        "item": {
          "id": "c574041f-6be7-4042-8489-9ec024ab5db5",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "00c8a092-ba49-420c-b147-772f6eb5edcd",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "4154d7d7-92f7-4fd9-add5-aa014a220537",
        "cursor": {
          "ref": "2ae4d758-019c-4b66-a45d-197abdba30c1",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "b6f3a0a6-c66b-4c8c-b7d8-e109898908ed"
        },
        "item": {
          "id": "4154d7d7-92f7-4fd9-add5-aa014a220537",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "af531d78-6098-4535-85cb-16536bae7c05",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 94
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "63643fd9-bf9c-4143-a0d1-e749fb31f67e",
        "cursor": {
          "ref": "a10cdd9d-fe84-4dcc-aa91-b37f27b7182b",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "474810d7-0201-44ff-a4ff-a6e1726c89d4"
        },
        "item": {
          "id": "63643fd9-bf9c-4143-a0d1-e749fb31f67e",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "7db17426-27ce-499d-b836-35a2ff1e69b2",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "ce3d7fee-fbaf-4e49-bbd2-34ad3ce35b6c",
        "cursor": {
          "ref": "8071ca28-c172-4841-a2a2-afadccae2719",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "89d90ae0-f247-4536-a975-81c692b4bae2"
        },
        "item": {
          "id": "ce3d7fee-fbaf-4e49-bbd2-34ad3ce35b6c",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "3899ed36-d774-414c-aa1b-044702174904",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "cdcc7afe-9c40-4c18-b853-8f0cb4d4b8e3",
        "cursor": {
          "ref": "e014904b-c01f-4313-aad7-48f3b8393556",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "316efe23-805d-4572-abfb-e6325f75f225"
        },
        "item": {
          "id": "cdcc7afe-9c40-4c18-b853-8f0cb4d4b8e3",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "81e51554-c6c2-4cea-8859-a6925507d2e0",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "71e47406-9854-43cd-b9e0-961a26d891e9",
        "cursor": {
          "ref": "64032181-0f81-4045-89de-9ceff7200ffe",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "3aa2e1b7-87cc-433a-9784-8a14c54c2846"
        },
        "item": {
          "id": "71e47406-9854-43cd-b9e0-961a26d891e9",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "fff78290-f3cb-4d96-98e9-fd9b3c7f8aff",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "f9a20f4b-0652-42f6-a4ab-cc35d1fce6f1",
        "cursor": {
          "ref": "9283652d-fd05-4266-bc39-f0dfea16b08e",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "2e5df4d5-41d6-4ca0-99cd-e3d89a79ae83"
        },
        "item": {
          "id": "f9a20f4b-0652-42f6-a4ab-cc35d1fce6f1",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "5171ff23-d8ff-47fc-b0d3-14dc5da80c9c",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "d4f03296-a7fa-466f-bdec-3c8cb2c19313",
        "cursor": {
          "ref": "71ca36bb-016d-4f15-b39c-330b2f3d3967",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "09c09355-e1d9-405e-b14b-2f5cfa51aaca"
        },
        "item": {
          "id": "d4f03296-a7fa-466f-bdec-3c8cb2c19313",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "9f3d128e-62f7-455f-bae9-1abf1f14a6c2",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "412337f5-ff6a-4293-b1a5-6b3111c12473",
        "cursor": {
          "ref": "0e93179a-c106-4e27-83e8-18f2463b0670",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "f61a0f89-f50a-4605-8419-4055fa92e773"
        },
        "item": {
          "id": "412337f5-ff6a-4293-b1a5-6b3111c12473",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "44f5257a-6e08-4df5-b534-c0849321d104",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "d5bbf267-6579-4b99-be62-bf89c5d45ad2",
        "cursor": {
          "ref": "5d4de9ec-09bd-4327-97f3-dd3015721e71",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "19e5fd24-3822-470e-9543-e5e7b843c2a5"
        },
        "item": {
          "id": "d5bbf267-6579-4b99-be62-bf89c5d45ad2",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "18db3a82-3389-42c6-96e5-6b3f9fd9b8a2",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "e02f5012-fd3e-473d-8752-9b4d284ff406",
        "cursor": {
          "ref": "8ceb1b41-db1d-43ba-9212-7661d03db315",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "f8ca81e6-d466-4c37-96b3-822acc704da4"
        },
        "item": {
          "id": "e02f5012-fd3e-473d-8752-9b4d284ff406",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "c03989c7-d359-49db-a13a-bc7e36d9e676",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "97966b61-de96-4215-bdf2-1e6d910eae29",
        "cursor": {
          "ref": "8f2ebb66-e8df-48c5-a2a5-2aa0c5a20b06",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "24ce68d2-30e9-485a-9ddd-2848fbe41696"
        },
        "item": {
          "id": "97966b61-de96-4215-bdf2-1e6d910eae29",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "b843b9b2-eb62-41c9-b24c-bac98306b24f",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "ec2153f5-7f34-4b5f-812c-41c97d004f4a",
        "cursor": {
          "ref": "d9ada7f7-a21a-4ed9-8031-b1f872794b73",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "0b4059ff-dc37-4613-ada2-4278d09b1ed9"
        },
        "item": {
          "id": "ec2153f5-7f34-4b5f-812c-41c97d004f4a",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "feb56e9b-d8ef-43f4-be74-c1ede43ce31e",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "566106d9-3507-49fa-9a42-3de403b5d67b",
        "cursor": {
          "ref": "72258f2a-7356-4944-9f5f-811f21415964",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "f6c242b0-a982-40df-a9c7-d6492031dc3a"
        },
        "item": {
          "id": "566106d9-3507-49fa-9a42-3de403b5d67b",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "8174bc7f-9217-4752-8a98-27720deff912",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "ceaba0ae-8ae0-4fe9-94a4-f4312a565654",
        "cursor": {
          "ref": "9a251367-88e8-4a9d-98cb-72badde7ccb7",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "bb28ecec-910d-4652-b3bf-9f71a24c52c0"
        },
        "item": {
          "id": "ceaba0ae-8ae0-4fe9-94a4-f4312a565654",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "2da4e700-66a8-4ffa-a0dc-2ce452f579c8",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "6f06d6e7-eb62-459c-b14b-7aa3fb9c8ebc",
        "cursor": {
          "ref": "3e48a4c5-8d9b-4e28-ad62-cfc6d98df1a8",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "cf265f46-522c-467b-96fe-8417c22c493b"
        },
        "item": {
          "id": "6f06d6e7-eb62-459c-b14b-7aa3fb9c8ebc",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "6b93a3ed-7235-4cb1-af00-f68ea587b7ed",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "ad5ca88f-4b16-41d8-a619-5e3e1f4c2e0b",
        "cursor": {
          "ref": "190f2364-2a06-4d8e-8db0-6c63c9ee2f45",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "78c075b8-2a17-477b-8b03-fe77c9982040"
        },
        "item": {
          "id": "ad5ca88f-4b16-41d8-a619-5e3e1f4c2e0b",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "9818aa05-86ee-4896-a967-5cbf0867a565",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "092ae511-298b-458d-8329-af2645fbe2cd",
        "cursor": {
          "ref": "6d453283-844f-48dc-a058-921886f1166b",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "44caf5dd-e102-4a54-b028-66e8593ca060"
        },
        "item": {
          "id": "092ae511-298b-458d-8329-af2645fbe2cd",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "352e719e-85e2-43f9-aa18-bbc42165134f",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "7ca96355-cc17-4175-aac9-ffd5f91a2409",
        "cursor": {
          "ref": "cbfeeb53-05b6-409a-81e0-b9ae39545126",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "6617f487-7b5b-4e83-ae3f-9d80bf8af60d"
        },
        "item": {
          "id": "7ca96355-cc17-4175-aac9-ffd5f91a2409",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "8f810635-a3b0-41ed-bc18-220d9f385466",
          "status": "OK",
          "code": 200,
          "responseTime": 54,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "55d3da4d-8af6-4a4f-8061-cd7cdf1fb6c4",
        "cursor": {
          "ref": "8718c591-5cb3-4d10-923d-a59228657780",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "88b5273a-18c0-4869-8e4a-a08c5bd0c614"
        },
        "item": {
          "id": "55d3da4d-8af6-4a4f-8061-cd7cdf1fb6c4",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "47cdac44-8232-475a-ad73-f874ed31835b",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "86b5f8d0-d790-4aef-b1cb-3e19efd7a5ac",
        "cursor": {
          "ref": "f8cc97d4-576a-49cf-b216-b8716ca46778",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "cfcf1ce8-fed7-42b6-a323-0ac0ffc144c8"
        },
        "item": {
          "id": "86b5f8d0-d790-4aef-b1cb-3e19efd7a5ac",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "ba2701cc-e680-484c-8d22-24c5dfa3516f",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "f00b44bd-4074-432c-8ff8-c85c9ec6b390",
        "cursor": {
          "ref": "e672a964-925c-4524-b852-daff53ae11b6",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "d7d901a4-3836-4f17-8cc2-4a356c0f3df1"
        },
        "item": {
          "id": "f00b44bd-4074-432c-8ff8-c85c9ec6b390",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "62570217-f3d6-4726-839d-78b19b88adec",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "b7a74b47-1cca-4bdd-aaf4-90df0374c96a",
        "cursor": {
          "ref": "b04128e8-c5eb-4a8f-b7e5-958844aad777",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "3254757e-47ac-4774-9ce5-58c66a6948b6"
        },
        "item": {
          "id": "b7a74b47-1cca-4bdd-aaf4-90df0374c96a",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "ebd04a1c-bf2b-4027-809e-6feff0b92f62",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "3329420f-ecdf-48e6-9c93-515289868b69",
        "cursor": {
          "ref": "b57284a8-8e94-45e3-a228-aca57384d86d",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "8a24b07d-8f55-4640-822b-323edda58b04"
        },
        "item": {
          "id": "3329420f-ecdf-48e6-9c93-515289868b69",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "4c776529-0302-47ae-be79-8d9ed6071ba0",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "96960fd0-72e1-4211-9b45-5e4c5306dfbf",
        "cursor": {
          "ref": "20d8a930-55b5-4b83-a43a-09e8ccbca19a",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "013df55e-766d-4c43-b583-d62c42dfdff1"
        },
        "item": {
          "id": "96960fd0-72e1-4211-9b45-5e4c5306dfbf",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "e1741e1d-8bf4-403a-b6a0-23efe773b979",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "debaf862-2406-494d-b9aa-acc1c6eb20d2",
        "cursor": {
          "ref": "66437afb-34d9-44e5-ac63-14ac8ddd78bb",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "57ea935d-1b53-4110-8063-da62b55b7a18"
        },
        "item": {
          "id": "debaf862-2406-494d-b9aa-acc1c6eb20d2",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "9464d8a4-3ce7-45d7-994c-25e10d98e9ce",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "68c973cb-586e-46dd-8443-b8298fa61f4f",
        "cursor": {
          "ref": "af49ac73-c83a-451e-8483-160a381d14a0",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "8ac40a66-9149-4618-9498-04a839e30e73"
        },
        "item": {
          "id": "68c973cb-586e-46dd-8443-b8298fa61f4f",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "48704594-f09b-4f07-bd31-e704e61a89b8",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "f15bf623-9b0d-4db8-bf68-33a8352e68ac",
        "cursor": {
          "ref": "4729c333-f8ab-45b3-ad7c-8fbb052af765",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "1f2761a5-3562-42bd-b07f-dc5eb2e6041d"
        },
        "item": {
          "id": "f15bf623-9b0d-4db8-bf68-33a8352e68ac",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "d9213c3d-30dd-4f5e-a6c7-41fb0126044d",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "3420ca92-47d9-4991-a524-923e22e5ac8d",
        "cursor": {
          "ref": "6af555d3-878b-4e27-b522-dc1083c9e861",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "5a14e77f-d8c6-4a49-b1e9-b3fbaa9de998"
        },
        "item": {
          "id": "3420ca92-47d9-4991-a524-923e22e5ac8d",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "455cb0f7-65cf-4223-860b-1a1b4b9d47fc",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "3cecf8df-b58d-4f45-bc20-60bddf7d7bc1",
        "cursor": {
          "ref": "282c13a8-a447-4994-810d-15853f31461d",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "498f9282-3773-4879-88d7-3f760ff81637"
        },
        "item": {
          "id": "3cecf8df-b58d-4f45-bc20-60bddf7d7bc1",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "2c7d5e97-ca81-4713-823a-3e5be313401c",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "50f5ef5e-657d-419b-af91-1c91de517cab",
        "cursor": {
          "ref": "6bf69b4e-2d40-46a7-9de1-532749169fdd",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "db901375-c84b-49b4-a6f8-3fc7c429c79c"
        },
        "item": {
          "id": "50f5ef5e-657d-419b-af91-1c91de517cab",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "b0a433f3-8c40-4397-a07a-1e6ded5d7a15",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "bd4c7a46-4387-4e6d-97c6-8d510ddfa118",
        "cursor": {
          "ref": "c6494c1a-6894-44ea-91af-4c419c05f143",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "c076365f-4368-4ffd-9b65-6b572eebdec7"
        },
        "item": {
          "id": "bd4c7a46-4387-4e6d-97c6-8d510ddfa118",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "315ed4cb-a2ce-4fce-8481-4901f91b9444",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "255e17ab-a456-46b1-9b77-73bbb73d045c",
        "cursor": {
          "ref": "fa3da3df-9675-43bb-ab64-7192c6e9a281",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "c272d031-6a47-480b-8696-ba7434f91968"
        },
        "item": {
          "id": "255e17ab-a456-46b1-9b77-73bbb73d045c",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "e6f44edf-ba9a-4dbc-8298-e9b850e7dc15",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "b32a1bf9-acef-4d3b-ad38-5367257384cd",
        "cursor": {
          "ref": "1a2d868d-96c8-43ab-be5b-8b4eaffef842",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "2d7779ff-b836-485e-b700-4dcdb3ed9ca9"
        },
        "item": {
          "id": "b32a1bf9-acef-4d3b-ad38-5367257384cd",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "65019bc3-ab34-4719-99c0-efa2a8b64500",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "d1803f48-e6db-4d89-a368-23cb2e0dc38e",
        "cursor": {
          "ref": "4e1d70ad-e53d-42cf-88fb-b92bb69b361b",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "25921e55-2120-4893-8b7b-ebcd78861047"
        },
        "item": {
          "id": "d1803f48-e6db-4d89-a368-23cb2e0dc38e",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "12fdab07-f607-4b85-b868-4812acaf2def",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "dcdf5bf7-2309-4240-ad09-964b8e6079d7",
        "cursor": {
          "ref": "a4dc08ee-2c44-46a6-b625-9acb1d7f473e",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "84b7acfe-e230-4681-9d07-c9bbbb507206"
        },
        "item": {
          "id": "dcdf5bf7-2309-4240-ad09-964b8e6079d7",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "55f62327-8a4b-4434-8c7d-220e581f5ded",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "a1c5d189-f066-4b6d-9903-3937bd7e40ce",
        "cursor": {
          "ref": "f9e143cf-41a3-4e80-87b6-de66a57e04e6",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "97e9fd65-5d0f-44fc-b98c-085b42b123e3"
        },
        "item": {
          "id": "a1c5d189-f066-4b6d-9903-3937bd7e40ce",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "7446bee8-1ece-41ee-838c-476822317e6e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "5f398148-e378-4907-b6cc-99ffe68f9b29",
        "cursor": {
          "ref": "1f363a4e-987c-4943-ac76-6253afbede85",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "b11094c6-9d48-4007-ba26-284c647971a6"
        },
        "item": {
          "id": "5f398148-e378-4907-b6cc-99ffe68f9b29",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "54660c23-b859-4266-847f-4ece560d9515",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "dff746a1-2750-4ed1-82aa-67dfff6f2a50",
        "cursor": {
          "ref": "0b25a744-13c5-404d-b119-85a69192b0ae",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "f32122a4-635f-4f20-995f-f7717cdffaf1"
        },
        "item": {
          "id": "dff746a1-2750-4ed1-82aa-67dfff6f2a50",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "298c7223-4d26-466f-afa8-ecb2fa199d39",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "48a2f867-e491-49ff-a9f4-2b2b3f2a980a",
        "cursor": {
          "ref": "c7bd50de-707d-4233-b092-ed0ac11245de",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "af91a233-741b-4053-bb36-92c2ef6fd573"
        },
        "item": {
          "id": "48a2f867-e491-49ff-a9f4-2b2b3f2a980a",
          "name": "credentials_verify"
        },
        "response": {
          "id": "da807ffc-8040-472e-b756-00fd01429a0a",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "2d2fdf46-0e73-4ff4-8326-fce877630321",
        "cursor": {
          "ref": "76edf2d4-34b6-4d41-8d1d-6b5757867512",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "e2de1541-07a3-4b35-9e24-2998c99a71bc"
        },
        "item": {
          "id": "2d2fdf46-0e73-4ff4-8326-fce877630321",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "c93289e6-5a5e-4500-a857-421228441821",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 137
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "08c9ea7d-0643-4ccf-ab5b-fa3943df874b",
        "cursor": {
          "ref": "b640aaa6-7f8e-4b55-861b-f9511fa7a743",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "65d6592a-ad85-4048-b761-8d7bc1c35827"
        },
        "item": {
          "id": "08c9ea7d-0643-4ccf-ab5b-fa3943df874b",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "08c9ea7d-0643-4ccf-ab5b-fa3943df874b",
        "cursor": {
          "ref": "b640aaa6-7f8e-4b55-861b-f9511fa7a743",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "65d6592a-ad85-4048-b761-8d7bc1c35827"
        },
        "item": {
          "id": "08c9ea7d-0643-4ccf-ab5b-fa3943df874b",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "08c9ea7d-0643-4ccf-ab5b-fa3943df874b",
        "cursor": {
          "ref": "b640aaa6-7f8e-4b55-861b-f9511fa7a743",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "65d6592a-ad85-4048-b761-8d7bc1c35827"
        },
        "item": {
          "id": "08c9ea7d-0643-4ccf-ab5b-fa3943df874b",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "b3ebf3da-6086-4049-944e-0140a6aed04d",
        "cursor": {
          "ref": "47a83cba-f667-41be-ae56-5bf59ddde688",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "6bb22546-4862-4f85-936c-e6d1b514e7c5"
        },
        "item": {
          "id": "b3ebf3da-6086-4049-944e-0140a6aed04d",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "d6661dcc-51cf-4eff-ac01-833d67e050fa",
        "cursor": {
          "ref": "28976f34-7e76-4f6a-a96d-571f1c8eb941",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "8a17b88a-14d6-46bf-ba85-b917d1cb8519"
        },
        "item": {
          "id": "d6661dcc-51cf-4eff-ac01-833d67e050fa",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "d6661dcc-51cf-4eff-ac01-833d67e050fa",
        "cursor": {
          "ref": "28976f34-7e76-4f6a-a96d-571f1c8eb941",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "8a17b88a-14d6-46bf-ba85-b917d1cb8519"
        },
        "item": {
          "id": "d6661dcc-51cf-4eff-ac01-833d67e050fa",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "793c2394-19f1-4cba-b1bc-b516a203856a",
        "cursor": {
          "ref": "2c9c63c4-5eb4-4fdb-8ad9-ce916e9140d5",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "28d4c309-6421-4194-a434-1e62a1f1bd0a"
        },
        "item": {
          "id": "793c2394-19f1-4cba-b1bc-b516a203856a",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "2de274af-0ba3-489c-a24c-06b426a94df7",
        "cursor": {
          "ref": "4c5baaba-0d47-4361-8acf-317dd763c981",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "e073fd1d-af2d-4158-80df-0d444ab4178a"
        },
        "item": {
          "id": "2de274af-0ba3-489c-a24c-06b426a94df7",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "2de274af-0ba3-489c-a24c-06b426a94df7",
        "cursor": {
          "ref": "4c5baaba-0d47-4361-8acf-317dd763c981",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "e073fd1d-af2d-4158-80df-0d444ab4178a"
        },
        "item": {
          "id": "2de274af-0ba3-489c-a24c-06b426a94df7",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "23a3dece-6863-454a-b8d0-df9a2c250416",
        "cursor": {
          "ref": "3c70992a-291c-47f0-8b58-e6caca24f428",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "cae26774-5fe7-4992-aa42-021b08fe7278"
        },
        "item": {
          "id": "23a3dece-6863-454a-b8d0-df9a2c250416",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}