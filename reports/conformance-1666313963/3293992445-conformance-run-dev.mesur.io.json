{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "bf73cef3-ac95-4548-a2c5-196cbcca3ef0",
        "name": "Clear Cache",
        "item": [
          {
            "id": "5b401df1-f2a7-470f-8534-3805f99a5344",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "196df63d-1dc6-4755-85ad-6a6cad5af399",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "adafcca8-208e-4b1f-8e01-f165563cdb0c"
                }
              }
            ]
          },
          {
            "id": "7316a862-e552-429c-a6e4-58d842aeca90",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ac216cf8-82c3-42b7-96a1-9c53eb7a330b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c2757596-a46e-43c8-91fd-4339fe2081de"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "c268ec14-0a21-4e03-a9e8-298fc9d57238",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "6fd1b8ad-52fd-43ff-a260-796666c1ad7a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bbcd68f5-de30-4a0c-8e35-4befaef7e435",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "588e0007-7ca2-4add-b776-b16352816ecd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "20e98a2e-ef49-44a5-8ed9-a7b319509579"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e2b57f7f-8aca-4cb4-af4f-8e2a5651ed21",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "96f12f00-f51a-4197-a3ac-d8bcc1c0126b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1fee923a-1d7a-470d-bd1e-fdb76e2820d0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9ab0b164-7c80-41cc-8593-5e995f97b470"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "17508a24-b0de-435d-8c5a-807baaf326bb",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "d1a276e4-d2a5-4273-828c-493312dc853f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dc5ca616-8e82-4845-b583-6cde96b0f8e7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f95c4a6f-9162-40ea-86e7-d85dc404920b"
            }
          }
        ]
      },
      {
        "id": "ba03d1eb-573b-4f9f-be46-00e8a8ef5dbf",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "87af3173-2eb8-4b15-bdc3-2bedb66eff4c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c914668b-6022-4b59-91e1-2f809f870bfa",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d73c6d52-ec89-46be-8622-7c5bc1dc4e3e",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f354760-6003-4f7a-9750-85b43a015d0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cac3dd5c-07cf-4c11-8572-150861af4ff7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89e27569-925c-4a46-af1e-2e35233bb1ec",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ca78a7d-bf61-4c33-ac6c-c4511bf6bc9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "be8bb847-fc23-48fa-89e5-cfd17874b951"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc31790f-f82c-4805-a840-ad9763e88e92",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8781e72-6ed5-4ea6-b5fa-4ec52fa51ccc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "957e47a5-15ae-491a-b08b-49778ad27578"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0e01a2fa-d7ff-45e7-865d-621e8782a58a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3467c850-0ab4-4d70-8f4c-f06db837ed1a",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7be5f446-ed76-4a52-be6f-35b26614d363",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f2169413-aa90-4d62-810e-5bdd48a44c5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d6283ca-852b-4b91-8c17-d523868f03f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c80a2d3c-39b1-4590-9d21-c8c59b574cea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f907ce7f-8e1a-4156-ab4d-53b37190c4e2",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56c3abac-d7dd-4106-824b-fa08447d2ab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bd0c9a97-7d95-419a-afe2-5781b3ba9956"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e887ff6d-9e5d-458d-ab29-e8259354ccf5",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "4d2a4bc2-ee8b-42d8-864d-30bc0c51a9aa"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0de8e674-3307-403d-92db-f80737b22ec6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b7122a01-55a8-4d50-bc4f-dd04ffa9db1b",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "963785cf-ac78-43c5-a02b-ea87588a0048",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "9cb9d406-389e-47fd-be60-b458642b2c33"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3a9666c4-4555-4b4f-8598-f8dcfb1ee3da",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "34cb7b30-94c5-402f-ada3-e6f3a348acdb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0f084b7b-d61d-454b-82b7-3b38f289fc5a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5893c9e0-3827-4756-b49b-069c608b03f9"
            }
          }
        ]
      },
      {
        "id": "be420078-0b61-4fbe-9ac3-136fa3ef8811",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "da41507b-aa80-4026-b913-f8a9ce3e0e0c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c4991ea0-d828-4a8e-8d59-f0fc83f9e358",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "0a2d0ea0-56d5-4c1c-b4ee-7c3c992810da",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49cd9673-af03-4495-9242-58ab5bed7297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c380966a-d62b-45f0-bd02-3612b2b6dcfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa16fab9-4846-4d9c-aa89-352e13c7eeb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "478791b1-03d2-46c1-9763-d3d5c592184c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80ed9d3c-574f-4e28-b6dd-d41b194ea9ee",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "161d360d-99e2-47b1-bd00-8e34707ca917",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ed4c3ed-e9c4-4641-886d-95e17741df4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53fe67b8-65b5-4ff3-b4ad-f0437314e77f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a614ff0b-7626-410b-9c45-55d11fa5cc99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a58f102d-74a1-4eec-9218-ef4068dedb69",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6739086b-70da-4a7d-835d-f7da7bfd12e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a86666cb-4ad7-4ec2-84de-66d89576bf7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e88a5e59-d4c8-49b9-a419-88659e82f07d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "554d9e77-6957-4718-a0e6-cbf0fc6c7940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd80342f-2555-4def-a6fa-d43392ca06a5",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bceed0e3-9e55-46fb-8e7c-47ced103c7de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fb855be-675c-4295-8306-efa514bd8501"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e023bb37-0c5c-4d82-98ff-8c026be098b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "19545ade-09d5-4f22-86af-560efa61e9a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f759354-9f7d-4992-b676-7024655bbec3",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c37b465-68c9-497f-90e4-434903c13dea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a49467ac-2cbd-4823-8dd2-8e6b07a92f07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "422b49e7-069c-4676-ae16-cc71de28ae3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f4fa6cf9-2d27-47bb-886e-e4e6addfc776"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71698277-7a62-4e5c-9f4e-d5379c7a8939",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d72308a7-73ee-4571-8a39-dae64ce8fb97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95fede17-bdf2-4034-bc6f-1ddba4e55091"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d4193c2-6fcb-4b01-a10f-a36414319357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "197bc64d-a0af-4c60-9d86-e86a307aa9ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7198f90-6673-4cf4-9cdb-0a2400a2699e",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27674d7e-a691-4e39-8813-b62f6235b854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af476dd3-55e9-4353-9d02-ffd5555ced7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5716ba3c-784c-4b8b-8f0f-fff400b32a8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7398e017-a3aa-41cb-a247-81b3276f0dc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "283d2854-18d3-45f6-a299-3b569f18cd37",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39f792db-f843-4f34-affe-1d30c2c8a88f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fed488f3-a02d-495c-9eb8-75b65106eb03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c090816b-191b-4c87-bb46-24f9b60c3503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2f39593c-27dc-4293-bb89-2e97407c47b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f95fbff1-5f5c-4ef7-b069-0cb0bcea5e03",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76fe144f-6051-46cc-80b1-93d206b93489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84988c3f-a7b3-4cd4-88dd-a35eaddd6ea9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba36d5ef-ddfa-40d3-b058-07248989159e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3567702f-9636-4822-b700-b2f0791ce0fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f762587-68f9-4226-8795-e209479b753b",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23c78364-1a2a-48c2-a494-8095409fe49a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40b3f70b-5f7a-457b-8e73-ea48cfcfe1e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48059b5f-81a4-4ca9-ac2b-a26dc57626ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8ae1b8a8-a7cc-4cce-8e53-c5207b45767a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9a25398-c138-4ecc-82fb-ad9da6f3c944",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f12eb05a-74da-4c34-a28d-e930a98140cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4db6cbb-c088-4cba-8d56-19ba838bf676"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71caf0b1-fb91-4ef1-94a2-cbcb28a712e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fec983bc-3953-4e30-98ad-9d540116b48b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5f11fdf-422f-4cb0-ab23-8e651129b6ab",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e3ec953-93db-43d6-b7c9-cdff5a867c6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8689d3a-600c-4976-a723-1d63c2af9bc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "862dbbd4-3d25-4fc8-988a-4a94cd6b85f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4f23545b-601c-444a-aa22-3e7719e84b11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbe9190c-344d-4d2d-a34d-357878d5d62e",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d57378a4-a31b-468a-95cd-14e952917e04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ea8858f-6cf9-47cb-b4e9-abede605e61a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "570694ac-606a-4375-bd6b-b63490edcd26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7dd0dfab-6a49-43fc-a1de-65e02580cc3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19b6b756-c65c-433a-a06b-02a9fa5a9579",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b127509e-8abd-4b6e-be98-f500c5e980af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4ee048e-3464-4ea2-ad92-a1c3ec2231aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49303451-2069-4d9a-9855-6c86ad20dcac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3666a971-a9b8-4def-aeee-0ab1a1a06fdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9e5465a-e5de-4f8a-a351-ff2f866909ef",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8afd5267-a286-4dc7-b936-5d4701f296f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f42096b-afb1-4079-8907-d785faacb33f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f62fee8-79df-41f3-9990-1f5710376bb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7509443a-4d9c-4589-82ef-fa89f3c2b757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f314c092-dca3-47d0-898d-7bcbf72e20de",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "523b55b4-68f1-44ea-8eb7-49fae76c7d24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4adc5889-461e-4985-a1ea-094159dd8350"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c19fbd1f-87a2-47ab-8b68-97b63ebc34b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "18759b8f-bcb1-4ae9-b117-231e11eedefa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f72ef4c-9690-4c9a-b5e2-af590e050cee",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf69b6d0-4848-4401-a0bc-29f48afd1ddd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "926f2ffd-0423-454b-85fb-dd994f9a71a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12af5066-f0b2-44f2-b073-a8e65b763273",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "52b49282-2752-45fa-bd68-fe713e901260"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7abfd290-d107-4b4c-9924-85cf3209f761",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e6989c5-500c-4a5d-93e6-5d08450fa5b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08a329c1-3e03-41d9-9782-7a6cbe2fcc3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6374d7c7-93f9-44e3-bdcb-5ca7146dab16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a1edc71-f143-4f45-839e-eab392026f34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eac2d47-9ceb-41da-8fb5-efd5904531c6",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25ecdbf9-dafe-4f1c-8684-3e6e9a3e184f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f014753-56ac-4dd7-826c-f5213a4638d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fd32e2d-23d9-402c-94ac-c250d518bf96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fba71890-38e3-45cc-b2e4-74c8a9324b73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b150e33-b556-46a6-9d82-ddc147718e45",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3187c9fc-1de8-4703-913d-d8b184785dec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "574b0547-c449-4702-86bf-bb59eebd2d05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ef53fb8-e34d-4e24-9582-ec479c0c5fec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7912988d-e3cf-4ff4-85e8-dab07cf416f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19ffb373-5bb5-4de8-b68e-72bee59df7bf",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d8acba2-aad2-4849-9fc8-353eb14f0f5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e697e30-fbec-42ff-8fff-3b55ac0d8ba0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4108b9c4-aa89-4f36-b81b-e24b5aef8b19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed22f6f3-f4ee-405f-ae17-6ed03a3153ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6a5c125-40ef-448d-8ba8-4d69526d07ba",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3a44f49-9cb3-4ce7-a68e-406437a63e09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f67a4cdc-63b6-4807-b8e9-17426dd9f388"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ea68c5e-4e1b-467d-b941-339f785c5bde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cea959db-e3e5-401a-8c31-dbdf253bf330"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c5d9d0d-bdd2-4007-b63f-dd30781d4107",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d1e9451-837a-45de-b73d-75cc0833a97a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51c1f10e-919a-4594-a1b6-ec77b82ae20d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96fafb1f-9ae7-400c-836f-3c69b5ded553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7004a7fe-bb76-41b7-986c-71c974cff6b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d52f3eda-c076-46c0-a34e-0b63d491374f",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d54aa258-3f8a-4177-b9e3-9af3a16451fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a759f4d-b2f0-4b27-8027-629da8bce667"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55c08cab-deba-460a-b5e9-bd7340d905c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d4dc2e1-b068-420c-8fe2-fc6f2cde0f9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc2e5751-1c4a-46d7-a383-fe7e786442dc",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f3a2c00-238f-464d-bafd-a6e9646662b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cb64275-5384-4272-b43b-2c488e3da2cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b0e96ec-2282-48e0-837a-c17e38c27b98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c25042f-0460-421f-8437-51d8e466e814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc7f4f01-3947-429b-9582-3772463ca6bc",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7859aa0b-4879-411e-8d18-090043c0212f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df67e679-f0bb-4052-8d22-f93aebdd8fb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc479ffe-8229-429c-8c81-30709ebaaabc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1779e552-227a-47bd-9378-1a0c1d5f855f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "526afd72-5c1b-42a9-b4f1-7b96ac168680",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27cc2530-e7e8-4faf-84a7-b7a7c782f62b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e97e4e7e-cf88-4eed-a958-fea0f6d7d885"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d465e84-40b2-49e0-8792-7c039de331c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6eaa04c-1e2e-42a2-b3d6-5a8fc60c93d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96475f74-7f23-474d-85a7-1bfea65dad47",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8021aad-f321-4f32-b227-21bc5f8d2380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9970348-b0e2-4c9f-a8b8-988e5e8bc6fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fcb5b69-7910-4c94-aa35-ef010b273ee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "70fd3fd6-52ab-413f-b691-37692e536d3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f0e8195-8127-481e-902e-8a5b11c753d7",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6691449-0093-44a2-a73c-a7f5976fc9b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26edd68f-e365-4a23-ae70-4028844e17c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ebfcdf6-43eb-47cb-ac1f-1a9f95ee0624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8af43861-20c0-49af-bb30-5ad3d3dc8437"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9b4e310-4385-40ec-9f01-50354ed21d3f",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9604b07f-6add-4e07-90ee-c5646a4d4889",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d43fbb5a-5b53-4191-95a0-79c950f19d4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c54f75f5-27ff-4ffa-90fb-65309fcae472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba614f22-61b3-4858-a57c-cdc4eed46d7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "710fc907-c85b-4650-8e09-172ec12de898",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b51e0766-7ae4-4d92-941f-40dfeccdb03a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "677f0de0-55d3-4793-a26b-f9b1f75143fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "431dcbca-8670-4396-acbb-ad3fb9a044ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c563d2e7-1b9d-4080-a810-8198e97ceebe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b0a2120-871e-48b5-ac7d-019111a1a785",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e962fb68-197c-4f8a-871f-22fd15b301c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47fdfdcd-bcfe-4ac4-9a23-6c3e00110d0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f37609a0-9c59-47eb-ba01-bfaf0a1ea87b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ef77538-49d6-4765-83a0-42b2bdbbd447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b1f61a7-be53-4922-a7dc-07b18c329733",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "661d12d8-6001-4090-896e-c09625a244f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82d2235a-4eb2-4b80-9e79-c95aaff0a389"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4dfe446-da5e-4d93-8d14-2a8d438a51d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e530d5cc-f2ff-4bf7-a095-fbe1b81ccbc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03ac926d-9132-4f47-af77-cf8ed5ab1715",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16d3605c-2657-44e6-81b4-76dcd32d0d57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeb9017e-6332-4689-8bbb-823fc066babf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c24a4520-92ea-4d6e-8b00-86ca31f70379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc7adc11-c839-4c86-b3ac-45be306ab124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5932bad0-0a7c-4476-a8b0-75a2302860ba",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "517a0fbb-9520-472c-89a9-a8407beb95b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39f2628f-cb16-40ec-9989-bff6ddbc2fc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53557497-ca43-4b78-b769-33d358163499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "1c156e61-96f7-47a7-a626-a233bbb081f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8d6f7c5-67d5-4912-afce-f72b4dbedd31",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11312cb8-0779-49fb-8747-f9145c311c9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5be05de5-c9c8-49e1-811c-798edb672fad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3a7f726-64ed-46d7-af6e-0581f1c227b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "220908c7-fd3e-4173-b6e0-f07997c668fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66c619db-7b69-4a87-9fe4-009b6187822e",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06ec27e5-44e7-47ba-9515-b08cbcd151ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68f74ba6-a9ec-46d1-84ce-ac41d5cc997d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36d38d17-176a-45ce-9e0c-e36145553c90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7bab5c60-298a-4ca1-8488-0eb7e3b4f602"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a43424d-7af9-49e0-b78a-e275c7472e53",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "292be3ce-017a-4b08-9ffe-6c71470f9e68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d428ae81-e83c-4afe-b1f3-fd6bf4e556df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12b63f8e-9d3f-4e8d-9d9a-dc584f022150",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "218dae72-0dc4-45a0-b95b-45cd8c1332e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17d1bc8e-1451-496f-a9ba-5292132ada45",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f375482-ba95-47b5-ba1a-6891a6561f65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e876ba4-2f94-4c1f-be0e-8fc6d48ed4f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b342f82-934e-44bb-ac63-271638d412ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ddc1b7a4-b659-405d-ad01-c94850e11bf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcb92187-6107-4b9c-b43d-8aab6444cb76",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f980fb43-2981-423b-b579-8e42bbddef6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00fe3e2f-c9f8-45fd-9b36-34c09319eb16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c174384a-8a67-4144-a283-c016daf4f8bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "518a3f4a-75cb-4031-971e-0d0fe6e6b535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cafa8519-2e19-4ceb-9111-8d259655ed61",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdffc7f5-6db6-41f5-8913-4a29f3a3e9c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1102a1fe-23a6-412f-b286-6f871fd42ee9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65eef506-1a4e-47ab-a776-8e02ea7b7e43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "fa41ad69-fb3e-4e3b-b663-3d96d3e90bb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "371d8a7f-5321-4c6a-a8cb-3e23837da93c",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0e050ea-1221-45f9-9905-7498c2a967d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6f1d1c1-278b-4fc4-ac01-3314b5027e1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c3ddb2e-c8f9-4614-9800-3bb409eecf7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "66a7b158-17c0-434a-963b-5c0a1cbdf534"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a028f43e-44ac-417d-9e53-5c1e737a0b2f",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09579a94-ee9a-4ac4-9264-5ebdbb4e30dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b68916b1-659a-45c5-a139-20df7c397e4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ff49f06-4a3e-405e-acb8-d788ec0664fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f39ffc4e-f7aa-435e-8ea2-65601258baec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a72b528-3767-46f6-b76a-be9d5a38c5c2",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf368379-b0a8-4877-b30e-f43415c5d854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f67c58f4-217f-4817-aa02-5682f451cdf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "449276af-9b7b-4243-8e52-8527390607bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb7a0f3e-8183-44e7-ba67-44b2a4a7cfb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd7a41b4-444f-48c1-b7da-f812f30f616a",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8854a6d-a80d-4f56-ad2f-56469d69d608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "955c54be-b0ff-4293-a9d1-69144847e6f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28433046-5886-4786-9b59-0df3d812e111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc7cf65e-b6b9-4500-9fac-e43173d98cdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b52fa772-b2d1-462d-bcc8-1c81ffebf1f0",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86e5ad32-464c-4da2-96e1-4629d36290fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2b2e45b-300f-4396-ab04-1079bde19ae2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98b878ee-ea4e-4a35-ac16-f293aef2b78a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e62e9095-8fee-4fb3-9ae3-56b9d47427a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "701f54cc-a18a-4e18-bdb5-a48b98f41b19",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91f0bd2f-7e28-4a46-a2a8-d6c81267bdf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "013036b8-c63f-4245-8d05-27e9bf5a04e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86da8f2c-dd75-4ba3-8a81-6e584f9307e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c56ddedd-af18-45a5-9ff3-5a0bb222b29d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c92b61ce-b0aa-4dec-8ab2-171974ef9194",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f29d6c69-525c-4ba8-b71d-aa9ed5e050fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdbd2678-35b1-46a8-be2b-18f380d2e867"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57f14571-54f7-4cc2-ac6d-60938d71c3bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "166dd7fa-b8e4-4eca-9103-bc3170957b4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "589d8910-b966-456a-9a3c-fe1fce94432f",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7db9accb-656c-4078-9a68-8fc235e2e9a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbb3e9a5-e1cb-465b-849d-006c2da39e1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a454f865-f973-45a1-b069-ff518e3782f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0eed1c3a-c2fc-4ab4-88d9-28b3bc782a70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb64cf1a-1fdb-4ec3-a674-1719e2df2c12",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "046b3953-3346-459f-9feb-0f824c956658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a56e129-1fad-4bf2-a8f0-52f59d73e42d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d05ba09a-5bdb-4944-9f45-3a2cf1f16533",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bd1ebb93-e31d-4dc3-a8ea-82d2e261e9a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fd8e83e-dd55-4cba-87fe-ab2fbe7beeb7",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c1761a4-ba5b-4051-b009-3d0c5a14c807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65f2086e-0a00-4b3e-b5d1-f556afff03e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed6fdd02-ad0a-4171-b499-a344f0a87252",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "1508bd0c-e85d-49d3-898e-f491a624c109"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d9aa473-fc9b-42d9-a71f-7a03cb928714",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fc1f088-45c5-4669-8222-52f3fe59bccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c4f53fd-ed99-45e6-bec6-4f362457bb7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "879132cd-134b-4111-b45e-d2408cec7165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d1d7301-2c7e-4f71-8bc9-2a9c5c3b0617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac510d4d-8258-4b22-96f8-124d28f60736",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ce51bfd-4e2e-4a38-8b59-a2997d31da64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8873ed61-1d2f-4cf5-ae6d-55ff5b57b242"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baed4cb1-2e65-4463-abe7-beb04a99a3fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e0465e3-d02e-4bea-af12-249e0123b257"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4aff4ec-671e-4056-8369-2c8a8d203f98",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16c0b88a-c5ab-43be-844e-4548eca0dae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "656eeacd-d8ef-4965-ac90-c1bf76f46890"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1da9a30d-6fbc-4123-aea2-0f619f97b53d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f8504ba-e2db-4f9b-a199-6f598971838a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40d63177-f05d-4cb4-ad1d-2e52948e5b04",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55271a23-6de4-4537-b1e6-38b14e6872e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d06d448-3b1c-42b6-b2d3-f04c9d8d2e47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d9da871-35fc-40e2-82a2-91970ee6c75e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c2eb76c-4292-45d3-92ea-1cc2665f9444"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b343f8ae-ba64-4dce-80b2-da303ebf53a5",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14b22cc3-f2a3-48e0-aaef-b210dbf91592",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2d4bc31-d8a8-454e-ad30-21c9c5dbf425"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8af30b3-4cc7-4577-a6e9-3f9934125bac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "1045a3c5-329a-421d-bf47-771d2774f9a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a101ecb-5e6d-4e8a-aaed-5755d1007647",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad39bd17-6577-4cfd-a81a-b0a2a245246e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee3624b5-76e7-493a-b896-12983f3caf67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57ca02eb-ccd6-4b68-a4fc-543489b75764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "03420981-d492-4197-af53-d023f1d01283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fe3d35a-afae-4956-a22a-4be4aff1ded2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9c2834d-a7b5-4943-9ca4-75bf8eaed770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e515823a-ac62-40a7-bb26-df83802cf1f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22b5e4e7-490c-4c7f-ba75-6354d3be8442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "937832ec-9309-4c11-84c5-e45359ea202f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "804939f8-2c2b-4d2f-a0ff-0f5ecfe6add0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5539ceab-1492-4eec-b654-3c63720a0ebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83a76f03-84f6-4f32-83f8-f7641693418a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e26aa0d-f453-4d91-8da0-8eb703499bbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2cd7fb8f-f9b9-4e06-90e0-2118c32ebcbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbaf97af-1312-4869-bd1a-200d1f0cc874",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48303b6d-87b1-428f-a729-8ae71c52f278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be9ce1f9-a8e7-406c-8d84-58911e271e5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd14463a-f62e-49f4-aa43-e513826df000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "08fdd7de-6398-47a4-9c89-532d13810a2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54ad8c89-10da-452a-bd67-b19370537019",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36926922-fddf-4683-a873-f795bd8b2790",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e7160b2-b249-400e-b0ce-526dad81a040"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83476fa6-3ad6-4743-a05a-9b8cbf2edc1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "fdbe438f-e739-44a1-9711-7dfc114185a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aac651e7-3b9e-480b-bbbd-c39a32a23c3e",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f6bff67-eafe-4720-b764-da8a44bf5ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cefbd1b-043d-48ac-aa93-599f65e5db14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a60b0eb-5cb3-4d28-a150-9aa341441536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "0bf63029-9551-43b5-a168-7349dc7d6f51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba21be53-8207-46be-acf1-47272779a6ba",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d3217e2-3bb3-4134-a522-8312fdc7ef2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5824bf9e-f44e-41fa-8566-ac56b956e07f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "748e2631-1d7e-4f94-8e28-96d06a39f0de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3ebdc8f-cd19-4ba6-b50d-ac0dd2f5f61a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8acdbcdd-1760-4170-a51e-bffcc4729f66",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8fd64d8-ab49-4495-8d74-eef625c0d522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12a2d127-b676-42aa-8af4-3fed456c3d17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14bcbd77-ac0b-4024-9704-791848220dc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "af3952a1-9b26-44a8-a633-c86cc961d040"
                        }
                      }
                    ]
                  },
                  {
                    "id": "575ee38e-c76b-46a4-8219-222a6cec283a",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a553da45-1fb6-489d-9ec4-a6b61cdfe241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95c2fbb3-3696-4913-b442-e6eeacc28a5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9331edc5-faa1-44e7-895b-0946fc96f4b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d0cfdc2-ea80-474b-814d-b74f2bddbac8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3386d9f7-918c-4907-aaed-1b0a9e9c40e7",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a2fdcb0-e1be-4303-9f2f-4188366ae58a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f4e1a37-9c13-4abb-a8be-b41675042273"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fb17739-3401-4774-b8d8-2355e8698851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3ea8d33-2a40-4430-b939-934668c077e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f29d719-f506-4877-b19a-8ebe0e2e29ed",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f448b2d-fb26-4ece-a7c6-c8afcb74608a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccc15072-fe99-4491-b49f-030d10076951"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aa5d1db-9f31-4c2a-a1ac-8f81c5f7e469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "41c7193b-2b82-436b-9608-7be22a8a7ab2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d74152e7-8d13-41eb-878d-afc438389fca",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f0725a8-cde8-4dda-b1d6-49f6cf56f0c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02d3a1b7-c738-45cc-bc6b-a910a8d6fc7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a940fbc7-e439-42a2-90b5-e7f03a10bce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e7a562f-aacd-4a0b-ae60-191a58545c59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8073a0c1-1127-4541-9132-e866c1a8fbb2",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6bc75d6-4981-4d85-b6f6-73e4fac80661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1707ae7-fbaf-4eab-812f-858b86e43e68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30020341-98d3-441d-a2ec-3ef123a225ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "87767b6d-5d74-4783-b42d-5febf6eaffa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd6a2169-423e-4fd9-b8be-982281bbb7a2",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18e21de7-320f-49b1-b37c-5bca2999c37f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97f57c29-80a2-43bb-8fb1-8477e8b01484"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96b8ad5f-6c28-469e-a89d-cf70ef7564cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa74e119-c574-4c92-a453-13562cdf338e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a51e497c-8cb4-43be-9880-c3226fba2fb2",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2533fb6-b99d-40f6-968e-7efcdf3be69b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f5b89d3-ae04-4860-895b-0b849499c075"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f49ff0a-abb3-4998-bf5e-ac3457ff122f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "35ce7175-7066-4383-a5bd-495790270f33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07d85ff2-5e28-437d-9d15-27d7fff8aabc",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63898204-ef1a-42a0-bfb7-98afaabd32a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f5f45c6-6f27-450b-a005-8841c1f1eb7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ad67caa-df2b-4216-9998-47b25e027be4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad187780-2aac-485b-9b01-cf68c8124b75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cca7b7f0-e547-47a3-a7aa-e30c08ed2b5c",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b3d7ce5-85c8-4a98-9a65-ea6a6df20c39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4bac9e2-1e42-4983-8914-2fb86345172e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9847d90c-a2e0-447a-b650-38ab05b18a15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e92d05bd-5b05-4ace-9901-4c07fcb936ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78434319-d29b-464b-9ad6-2f574e53ebf5",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1bcfc5b-517a-4455-85ab-b4aa85ab55a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "caa804d9-7370-4ac0-b3b8-84dcd541b3f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2d00a79-19ff-41fd-b637-30c9ec5a803c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a41b1482-0924-4251-9513-9247f2675d46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdc74ff5-8639-4ec2-a6bd-be8980eb33c6",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cff8755-425e-42f6-9647-47aee5026ce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a095a401-a933-49e0-aab5-4f5a362f07d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01ce2c5a-aac6-4ce4-9b1a-8d93fe4c4a9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3da902c0-4044-43ae-8ab1-79e011c91bc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fa83a1c-25a2-4b6a-b585-d2e4c9a2c34e",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9b3eac2-e623-4637-802a-a698b038fdcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78cd9d81-ac22-48b0-a60e-f847ed25b52e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a80efb2-f89c-4bdb-aaa4-c835622cc825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a866681a-f182-490c-b024-e86bb7ae9beb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0570208f-59e7-4e00-8e61-5a65cec8c861",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "322cc57e-47c0-40e2-afa8-b20f31151299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1806c92e-2f2e-4c36-88d5-fbee7a065648"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcea049a-28b1-4610-8b01-000006a60e4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "36f32b36-dc71-4f2c-a414-e9126807462f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1471552-45bf-4208-9972-3e1275cee1e7",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "697e1db2-b127-4eea-b6d6-a604c70bf9c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9044f63-d823-407d-9c3a-439626fc9c31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2cb1335-ea29-497d-934c-2d2dc99d958a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2dd2aecd-5dc3-4636-9b44-0de82fd90e32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb826ee1-c800-42b7-8530-c0e53827b953",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5bd7405-638e-4680-96b9-67349c0bbfbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01f0d2ee-662e-4b45-a281-8c17995ed9c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab25b8eb-fe95-434f-9447-09a0ba88255f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5da64d95-d13c-4ca1-b056-f6c086634c63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "991ccaa1-bcd3-4606-a4ed-ebf3e354982f",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03f942a3-95d3-41c9-bca4-71f3daa4724a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52f00489-43d2-47e9-be95-95661007edc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3e499fe-ce17-4945-8d34-54ef36b22f8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7bb99f06-9138-4c2c-9c4a-a9180e25e91a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aff64f2-5432-4361-af0a-328ffd30d09a",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b12e4b1c-a0a9-436f-9c5b-5b8472f84430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04994482-8f7e-4db5-887f-1d7ee3c6898d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a125816d-993c-405f-a6e9-ff42e0cabf3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "60386e29-4bd5-415b-a1ed-5cb91683c458"
                        }
                      }
                    ]
                  },
                  {
                    "id": "800211d6-8766-4a99-a829-577dfdbdb956",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e058657e-09d7-4a06-9a2f-cf6618521b06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85acf495-dee0-465e-a7cf-ee34c46ef4cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc191bab-b1b9-4c72-aafb-7f9161aa3aca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf95e05c-65b3-42c7-81a3-e72ecd8751d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b64a8a1-a67a-4709-8296-37f394188adf",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "751f3861-6128-4c2a-a0bd-4422c9894d98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d5dbfc6-9233-40f9-b8cb-ed63e09dea92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8e4d6ac-7927-414d-9759-87f3d6bfe697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7727892-6331-45ec-93b6-69fc76f7e689"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e8efbfd-3134-479a-a5f1-56d5197d1346",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b314ea1-ab61-441f-bd62-1c4d3392933e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "789b9ebc-5fe6-4796-b272-03c054629522"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8937962-fc63-4f96-b99a-b085c42f53c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff0b49a5-709d-40a2-ad0b-9253b15e2880"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ccd5990-06f6-4f35-b7f0-43a5a37b9e95",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73d9cc0f-e25f-42ef-a451-afa538c4fd38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0d9cf73-6967-4eff-ae2f-8e7c57ae8fa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f211a5c1-acb9-48fd-95d5-69fc7543b084",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3b7c272e-8b5a-4fbf-bbb8-704d736db5bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0eaa2e0-d801-499f-93f2-1494c09fc600",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b6f94ec-6241-4e07-be54-5ccfb2abfac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1e6009c-117c-49ef-adf2-46675c683c4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "063ee8be-4f1f-4b12-907f-68737d786b2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b5490eaa-b7dc-40bf-87cb-25ee9912be51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07cba44a-0798-4c67-9d49-0530c58d0319",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c30f3e3-f0b7-43e5-b019-ba976234e2d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85f727f7-f288-4975-bbcd-27a73ed17596"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25c14bc2-3f76-4148-a983-86be8d963799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4837fa2c-45c5-4edf-a669-3f49dffbc5ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83cef64b-7ac6-4a3b-91dc-9f892bd46f1c",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edbd2e82-ae12-4152-aacc-420212019961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbffa4ca-3909-44eb-b68f-bcd822a50b54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42310548-888b-4407-8518-36b7907494a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ccf5a9b-5146-4764-8960-95bde1e1affe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c50024c4-9b51-41e8-84dc-b6e3ba8d0799",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "279c7276-55c3-43ee-a4bd-75325c0ea29e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "499c1a9a-88db-406d-a834-7b197abd32f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2890c18-3dce-449b-b818-8e6cb51e6e20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "800c1f94-a1a7-4a4c-a3b8-9da235ca4b54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9ddacea-a591-4383-8a13-2a5d68a5d649",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7038b30-7a32-42bc-842a-c55ca6a79c61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "322d6a7d-c39e-42ec-a1b0-ceaf5819e4d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd678587-3b66-4698-807b-3f39b259ec2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "98207a72-911d-4744-b55a-caa8757b1486"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ce8b954-ea5b-4c5c-9280-355a4cc27954",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8582695c-32f6-4920-b91c-f1fa5ddd96e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7d0ae15-7940-4a25-9d72-c147ed7a0445"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ca64554-b2f3-4f57-bbed-c5b4a621f571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7177271e-4f44-4d01-94be-5601b5e38f63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9258de6b-8e1d-4a0b-915e-78f3cde4558c",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bbc90b5-7f44-4f99-b1de-f39680920ead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "1aa5b2bf-fbb1-4e79-84d2-b3d5ce06152e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edb3bc7b-7ba6-45ca-b6e0-3f07d2fee524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "798ad83a-bfa5-4845-a46c-f1396a46b8e0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b4b8fdcf-46e7-4223-8f58-a07d577d0857",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "10849250-ae92-4227-8e08-31d25f014ec4",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5b1f9f6-e535-461f-a2ee-37b3ec2df264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "28d3847a-b39e-4af0-969a-1afc0d9263bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb6b304d-6e5c-4b00-8a06-2b5651bdd6fa",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "39c7a990-6b53-4d31-91a1-2d7b7d8e3fe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f781f171-82f3-49e0-b652-e9d95845456f",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e843e123-c135-4433-a9f0-f03641ce6130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fea683db-65c9-47fc-a718-c250bf4158be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d85eb5af-9afb-4ce5-8386-f3d291f2ebc0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "0209f9f4-d96e-46d5-bfa9-e4ee4a522a03"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "452b33f7-7520-46a4-85b4-e0588ffa5a25",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f7a0cc95-625b-4b7c-bdfb-833e2344de95"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9058928f-ba21-4bce-8992-bf086569f773",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8d13a1f7-8af7-466e-9e80-2fec9ca9639a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "313ac8c8-c006-479e-9a20-20fb71d07a61",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f2d71719-894e-4007-ac57-93b8577b5646"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a5d60c96-764d-475d-b85d-a472e6c4ba51",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d7a9e7e3-29b4-4f85-9bdf-5fef5080ece3"
                }
              }
            ]
          },
          {
            "id": "235f1b02-622f-401e-8821-7a058b14aae5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1796b7da-a0f3-4c46-88a2-42be7f2c1521",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7460718d-14fe-4d07-be92-28024aed28b6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json();",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2e46c253-e963-410c-817c-76dacd29ab2c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e7c33725-c331-49ee-a7f7-96288af77283",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "dd376a97-a375-434c-bfc6-2417112c0d75"
                    }
                  }
                ]
              },
              {
                "id": "c4bb5197-ea5c-4eeb-8672-5b463bdb3d02",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a0a1ff62-70a3-4f02-9884-9f2d870d0e34",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8e9df39f-873d-4e14-a6d2-74324565524b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "74eb592a-5a62-4f30-839c-ee255d86be76",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "21d6cb68-235a-48b9-87b8-91a43c5089b2"
                    }
                  }
                ]
              },
              {
                "id": "bd2682f5-f966-40e9-8e56-4ff7ee7e543a",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "16d509b6-00bd-413c-b1e0-95488185e7ec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a410aab1-1e55-40ad-bd19-cfad109241bd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aef55653-a1a3-44ea-90f3-db10c90d8573",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b0b0244a-edf9-41cc-b493-7b073e3addc1"
                    }
                  }
                ]
              },
              {
                "id": "97b7649b-3f10-456f-a2d3-3dc118ba2a9b",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "687e503c-7a35-4fdf-96b0-0cb7ee02e8e4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "42904b44-2e11-4a93-8fec-15bfc23a7a79"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3683999a-6a5a-4c68-b098-ad972eb04759",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "d18a0ac1-055d-4a89-91ee-8ab4d1b93727"
                    }
                  }
                ]
              },
              {
                "id": "879ad751-e59f-41ec-bd78-bc67d945bc3c",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b339ca48-c555-41a6-be4c-929e1b9f2ea2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6cd86454-fd29-4f27-a6d2-5e09531395e8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7e24d675-0feb-4e65-8e6c-0219853e76d9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "b470494b-9b59-4d9e-bc69-92cd71d59db6"
                    }
                  }
                ]
              },
              {
                "id": "73a7251e-01cf-4bfb-9a95-5c1c96f29a86",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "93041235-c96f-4e6e-8cc9-5eab5c849c98",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2ec4b57b-f8b1-4677-a6ed-76d470493d22"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d29100d7-0233-4523-bb8f-20d968a3a9c0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7f30e489-52b9-4958-b97e-23bc2202bb73"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "73be98fe-9b3b-4ce9-b906-0b33e9586d52",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "89716145-3327-45a7-b6be-abf355f0b153"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "db59d95d-a220-4132-82b9-1a2b4ea9ed26",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b717bbd0-2357-4ce9-b8c3-555c18864de6"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "79b83c7a-8d07-425d-abaa-18e7b15f13fe",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "3cef0cd6-dcd7-4902-afa7-8f92d8d8bd48"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5708c954-582b-4337-a3f2-a812739c3d56",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c1efdc7e-ed1b-4184-a512-4b8489550380"
            }
          }
        ]
      },
      {
        "id": "c54bf2dd-89b1-4244-b03b-15496214be85",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "49acf814-d40d-489f-a810-e08693981a16",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a06ca212-5817-405e-bde2-a3be231041bf",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1ce8aa39-c907-434e-99fd-983fd2414ec9",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2c848b4-bbf0-411e-80d0-a73c1e743e24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0687d13-075b-43b9-8a3f-62732ecb18bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bee1fca6-f897-45c9-b16c-fa596edc18af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "588daf92-1b6c-43aa-96c4-f1f51546bd69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1c01308-685d-438c-9d81-f7ca8258c395",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc40e007-ef14-4fe0-8bbb-05021f6d4380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4479530-2efc-4e66-b5bc-fc5f6cb98b33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "159b2ce3-b164-402c-af64-47a2ada55aa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "782dc3db-a3cb-49fe-b94d-ea650b0c8a9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fec7645c-7888-4b9e-b8f3-0eac4a502e17",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6241e15d-e7c0-4bd2-a151-8ccffa21bb13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f58eb834-87f3-4d80-ae2c-caa09c85960f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88eb77f7-d0dd-47cd-8af8-9c0471f65040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc8f57d0-633e-42ef-9b30-fc594e646f38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "957a4b92-8335-4bfe-bdeb-f6906724fa39",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4cb4f16-cc88-4d28-a0b3-ce11d81360b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eefcaa56-861b-4b48-8d52-90441b86ceb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "057e862f-0f4a-494b-a6d2-31adea819c5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "01a27a9d-05b4-43d9-8102-3bf9a9e6c8de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "183cc66f-d716-4f8a-a5c8-48a67d23ebf1",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a75281a-0129-4cab-bf7e-9aa9d9ecdcb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca4ede1c-6c29-40c2-b7fb-575e6f882e78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f27d617-73da-48fb-847f-3c208e4aec8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "eeb29b22-5f3d-4582-9f0f-b6a39033ace4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e9c74ad-14fa-472f-89a1-70ed68e56917",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57ad7356-2436-4668-8aba-0c571fabca60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "768df5c1-1205-4737-b439-1fd32bbc4294"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "931b873c-2c59-4a7a-a621-6eca84f83c54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "108fef94-5a44-4752-894d-7fe578011c51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd3b1bde-ee01-4551-96e4-f73b7efdca51",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d09889d3-4794-4cde-95c5-12375fb40b6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c98e70d1-5afd-4882-baf7-7a75df6b694d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e09dd672-f180-472c-bd44-ddb927520ac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "102cb864-6bac-4373-bf52-b22ffb07d988"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc4cdeca-7fad-4828-a3e9-d11f948b74c4",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c76b02d0-e11f-4184-8e5f-4315b4dc0116",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbcc2d76-960b-4162-8363-706305be08b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "684433e6-389c-4161-93b0-363dfbd76a53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "79ecea26-6fd4-4757-8687-b117cca3c542"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d01cac2-2f12-46f5-9151-8c13e66857b2",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "274344f4-df23-4bc1-b956-201d980bd36a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f25c5db-3f99-4fbb-b5f4-d763e09b6736"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70f6adb0-472b-4fdf-8624-5371081bc192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "be0a94ff-3831-4c11-9784-b0dc9d69e4da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeb6573d-b9dd-4791-8505-12d1336c81d0",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6214a665-962b-4dd6-b6a5-b54d9c06d02e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fc4da65-2e5b-4347-a9d5-b26b01a881dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba335bc8-b01f-4893-bea7-2caa0cce2f6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "182c7a6a-f02a-4c62-87f8-9e707d0695db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dbc218d-e09e-44d2-afda-18aa58551e52",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de2a3494-9be9-4014-8847-0daa69856b42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "520157ea-a737-4f16-b696-46ad496a8e3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98580e5e-4d6a-4af0-a4b7-d2e8e22872c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "c7761d4a-5707-4b73-8ecb-84547423c303"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83ea7999-6b86-48fb-bb7c-030bbca62577",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "641e7510-587f-44bd-ad53-2b0ba44c3a1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c81d5959-18fa-466f-826c-2d11c900be0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26bdee0a-73e7-4ea6-90a0-33d14a1987af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3a665288-b28b-47cc-aa08-f9555f864418"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c1abb4f-dc4e-49b8-a2b9-be329306ac2e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdfd78e7-d46e-450b-b551-51745483d0fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a498867-b97f-4fef-bac5-1ea167d440a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ea9aed7-ff06-4fa3-bb9f-2478df8bbe2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "05a4e63e-69c6-4fb0-b783-3fb6a0080c92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba1bcf3c-a038-4536-865a-d4c1a4dde33a",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a8fa940-8884-4c30-99bb-f28fa80cd322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "595ec307-0dfa-48a0-a004-96dad067badc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a32a999-11c9-429c-9036-e7fad8c02202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "8849562d-f936-43cb-98e0-cb461c9b8d7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f6d0cd7-6da4-4a59-9c93-907742bef707",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1b16161-57f3-4118-b747-07281070c4aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a10b667-8f30-4694-9e0b-a63610b32551"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0551baf0-c179-4fec-b208-da9f25621a30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "adac0672-0e8a-457a-a3db-d9a35135e255"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e48d1f8-7ea3-40f0-bf15-c08b4ba3d862",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92245505-4217-4606-80cf-43297c98275c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d9dd6dc-2b79-4b85-91a4-569e7be28627"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "935efe9b-50fd-4b7e-86da-a24508e067fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "13c31bdd-fe84-4012-88a3-38f2400be0a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "568191bb-0245-4ddf-978b-377803f4853f",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e53788bf-5de9-46f0-9919-6caeed7add3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6537133-d4f3-4e49-b867-0c3820e5c770"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60f7f0dc-88eb-4026-a077-ee0be86427e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a8d997f-b2d7-4070-97ec-10cee7b6072d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5011cc05-5112-4abf-9657-f9fbcd621d16",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f05906ff-004d-4e0c-802f-0aaea38d236f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ebe9f26-0ea9-4eb0-924f-e3cb8d6c6f69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdfb17d1-f57b-4a50-9a86-72be5752e13f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a993daaa-2d58-49bb-9181-298c3f62443e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "206da2e7-f0dc-4fbe-b127-87663037d536",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f5e003f-d25b-4f7a-8087-737f55abfbb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38dbc425-a887-43af-87ef-0e83a1f9da00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6b25495-ab9b-4e50-bb3e-358675f5b8db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "12e85d69-505b-4e06-94df-c6160b503cb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "183536f9-17fb-4936-b0c9-cce8598deeac",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3582d71-4848-4bfc-a75f-3a7c63be4c88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0458c18d-9396-4ed8-a404-ba0cee90392f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9264bf4-4395-4e6f-bd75-a2777eb3fc70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f496e29-74ba-42ec-9775-8cc85ff6d376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6531761b-01ec-4a00-8961-9583991c2ddb",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca760d9e-7a80-45fb-813f-aa9378f7bdb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ef89e6f-a789-4e9d-a0ac-2e004c1846a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c83ca31-50e0-49bd-968b-f9bae6ea1d8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "230aa97c-37bb-4c57-a2d3-a9cfb58c97e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5880897-982f-4b89-a21c-7dc4412c251c",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b1b3ae9-b9fb-4357-8d57-b31d52214c8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1083c82-c7f7-4adc-97a8-6cf87b649814"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fc747b8-4e44-4ccb-ba60-0917449ebe0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1842a02-6fdf-440d-a87d-6f98e2056ad8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cf3dfbf-0b33-4590-8cef-87bd224fe243",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ff1d2ce-bc30-4515-a213-cae620dbefc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fb91e0b-25a3-4658-935a-ebb8f11f91a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9128f94-69a7-493a-b2b1-a8684b271816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b05ff6e7-9a8b-4891-91c3-c4a52bcf18db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe6dc0cb-e534-454b-8b2f-9c17d71da540",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a941f68e-9b52-4180-b21a-d11240de86e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2686034-8f32-418f-a5fc-7211e9dcc4da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32ba89af-ec10-491b-a245-0fbcf157f928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3dc56f2d-6a99-4be9-9626-4fb84114f37b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eeefda4-410c-4d88-b19f-752ffba60e31",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eca185c-048b-41da-91ab-c6bf13567c82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7170692c-7a64-41eb-a6cc-df836a82b2ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09bc82c3-7a6b-4447-9f28-f0de5be260f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f680757-bb76-40d6-9460-c76eb2034f65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5ab0bc3-db7f-4224-bde2-0387b4505efc",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "048e5fa8-53ed-4ea7-91c0-74affa488fb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2eb63415-fe49-4907-abf9-8dfe4ae3b46c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9506580e-ca2b-4de1-8579-9c7e98709b90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "73cbe5ef-0a6a-449c-b21f-f526f2faa653"
                        }
                      }
                    ]
                  },
                  {
                    "id": "243de0d8-a015-494e-a567-03e6ff08448e",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84d3e963-724f-4f22-b605-858e06d40a16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "959b42c4-2a6f-4760-8415-37d3c3493545"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5ad47a6-b1b0-4f43-8ab7-c2422897049b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b29b434-96dd-49de-bc3d-defc38c51db8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d811189c-c6cf-4612-806a-0f0c03b38cd6",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9738fb7f-8c12-4b55-ba38-b5dafab530fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf196395-0a71-4baf-9987-0a389d6bf3b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dad2c71-cc4a-4699-ae73-a543e96a5788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fb65976-1e4f-49d1-a33b-11b8f8976e52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5f533d5-9b0b-4d8a-9e55-f792685c1c79",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6d78edf-d43b-47a9-8f0b-a185ec5cfa34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c54ca9ed-c4d6-494e-ace3-9624a5d19b04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88b1d399-3e67-43b5-96a2-c06580e7518c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a60d46ed-0264-447e-862f-1ee754919155"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69a0a0b4-0195-4025-9269-30b9f1f45252",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fec08f7e-7226-420b-a38b-b9f2bcbc40e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76f8152c-7677-42bc-aeb4-d25dcf4f46ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b403856b-6e60-4ef8-8654-8a5e8ff57797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9981a5a6-9d91-42fa-946c-ce2c1b1179cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72737868-2f49-4406-84d7-aca21f336f18",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ae26c13-468c-42bd-bbaf-de5b14ce6683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "018fb202-7676-4e96-90de-f2623f11ab7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48584c66-f966-4d48-abcb-b5f911d326c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "908d8d7f-3faa-4b72-b50e-7701e40895a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f871ba54-dee3-4754-b356-d7bec24c0aa4",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8630f003-c2f4-4f51-b690-d7cdf0ab3b1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9857ab94-c260-492f-b6a0-358d185b1e52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f708c27-7158-4fa3-ae5d-213e24fbb260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "49cf1bf1-11f6-4c15-a744-3878fc13a835"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7c734e98-8f95-4698-a537-d98d840e0e10",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c9bb99f3-a903-4f6a-a388-65359c7c4b25",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c1d14f2-84e0-405b-82aa-f9ba69f3c3ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5fa2dad-4f3a-4ef9-8a9e-a794f0f2630f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bfabeb2-a6df-4d68-a41f-627186e85ab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1ff14d8d-5763-4aaf-8fc4-ddb1c0ef5ec4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8cd41e0-42ad-4168-9f63-ce29800c6aa0",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26193b0d-397f-4fc8-9464-5a9da8743b39",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "9c170e99-0bd4-4f5b-884b-b3ee19d9677c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06525087-f130-4862-8485-97ed9fc3a800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0c126b3a-9206-4f9a-aa02-997f539f18fc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4dae2e13-9acf-49d0-af03-0b4e27be1ee6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0380b715-074c-489a-b4d6-6274d8f18f1f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b6f21817-c968-4a8f-ae56-baf92d435829",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b6babdc3-3035-43ae-b0e5-414406474b0d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6341a291-f540-404a-a513-55be09877c32",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b92ba93f-ddd8-4934-b92f-3349d00f194f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4c26f2f5-0f46-4b78-9941-9801f77e2f33",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fd3fc5ba-8748-427d-962e-d342cf36159e"
            }
          }
        ]
      },
      {
        "id": "6b57478a-7bfc-4f8d-805f-c0f3f5bb0cba",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "785e7837-2c47-45e6-a8b4-d28a84ad09ae",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cc6018ac-da25-4fe2-9055-64865dbec353",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c41ef88b-bc0d-4a12-b6df-8665edc27bc9",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58deaaab-f48c-40fa-a917-8a40c2c55cee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7312d54c-0f28-4f0d-bd82-6f9a5bd11b8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feb5540a-36ff-4a7e-b9b8-f56643ad40a2",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d0250e6-d1cb-41a5-8331-03d1b8bf225f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c69e02a5-84ff-4f22-99be-9548705c3ebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c2687c8-160d-4835-844a-6288da495ccd",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8594c251-d347-4290-8d5c-c6e83f5104f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "443f77f2-68a3-49ed-b485-3b30996cc64f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44d64f36-8264-4a69-ac05-92c89edcb06c",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f3c5f79-5c57-4016-b874-64dfa5ecaa57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56043288-c328-45d6-aa67-3d40953e0c74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b22ebc20-7a1e-46b1-8fa9-cbb471a3678d",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "369e0473-66a8-4ee6-9e38-8d43dc3c6dcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c276904-4d89-4028-a025-bfd27f20b71d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1127644b-e296-45dd-8557-cf8f12d9b637",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e8c0727-6c52-4c44-8954-dc66859e0ae7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b738429a-9f94-4ec5-b7c8-8cdfb23e329f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50cc992c-825f-4295-8f1d-65e1b90e42f7",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f599c6ad-1b42-4677-b4a2-4b15b7e59614",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3a5587f-72b3-4a25-9130-21a6d927567f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "528ccd5d-c0bd-4b89-a486-e15fafe03d39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee9ba266-d982-4c81-b793-3724e573d5f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "543dfbfe-36e1-476f-8a30-1bf6c134f16d",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62dd22e9-feac-4754-bc69-97231f25403b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22181628-e9b8-44a2-96a5-a14d6e9f04e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5c12c1d-c585-4394-ad4b-dd8a635786e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb0d46d3-a2e5-4eae-ba86-020c5c1a27fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a813dc99-f923-49d7-977c-cc2b2c0be1f2",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d783253-06c0-4e55-8b2a-84e289a9361f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9cf8f553-59b6-4046-9aa4-89993148d846"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "462626de-3991-4052-9875-9ea5f8861d2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfaef60e-934c-4118-a543-a74b29d92725"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f7f975d-3e99-48ca-970b-6cdad063ded2",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82f6f45a-8911-448c-826b-4afcc6e88b68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "083da2bb-6638-495e-b1ce-8052cec3dd98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ebf0fee-6f6b-498e-bf0d-64db9f88d55a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71908594-86d8-4e52-859f-cacf83e8bf47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c389617-051b-42cb-84e6-406c056a301e",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc5ad73e-cfb9-4abe-9399-d9094789cf98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "885aecaa-15d2-4340-813e-03eb2ac03419"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4323cc04-030f-43f3-a4b3-bf25fb507927",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f642cdc-21d3-4fb2-8403-8fb559c3a342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce6f6cd9-427d-431c-89e4-d934d6d69222",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15649bf4-b52e-4602-8925-58bbb51c32a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7d8bf4f-0f2a-4802-be74-9fd80f7fd56c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe714e95-6baa-4bd9-aac0-ca2b32750d64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b43ce32-313c-41c0-b2e0-ca35712f93db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b6e92a8-0e48-4f8f-912e-ec99e1947515",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cd14c21-7b7e-484e-a6a2-6dd82ae752f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44914e7e-1b3a-4b91-85b5-1456d9e38271"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53275e22-6b07-461a-b11d-cb9d358cd22b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70b34ae5-20e3-4b1a-98dd-86481da24c50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c94c7aca-eb82-4e7e-92a2-84644afd6079",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c50f821-6003-46ad-83a1-523a5d72844c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fdc181f3-08a0-4d76-9552-fe1fa18b92f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3b6bb2c-1d51-402a-b172-aaeed7e3ea58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "278a2450-606f-4c4d-aefc-51e59fd1989d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03dc51ef-eb1d-481d-8597-2abee3e37fba",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50d9e7ed-9658-4072-9f56-29577f93dc85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6dea9eb5-fffd-4b20-b4e5-16b3dfcbc749"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "214a66c6-12f9-4100-8db7-c34ddb6d6831",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7cc39ca-9673-4632-ad47-458eff95ca89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb8d14e9-722d-4e2e-a4ff-cd64acfd078d",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c781fafd-777c-4b9d-ab8b-799bd6119f93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b309ea9-c75d-4ce2-af1b-4331c4a88724"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a3a893b-0975-41f6-8e8a-c9336b7871e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6a5bdaf-903c-4a61-8398-9e080e3fe858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc367d0a-2f8c-4c46-be73-7bf2e9807c10",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee84496d-f846-409b-a100-e3e856b90a28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d80aa3f-1b04-4913-8bdc-7dde83560b35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77fa43de-8abe-4449-9ce8-c6dfae7825a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea7ccd8f-e4b5-479f-803a-29ae667236aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "019edbe4-6302-40ca-8978-f7e8eb13f40e",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fcdfd9e-8623-4bd8-95b1-96634f5a8308",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aeb1f352-0761-42b1-865b-3cae3e855f5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11bcb382-e280-48c8-aa05-801ec02ada61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "863a68be-0b44-4e12-b19a-848b891ae869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbec64c4-1019-4b41-87d7-6b3a0001b9b9",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "839178c5-9dea-463c-9caf-a88fdccd59c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00e43d17-fb95-40c6-86eb-7576ece3d40d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21cba7d9-af18-4c1e-a438-c43105f95f89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12bc506d-2009-4026-89b1-00a46ce283a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d447a26d-4d8d-4b25-ae2c-28fc0ba39ff7",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0d3e6c5-db92-48bd-a546-24892fe34a4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccb1c05f-6968-448d-b5f0-f8e04329e602"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d0d0fc1-922b-4c7e-9b55-5b1fbde8ff43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c13fbe68-01b7-43a0-ab12-2cf47810b532"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2e36718-c978-4dcd-90c3-ec432183ad7a",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bcf9744-073f-4735-a355-2adac0318362",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b3d8d69-d335-4c18-94c4-53e2ac3a7df7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1541f43e-0a4a-4147-b62e-701bd88584ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4cade19-9f13-44f3-8cb5-963a64b93580"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99ec68a3-4333-464c-a276-d5fd679c3170",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6b77153-511b-4778-884e-0ad20fbd96ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92c05a6b-7d8a-45e9-b273-df87b2155e97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40a844ec-d0ce-498c-ba35-8a1c6a34beab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c60922e-bfe5-4611-b66f-94e29bceb28b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61b1643e-9155-4574-b0b3-902c0b6c02b2",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e111df25-356e-4b14-b771-91a74f6b7f0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40ad3632-285b-4244-bf78-4d653e19f38c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33ae189a-0963-4ce0-b503-bd35c68990fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9c688a9-1962-4e22-94dd-a87be2cda1fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5bd0788-e4a6-48b3-835c-3a43792074c9",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97c64296-0f02-4588-91c9-08d91c4d6d5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "538ba687-11d5-40f3-a432-821e34b345cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83264212-8b37-46ee-8b17-d3d59d54d14c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfd042e1-b1b5-48e6-9b07-281e53b214b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f886b64-4f71-40b8-9c3f-a6a31e0d892d",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7d4a8ef-0684-4020-93dd-a97d854191a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08c9a480-3e90-4ad8-be98-b026ef5d4744"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7adab4f9-5df2-4ff3-977d-c2438b64c372",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da30b7fa-1c2f-4ada-944e-fe17dbd113e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c60b3c3-29c8-4b63-b15e-34efac1c6672",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f046888d-1306-4786-b55a-1d0f22ae384a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91baf96c-dbe0-4a88-b9e6-ef3a0ccd803c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "115465e4-17db-4e96-b71f-d6e154bbc8bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7e90ede-411d-4ff5-9a27-ad7a28c78f6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca3e925c-192d-42a0-896a-df4eed2d0e77",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81322671-cd35-4a36-9672-cdf5fe0f95d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9fc0be0b-b2a5-45df-a735-49d131db7aed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a5f50e8-f92a-40ea-a685-280ce72e5b2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "379243af-c6c9-4d9b-9bd7-d7611a56c6ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3b10de0-9ddf-4b3f-802d-db9660dfc61b",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ec03f86-10fe-4dc6-8238-4086a019df88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fbd71f4-0050-4429-825c-6353be2bc72a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03d75302-141a-429e-94f4-0f297e62bad4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8b5090f-4b04-439c-8b13-a72d7c9a9bb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55fc6815-9178-4c6d-ae3e-60e0462412c2",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef1d29ea-c8e0-4979-b5f8-524799b2bc55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ecd6b9a-9e75-465b-9c0e-02c751826e34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "383bd24c-8291-491a-ad7d-529986e67df5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f8b11d9-b221-4c97-9948-2b5c2e5b81e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20f126e2-ad63-42c0-94c4-4bcc7f08e7f7",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26c33d57-0602-4215-b78d-777d9aeff886",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0b7d713-c35c-4367-9ec8-cab76463b036"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d342aa8e-9bfe-4726-86b4-fabe38aeae54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55209d4d-ebfd-4c37-a52c-fa7d67ca688f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "625642a1-da8f-4d92-96f0-26ace71f8712",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a81d24bf-5098-4a28-81fb-9520f61bf0d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "440dc1a4-ba13-4f66-bf4e-d55decde3457"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8d45c4b-4046-4bce-a88d-d9d1bfee2fb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a28ead1f-ddc7-4dd0-a3b1-f130c89dee7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "966e1653-ab3a-41f8-9875-416651df7541",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5e80a76-cdd4-4cc6-9476-e6baa7fac268",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e04f0d1a-df90-4f23-b466-c06e68c3fe01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bf05d94-2d97-464e-94ce-912372af742a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7415a632-e43f-45c3-bc30-a9360e6e4eeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "570951d4-d180-4d26-9cfc-f16b6dc612fb",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c9209bf-8ad0-4b50-be36-13daf9de5681",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4ec6fe5-e1c8-42d1-bb1e-bca5e380d3ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60ae5ff3-172b-49e8-bf71-f7fab1a1380e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fda544d-258a-431e-840b-0e140375aa14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9b90e7a-3ff2-48c1-8e7e-144fb0df867a",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "909ede57-0e7f-4ac6-b0c2-7377520209ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19772a2f-b697-4da6-a230-d0588de9a20f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e69acab6-1576-4c13-9f95-9e1ecbb97c8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df4348bd-162b-47bf-82e7-8b71e18a3735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7d0eb2b-7680-44ca-9197-2788a886174f",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5490955e-c283-4ff8-995e-8c19fd3315a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "708e73fd-2a7f-46a4-8826-746148c2a3b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f89cb8c-4919-49be-b224-6e90a47ac19e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bd75f04-40a2-496c-b9f4-83bc9f63093d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85b25f12-2a75-42f2-9eb2-5540e9925f66",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58a7463d-3dfd-4a87-8946-0afef0728eb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84cceb0e-5b6c-4d41-bb64-5150d478f9cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6252d954-d998-4ec9-8437-b4c197ebd99e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f7505a4-eb3e-4f59-a7ea-7588fd65d5a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3668513-afff-43f9-b3db-af4507d54d9d",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56519f7f-525c-4322-bc25-cd7d35ce8fcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d67f01a-9b8d-4c16-a379-9904173e771d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e37635ef-9af0-49d8-a5e1-368b6f80f550",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "730670ac-23c0-41b4-9a7d-75905b467f6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d09309f1-b8ce-4f02-b8a4-2e5c69ef6831",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "034a0876-bb74-4987-937d-0d12ee288485",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d800fb40-205e-4bd3-90f6-7ee590014402"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae06b4c6-b066-4cc1-af11-bebb63b100bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42d21da9-2481-4c3b-aafa-61fab6ab9c5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "035f7023-8e26-479e-83ef-37b4cdffa1b3",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dae7423-6960-406e-8ca8-0cf375ca684d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b343a8c3-6e9b-470b-863b-e1773878865d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4482f71-fc0f-4208-a228-a80f0a9f517d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc0998f3-0735-4b82-8220-50cbbcf60746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3e01023-da35-4d44-b9af-c7ae8e466852",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab7fd65f-4aac-4a3a-90a2-14cc574b0e85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "113da9b9-5952-44ee-880c-dfcab212ef04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75b97b63-5ae7-4408-a239-e5c546bf8eb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c957db3b-dee2-4f64-8ffa-036f4037c49b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ace45330-4370-48ac-afe9-8abfc0d05462",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e683977-e83d-4e58-8628-3e54afb54bde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cae95d13-66df-41da-a0dd-719befae0b98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e0b2ee2-bd03-4700-bbbe-4367cbdb59cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "041dd898-ae4b-4f86-9e3a-7cfa3059179d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3932bed6-ff6e-4398-ba8e-2a2884e55048",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f4365b4-4db6-4310-8e12-65db36357ec4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3e5772e-8e51-46bd-b1f0-641363b47fe7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d8ce474-a787-4bc5-9a2c-7c4627ff8628",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "332e97d8-6300-4b94-b50b-3accf4b1d9c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53ae5611-f0b3-4f38-96a7-bd88ff22b7ee",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a87f5b4-c0ce-4551-b303-7ef737e4f361",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d61d446-c5a7-4450-a938-ed31f3d45df4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0186abc2-8cb6-46c3-835b-aee3eb4cbd7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5065b42f-5854-415e-aee3-afe7524031b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ca3c58e-84ec-4ca9-84eb-d87ac17cdc09",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "448e19b7-17f0-4546-a571-a1b67219a84f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "176ef081-c375-4127-9d80-3332a388a173"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c8a9efa-2b87-4e78-ae65-3484dbc45644",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bab9b5af-1013-420f-901b-248b4a5a548c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a75186a3-dcad-4343-900d-390baa806f3d",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbb8815b-39d1-4686-b5cb-e22cebf63117",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b07ba656-8fa3-4b56-842d-5345ccd4a7eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e480d971-9af6-4285-84c7-80646eeaf032",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1977319b-2a73-4ef2-a60d-9e039a16ca38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1b9190e-cd54-4c5d-b8ff-dff8afe46e51",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f582cba9-f4c1-4a97-a37f-39baed47457c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "521e129e-e4ca-4e70-8311-0cb8b8b6f0c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e015f6a9-c41a-4713-9b14-e1e028cabe41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce9e3458-7cb1-496a-89d6-64452f3debbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ae0fa96-0ae3-4394-aefc-e66b743d501e",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bee90876-ae1b-46cd-9d7d-c63b268198b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a0c0e8f-b93d-462b-bf4c-83f36c363081"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca26bc0e-c323-45cd-aa21-fd8be0350d14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20624a28-71ca-4129-8b0f-256bf6bf7bee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04f098fd-2642-43cc-9eef-45e28638aa80",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d28a90bb-75cd-4bff-88ee-c685f4c222b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1707dab-ba4b-4aaa-b559-1002c1e69b58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36d5b234-bfa8-4a4b-8139-b5b6d28faa8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff0bc533-6d17-4c45-8b95-a8bd93016ac5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb1364a2-e0a2-434e-b756-526780a5dffe",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d9c7b84-a5bb-4488-8bc7-8c8c337a93d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56253318-6a0a-420c-beb9-a3304d57563b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2881b127-1085-46b3-a96b-5161e70cb9b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9418424-8d53-47c9-a435-92c25f2b4b81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4f36245-b1f8-4b0f-a911-4e582c105e28",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "308c1829-2805-4087-a756-35a2dc2acecb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3045b57-b1db-425e-893a-e4d2334dc2e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1af275a6-742f-4228-8583-b4f098c139b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e2b7c2b-3102-4e9a-b53b-2bcb4555b548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06da2620-1c65-4dd5-8ff4-3636d49a9e8d",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e27669f-3ec7-4eac-a83f-34224ed71f69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b50f3fa8-88ea-4f82-8c37-0619f576bbbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0840e8a1-0346-494a-8a56-e4cb72f6c6ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2608733-e176-4eaf-b27c-5e3ea17a2637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2d38f5d-a221-4303-ac00-e13500bb9784",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d211a9cb-fe7a-463e-98ce-5f5457c16c29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67423ff0-5c76-46d5-b4f7-ffaf7d27ac99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c45845de-d42c-4a0e-8b54-4ad2894c67fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "247a64f1-b911-41ad-893d-bea2c214e713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6397ef6-0fec-4a37-a0ba-83d9dd6c85aa",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb70fd77-2be3-4528-a4fe-c0842f06f9f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2f86430-27c4-4147-aa6b-45985d63d8dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c7bb486-1b12-4837-bf81-1083f8831c16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55debc60-7b17-4b9d-86d2-a0ce5f9e6940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d30ec523-c840-4bf5-86d8-8937084df234",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de4813cc-acaf-489b-a8be-3ec14cafae76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2f5e7bf-8d9a-483a-88d8-c2c4c73e8507"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "801f5d11-86af-40a9-9972-ea26ae142a32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4668b554-1145-4b24-9a7d-bae68c604c1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bd195d0-d8a9-4e04-b6de-6152bce1bd2e",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b934dea9-c160-4179-955f-edf27682d5dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ae91339-1d28-482a-9245-82d94c517dc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99524207-4b13-423f-8070-3d2dc904ee4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7db7a7c-6206-4fd1-95e1-122b794ad601"
                        }
                      }
                    ]
                  },
                  {
                    "id": "627e25b7-8cb3-487a-99a4-d2811327c5b0",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df917c7c-1700-408c-b1e9-099a471256ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0e875a0-e724-475b-8130-985e1775c214"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a36cca6-f6aa-4a47-ba97-3f8f4392da6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd0a7401-7e6f-4c9c-a487-adddfb707d85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a0dbc94-2a30-4e48-bdf6-bd8b60d65c0a",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "019aecb2-fda8-4103-9186-06df7ba6a7cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a80c34e-9a4b-46c7-bdd4-4c7bed542327"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "043897bb-3f3e-464c-a1a9-92a1fec3ef00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc60a8fe-403f-4e85-95a2-eefbd6cd55e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ead1b08-fc9a-4dc3-a298-2ab43c9d63f5",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "222dfcc6-a197-4705-8948-dcfeb8cd8549",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e64f53f3-486a-40ee-98a5-7e9a6ba35731"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1587695a-61f1-44a0-9cdf-b36ba0b900da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4975e1ef-6c2d-47a6-ab78-978da35acefa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ff8d04d-2ef4-45c3-a43e-d94be7502708",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "118bf5ac-2b30-498d-9085-4fc53912252c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d22a63cf-b892-41cd-b2f2-7b9ad8d8b7f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6db55b1b-bd00-46ad-a775-c1fe156353ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9c92f89-aa4d-42d5-8031-7dad19efc977"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d357fdc-719e-4ec0-9d4a-9b67cc865a07",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef41fce9-e782-42e0-8b4f-410966b919d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44c83a9b-197d-430b-9ff2-4c0fadb45adf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a83fcfdf-d3ec-4697-8d3c-6062ad9f6f91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea15dea8-e958-4386-9481-fa98644aee4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f6df5dd-cc22-4436-baa9-3eddc9e64b83",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58c73320-5984-4f01-8b68-828ad531199a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3b7635d-c3fc-4bf7-b5e6-f2593e484c69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d054c7e9-9f13-4269-aeb3-dd112ac3c74d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ffddf9f-ec28-4392-9baa-78b9b1b4fca6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb699661-92ce-472e-b71d-7ac25c9b595f",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f5801ad-d720-4831-a3d5-863b01be4aa5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "909224da-77a3-4f0b-a98d-ff07356b7c0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9f98b54-b3ec-497c-b1e4-d9b6284d9fb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f641f2c-6a74-40e3-9537-380ea47819cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bcb83e4-e89e-497b-a3ca-7da070a09b76",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1e53040-bb30-476a-9026-318acf612bf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70b84800-b666-419a-aedd-e696420032d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "def45944-8e3f-4262-af55-55a8f4b43990",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "143e5851-7436-41ba-946e-a552bf53fbc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6609d4c-a531-4a2b-8817-22636d53e28b",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfb6d4dd-247b-47af-ab5e-c5c92f1cbf40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d509bc1-30c5-4141-9ac7-9991401af9f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45bf98ab-cadd-4dec-bf0d-e19a7120f973",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "048e2b92-7188-4696-964a-d9b23638a817"
                        }
                      }
                    ]
                  },
                  {
                    "id": "671eabe5-4972-4506-89ee-9ba18a3fbd93",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2f76032-3035-47d9-b5a7-d17ab52a1b04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b2106ae-12b9-44e1-8bd2-936cd5ef7d3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8b6c514-0fcf-4000-ab77-67a53ce04be1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "908d5871-f753-4069-b06f-1416a0ffb86e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "100f58aa-987a-4479-88b5-2275e47e5b85",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7222e093-70b3-434b-ac80-0a120f0935dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08808bf6-6d62-4508-9a96-ce365698b4de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35b92a43-88fd-4582-84a6-a1bc3bbc58bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cae45e8-e342-480a-b7d2-48932f0e1374"
                        }
                      }
                    ]
                  },
                  {
                    "id": "590bd51c-216d-47fb-9f4f-de7b4b219d63",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17b901e0-9ab3-465e-bb65-8647a705a872",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2735bf7c-46b5-4183-8985-9be375631503"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3b6dd16-775a-4515-9061-96c8041e5442",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24f87548-7273-468c-9d2f-740859890dda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "986c249f-e500-4314-9588-d550a41d505f",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c47d5f5a-ee1d-4df6-9e7d-1f9931f2cdc3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "251c8809-5f17-4e88-8dba-eac86d1bbc24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60523bdc-5146-4c1d-ae5d-1172c32ad6e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce95055c-3475-46d8-92d0-4e7970e942ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bdded36-0702-438d-90cf-7f7c8c162ec2",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4438a56d-5c5b-4ebb-8319-f8ef308c1b36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94ea9571-1492-4f0e-8312-07ef58b2e061"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad318555-36d4-4f72-92cf-c3bcc131038f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21d8c05f-2a4d-47e5-9816-98b91463c0d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d51d86f4-afee-4e44-aca2-c1435e09981e",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34d31011-a7fe-4559-8d93-9461d7b3774e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b331f08-0f05-45ec-80a5-c733f7318a55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60e68d3b-d087-4298-9f3b-92c633cd1ef3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44015383-d671-456e-9d39-de7bbe840a24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f28f0dc6-4e76-4507-a48e-8ef9ca71db99",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43e0eb24-a517-4717-a2aa-c1446812ac12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b84dd15-a9df-40f5-9e6b-58f3775e9988"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03ed8bc2-8d5d-411b-87ae-51585a7c8850",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e38a63d-70ad-451b-bca3-deb92a201333"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2f3f2ea-dfc4-4c42-a7eb-281dc0dc1bdb",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee1cac0f-1583-443c-b8ee-d66120ac0064",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5a3e347-a55c-4385-befc-9e666d02c1c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f7a5499-fa4d-486d-b1a2-9d35d2becc02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3e61420-fc83-4c74-9f8a-9db9f549dd85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59193ebf-93f9-4f90-b9d0-c67cc000c132",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a95b86cb-5b24-4b1d-914d-6a5c27fa298b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0557650-645d-442b-a6b9-8c17cf30ae10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e20bee7b-0c81-46ff-a666-4969be530db4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fcc5f7d-d8fb-4e62-975d-fac118611f5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fec5e97-3337-4dbc-a52c-c2f004e3a685",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "736eabfd-c153-4382-ba6e-34d7bb537447",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09190d18-0839-457a-b778-7eb237d17fd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c2b5c75-b842-43f2-a7cc-399ff6cd0c6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e15bbf7c-7f62-422c-b732-7a4ffd36a403"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3980a94d-6a48-4b8b-ae42-72c1e18641bb",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80694657-491e-43f6-a7d4-38b81639be59",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9775f37-3de2-4e8c-93fa-995b2bf83b52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e38b1af0-1d80-4aeb-a279-7d202b785b96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b7abf1e-e297-47a3-a1bb-1cfd92eab137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6e64d22-a459-4869-920c-22b4443d9e36",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00deb6db-b3b9-40fc-9439-fd3fd4029c18",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "617c1cc1-5a4c-4647-a0ae-9e6e55a357af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89627e49-bf82-47d6-b6c0-5031288f7d62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "052ecdbd-3201-4990-ad2f-967908412e2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a641ea4a-41ef-4c43-9264-d4db43c97407",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1ec4715-6fe8-405b-a6b9-59cd8b21f0e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "628b3210-3cfa-43df-adb1-9e7d93feaec7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "facddc71-0288-4ef7-8b09-8af8142f9d9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cb4d01a-303e-4ab1-ab23-61dc7f580bb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3d2e06d-b47c-451d-bb14-3a41481e8816",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67721910-e9fd-463e-9448-c924eac49f27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56df755d-dd09-4045-a60d-ca989f699daa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2692bce-c167-42bb-9e62-3959d54a6dac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4c8b19b-c8cd-4185-a9f7-0a75cf535732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d7400f9-5c78-4740-a970-b941e6e68fbf",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9ff2e93-6375-481d-80db-bbb50d7f803e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "844c0659-0204-4872-a09d-ba3c5d808528"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92fdad39-718b-40eb-a67a-a3cd21a796f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ada1b54-3419-47b1-be78-115f075e950a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca0e433f-af58-49bc-9984-7ad6c2a171b7",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76f50cc5-4fb2-4a59-8765-98215b338999",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "433df4be-c72a-47e8-ab84-dc6d1f9e8a2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5f7c44e-739e-4db0-89c9-4b4bf738860f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "961bcecf-9edf-42a6-8cac-1e97084609ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82bbba31-b930-479a-b1ba-6d5d95f68c25",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb49aa0f-276c-4131-a1d4-e39b4164f276",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c44ebc8-ab3c-43d1-9d74-4ab9059892b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9330cf0a-3777-4e0b-9422-3cc2b8b8ed35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64ec9a67-e320-473d-85f1-bf3a9990a665"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd3c8dcf-0f92-4804-bb25-8210e879e65d",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4d77111-794b-4c56-8464-743db8b7464e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d540451-e566-439b-af6e-64c80ea45057"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c76269d-43f9-49f8-8655-29fd15e7e9cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e20b82bf-3b09-47f2-8338-4a8e5bd078f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a24e473a-66ec-4f51-8a36-22775be25b9b",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5de3c0f9-e8b6-4abc-98da-e14d0f029beb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01bf0739-7123-4160-8ee4-57a7f28d42e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f5aff37-cf55-4e87-a886-276fae8e7d73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c269265e-794c-4fab-b657-c1e3108ee587"
                        }
                      }
                    ]
                  },
                  {
                    "id": "087661e7-1bb0-4fee-afea-ff654e565dbd",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd643d24-8479-46ed-9141-de574d04adee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37de9d79-3060-4141-8623-313c13d9f960"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a7d2262-28d3-4e44-868a-c76f4c5f0a78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95cbea04-62e9-400a-ae2b-87bfbc563753"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e8bad78-02db-4fdf-b5d6-d7acb405b050",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f4a33bc-2491-405b-ad97-6fa4f44fda96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee28b260-dd48-4641-9652-02c7cfbf0486"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b3b4acb-5287-4c35-a072-cdeda8ef3401",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "816b6a18-cd56-46a4-a53d-1c06c70f1bb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91957b91-a5cc-4146-9ae8-83c26f41eca6",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fcc1245-6811-4055-8b99-a1967e35e694",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84a3a0eb-cd0f-49b4-8572-a0dd3ef9c363"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e238a995-248b-4e12-adc8-2f637559b164",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83ec3bcc-1e48-48fe-b0fc-921ddc23c55a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e571e15-cff9-4888-a706-eb42a774423f",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "110e3555-72b1-46e9-95ff-58f921b90bda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dcf95aa6-4f2c-4fc9-ab26-e81c1e3071d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6a9ad4d-25b7-4e0b-88f7-b8e58a9f4264",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07b9889e-6452-49a3-b012-2f3c31ee42e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "124f97a8-ec3c-43a3-857b-5d907f85cdfd",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b336145-5e25-42eb-b9f6-510ab9394c3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fda1215-61cd-4fa9-9886-192a6972acc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9335f32d-9666-4a6a-b5b3-d6951099fe9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f432a873-1d01-4312-9f4b-c2094be5e181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c330b04f-a835-490a-a83a-f00b4d466f5f",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e030865-ffa7-47be-9239-c5b434876a67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e4ac799-d5e0-469e-a8dc-8298858c35f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71edc485-2fe8-4bd2-8bb1-7459004d5dcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6390f7f0-dbf3-495c-a1d2-e102830224b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72cc3596-c894-42bb-b6e5-6bdb951cde3b",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc277bbf-435c-4b20-94ba-a16999b6b7f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34a8b4e3-ac19-473c-b406-63596ec17161"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f4305e1-c620-45f2-841d-ae22127d6db1",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc60dcaa-3ff1-44b8-b7c0-ee4b39698629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fff8e9bb-a341-47a6-91d5-d94272ff3ebe",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5a7a520-145b-4257-9097-f64f38969960",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3cf8eb96-fc10-4b04-99d9-24c2cdf50d01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1839c23-6ecd-40dc-b46a-a19f5e739272",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "288926f8-7935-499e-87ad-64492b7bf779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4062b005-3ebf-4016-b00e-646d43b66956",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47085020-723e-4391-90b1-017aec25148f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0734fdd4-77ba-41ce-93e4-f97e05ff0569"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d288f80-b818-4932-acba-e2472230b07a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f476b49-80e2-4b54-880f-4356c165d403"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5211799f-0efc-4eae-becc-3fca6ec09daf",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c7a24e6-f834-439c-8c9c-fe32f3ba2a3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "525cf014-aa75-40d0-aeca-6de28d68b622"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1a29484-f56a-411c-a471-82efc0ef58ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39ed417f-dbc4-4a3b-b032-632551b8c36c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81a239ce-0a01-41fa-9d8f-75fca156412e",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fe7b4fe-aa93-4b7e-92d7-8e8029634e99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9cb9e88b-ac34-46ec-8819-8aac3bddf7e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4d472ba-052e-4774-85f3-b1abef9dc4c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c0be5f6-cd08-4f4e-8b49-98954608a7eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2be43a72-59c6-41c4-a71b-649bc4eab18b",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4796f06-fe15-4e81-8768-9b342b6782a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69928520-c536-450e-9cfa-3593420b6019"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b1661b2-d896-4b20-ac39-baa5bfbeed0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "436a379c-1efd-4521-aa6b-2e7a09457c3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea8a79f4-cde8-405d-8ac4-a7a315a5d2c7",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9174bc29-02d5-4848-a45e-5909ac0bd77c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83925f6f-e9c3-452d-a935-da277bbc331e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bca4870-2da1-4b92-a10d-915e9c2e3fba",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58c550d5-ad04-46f6-9e74-1c8c11a19051"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e97ffbe0-a97d-4b70-a5bd-0287a5717584",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f69db63-e011-4eaf-af2c-62b9fb1b8311",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0451e25-3a3b-496d-ae04-cb205a7ada89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "258b4d20-af1d-4709-a227-ef0058eb0ea2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb662b8f-971e-4483-a529-2cf90fa7961d"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dce47efc-1b99-48fc-9e32-8e5939baab81",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "66fc6d99-a6e6-457d-8bf9-ef78c7bef88b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e870bd14-76b1-4ba9-a8bf-7796fc4c53d1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1faacb98-255e-423c-8c4e-5e8383d1d696"
                    }
                  }
                ]
              },
              {
                "id": "8afccb9f-f784-435d-8628-ba65d55893d2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "33a40e68-73f3-49cb-b318-f8db88fcc5d2",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee2d3cc8-ee7f-4d19-8e56-981e48778405",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "3b256d88-3684-4b31-b284-0b5fc251eb7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cdd8bbf-c282-4e02-bb29-b3e02924f667",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "df927f86-02b7-417a-8b2c-a3662a227c30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de30b485-4e76-4dad-be6e-ab3ebab337e6",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6555c10a-e04b-4acf-8df6-03d8739819ed",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "a98d9946-a908-4a1a-a026-afef49a25ea4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3071950b-54d7-4160-8c78-54237b79484d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "961dab65-6045-41b4-b027-b01b96583985"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "19c22cfc-9b26-49af-a18e-b7f66c9cd82b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "66bdd826-ee47-4fb3-a58a-8f7b81f79c00"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "89458d78-9955-41ad-a8b4-a144af4da538",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "091dbf9f-0a98-408e-b161-1189b2b6e3cf"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "73715fb4-dfc3-4467-a324-66d5fb9538af",
            "name": "Positive Testing",
            "item": [
              {
                "id": "29d21250-2353-4d56-8cb3-7a32c643dc8d",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cfc7fa57-17a0-44ab-86c6-fcdd1746fe28",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "59bf8874-19d6-415f-9342-2241d727103d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5eff0f2a-095f-49a8-81e2-e557943381cb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "33d6b657-8397-457c-9a88-14f15a985294"
                    }
                  }
                ]
              },
              {
                "id": "abc5764a-14ff-42f2-8c82-b16e1f22ecdd",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "56702e6f-4565-42e9-a62c-e8e895a81171",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "247885c0-0534-4d88-961c-5652ba4dd04d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5181f010-56fc-486f-ba57-203aa24d7f47",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8a779321-7484-45b3-95d2-56aedec3811c"
                    }
                  }
                ]
              },
              {
                "id": "70d33b30-841a-4b73-9aab-5290fd52a1be",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "551d10d7-4380-469e-abe7-862bab6f5e48",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5ad7bf55-99ef-416b-a2dd-6ce2e3b349b8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "47b559bf-28c6-411d-b76c-564be45e382e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bffcf899-93f0-49ac-b9ea-3f46923f270f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "58d64749-a6ce-4818-acd2-24c0b4c2e25c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "95b89ecd-0d24-4207-a871-2ff319684981"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4daed87c-8164-417a-91a3-33fe92a9c321",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "eb2756b2-ee74-4bbe-a477-2f618dc5d134"
            }
          }
        ]
      },
      {
        "id": "7faed455-fa8b-4412-8e32-be2a7e84b98f",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "8c5f6965-5c67-456d-b9df-b03044d94245",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f22025dd-444f-4598-98e9-8d71a4e94082",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0a2da45d-bac7-4982-bbed-1a037ed79d26",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7caab8d2-e405-401d-acc1-afe50838ef28",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5e8b66e2-211a-4480-9b53-81dc70314d76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28d8c4fe-e110-4c9b-a9cb-3736992d4ae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "33c741c2-6124-4637-a918-27d966c94387"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f3eba79-89ac-48c8-a619-3b9e797d9f86",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "239cb2ab-1496-4d43-9218-f643418fbbcf",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d5e37e4b-81d2-40eb-a74d-0b687023293b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ceb68b6-2f8a-47e3-aaca-1518746dbb90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d07263ca-61b1-40b5-9af6-3986f10a416c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "62b21446-34e2-4063-a04e-c8b20457912e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "337b56b8-e604-4555-8bb6-159e854212ab"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "37750985-5188-44db-a7ad-4701a9cbd2db",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5404983d-87cb-4e67-89f5-7514347582b4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e990ea9a-7cb7-449a-ae27-a70e116a7dc7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d21b76ac-b5c3-4817-91a7-5d1aafe5d123"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c0baf26b-b03e-4fa6-a98c-e3176fb6f9e0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "23734e59-5c01-4f5e-98f3-baf5a14a0d15"
            }
          }
        ]
      },
      {
        "id": "831a3706-c907-424a-b449-2ad9f33b70df",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "8f02c72b-7c6d-4525-ab08-59b125e9ba7c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ff50fd0e-4fee-46cb-9713-816c2c2c32ec",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e564ef64-8e58-48b3-a7eb-452532a9773f",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b46b245-6456-4e20-a1e4-7914c0d8f5f1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f906bad2-04aa-4c9b-bec7-a0e777049b9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31df03f7-bb79-4d99-8653-f9ef7cec0855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ba316674-8546-4d88-8664-85fd752020d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49a42ed4-5667-4399-aee6-3a03fc002fe9",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c4f1024-5af2-403d-9713-5cd57f14adb6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d1be8b9d-f5d3-4d24-a802-71d7cb363d6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af873330-2d16-4998-aeba-40d6900c4f4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d3162cbe-a047-4f4e-845c-c6f7680f32ce"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c9968485-74ea-4e70-a007-b407fb577065",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8d9770f6-f288-4a4d-ba43-04325a45e0fb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "454b88ee-380a-4b51-95fc-54defb76dec4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5c3cb679-a381-46e6-9f4a-f1d0fb97aa1a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "507f9e18-b77c-469e-87f4-1bfc9b4226de",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "78cd496e-ed53-4464-a721-fdd42ef708bd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b4be8b1d-a6a0-43b0-8852-e3ca6128dada",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d7adcc19-03fc-4f53-a1b3-5938a03087b5"
            }
          }
        ]
      },
      {
        "id": "7e7e2887-92b5-4672-8451-91a7f61903a5",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "71df4e39-516f-49ad-b42b-79722d784ea8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d395026c-7911-4de8-b142-bdc62ccf9eaa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "18d3c1f8-dfa2-4694-9b1f-b7d52efabb49",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55734d75-2bb1-49b2-a4d3-638e1ae838c1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "73923265-d456-4861-a5ec-1678a12198f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd776602-7107-4c56-a662-6171a8dc7ba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "88c4e204-a1e9-49fa-810a-1f5859678a9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46cb15cc-e7a2-459d-89b0-f6ad62e260cc",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bf01039-b9f4-4189-9321-db8dfe11d2a4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "22620796-7de6-42ce-ac20-89d0fdfffd09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9266512-432c-4ec5-bd9b-5bf997789014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5d7710ec-8d59-452d-9bd9-3c7ac2cb9377"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a7b81c4b-1d60-42fc-9782-f6249cbdc921",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8bfc960d-85ea-4e9e-af43-13e61bc29ad1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "81fc6b97-d59c-4006-ae8e-1abf6ccea151",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c4f620ea-0f80-46fc-aa25-89961f170afa"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ef870985-f455-4876-9a5c-0bfd4ce0c7cb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "9170f9ae-57ff-4a0b-a9b3-43145527c70a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "376dd926-8770-4b8f-9555-443e96760e0a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "35814388-a75f-4423-97dc-367d01cf65c7"
            }
          }
        ]
      },
      {
        "id": "4f084c98-3dad-404c-b0e1-a605a77255e3",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "209fea02-c5f3-470a-a90a-3c4f5eafa698",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a82cb3ce-c069-4de8-a679-ed1a9763d122",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "41d9bc5b-dd32-4ec2-a02e-87277ee0a2b6",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "341e6557-7c77-49e3-bd0d-5140cbc37ca1",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bb1f84b4-724b-42d0-91d4-3402be53239c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 505,
        "pending": 0,
        "failed": 86
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 344.06538461538463,
      "responseMin": 16,
      "responseMax": 30419,
      "responseSd": 1912.6952609104956,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1666313720056,
      "completed": 1666313822526
    },
    "executions": [
      {
        "id": "5b401df1-f2a7-470f-8534-3805f99a5344",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "66602d4a-b53a-4bc4-aa5c-d544ad2d3cb1",
          "httpRequestId": "98de2d9a-a744-4349-bcb6-9329824ef935"
        },
        "item": {
          "id": "5b401df1-f2a7-470f-8534-3805f99a5344",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "8fee0f2f-4dcb-4e48-8cd5-df0fabb818da",
          "status": "OK",
          "code": 200,
          "responseTime": 104,
          "responseSize": 0
        }
      },
      {
        "id": "7316a862-e552-429c-a6e4-58d842aeca90",
        "cursor": {
          "ref": "617d9515-a28f-4820-a973-2c8b2eccf3d5",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "131f04e8-a8bd-48b9-b377-90c94db38485"
        },
        "item": {
          "id": "7316a862-e552-429c-a6e4-58d842aeca90",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "083c3192-ea60-48a7-929c-eab45822772a",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 0
        }
      },
      {
        "id": "bbcd68f5-de30-4a0c-8e35-4befaef7e435",
        "cursor": {
          "ref": "197c0576-0d49-4552-8c5e-9e92cf739e6c",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "26708fcf-2a71-4822-b2e4-ee7579145355"
        },
        "item": {
          "id": "bbcd68f5-de30-4a0c-8e35-4befaef7e435",
          "name": "did_json"
        },
        "response": {
          "id": "ac5a6704-5b54-4017-9a57-065f3c118310",
          "status": "OK",
          "code": 200,
          "responseTime": 768,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d73c6d52-ec89-46be-8622-7c5bc1dc4e3e",
        "cursor": {
          "ref": "ada5b3c9-2866-4ef2-a0a8-8b641477cef3",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "5cb56791-8cea-4a7d-a85d-0b97d9bb6bc0"
        },
        "item": {
          "id": "d73c6d52-ec89-46be-8622-7c5bc1dc4e3e",
          "name": "did:invalid"
        },
        "response": {
          "id": "26afdc31-6063-4702-85d7-4b6b2dbcb8a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d73c6d52-ec89-46be-8622-7c5bc1dc4e3e",
        "cursor": {
          "ref": "ada5b3c9-2866-4ef2-a0a8-8b641477cef3",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "5cb56791-8cea-4a7d-a85d-0b97d9bb6bc0"
        },
        "item": {
          "id": "d73c6d52-ec89-46be-8622-7c5bc1dc4e3e",
          "name": "did:invalid"
        },
        "response": {
          "id": "26afdc31-6063-4702-85d7-4b6b2dbcb8a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89e27569-925c-4a46-af1e-2e35233bb1ec",
        "cursor": {
          "ref": "3af45337-f686-4ddd-9a92-8103ff6cd3c1",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "8d5c1803-cb28-4e32-b9d6-05486940d51e"
        },
        "item": {
          "id": "89e27569-925c-4a46-af1e-2e35233bb1ec",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "40e4c242-fb1c-43f3-8d3c-07d87307c623",
          "status": "Not Found",
          "code": 404,
          "responseTime": 243,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc31790f-f82c-4805-a840-ad9763e88e92",
        "cursor": {
          "ref": "e3739a56-4233-417b-99a6-6a19f1338f68",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "4e65f8c8-14ed-4ad0-bb3f-422c2a7a018d"
        },
        "item": {
          "id": "dc31790f-f82c-4805-a840-ad9763e88e92",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "12c9190b-37ba-4b5b-b1e5-882397cd62c3",
          "status": "Not Found",
          "code": 404,
          "responseTime": 39,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3467c850-0ab4-4d70-8f4c-f06db837ed1a",
        "cursor": {
          "ref": "c7872e1a-219e-42c7-bcb9-e78544b492d7",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a5b0e104-f35d-4439-871f-0b1b2cdc7c15"
        },
        "item": {
          "id": "3467c850-0ab4-4d70-8f4c-f06db837ed1a",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "3f30dc3f-2054-46b3-a867-a65032edbb5a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f907ce7f-8e1a-4156-ab4d-53b37190c4e2",
        "cursor": {
          "ref": "8e3ad597-2bfc-4c6d-90a9-2d578bf18743",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8440d35a-141e-42aa-9359-48079f4f3447"
        },
        "item": {
          "id": "f907ce7f-8e1a-4156-ab4d-53b37190c4e2",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "cd181852-991c-497a-b814-d8224ff8d8a0",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 124,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f907ce7f-8e1a-4156-ab4d-53b37190c4e2",
        "cursor": {
          "ref": "8e3ad597-2bfc-4c6d-90a9-2d578bf18743",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8440d35a-141e-42aa-9359-48079f4f3447"
        },
        "item": {
          "id": "f907ce7f-8e1a-4156-ab4d-53b37190c4e2",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "cd181852-991c-497a-b814-d8224ff8d8a0",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 124,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7122a01-55a8-4d50-bc4f-dd04ffa9db1b",
        "cursor": {
          "ref": "5a0805da-3548-4684-a031-417efd4d3a25",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f51e9eb6-7390-4bb3-b9d1-c3396570db3c"
        },
        "item": {
          "id": "b7122a01-55a8-4d50-bc4f-dd04ffa9db1b",
          "name": "identifiers"
        },
        "response": {
          "id": "5a5fb7bd-d1ba-4295-aa6b-fe85fe419a97",
          "status": "OK",
          "code": 200,
          "responseTime": 1758,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a2d0ea0-56d5-4c1c-b4ee-7c3c992810da",
        "cursor": {
          "ref": "c5b814a2-31c5-4d1a-bfde-590e4dc83298",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c1407817-4127-43c8-b158-9dc672f47840"
        },
        "item": {
          "id": "0a2d0ea0-56d5-4c1c-b4ee-7c3c992810da",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "62f8b1c7-ae76-451f-b92f-359b19c86fbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 170,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a2d0ea0-56d5-4c1c-b4ee-7c3c992810da",
        "cursor": {
          "ref": "c5b814a2-31c5-4d1a-bfde-590e4dc83298",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c1407817-4127-43c8-b158-9dc672f47840"
        },
        "item": {
          "id": "0a2d0ea0-56d5-4c1c-b4ee-7c3c992810da",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "62f8b1c7-ae76-451f-b92f-359b19c86fbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 170,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80ed9d3c-574f-4e28-b6dd-d41b194ea9ee",
        "cursor": {
          "ref": "55c4faba-6e28-43bc-831e-708dd2ef83af",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "1fc93456-213f-4280-9af4-012bb8b21641"
        },
        "item": {
          "id": "80ed9d3c-574f-4e28-b6dd-d41b194ea9ee",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "ed42381f-af28-46b8-92b4-5f8545f2715a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a58f102d-74a1-4eec-9218-ef4068dedb69",
        "cursor": {
          "ref": "571d49e4-8aef-46f5-a2f0-4cc74f785a15",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "310728f3-889c-459a-afbf-0367e3f238d1"
        },
        "item": {
          "id": "a58f102d-74a1-4eec-9218-ef4068dedb69",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "660ba8a0-0e2e-46c7-bcd0-3af4128112d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 151,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd80342f-2555-4def-a6fa-d43392ca06a5",
        "cursor": {
          "ref": "09ddb4b7-5ace-4dff-acf1-61612fd3f3af",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "7f4bd88c-c022-4fe0-96be-62bab7e53193"
        },
        "item": {
          "id": "cd80342f-2555-4def-a6fa-d43392ca06a5",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "74390157-e852-4ce9-8b8f-e38136462a99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f759354-9f7d-4992-b676-7024655bbec3",
        "cursor": {
          "ref": "bc9e6b56-2d80-4e3c-b1ca-eecd65affc4b",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "abb02cb4-aa23-431f-8133-d530ba8badb7"
        },
        "item": {
          "id": "6f759354-9f7d-4992-b676-7024655bbec3",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "84dce64c-7191-4873-9929-a8033ec052c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71698277-7a62-4e5c-9f4e-d5379c7a8939",
        "cursor": {
          "ref": "12dc9f2f-2cda-45a7-a695-35fc9084b5a7",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "34b59a60-4fca-4524-a198-47f7d997629d"
        },
        "item": {
          "id": "71698277-7a62-4e5c-9f4e-d5379c7a8939",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "1412b58c-aa08-4782-9397-538e3f52de00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7198f90-6673-4cf4-9cdb-0a2400a2699e",
        "cursor": {
          "ref": "f33e6683-e1d3-482f-baea-56b41c015958",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "8bc84a00-9486-4a39-b045-ed63e0e75bfd"
        },
        "item": {
          "id": "a7198f90-6673-4cf4-9cdb-0a2400a2699e",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "11a398ea-76f7-425a-ae4d-15b00062e73f",
          "status": "Created",
          "code": 201,
          "responseTime": 3215,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "283d2854-18d3-45f6-a299-3b569f18cd37",
        "cursor": {
          "ref": "fd40ebdb-8551-4062-92f8-81eecf4a38d0",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "b1ead888-8884-45e9-acfc-954d0f7e67ef"
        },
        "item": {
          "id": "283d2854-18d3-45f6-a299-3b569f18cd37",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "d8568862-2eeb-4a9b-86f1-0f0610289cf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f95fbff1-5f5c-4ef7-b069-0cb0bcea5e03",
        "cursor": {
          "ref": "abaa2cd0-1327-4b56-8049-588396d2e53b",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "43cea43c-6395-4625-bb4c-9e603f463760"
        },
        "item": {
          "id": "f95fbff1-5f5c-4ef7-b069-0cb0bcea5e03",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "18fd840d-2511-4ef4-9b7e-7023a0ce7945",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f762587-68f9-4226-8795-e209479b753b",
        "cursor": {
          "ref": "a7561785-3dc1-4896-a5ad-f104b6cfbcfb",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "60734cd7-55b0-45fd-b616-a0ac427e6478"
        },
        "item": {
          "id": "9f762587-68f9-4226-8795-e209479b753b",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "dd143cba-71af-435c-9cc1-0169134ad593",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9a25398-c138-4ecc-82fb-ad9da6f3c944",
        "cursor": {
          "ref": "8b74d1c3-6ea7-4639-8a23-8145ef61e5de",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "26766c53-f660-46aa-9ae8-6af3ac5aab52"
        },
        "item": {
          "id": "c9a25398-c138-4ecc-82fb-ad9da6f3c944",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "d02e7542-6b1c-46ba-ade2-4777f65b13db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 135,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5f11fdf-422f-4cb0-ab23-8e651129b6ab",
        "cursor": {
          "ref": "3cd513ad-732a-46e0-b001-79504fdd3957",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "d1d26a66-0754-4975-9cd5-398c5eafa0ee"
        },
        "item": {
          "id": "b5f11fdf-422f-4cb0-ab23-8e651129b6ab",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "8edc3a6f-405b-4fc5-ab9d-69a5065635f6",
          "status": "Created",
          "code": 201,
          "responseTime": 478,
          "responseSize": 584
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "fbe9190c-344d-4d2d-a34d-357878d5d62e",
        "cursor": {
          "ref": "2ffde3e6-694d-42f0-90fd-35571d1e2929",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "6c0a0782-6ce4-4ab9-b1ef-048088056227"
        },
        "item": {
          "id": "fbe9190c-344d-4d2d-a34d-357878d5d62e",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "7144a25a-8cff-4e0b-8762-bdf73deb96ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19b6b756-c65c-433a-a06b-02a9fa5a9579",
        "cursor": {
          "ref": "e4cba7a9-d470-4d9f-8e5f-23c946808b13",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "7e14607d-5c13-44ef-bf98-e7a69feefa81"
        },
        "item": {
          "id": "19b6b756-c65c-433a-a06b-02a9fa5a9579",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "cd7733c0-a2dc-4ce4-b836-91bf760698de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9e5465a-e5de-4f8a-a351-ff2f866909ef",
        "cursor": {
          "ref": "d95bce5a-bffc-410f-ab12-76f34df53cc7",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "c9ccea5d-5d0c-4362-832d-e89285fbfbf7"
        },
        "item": {
          "id": "a9e5465a-e5de-4f8a-a351-ff2f866909ef",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "467b6849-9c41-4f60-9052-e01739adbca3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f314c092-dca3-47d0-898d-7bcbf72e20de",
        "cursor": {
          "ref": "6e9f65ed-9e1b-4137-9900-dd3498f4b1dc",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "968ecfdb-859c-4492-8b7f-ced3dd9e4f38"
        },
        "item": {
          "id": "f314c092-dca3-47d0-898d-7bcbf72e20de",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "872d0d55-4cee-4799-ab2c-53ef22549a2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 270,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f72ef4c-9690-4c9a-b5e2-af590e050cee",
        "cursor": {
          "ref": "e8b4635a-7475-4caa-8e30-2a98126aaaee",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "6b874544-8828-4b5d-932a-7b915856d78b"
        },
        "item": {
          "id": "1f72ef4c-9690-4c9a-b5e2-af590e050cee",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "8bc48319-d2b1-47a9-a22b-40986d665ecd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7abfd290-d107-4b4c-9924-85cf3209f761",
        "cursor": {
          "ref": "6ac42e69-2735-44f1-946b-839e9c588b44",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "f9627442-9752-40db-bd15-1f45ac1a97a7"
        },
        "item": {
          "id": "7abfd290-d107-4b4c-9924-85cf3209f761",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "511bb3fb-8b93-48b8-b1c4-f6220dc2c856",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eac2d47-9ceb-41da-8fb5-efd5904531c6",
        "cursor": {
          "ref": "f67a0a45-9c30-4530-9ff3-44964fcb66fb",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "8adbf7e2-a9a4-44f4-9a31-a9d67ea16740"
        },
        "item": {
          "id": "4eac2d47-9ceb-41da-8fb5-efd5904531c6",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "033d4fb2-ca46-47e6-8903-402c294f4ee4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b150e33-b556-46a6-9d82-ddc147718e45",
        "cursor": {
          "ref": "604f8687-288d-4a41-a188-8c9e748ed062",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "256ac0a5-dba9-46b2-862a-5b225fb66e91"
        },
        "item": {
          "id": "6b150e33-b556-46a6-9d82-ddc147718e45",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "27a404f5-6e3d-4e1d-9c21-bba6d52e6d3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19ffb373-5bb5-4de8-b68e-72bee59df7bf",
        "cursor": {
          "ref": "9dc0f8db-cd3a-410e-a509-d905c11efc3a",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "5376b25b-bba5-48c1-9e84-587d597832e4"
        },
        "item": {
          "id": "19ffb373-5bb5-4de8-b68e-72bee59df7bf",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "a5384175-00d5-49c3-ad70-5f8da394bb1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6a5c125-40ef-448d-8ba8-4d69526d07ba",
        "cursor": {
          "ref": "9ac0a5bb-d65e-447b-8f35-6024ffeef85a",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "c36995f5-9dea-4065-a632-4d71c13856b8"
        },
        "item": {
          "id": "e6a5c125-40ef-448d-8ba8-4d69526d07ba",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "f0dd280e-b56f-4677-ae92-6c23b33754f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c5d9d0d-bdd2-4007-b63f-dd30781d4107",
        "cursor": {
          "ref": "ed6c55c4-267d-4119-9444-06f3c7eff40c",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "d10593a7-771c-4d57-a8a6-8e3e22f8cab4"
        },
        "item": {
          "id": "9c5d9d0d-bdd2-4007-b63f-dd30781d4107",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "e764e866-aea5-496a-ada9-ce0a8477da40",
          "status": "Created",
          "code": 201,
          "responseTime": 985,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "d52f3eda-c076-46c0-a34e-0b63d491374f",
        "cursor": {
          "ref": "228f49dc-2350-4710-b6cb-a6ef1cde11b0",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "fbac39b0-08ab-44ce-943f-4d3e2c86f65a"
        },
        "item": {
          "id": "d52f3eda-c076-46c0-a34e-0b63d491374f",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "0d6cd0b9-f6fa-417a-a37c-17c87ef078d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc2e5751-1c4a-46d7-a383-fe7e786442dc",
        "cursor": {
          "ref": "1f5cb4d7-46ad-4221-b3d5-fc37f6ab0206",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "f3331ce2-94e3-4845-9530-4548ad9a3834"
        },
        "item": {
          "id": "cc2e5751-1c4a-46d7-a383-fe7e786442dc",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "af576f11-538f-4e35-82e1-8e1b507fcdb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc7f4f01-3947-429b-9582-3772463ca6bc",
        "cursor": {
          "ref": "2795ecde-4694-4551-b8d6-d24ce164f1ae",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "fa77c892-af30-41cc-bbbe-a78992113fc2"
        },
        "item": {
          "id": "bc7f4f01-3947-429b-9582-3772463ca6bc",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "eac57534-e789-4764-beb2-fb2d03b5b4fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "526afd72-5c1b-42a9-b4f1-7b96ac168680",
        "cursor": {
          "ref": "92953530-9c55-43b1-ba15-54911e3aec91",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "e22551b0-b6ad-4dd2-9e04-3a494044093a"
        },
        "item": {
          "id": "526afd72-5c1b-42a9-b4f1-7b96ac168680",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "9bdb39e0-4dab-448e-9dad-e03e3f29c568",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96475f74-7f23-474d-85a7-1bfea65dad47",
        "cursor": {
          "ref": "dada103a-2f50-45b7-971c-7b41d048cb7a",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "b4006fd3-b7dd-4ace-8adc-f5d3cc1ecf2d"
        },
        "item": {
          "id": "96475f74-7f23-474d-85a7-1bfea65dad47",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "7157d9f0-3289-4360-92cf-e4b11c288dcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f0e8195-8127-481e-902e-8a5b11c753d7",
        "cursor": {
          "ref": "a68c2529-5d84-41aa-aa79-be961f976c3b",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "9ef59e58-ef60-4ad5-9fb4-4c181d6d9f91"
        },
        "item": {
          "id": "4f0e8195-8127-481e-902e-8a5b11c753d7",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "ddd9ef55-9f8c-4806-8f0f-47b8d27142c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9b4e310-4385-40ec-9f01-50354ed21d3f",
        "cursor": {
          "ref": "aa32c8c5-2a60-460b-8734-2878ea9b1bf4",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "b311243c-a842-40d3-8574-084609f06af6"
        },
        "item": {
          "id": "a9b4e310-4385-40ec-9f01-50354ed21d3f",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "dfd086fe-b4ba-406e-a135-1b0a86e1e27e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "710fc907-c85b-4650-8e09-172ec12de898",
        "cursor": {
          "ref": "e213373a-e66b-440c-a8c8-dbdbc09d1315",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b52fd763-9237-4b18-a2fc-4a9541f6dbdf"
        },
        "item": {
          "id": "710fc907-c85b-4650-8e09-172ec12de898",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "9eb33555-8859-4ca5-9035-fad7889d4d76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b0a2120-871e-48b5-ac7d-019111a1a785",
        "cursor": {
          "ref": "7436e6b6-2497-4708-9b50-ef3782365eba",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "884633f3-8f07-47df-b0bd-3ee129d1d696"
        },
        "item": {
          "id": "6b0a2120-871e-48b5-ac7d-019111a1a785",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "9a9f80a7-4ca9-480e-b7c7-8540a437704e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b1f61a7-be53-4922-a7dc-07b18c329733",
        "cursor": {
          "ref": "83e0ef9a-32fc-4edd-beda-a790e8bc88d2",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "23c40ea0-48d2-4b2c-889a-49fddb66230e"
        },
        "item": {
          "id": "7b1f61a7-be53-4922-a7dc-07b18c329733",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "60a5a3fe-c1a5-4902-8009-1139fabcb91d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03ac926d-9132-4f47-af77-cf8ed5ab1715",
        "cursor": {
          "ref": "f55d052d-d601-4444-981e-26917f07096d",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "7baea4fe-98be-4f38-a3b1-77e6ba6db32e"
        },
        "item": {
          "id": "03ac926d-9132-4f47-af77-cf8ed5ab1715",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "2362a2b7-78f0-4fc5-8d37-899613e0a7f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5932bad0-0a7c-4476-a8b0-75a2302860ba",
        "cursor": {
          "ref": "29a9f04e-f143-44aa-8046-9b5e0e49d204",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "dbf54a8e-1605-4ebc-970c-16177c56e791"
        },
        "item": {
          "id": "5932bad0-0a7c-4476-a8b0-75a2302860ba",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "599a5653-6cbb-4b2d-bedf-f547f2b43777",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 542,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8d6f7c5-67d5-4912-afce-f72b4dbedd31",
        "cursor": {
          "ref": "6e41f5d9-01df-4ef5-aa9c-1a392e427067",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "3ab09763-ccc4-4085-a7d1-f68015eb3704"
        },
        "item": {
          "id": "f8d6f7c5-67d5-4912-afce-f72b4dbedd31",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "5fb3d9fa-56da-464a-9421-b3f82feb4d9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 412,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "66c619db-7b69-4a87-9fe4-009b6187822e",
        "cursor": {
          "ref": "22179852-c753-499d-bdcd-a7ba28bd5aeb",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "e240f4ac-a00d-494a-a079-05442d2571d9"
        },
        "item": {
          "id": "66c619db-7b69-4a87-9fe4-009b6187822e",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "c73e84fa-aa27-45b9-a061-eab17b6aa750",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a43424d-7af9-49e0-b78a-e275c7472e53",
        "cursor": {
          "ref": "d90c8a66-a065-4c51-8a62-c958c49ade51",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "0065806b-5dbc-4342-a18d-81bce15771e4"
        },
        "item": {
          "id": "9a43424d-7af9-49e0-b78a-e275c7472e53",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "1c75ffa8-8f6b-480d-aefb-e5ff7e8e3a2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17d1bc8e-1451-496f-a9ba-5292132ada45",
        "cursor": {
          "ref": "a02d720d-2d1b-458d-aae9-708043eee986",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "33fe2a51-c7c0-4989-aa1b-e80f2350be7b"
        },
        "item": {
          "id": "17d1bc8e-1451-496f-a9ba-5292132ada45",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "6638b9b7-06c7-4884-a32c-0d0ed1dbb793",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcb92187-6107-4b9c-b43d-8aab6444cb76",
        "cursor": {
          "ref": "de5c61e9-c26c-4265-9458-4563e9e8b398",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "3be8788b-843e-47fe-89bc-6598e7b356a6"
        },
        "item": {
          "id": "dcb92187-6107-4b9c-b43d-8aab6444cb76",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "27e97d00-c18d-4c32-bd3a-a83232feac7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cafa8519-2e19-4ceb-9111-8d259655ed61",
        "cursor": {
          "ref": "96ddd026-0ec3-4131-a5ea-3abb902c3b04",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "049adff9-691e-4b7c-b9e8-36717ac68ac9"
        },
        "item": {
          "id": "cafa8519-2e19-4ceb-9111-8d259655ed61",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "47c3d87f-a91b-48aa-a114-b337bb9c059c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "371d8a7f-5321-4c6a-a8cb-3e23837da93c",
        "cursor": {
          "ref": "ce3a3695-7bc6-4e14-ba14-39c32c21ef54",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "40f3b7b7-4e0d-44c6-9ea1-d4cbc4f74196"
        },
        "item": {
          "id": "371d8a7f-5321-4c6a-a8cb-3e23837da93c",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "ffe1f891-18e5-433a-93c8-55e60a8f6e36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 235,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a028f43e-44ac-417d-9e53-5c1e737a0b2f",
        "cursor": {
          "ref": "0cd01d1e-5295-4223-a9e0-4308a09d7d30",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "21cf3815-5c39-4e91-80c7-4567f7adc40c"
        },
        "item": {
          "id": "a028f43e-44ac-417d-9e53-5c1e737a0b2f",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "b10d3769-5ac7-4820-9564-fc9178d3dd32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 603,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "7a72b528-3767-46f6-b76a-be9d5a38c5c2",
        "cursor": {
          "ref": "03ae8f29-3d63-4c37-94bc-abce0d7f5c07",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "c79c91d3-60eb-4c44-81cf-643e066e5f84"
        },
        "item": {
          "id": "7a72b528-3767-46f6-b76a-be9d5a38c5c2",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "e7f6fa3c-6ed5-4a86-a1df-509d5526f7a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd7a41b4-444f-48c1-b7da-f812f30f616a",
        "cursor": {
          "ref": "55b50d89-662e-4c18-bb3c-e42daaef3d76",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "a480b690-d95d-4415-968d-197513fe2045"
        },
        "item": {
          "id": "fd7a41b4-444f-48c1-b7da-f812f30f616a",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "568afa8e-dda0-469e-ac7c-1d87b864a3a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b52fa772-b2d1-462d-bcc8-1c81ffebf1f0",
        "cursor": {
          "ref": "5dd804ba-f090-4a40-b978-e536fe337d43",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "f3c13357-edac-40c2-b393-803ddda64f61"
        },
        "item": {
          "id": "b52fa772-b2d1-462d-bcc8-1c81ffebf1f0",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "92531904-88fe-48ae-bad7-b191d3ec1d4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 149,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "701f54cc-a18a-4e18-bdb5-a48b98f41b19",
        "cursor": {
          "ref": "f3c79f39-5ddf-4c04-9704-4f8fe237e16b",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "5eaa68e0-999c-47c8-921f-b92c6bb3ddbf"
        },
        "item": {
          "id": "701f54cc-a18a-4e18-bdb5-a48b98f41b19",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "7975e3d4-021a-4087-8802-2258ce956012",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c92b61ce-b0aa-4dec-8ab2-171974ef9194",
        "cursor": {
          "ref": "22bdcd7f-e93d-4f29-a549-c304c23584fc",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "eb5a3be4-e183-4df8-b331-f3453a570a19"
        },
        "item": {
          "id": "c92b61ce-b0aa-4dec-8ab2-171974ef9194",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "1c067dc5-14ed-45fb-b81b-788e94a6d18f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 136,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "589d8910-b966-456a-9a3c-fe1fce94432f",
        "cursor": {
          "ref": "657126dc-0594-46a1-8f67-c85cffcfd330",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "fe5b0bec-2932-4c1b-b666-5db16adeab3d"
        },
        "item": {
          "id": "589d8910-b966-456a-9a3c-fe1fce94432f",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "a64572bf-6712-4921-9a8a-c95b9210af22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb64cf1a-1fdb-4ec3-a674-1719e2df2c12",
        "cursor": {
          "ref": "b7a86ce7-ff2b-4a33-b887-970699473bf4",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "9602437a-7c2a-4dd8-888e-9888293fbde4"
        },
        "item": {
          "id": "eb64cf1a-1fdb-4ec3-a674-1719e2df2c12",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "f86a6ac7-3c43-473e-bd03-fff8dcd693e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 650,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fd8e83e-dd55-4cba-87fe-ab2fbe7beeb7",
        "cursor": {
          "ref": "c92695b0-ca75-4057-a3bc-d4ea26301ca4",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "89b426ba-b188-4840-a831-6c0a4a3e1bc9"
        },
        "item": {
          "id": "1fd8e83e-dd55-4cba-87fe-ab2fbe7beeb7",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "8b613882-b711-4b7c-b530-5cfac21f8e65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d9aa473-fc9b-42d9-a71f-7a03cb928714",
        "cursor": {
          "ref": "5e2fbaf8-0cee-4c15-86ab-b11dbad6cf8c",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "b8c8dc17-b0ba-4c59-bc27-6dc6e1161519"
        },
        "item": {
          "id": "3d9aa473-fc9b-42d9-a71f-7a03cb928714",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "29e290b0-6b03-42da-90d8-ee7e84feb73c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac510d4d-8258-4b22-96f8-124d28f60736",
        "cursor": {
          "ref": "6b754358-d3aa-4fbf-a6a9-72d6f90add6b",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "5b23e599-eb99-4536-9939-680d7f798c33"
        },
        "item": {
          "id": "ac510d4d-8258-4b22-96f8-124d28f60736",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "c337c929-5103-41b5-901f-64d05f7894c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 406,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4aff4ec-671e-4056-8369-2c8a8d203f98",
        "cursor": {
          "ref": "4a25a3d7-b62b-4498-8b89-6e0db2e8fbd3",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "ba83f0b8-7276-4ec6-8233-d1e5e86c286a"
        },
        "item": {
          "id": "e4aff4ec-671e-4056-8369-2c8a8d203f98",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "3515f1a2-dd5e-4880-b542-58e9713b8d69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 128,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40d63177-f05d-4cb4-ad1d-2e52948e5b04",
        "cursor": {
          "ref": "5737a792-5d76-4049-9c04-2da7b86aa1b4",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "5045e7de-b205-404c-bc09-c364e4992dd3"
        },
        "item": {
          "id": "40d63177-f05d-4cb4-ad1d-2e52948e5b04",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "0e72f204-5dc0-4053-aad1-953ac9c65453",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 253,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b343f8ae-ba64-4dce-80b2-da303ebf53a5",
        "cursor": {
          "ref": "19b72692-a4ca-454f-8eb3-21923f56a8cb",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "db45018c-2c27-4131-a093-9f5ede8bcf47"
        },
        "item": {
          "id": "b343f8ae-ba64-4dce-80b2-da303ebf53a5",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "055a11ea-35fb-450d-ad82-ac21f5d26dc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a101ecb-5e6d-4e8a-aaed-5755d1007647",
        "cursor": {
          "ref": "a73f1022-20f5-446c-be63-c259ca9b8c8f",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "efe5b205-3f98-4ee5-9baa-131c2faa6bb3"
        },
        "item": {
          "id": "7a101ecb-5e6d-4e8a-aaed-5755d1007647",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "68b67ba6-b56c-42d7-8aa5-89d7dc2347fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fe3d35a-afae-4956-a22a-4be4aff1ded2",
        "cursor": {
          "ref": "6cf3ce01-bd83-45cc-8f89-3590b2787275",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "fb937060-28fa-417a-8ca0-d0d70cc853dd"
        },
        "item": {
          "id": "2fe3d35a-afae-4956-a22a-4be4aff1ded2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "68fbdbfa-62a3-4a43-b342-f11308fdf18d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "804939f8-2c2b-4d2f-a0ff-0f5ecfe6add0",
        "cursor": {
          "ref": "6b2ccf81-3efa-4d25-90d4-2c62eb96807d",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "09fd8355-514b-4922-a0ba-71dda3c58361"
        },
        "item": {
          "id": "804939f8-2c2b-4d2f-a0ff-0f5ecfe6add0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "931eeca7-3619-4110-ae5c-c938587acfec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbaf97af-1312-4869-bd1a-200d1f0cc874",
        "cursor": {
          "ref": "eb9236ae-cb72-4d2b-b8ba-36f32cb50025",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "ffbd4bfe-457f-4782-bf3b-2f293e03c450"
        },
        "item": {
          "id": "bbaf97af-1312-4869-bd1a-200d1f0cc874",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "fce4e8ec-048c-4788-892c-ebdb1b290301",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 580,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54ad8c89-10da-452a-bd67-b19370537019",
        "cursor": {
          "ref": "11d07955-273f-48b3-86d3-c12e0e8a1d49",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "ede8c726-6b30-46ff-a8fc-c424798f9777"
        },
        "item": {
          "id": "54ad8c89-10da-452a-bd67-b19370537019",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "86f10ffb-860a-400a-b10d-ceecbdf7b638",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aac651e7-3b9e-480b-bbbd-c39a32a23c3e",
        "cursor": {
          "ref": "e83a6b79-bd78-42f6-b43e-027264763e56",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "8269189b-cbc4-4029-aa45-f699f39b46e4"
        },
        "item": {
          "id": "aac651e7-3b9e-480b-bbbd-c39a32a23c3e",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "49de986b-e9d5-4214-9e9d-06ea4b520712",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 128,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba21be53-8207-46be-acf1-47272779a6ba",
        "cursor": {
          "ref": "ff2b78b5-f99c-423e-b83c-54bbb62872d1",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "07c6190d-499a-4ccc-a5a8-b8220a57a598"
        },
        "item": {
          "id": "ba21be53-8207-46be-acf1-47272779a6ba",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "84bcad60-0d2a-44f8-81d7-1cc6564cecfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8acdbcdd-1760-4170-a51e-bffcc4729f66",
        "cursor": {
          "ref": "81f0031f-9edd-46f8-920a-11d5fb2d3366",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "da0abebf-5e6d-4bed-8254-0b67e9ef02c6"
        },
        "item": {
          "id": "8acdbcdd-1760-4170-a51e-bffcc4729f66",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "626d22eb-5419-4ca1-8946-e3588e78ccb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "575ee38e-c76b-46a4-8219-222a6cec283a",
        "cursor": {
          "ref": "7eaf9154-fd8c-4aeb-9fa7-a9d24665be75",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "0918932f-1b20-42c1-9fe8-fa2c3acfd01d"
        },
        "item": {
          "id": "575ee38e-c76b-46a4-8219-222a6cec283a",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "b41021d1-b82d-4acb-9fc5-6114ad36fa78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3386d9f7-918c-4907-aaed-1b0a9e9c40e7",
        "cursor": {
          "ref": "530fd3d8-b3b6-451a-899c-08d9de1b0234",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "0a395937-e100-4fd6-9490-a512a6ac6174"
        },
        "item": {
          "id": "3386d9f7-918c-4907-aaed-1b0a9e9c40e7",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "fa2dc57b-7da3-4309-a3f8-8f9a01094c23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f29d719-f506-4877-b19a-8ebe0e2e29ed",
        "cursor": {
          "ref": "aa56ddb2-32f9-4ba6-8774-b8944b6c16cb",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "00629384-8a07-4793-8ca0-ee093340935a"
        },
        "item": {
          "id": "0f29d719-f506-4877-b19a-8ebe0e2e29ed",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "ad0ebaa2-267b-49b4-aeeb-5a4670517c42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d74152e7-8d13-41eb-878d-afc438389fca",
        "cursor": {
          "ref": "1ed10ebb-141f-4ba1-9da7-01bffb7d3cae",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "3ccb78ce-a090-4131-9d43-15c15310bd20"
        },
        "item": {
          "id": "d74152e7-8d13-41eb-878d-afc438389fca",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "48ae6917-af0f-4b7a-a4dc-591ef2841aa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8073a0c1-1127-4541-9132-e866c1a8fbb2",
        "cursor": {
          "ref": "e8e62744-af9a-4793-a6e6-2922416e1c47",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "6280b20b-362c-414c-8637-c6cea91d47b2"
        },
        "item": {
          "id": "8073a0c1-1127-4541-9132-e866c1a8fbb2",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "b756f4d6-ef73-42ea-9d11-2d024b0ff37d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd6a2169-423e-4fd9-b8be-982281bbb7a2",
        "cursor": {
          "ref": "cc6fae3a-b00f-4aad-a74a-125a2d2c8246",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "b47ed8ab-4bf4-47c6-b0a8-ccec67b9c90f"
        },
        "item": {
          "id": "bd6a2169-423e-4fd9-b8be-982281bbb7a2",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "03a3193f-2747-4168-99aa-9d6f93209a8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a51e497c-8cb4-43be-9880-c3226fba2fb2",
        "cursor": {
          "ref": "7490023a-dda8-42dc-8324-e8c5a8506c0a",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "966cf26d-00dd-4407-bcac-6d860eb61c4c"
        },
        "item": {
          "id": "a51e497c-8cb4-43be-9880-c3226fba2fb2",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "252b6f99-0285-44bf-9bb8-b0187dc8033e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07d85ff2-5e28-437d-9d15-27d7fff8aabc",
        "cursor": {
          "ref": "2b48b7a5-08e6-40e3-b7a2-40195d5a04ea",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "2eeae689-4b6f-4163-b935-1906415aa723"
        },
        "item": {
          "id": "07d85ff2-5e28-437d-9d15-27d7fff8aabc",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "87f51c35-6a6b-4e88-8f69-e8d79ac06432",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cca7b7f0-e547-47a3-a7aa-e30c08ed2b5c",
        "cursor": {
          "ref": "195c8403-b1a1-4d38-b831-435ec4cad402",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "31f8eef6-62f6-4ef9-96cf-cf88b395127f"
        },
        "item": {
          "id": "cca7b7f0-e547-47a3-a7aa-e30c08ed2b5c",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "779eec7e-f535-42d3-bc90-0ac0f87bc4da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78434319-d29b-464b-9ad6-2f574e53ebf5",
        "cursor": {
          "ref": "a1eb5345-ab84-4981-ad49-330f3367fc9e",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "23446d26-2bd8-4173-9af7-1e193922e66a"
        },
        "item": {
          "id": "78434319-d29b-464b-9ad6-2f574e53ebf5",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "b898865c-c893-4f2a-88ad-f2267ac9519e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 589,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdc74ff5-8639-4ec2-a6bd-be8980eb33c6",
        "cursor": {
          "ref": "9924ce17-5363-4713-b565-3b48ba1b75c5",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "87b19f89-b938-4bfe-90cd-455a6bbf608e"
        },
        "item": {
          "id": "bdc74ff5-8639-4ec2-a6bd-be8980eb33c6",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "75207cc9-b34f-4339-a3b6-e6588e04e8b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fa83a1c-25a2-4b6a-b585-d2e4c9a2c34e",
        "cursor": {
          "ref": "29b6d357-428c-428e-b839-e020004f5c38",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "091c95e5-1573-4271-b188-06a3962e6d96"
        },
        "item": {
          "id": "6fa83a1c-25a2-4b6a-b585-d2e4c9a2c34e",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "296fc8ff-884c-4078-b957-ff65a89de702",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0570208f-59e7-4e00-8e61-5a65cec8c861",
        "cursor": {
          "ref": "f9d71852-1bea-4ec9-9fba-ceda114c7526",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "c47fb78c-6d1a-41ec-a92e-a1923234bda5"
        },
        "item": {
          "id": "0570208f-59e7-4e00-8e61-5a65cec8c861",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "fb192cc2-0f28-46c3-8377-ddc8345224bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1471552-45bf-4208-9972-3e1275cee1e7",
        "cursor": {
          "ref": "43f1645f-3005-4acb-b7b1-6e968eb81598",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "359e20f6-e50b-4080-bc56-39d70d7d0e4c"
        },
        "item": {
          "id": "c1471552-45bf-4208-9972-3e1275cee1e7",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "8fffd622-565b-4fd3-98bd-f1a81983c0a5",
          "status": "Created",
          "code": 201,
          "responseTime": 484,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "fb826ee1-c800-42b7-8530-c0e53827b953",
        "cursor": {
          "ref": "7428c128-7815-4173-ac1b-81c5cc945ddb",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "fa247405-40c8-4fe1-aab9-4a313f3085c0"
        },
        "item": {
          "id": "fb826ee1-c800-42b7-8530-c0e53827b953",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "50bdfebf-adb4-4b07-b00b-2fea65076ffb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "991ccaa1-bcd3-4606-a4ed-ebf3e354982f",
        "cursor": {
          "ref": "7b1eb5a9-cd61-402e-9278-6a4899b69320",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "d56e2679-71bc-4936-9793-5d00a042bb3c"
        },
        "item": {
          "id": "991ccaa1-bcd3-4606-a4ed-ebf3e354982f",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "674d0a56-64df-40cf-a246-b566d5786064",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aff64f2-5432-4361-af0a-328ffd30d09a",
        "cursor": {
          "ref": "d93f622c-eb8e-4120-981e-c72247ffcb45",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "cb71bac7-8d9f-4c33-bb55-9130b1d783fe"
        },
        "item": {
          "id": "3aff64f2-5432-4361-af0a-328ffd30d09a",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "21210f50-6a2d-468b-a086-8aa0e5fe8d1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "800211d6-8766-4a99-a829-577dfdbdb956",
        "cursor": {
          "ref": "c9d0b1e4-017c-4fbe-b10c-74bcaf5962ca",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "29e2cfc5-f820-41e2-859c-5cd7423266de"
        },
        "item": {
          "id": "800211d6-8766-4a99-a829-577dfdbdb956",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "633f4011-5f92-4548-b63f-bee5c3b918b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b64a8a1-a67a-4709-8296-37f394188adf",
        "cursor": {
          "ref": "1519dfd8-96f2-4904-84cd-8153accfdaa8",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "7a8d38be-9a62-4d15-af75-6937b1049b2f"
        },
        "item": {
          "id": "2b64a8a1-a67a-4709-8296-37f394188adf",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "b1b14f3a-96c5-4e25-8efc-085ec193a096",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e8efbfd-3134-479a-a5f1-56d5197d1346",
        "cursor": {
          "ref": "2a22d51d-6072-44b5-9f35-cb14afbd9b0b",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "54af7577-d30b-4815-8810-334a68ef99a4"
        },
        "item": {
          "id": "5e8efbfd-3134-479a-a5f1-56d5197d1346",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "7078c667-18e2-47da-af1c-2693ae3fa3a8",
          "status": "Created",
          "code": 201,
          "responseTime": 801,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "0ccd5990-06f6-4f35-b7f0-43a5a37b9e95",
        "cursor": {
          "ref": "74e73c81-3ca3-48fa-a1e4-aa4663d02d08",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "8fff4378-1a5e-428c-94a8-17682f4bec5f"
        },
        "item": {
          "id": "0ccd5990-06f6-4f35-b7f0-43a5a37b9e95",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "a4f5c53d-6622-4f15-903e-73396edbbf18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0eaa2e0-d801-499f-93f2-1494c09fc600",
        "cursor": {
          "ref": "c88276fa-23c8-4c4d-9fc5-c6b4bdfddee7",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "f137ae2b-198f-4c17-8465-c7b833fddd3c"
        },
        "item": {
          "id": "c0eaa2e0-d801-499f-93f2-1494c09fc600",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "712f6f2e-b17b-478d-9f8e-8d5898024cfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07cba44a-0798-4c67-9d49-0530c58d0319",
        "cursor": {
          "ref": "ad8a0f46-46bf-48e0-b7e7-abf97dd45e94",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "5b2a6758-2a54-459f-9b45-878f6df68852"
        },
        "item": {
          "id": "07cba44a-0798-4c67-9d49-0530c58d0319",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "39668623-d235-4947-b932-1a96c81005d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83cef64b-7ac6-4a3b-91dc-9f892bd46f1c",
        "cursor": {
          "ref": "07b7823f-dfeb-4fd5-a528-d41aeeb41069",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "380ca55f-ed5c-460b-9cb2-b08a7f3b5418"
        },
        "item": {
          "id": "83cef64b-7ac6-4a3b-91dc-9f892bd46f1c",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "88b959b3-5f2d-49ad-a817-db470a027ec2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c50024c4-9b51-41e8-84dc-b6e3ba8d0799",
        "cursor": {
          "ref": "7c38f8e4-3e80-44e2-892e-6d1b1d5378ce",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "ce396a7a-3a4d-483d-a27f-58e35e064642"
        },
        "item": {
          "id": "c50024c4-9b51-41e8-84dc-b6e3ba8d0799",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "a140e71c-2e95-4bc5-ad5e-bb61daad6486",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9ddacea-a591-4383-8a13-2a5d68a5d649",
        "cursor": {
          "ref": "28779c96-24c4-40fb-b78c-d1665189be35",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "20d8239b-a1bb-4f14-ad56-cd7d6389fa21"
        },
        "item": {
          "id": "b9ddacea-a591-4383-8a13-2a5d68a5d649",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "eb637065-1b63-4148-b5be-51525a1fe18c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ce8b954-ea5b-4c5c-9280-355a4cc27954",
        "cursor": {
          "ref": "5ebe115c-12d2-4cc2-909c-7ea4b9629a4d",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "e63d557f-20cb-4b26-8d62-6159a1f69f98"
        },
        "item": {
          "id": "4ce8b954-ea5b-4c5c-9280-355a4cc27954",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "d273a206-3068-4ed0-94c3-a9fb0ab0d55e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9258de6b-8e1d-4a0b-915e-78f3cde4558c",
        "cursor": {
          "ref": "35507e4f-fc6d-43d7-90dc-34afb22923af",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "c14243ea-f312-405f-97f5-be2ce81fada4"
        },
        "item": {
          "id": "9258de6b-8e1d-4a0b-915e-78f3cde4558c",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "01d4d79a-504c-485f-9335-b9ed18bd3b62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10849250-ae92-4227-8e08-31d25f014ec4",
        "cursor": {
          "ref": "51c72b3c-23fb-4330-8780-8d6751355ffa",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "0363588b-9ab7-4bcb-b76a-56136b424edf"
        },
        "item": {
          "id": "10849250-ae92-4227-8e08-31d25f014ec4",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "3fa20ccd-9a0d-4b55-bfc1-43a56f5565ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "f781f171-82f3-49e0-b652-e9d95845456f",
        "cursor": {
          "ref": "08d5ee36-bd15-4084-a648-a57dc79c0ae6",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "aa7da8e3-7924-4808-a3f4-0e7b9e1db568"
        },
        "item": {
          "id": "f781f171-82f3-49e0-b652-e9d95845456f",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "7fd36c2e-70a7-4824-8cb6-c672630d793a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 208,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "1796b7da-a0f3-4c46-88a2-42be7f2c1521",
        "cursor": {
          "ref": "ecc59111-f6bf-4a0f-a142-e835865d892b",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "1bcd8b10-56a7-40d7-8941-0431b0cbe01a"
        },
        "item": {
          "id": "1796b7da-a0f3-4c46-88a2-42be7f2c1521",
          "name": "credentials_issue"
        },
        "response": {
          "id": "e45ef488-73e5-4d89-a824-568b872178f1",
          "status": "Created",
          "code": 201,
          "responseTime": 2372,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4bb5197-ea5c-4eeb-8672-5b463bdb3d02",
        "cursor": {
          "ref": "a83099a0-7a0a-4cdb-9135-ac58e055edc8",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "6dca1350-8200-4d8d-9067-3569145071e9"
        },
        "item": {
          "id": "c4bb5197-ea5c-4eeb-8672-5b463bdb3d02",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "51c60274-0c37-449d-9e2d-6fe37e402a52",
          "status": "Created",
          "code": 201,
          "responseTime": 1098,
          "responseSize": 591
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd2682f5-f966-40e9-8e56-4ff7ee7e543a",
        "cursor": {
          "ref": "32b4132e-c53f-4875-bbc5-61d147a4a080",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "aa384988-1549-41e2-a8b2-219704d5dce1"
        },
        "item": {
          "id": "bd2682f5-f966-40e9-8e56-4ff7ee7e543a",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "c9a62c6f-5cfe-47c1-b87b-f61a781c5f25",
          "status": "Created",
          "code": 201,
          "responseTime": 519,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "97b7649b-3f10-456f-a2d3-3dc118ba2a9b",
        "cursor": {
          "ref": "a877ba61-2683-4094-aa9f-1a93c1e612d3",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "eadd4dd5-38ad-4ee0-afc6-d894fd9e9985"
        },
        "item": {
          "id": "97b7649b-3f10-456f-a2d3-3dc118ba2a9b",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "375aef2a-0405-4744-b402-f61313b1bc28",
          "status": "Created",
          "code": 201,
          "responseTime": 820,
          "responseSize": 560
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "879ad751-e59f-41ec-bd78-bc67d945bc3c",
        "cursor": {
          "ref": "51ee6377-577c-4427-855a-55daeaf9c1ec",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "20421452-3c3e-45ff-b9f7-8f045b51e5dd"
        },
        "item": {
          "id": "879ad751-e59f-41ec-bd78-bc67d945bc3c",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "446add36-8800-4f02-8f2d-9fde29e9abe0",
          "status": "Created",
          "code": 201,
          "responseTime": 895,
          "responseSize": 528
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "73a7251e-01cf-4bfb-9a95-5c1c96f29a86",
        "cursor": {
          "ref": "1fc00516-ca43-4741-adee-29ec6001734f",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "9ecd5f41-b09b-4221-92f0-4c3b127b3c35"
        },
        "item": {
          "id": "73a7251e-01cf-4bfb-9a95-5c1c96f29a86",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "6925ce51-136f-4fd4-9c3e-d9974474ace4",
          "status": "Created",
          "code": 201,
          "responseTime": 712,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ce8aa39-c907-434e-99fd-983fd2414ec9",
        "cursor": {
          "ref": "22d635c3-b71c-4fc4-be12-4cd923fcc1e9",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "5715c5d9-04fe-4682-a07b-ffb6d547bdfd"
        },
        "item": {
          "id": "1ce8aa39-c907-434e-99fd-983fd2414ec9",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "286b3a66-4bc1-4db9-8d1b-a790f7669e8b",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "1ce8aa39-c907-434e-99fd-983fd2414ec9",
        "cursor": {
          "ref": "22d635c3-b71c-4fc4-be12-4cd923fcc1e9",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "5715c5d9-04fe-4682-a07b-ffb6d547bdfd"
        },
        "item": {
          "id": "1ce8aa39-c907-434e-99fd-983fd2414ec9",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "286b3a66-4bc1-4db9-8d1b-a790f7669e8b",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "a1c01308-685d-438c-9d81-f7ca8258c395",
        "cursor": {
          "ref": "679c672a-1d26-41f3-a854-6435963de3fd",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "adb90a99-9a4d-45b9-b428-fe45228c900c"
        },
        "item": {
          "id": "a1c01308-685d-438c-9d81-f7ca8258c395",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "73849533-c4fe-4c8c-b32f-3ecfdfed0fc1",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "fec7645c-7888-4b9e-b8f3-0eac4a502e17",
        "cursor": {
          "ref": "a2b9d01c-01aa-4081-837d-177f2812fbb2",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "fbf3a862-417d-40cd-9749-0263149643ac"
        },
        "item": {
          "id": "fec7645c-7888-4b9e-b8f3-0eac4a502e17",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "c3c7584e-157c-47c5-8e23-2a17976c2369",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "957a4b92-8335-4bfe-bdeb-f6906724fa39",
        "cursor": {
          "ref": "4299e7b3-13f3-4b84-a0db-a97886256c2f",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "1a957b71-2fc2-46a9-8b21-0becffaf70e6"
        },
        "item": {
          "id": "957a4b92-8335-4bfe-bdeb-f6906724fa39",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "1fa5f17b-a5e8-424f-8e20-26ea4c33e7a5",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "183cc66f-d716-4f8a-a5c8-48a67d23ebf1",
        "cursor": {
          "ref": "65ea4a84-b42e-43e2-8acc-6097d0db2598",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "b71b25c5-a814-4931-9754-a02719c76ee5"
        },
        "item": {
          "id": "183cc66f-d716-4f8a-a5c8-48a67d23ebf1",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "ab2d6143-181c-4c6e-bd2e-78de7e558b0d",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "6e9c74ad-14fa-472f-89a1-70ed68e56917",
        "cursor": {
          "ref": "346fc17f-765d-4392-a5c9-9460c7268423",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "e3ccbf31-e94b-4442-be7f-0ea971286a7a"
        },
        "item": {
          "id": "6e9c74ad-14fa-472f-89a1-70ed68e56917",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "46b73e58-7577-4264-ae9b-5c3bb7af12a8",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "dd3b1bde-ee01-4551-96e4-f73b7efdca51",
        "cursor": {
          "ref": "39649663-e539-40d3-9cef-df0b8cf0f2e1",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "271aeb5b-396e-4f6d-86d5-3ab219a28ed6"
        },
        "item": {
          "id": "dd3b1bde-ee01-4551-96e4-f73b7efdca51",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "13dfbcc6-2f17-4960-8fbc-d7486f7fe62a",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "cc4cdeca-7fad-4828-a3e9-d11f948b74c4",
        "cursor": {
          "ref": "28695abe-1938-4e98-9150-d8a8c6ed8c97",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "c5200671-9b1c-473b-aa74-82a788620a0f"
        },
        "item": {
          "id": "cc4cdeca-7fad-4828-a3e9-d11f948b74c4",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "12e0ec7a-8812-4c2f-86ee-29baf67f92a2",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "1d01cac2-2f12-46f5-9151-8c13e66857b2",
        "cursor": {
          "ref": "ae26061b-f99c-4978-8c2c-e3649b724d96",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "6f12a5a2-042d-421b-b529-b1139c3ca070"
        },
        "item": {
          "id": "1d01cac2-2f12-46f5-9151-8c13e66857b2",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f1da8ed4-85d3-4fd6-8540-dbe4a7abf9c1",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "aeb6573d-b9dd-4791-8505-12d1336c81d0",
        "cursor": {
          "ref": "7187b303-fc46-42df-ad1c-3f805582695c",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "914ff111-8111-4f23-af8d-00bcc204cecf"
        },
        "item": {
          "id": "aeb6573d-b9dd-4791-8505-12d1336c81d0",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "e0004c3c-5ba4-4c05-a9b3-2d1d15a28d51",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "4dbc218d-e09e-44d2-afda-18aa58551e52",
        "cursor": {
          "ref": "46fff70c-5047-43e1-a869-0c3c9690ac1f",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "2094c33e-e161-4cd0-9895-65a607c7e43e"
        },
        "item": {
          "id": "4dbc218d-e09e-44d2-afda-18aa58551e52",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "e517de25-972f-46d5-af3d-9f8f658c8ae8",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "83ea7999-6b86-48fb-bb7c-030bbca62577",
        "cursor": {
          "ref": "6a59249d-4be7-4dd9-9089-d03d89237073",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "f06ecd8e-06a4-43e6-ab70-3269e34c023e"
        },
        "item": {
          "id": "83ea7999-6b86-48fb-bb7c-030bbca62577",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "3aa0cb26-ee3a-48ca-8094-cd79b5074b96",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "9c1abb4f-dc4e-49b8-a2b9-be329306ac2e",
        "cursor": {
          "ref": "5e992305-554d-404f-9e4d-35eea65ddfce",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "b873fa9b-6b27-4c3b-80e5-183e676a3723"
        },
        "item": {
          "id": "9c1abb4f-dc4e-49b8-a2b9-be329306ac2e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "60282331-cb8d-4439-a099-08147e2cbc91",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "ba1bcf3c-a038-4536-865a-d4c1a4dde33a",
        "cursor": {
          "ref": "b07aaa38-bc7f-4bd4-9ba8-300c40b531e2",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "745e0b8f-37b7-4385-b9f7-88d4d5b9c83e"
        },
        "item": {
          "id": "ba1bcf3c-a038-4536-865a-d4c1a4dde33a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "60d05837-c2cc-48d5-bc59-e67a98682f99",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "9f6d0cd7-6da4-4a59-9c93-907742bef707",
        "cursor": {
          "ref": "6488d884-cc17-45ad-8a45-0455849cdf03",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "ac6c69af-3fa9-4495-b606-716fc40acc0c"
        },
        "item": {
          "id": "9f6d0cd7-6da4-4a59-9c93-907742bef707",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "c6b44ad7-9c9b-4a09-a58e-20eaef9a854a",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "6e48d1f8-7ea3-40f0-bf15-c08b4ba3d862",
        "cursor": {
          "ref": "3d9c5a14-dea5-4a02-9c97-cb5b6f8a3bb9",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "83e65a07-1e6c-4981-b9be-eaa0c23c2b2c"
        },
        "item": {
          "id": "6e48d1f8-7ea3-40f0-bf15-c08b4ba3d862",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "25326135-6d74-4a9b-81df-63d63b41a7b0",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "568191bb-0245-4ddf-978b-377803f4853f",
        "cursor": {
          "ref": "28add8bc-a746-4006-a17e-07be5c82942c",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "197a9c69-39a5-407f-91ba-a5330ae4cecd"
        },
        "item": {
          "id": "568191bb-0245-4ddf-978b-377803f4853f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "af421296-d14a-4f8c-a0c9-d05ae4d7632e",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "5011cc05-5112-4abf-9657-f9fbcd621d16",
        "cursor": {
          "ref": "701b7fd0-3da5-4f6b-beea-e7fd81c2a311",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "4e2938ba-fe26-43b1-8ba3-da87e7e0211f"
        },
        "item": {
          "id": "5011cc05-5112-4abf-9657-f9fbcd621d16",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "2ba86a49-9702-49c1-8360-7815a4b8b7cf",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "206da2e7-f0dc-4fbe-b127-87663037d536",
        "cursor": {
          "ref": "6f1ec8b0-4ea2-4498-b51e-13455cb13dcf",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "1e0ef9d3-a1fc-41c6-afef-70246399b5c0"
        },
        "item": {
          "id": "206da2e7-f0dc-4fbe-b127-87663037d536",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "f2613a8d-a968-4120-968c-74b3973044f8",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "183536f9-17fb-4936-b0c9-cce8598deeac",
        "cursor": {
          "ref": "84145627-dc8a-4b94-b326-f9a3e374fbba",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "6730d722-78c5-4a49-9dff-afb9b15417c0"
        },
        "item": {
          "id": "183536f9-17fb-4936-b0c9-cce8598deeac",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "7cef56e2-0f3e-47c9-ab19-e6630676b831",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "6531761b-01ec-4a00-8961-9583991c2ddb",
        "cursor": {
          "ref": "8ca8558a-787f-4f77-8cd9-92f99663bb7d",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "bff6476d-7eba-4416-ac1c-5a55eca5ebe6"
        },
        "item": {
          "id": "6531761b-01ec-4a00-8961-9583991c2ddb",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "11ba974c-bb8c-4950-9e34-d90535df13fe",
          "status": "OK",
          "code": 200,
          "responseTime": 55,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "d5880897-982f-4b89-a21c-7dc4412c251c",
        "cursor": {
          "ref": "31b63f0b-a7b2-4023-8951-290cc1e80331",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "f8581cae-02d0-48f0-b06f-9a156c9a9977"
        },
        "item": {
          "id": "d5880897-982f-4b89-a21c-7dc4412c251c",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "ee35ed05-c61a-4b2a-b7de-96c024c9845b",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "2cf3dfbf-0b33-4590-8cef-87bd224fe243",
        "cursor": {
          "ref": "336cc08d-6802-4b9a-9680-bcf0ad3fcb59",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "eeb2e018-80e6-4cf7-874c-55c59a1fd827"
        },
        "item": {
          "id": "2cf3dfbf-0b33-4590-8cef-87bd224fe243",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "d30ff699-1411-47de-8212-01fb93855f3b",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "fe6dc0cb-e534-454b-8b2f-9c17d71da540",
        "cursor": {
          "ref": "e3fc755d-3d21-4a30-bba6-f65fc632b452",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "03051f2e-f2b3-49af-8b55-db1c5dbcbbce"
        },
        "item": {
          "id": "fe6dc0cb-e534-454b-8b2f-9c17d71da540",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "e8af83f6-ab30-43f8-8c0c-2806744f337c",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "3eeefda4-410c-4d88-b19f-752ffba60e31",
        "cursor": {
          "ref": "049ff8cf-aeeb-4a1d-81b0-82cc993683c1",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "acc7b7cd-4245-4c6e-98f4-b6daf255027f"
        },
        "item": {
          "id": "3eeefda4-410c-4d88-b19f-752ffba60e31",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "de3a8d45-e82d-410b-a53a-d27e6a612e06",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "c5ab0bc3-db7f-4224-bde2-0387b4505efc",
        "cursor": {
          "ref": "43a8ce52-b4bd-4fe8-b35f-1611e5c44523",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "225302f3-6a61-4b6e-8665-4aa42086ae69"
        },
        "item": {
          "id": "c5ab0bc3-db7f-4224-bde2-0387b4505efc",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "ee1a8154-fb3e-405e-b7d9-c0f370ce000b",
          "status": "OK",
          "code": 200,
          "responseTime": 103,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "243de0d8-a015-494e-a567-03e6ff08448e",
        "cursor": {
          "ref": "7a9c263a-0985-4436-91a1-b11227649de4",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "59fd5a26-7a97-48f5-8bc9-4690bafe436a"
        },
        "item": {
          "id": "243de0d8-a015-494e-a567-03e6ff08448e",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "7e5e0904-0a9d-443a-8075-7b8dd08e3c30",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "d811189c-c6cf-4612-806a-0f0c03b38cd6",
        "cursor": {
          "ref": "f3242659-cf95-4a88-be51-62787d0be7f4",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "625152b2-ce19-48d1-9bf3-cbecde97cda1"
        },
        "item": {
          "id": "d811189c-c6cf-4612-806a-0f0c03b38cd6",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "36cfdb1f-a95a-442f-b5dd-e20a63c411b1",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "e5f533d5-9b0b-4d8a-9e55-f792685c1c79",
        "cursor": {
          "ref": "3b0e4585-5e58-45f2-b525-83cc3796358e",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "eaf34f2b-29f2-4a02-94af-139db0dfbbad"
        },
        "item": {
          "id": "e5f533d5-9b0b-4d8a-9e55-f792685c1c79",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "2ca80a1b-5fd1-4017-b7b8-fb56e13fa998",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "69a0a0b4-0195-4025-9269-30b9f1f45252",
        "cursor": {
          "ref": "4985cec6-addd-408b-9e7f-daca47969c74",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "e05c282b-aec9-4e5b-b4e1-2473c955c930"
        },
        "item": {
          "id": "69a0a0b4-0195-4025-9269-30b9f1f45252",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "9f4b4327-5f19-4627-a1d3-b0613fe5fadf",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "72737868-2f49-4406-84d7-aca21f336f18",
        "cursor": {
          "ref": "1587fa98-0c36-4dd4-857d-71c59c5e8ff2",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "ea740b03-ce05-477f-a400-8d8b26d3f779"
        },
        "item": {
          "id": "72737868-2f49-4406-84d7-aca21f336f18",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "6e0c3567-39d5-4f85-8251-f0c22c0ec185",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "f871ba54-dee3-4754-b356-d7bec24c0aa4",
        "cursor": {
          "ref": "5be8bc30-24ef-4c65-b7b1-182479b20036",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "70d276a3-8e90-4806-80f4-908cded0f70e"
        },
        "item": {
          "id": "f871ba54-dee3-4754-b356-d7bec24c0aa4",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "df361843-f863-488e-8831-796b4afbe019",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "c9bb99f3-a903-4f6a-a388-65359c7c4b25",
        "cursor": {
          "ref": "8e44b0a2-5c98-4786-9c93-8545ee011806",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "24fdd5c7-74a7-4d7d-81ab-2624b845ad47"
        },
        "item": {
          "id": "c9bb99f3-a903-4f6a-a388-65359c7c4b25",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "323d5b55-5199-43e4-97c8-24dbada5395c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8cd41e0-42ad-4168-9f63-ce29800c6aa0",
        "cursor": {
          "ref": "486d9d71-a763-4370-a3ca-b354d5674076",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "b5d88ee1-d6d3-49f8-833f-5dda53c253f3"
        },
        "item": {
          "id": "f8cd41e0-42ad-4168-9f63-ce29800c6aa0",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "5fad45eb-70ca-4e57-98af-3c8361f3e125",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 43,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c41ef88b-bc0d-4a12-b6df-8665edc27bc9",
        "cursor": {
          "ref": "ae1fec34-beeb-4ddc-a08c-aa5c6c79abb2",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "c756fba5-d466-4161-9bb0-c168dd985eed"
        },
        "item": {
          "id": "c41ef88b-bc0d-4a12-b6df-8665edc27bc9",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "bcd23c73-652c-4e95-b9ea-9c969845d4b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c41ef88b-bc0d-4a12-b6df-8665edc27bc9",
        "cursor": {
          "ref": "ae1fec34-beeb-4ddc-a08c-aa5c6c79abb2",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "c756fba5-d466-4161-9bb0-c168dd985eed"
        },
        "item": {
          "id": "c41ef88b-bc0d-4a12-b6df-8665edc27bc9",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "bcd23c73-652c-4e95-b9ea-9c969845d4b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feb5540a-36ff-4a7e-b9b8-f56643ad40a2",
        "cursor": {
          "ref": "f625faa4-8c57-4be6-abd6-d3ec141b0e59",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "f0462e75-13ed-4e65-b9c8-80bf1767692e"
        },
        "item": {
          "id": "feb5540a-36ff-4a7e-b9b8-f56643ad40a2",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "d96699e6-810f-4d88-8df2-dc8a0c292342",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c2687c8-160d-4835-844a-6288da495ccd",
        "cursor": {
          "ref": "f934c0b3-5200-4693-83a7-3d1401f3a55c",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "016946d9-812b-4e5e-ab18-f9f206a28a27"
        },
        "item": {
          "id": "7c2687c8-160d-4835-844a-6288da495ccd",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "54d151f8-77dd-488f-afc9-c2e154df1850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44d64f36-8264-4a69-ac05-92c89edcb06c",
        "cursor": {
          "ref": "c84c14fc-491c-447e-94e1-4529a8d17041",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "310eb5eb-864b-4edd-9bdd-64376d772edc"
        },
        "item": {
          "id": "44d64f36-8264-4a69-ac05-92c89edcb06c",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "e1451727-6a2f-4d30-ba5f-72ee1ddb77fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b22ebc20-7a1e-46b1-8fa9-cbb471a3678d",
        "cursor": {
          "ref": "6c63d6ba-cea1-494e-b025-55ff2dd843e4",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "e3e4e0cd-e750-40ad-bee6-ee7c1e07d1aa"
        },
        "item": {
          "id": "b22ebc20-7a1e-46b1-8fa9-cbb471a3678d",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "d9cfc62d-4f83-411a-a1bf-59412d1d07a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1127644b-e296-45dd-8557-cf8f12d9b637",
        "cursor": {
          "ref": "8d89d906-eca8-4eeb-80b3-9b77a27ff7ff",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "2c079364-0ad5-44a9-9982-abe2325b6311"
        },
        "item": {
          "id": "1127644b-e296-45dd-8557-cf8f12d9b637",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "d9d2a284-73bc-457d-9414-b05315d81ddf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50cc992c-825f-4295-8f1d-65e1b90e42f7",
        "cursor": {
          "ref": "e2ecdc99-85b4-4fc8-904d-27684d8bf169",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "172ce6c5-69ea-4f55-a42a-f3b5c3c8e54a"
        },
        "item": {
          "id": "50cc992c-825f-4295-8f1d-65e1b90e42f7",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "73502599-c0d4-466b-a393-d269aa798700",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1206,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "543dfbfe-36e1-476f-8a30-1bf6c134f16d",
        "cursor": {
          "ref": "50dfa77b-8872-4015-83a0-7c87e8e383de",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "506a1cc4-8980-4b63-964d-dffb5cb69986"
        },
        "item": {
          "id": "543dfbfe-36e1-476f-8a30-1bf6c134f16d",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "6d3b0812-b5c0-43eb-9405-314b89f99e60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a813dc99-f923-49d7-977c-cc2b2c0be1f2",
        "cursor": {
          "ref": "0671f404-aec4-4061-9281-0affc5807ba5",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "684b4f84-1d50-44bb-aefc-15a7b40f21dd"
        },
        "item": {
          "id": "a813dc99-f923-49d7-977c-cc2b2c0be1f2",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "1932adaf-57fa-4aa3-add2-dd6ee1920247",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f7f975d-3e99-48ca-970b-6cdad063ded2",
        "cursor": {
          "ref": "b07921fe-3146-4bf9-9b81-866c75f44e06",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "b27dc94f-d6d9-4957-9883-061544d9797b"
        },
        "item": {
          "id": "2f7f975d-3e99-48ca-970b-6cdad063ded2",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "ee97aa1f-ace8-4fe7-9559-c73878f2ae75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c389617-051b-42cb-84e6-406c056a301e",
        "cursor": {
          "ref": "87b772cf-6457-4093-a2a8-86547945990d",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "6d85c642-acc4-461b-987f-f0efec22ea66"
        },
        "item": {
          "id": "4c389617-051b-42cb-84e6-406c056a301e",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "16734f21-cc57-43a5-a9e3-75b96c2e9ffe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce6f6cd9-427d-431c-89e4-d934d6d69222",
        "cursor": {
          "ref": "aed8bc2c-ba78-4886-8503-d22f83e19602",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "1ad632a0-33d2-48d1-8182-d0ded8b46194"
        },
        "item": {
          "id": "ce6f6cd9-427d-431c-89e4-d934d6d69222",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "89691886-b147-4e12-aecd-b1dc158f4473",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b6e92a8-0e48-4f8f-912e-ec99e1947515",
        "cursor": {
          "ref": "dade4e65-e389-4664-9011-bf851f1fe16f",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "df5c967c-b91a-46f3-9f94-d4bf4b3e8bd1"
        },
        "item": {
          "id": "4b6e92a8-0e48-4f8f-912e-ec99e1947515",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "342df3be-193b-4f96-9315-8c69ec2abafc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 281,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c94c7aca-eb82-4e7e-92a2-84644afd6079",
        "cursor": {
          "ref": "750af243-7846-4a70-a1ff-7213506eab59",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "e4033a61-63f3-409c-9989-ff2a32452e3e"
        },
        "item": {
          "id": "c94c7aca-eb82-4e7e-92a2-84644afd6079",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "3a621b84-4cd2-4e6b-8f72-71113f37e460",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03dc51ef-eb1d-481d-8597-2abee3e37fba",
        "cursor": {
          "ref": "cdb4a55c-3c0a-442e-a5e2-ccb5e7565496",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "66edee85-0ed0-491b-932f-ed847ab455a8"
        },
        "item": {
          "id": "03dc51ef-eb1d-481d-8597-2abee3e37fba",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "91153e72-16fb-430b-b53e-60a54c47351e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb8d14e9-722d-4e2e-a4ff-cd64acfd078d",
        "cursor": {
          "ref": "84755709-4832-49f7-91e9-0e2af481e468",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "d97f1374-c7e2-426f-b946-14ef6d5dce6c"
        },
        "item": {
          "id": "cb8d14e9-722d-4e2e-a4ff-cd64acfd078d",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "5fa9b739-1a75-40b9-bf9a-2f706885f5ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc367d0a-2f8c-4c46-be73-7bf2e9807c10",
        "cursor": {
          "ref": "e41b35a0-85e7-4649-8dde-3bf23c761efb",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "913a1acb-f077-46b6-99fd-d00c500b0710"
        },
        "item": {
          "id": "bc367d0a-2f8c-4c46-be73-7bf2e9807c10",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "b876de8b-e953-48e2-8462-78d6bcf73f48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "019edbe4-6302-40ca-8978-f7e8eb13f40e",
        "cursor": {
          "ref": "80092b4b-34a8-44fc-8840-baa76b69db60",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "80b412f1-eb53-40b1-a870-5bedcf4db91a"
        },
        "item": {
          "id": "019edbe4-6302-40ca-8978-f7e8eb13f40e",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "1eaab863-1dcd-4e16-a769-eb3a6c7549ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2927,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbec64c4-1019-4b41-87d7-6b3a0001b9b9",
        "cursor": {
          "ref": "122acaaa-31e2-4e1d-a4b7-573ade8630ba",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "548861a8-3571-4ffa-a802-3c10e3faae63"
        },
        "item": {
          "id": "dbec64c4-1019-4b41-87d7-6b3a0001b9b9",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "b1728a86-232e-4ced-952c-acde7f2d122c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 757,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d447a26d-4d8d-4b25-ae2c-28fc0ba39ff7",
        "cursor": {
          "ref": "eb55f8b8-9735-4457-8826-02788bb0b59c",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "cebf2307-873e-4ed4-bba8-f8b71a9a77fe"
        },
        "item": {
          "id": "d447a26d-4d8d-4b25-ae2c-28fc0ba39ff7",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "af941734-cd68-4a1b-b0c6-f97a9c3f9765",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 687,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2e36718-c978-4dcd-90c3-ec432183ad7a",
        "cursor": {
          "ref": "9475c353-ec74-431c-84e4-c06426838ea0",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "a841ed6f-89cf-40a9-8d10-5848bd4251b8"
        },
        "item": {
          "id": "a2e36718-c978-4dcd-90c3-ec432183ad7a",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "f3c97a9a-d510-45bf-a0be-26643f87a11b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 521,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99ec68a3-4333-464c-a276-d5fd679c3170",
        "cursor": {
          "ref": "9dbacd27-4083-4adf-b378-b8d62b1fd349",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "beeb2284-343f-4414-94f8-fdf5b30a8861"
        },
        "item": {
          "id": "99ec68a3-4333-464c-a276-d5fd679c3170",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "9eef1898-01f7-43c5-9893-5ae714c93d46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 363,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61b1643e-9155-4574-b0b3-902c0b6c02b2",
        "cursor": {
          "ref": "59eed404-aec2-4fab-b4e1-83c633d66ff2",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "7cb50b23-4690-49df-a97f-b85abaf77b54"
        },
        "item": {
          "id": "61b1643e-9155-4574-b0b3-902c0b6c02b2",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "4b455f3d-6198-43be-b0a7-eef51085147c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 339,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5bd0788-e4a6-48b3-835c-3a43792074c9",
        "cursor": {
          "ref": "21a57ace-d023-4dd2-8b18-2743095c03e3",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "7faffad6-6159-4d09-a232-3f1c85e20476"
        },
        "item": {
          "id": "b5bd0788-e4a6-48b3-835c-3a43792074c9",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "1ee2c8ea-1664-44f0-99b0-68035228c13f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f886b64-4f71-40b8-9c3f-a6a31e0d892d",
        "cursor": {
          "ref": "59c7de16-11f9-4e30-aa28-2465788b8410",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "44524125-8ced-4150-bece-dd6c3bdf3280"
        },
        "item": {
          "id": "0f886b64-4f71-40b8-9c3f-a6a31e0d892d",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "8413437a-5308-4233-9d23-158b3c15cca9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c60b3c3-29c8-4b63-b15e-34efac1c6672",
        "cursor": {
          "ref": "8d5275e9-d887-4915-9651-bef1d89284bd",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "2e0c46d9-657f-4a81-91e9-d93d98f85475"
        },
        "item": {
          "id": "9c60b3c3-29c8-4b63-b15e-34efac1c6672",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "0f1afb9d-4850-40a3-90fc-f5b885249eb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 542,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca3e925c-192d-42a0-896a-df4eed2d0e77",
        "cursor": {
          "ref": "388900d4-330a-439f-b716-13587545aa20",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "7e07b343-a268-4bbd-8a3b-c56bbb6d3f4b"
        },
        "item": {
          "id": "ca3e925c-192d-42a0-896a-df4eed2d0e77",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "13f1c2a6-0c84-4f5b-846f-73ade0bf24b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3b10de0-9ddf-4b3f-802d-db9660dfc61b",
        "cursor": {
          "ref": "a2c6682c-bf3e-4996-8c3a-23bc0e79c064",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "b0bfd9f8-2e34-4e5a-9a96-e7a935d8b5f7"
        },
        "item": {
          "id": "a3b10de0-9ddf-4b3f-802d-db9660dfc61b",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "820bb9e7-412e-422e-ba57-6c17ecd408b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55fc6815-9178-4c6d-ae3e-60e0462412c2",
        "cursor": {
          "ref": "5b2af1bd-7c18-4fd2-99be-1c9556ba197e",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "ad014552-0ea1-494e-8588-0c27daf74731"
        },
        "item": {
          "id": "55fc6815-9178-4c6d-ae3e-60e0462412c2",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "9c490232-272d-40e3-b4da-985d1cac315d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 905,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20f126e2-ad63-42c0-94c4-4bcc7f08e7f7",
        "cursor": {
          "ref": "e9e7545a-6c46-41ce-9db8-3916e40358db",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "cdfb6acc-3f94-4cd9-953d-e38e51df1b86"
        },
        "item": {
          "id": "20f126e2-ad63-42c0-94c4-4bcc7f08e7f7",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "0f2aede1-8979-4824-a4d9-5d220e9dbafd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "625642a1-da8f-4d92-96f0-26ace71f8712",
        "cursor": {
          "ref": "8df5e6e4-d809-4eb2-a175-3be6bb1efbd0",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "8afc1ac0-b5bf-43b2-8e98-e7bbc8ed6c1e"
        },
        "item": {
          "id": "625642a1-da8f-4d92-96f0-26ace71f8712",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "72e86317-17ea-4440-9658-c2d73cae1ea8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "966e1653-ab3a-41f8-9875-416651df7541",
        "cursor": {
          "ref": "b1c9bbd6-0b03-47e2-ad4e-9b15dc5d9df3",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "531b5ae0-01c4-43fb-9055-6c7f2dc29484"
        },
        "item": {
          "id": "966e1653-ab3a-41f8-9875-416651df7541",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "844ed150-8aeb-4f99-8397-9bc3585954f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "570951d4-d180-4d26-9cfc-f16b6dc612fb",
        "cursor": {
          "ref": "1271d023-99df-47b8-802c-b0e30c23436e",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "f4710ff3-5ed7-426e-a392-4d109e7bd9f5"
        },
        "item": {
          "id": "570951d4-d180-4d26-9cfc-f16b6dc612fb",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "13b48aeb-a7ba-48ca-9cda-cd74ea718756",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 345,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9b90e7a-3ff2-48c1-8e7e-144fb0df867a",
        "cursor": {
          "ref": "1b586ae4-689d-4437-9277-847f0cdd55dc",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "0b43f40e-cf92-4766-b117-e2014dabbf41"
        },
        "item": {
          "id": "a9b90e7a-3ff2-48c1-8e7e-144fb0df867a",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "82207d9a-762c-4741-99e2-d5c553c7d7cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7d0eb2b-7680-44ca-9197-2788a886174f",
        "cursor": {
          "ref": "49e059cb-068f-49c1-a37a-f186b71e7061",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "291a01a9-aafc-4228-ab07-d563ce4065b6"
        },
        "item": {
          "id": "a7d0eb2b-7680-44ca-9197-2788a886174f",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "d9542237-d910-4c3d-bc32-5af8373a47ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 488,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85b25f12-2a75-42f2-9eb2-5540e9925f66",
        "cursor": {
          "ref": "b46086d3-a45a-4c1c-b36d-819b0301a878",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "dd843052-25d5-4f0c-8890-83b7844230bd"
        },
        "item": {
          "id": "85b25f12-2a75-42f2-9eb2-5540e9925f66",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "3d8237b1-8cac-4a84-987b-4a8875422e7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 983,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3668513-afff-43f9-b3db-af4507d54d9d",
        "cursor": {
          "ref": "4e2166ec-f031-4810-9421-45ac64c7537d",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "cab1f754-6678-4468-b1a9-314517608f0c"
        },
        "item": {
          "id": "e3668513-afff-43f9-b3db-af4507d54d9d",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "9bdbed51-8616-4e52-a605-fe5de2ee2602",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30419,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d09309f1-b8ce-4f02-b8a4-2e5c69ef6831",
        "cursor": {
          "ref": "0791840e-6747-4f03-ad3e-2de86293919d",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "a42af630-0701-4a97-9434-738b2c7a7c17"
        },
        "item": {
          "id": "d09309f1-b8ce-4f02-b8a4-2e5c69ef6831",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "9d99bd62-c000-43ba-92f8-151b8704c58a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1674,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "035f7023-8e26-479e-83ef-37b4cdffa1b3",
        "cursor": {
          "ref": "f39f4308-383a-4b8e-929b-4bc9c761f5f8",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "ed4dc856-24cd-44c0-9ae6-73f50eabcfb4"
        },
        "item": {
          "id": "035f7023-8e26-479e-83ef-37b4cdffa1b3",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "f4398747-90f6-413e-98ed-8aa44bcda9b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 344,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3e01023-da35-4d44-b9af-c7ae8e466852",
        "cursor": {
          "ref": "72b65e67-0a16-4c19-836f-8ebd847dae6c",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "d811d97b-70d0-440c-a932-c82c45828218"
        },
        "item": {
          "id": "f3e01023-da35-4d44-b9af-c7ae8e466852",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "598d390e-e6bd-4f98-92e2-6e8b050bf97d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 514,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ace45330-4370-48ac-afe9-8abfc0d05462",
        "cursor": {
          "ref": "51f94c1a-bd23-44f5-87f8-953d5866a935",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "2827c50d-fcf3-4371-a67f-e4496ddf5379"
        },
        "item": {
          "id": "ace45330-4370-48ac-afe9-8abfc0d05462",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "71f13834-0ba3-4663-b643-e28c755e8272",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 381,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3932bed6-ff6e-4398-ba8e-2a2884e55048",
        "cursor": {
          "ref": "beb8b7e6-d080-4717-aeda-34de1c608a78",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "f402cc80-0e30-4330-b51a-efb6684a227d"
        },
        "item": {
          "id": "3932bed6-ff6e-4398-ba8e-2a2884e55048",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "c5c43eff-af8f-44c1-bec3-777a70d2a43c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 263,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53ae5611-f0b3-4f38-96a7-bd88ff22b7ee",
        "cursor": {
          "ref": "1f916967-474b-45d3-8055-2b394d7a5313",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "3b48d185-6a6a-4e47-8485-35bc8c196395"
        },
        "item": {
          "id": "53ae5611-f0b3-4f38-96a7-bd88ff22b7ee",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "4be3ca71-acf2-4d03-aab5-e480ff95d1d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 507,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ca3c58e-84ec-4ca9-84eb-d87ac17cdc09",
        "cursor": {
          "ref": "94a97e74-c8e7-42da-8888-2239379ce65e",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "5529355a-a47b-44cd-aeab-9285a8741021"
        },
        "item": {
          "id": "5ca3c58e-84ec-4ca9-84eb-d87ac17cdc09",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "e2d25170-284f-41ee-af93-21d1fbab3bf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 638,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a75186a3-dcad-4343-900d-390baa806f3d",
        "cursor": {
          "ref": "4a0386f5-5c78-4cb0-8f79-08458c63d0a2",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "135db2e0-a73d-4b7a-9f6d-33c16a133da4"
        },
        "item": {
          "id": "a75186a3-dcad-4343-900d-390baa806f3d",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "3ec572f2-6df9-4e27-acc5-e1f7441fe240",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 318,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1b9190e-cd54-4c5d-b8ff-dff8afe46e51",
        "cursor": {
          "ref": "21df8ed2-44e7-4ecf-b610-38d0f24647a6",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "ad414f8b-f110-495e-822b-7bfb5b0d2b8a"
        },
        "item": {
          "id": "f1b9190e-cd54-4c5d-b8ff-dff8afe46e51",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "87c9fb4b-30ea-4103-90ea-17c21b2c3fb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 254,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ae0fa96-0ae3-4394-aefc-e66b743d501e",
        "cursor": {
          "ref": "32ac922b-62c2-4ef2-b202-3e489b2ff681",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "c2090fcb-ae34-4e5e-86a7-8d593b38e574"
        },
        "item": {
          "id": "9ae0fa96-0ae3-4394-aefc-e66b743d501e",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "faf3bfd2-8ff4-4aff-8aa4-f5ff5d7eaf32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 291,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04f098fd-2642-43cc-9eef-45e28638aa80",
        "cursor": {
          "ref": "a27beeff-2f06-4da6-8c67-a68f7f04d3e0",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "d7f520a1-8878-4e7b-94a5-c140675820be"
        },
        "item": {
          "id": "04f098fd-2642-43cc-9eef-45e28638aa80",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "c7619565-e69f-4e09-a0a9-8aa8b265a554",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 352,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb1364a2-e0a2-434e-b756-526780a5dffe",
        "cursor": {
          "ref": "fb69a8e7-c2ee-40ae-ac02-63956691591f",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "c8b77521-6875-4afa-a796-e080bce613af"
        },
        "item": {
          "id": "cb1364a2-e0a2-434e-b756-526780a5dffe",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "1e03f4a2-280d-4dba-8797-e2d7c07a61a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 370,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4f36245-b1f8-4b0f-a911-4e582c105e28",
        "cursor": {
          "ref": "090f17c9-560a-426a-ab9e-e1be586785c1",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "141f24ad-3417-4662-b7bc-42a10f0db64b"
        },
        "item": {
          "id": "c4f36245-b1f8-4b0f-a911-4e582c105e28",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "dda776c2-d42e-45df-9330-7bb68acde532",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 575,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06da2620-1c65-4dd5-8ff4-3636d49a9e8d",
        "cursor": {
          "ref": "6042a4c4-d679-415d-a689-9ffaa9e617a2",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "c687b0f0-87e8-4ee2-9e56-2205b0401470"
        },
        "item": {
          "id": "06da2620-1c65-4dd5-8ff4-3636d49a9e8d",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "d7d55f78-b7c5-4a6d-a8a6-069f56e1c5c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 629,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2d38f5d-a221-4303-ac00-e13500bb9784",
        "cursor": {
          "ref": "a7bc29f4-4803-446e-8394-68e2b481bd71",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "d7be0aa5-6c67-4495-abb6-5080272bb279"
        },
        "item": {
          "id": "b2d38f5d-a221-4303-ac00-e13500bb9784",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "d9b6655d-4296-400d-9b36-b7ea4ad7166d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1224,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6397ef6-0fec-4a37-a0ba-83d9dd6c85aa",
        "cursor": {
          "ref": "0e8e46d6-790f-4bba-aa70-a67f1d6b9488",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "edffea9b-c1ad-4eed-afb2-afa2b062e3f9"
        },
        "item": {
          "id": "e6397ef6-0fec-4a37-a0ba-83d9dd6c85aa",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "a8e6c2b5-ebe0-475f-8e3f-2758bc8f3242",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 422,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d30ec523-c840-4bf5-86d8-8937084df234",
        "cursor": {
          "ref": "7efffc8a-49e7-4de7-981d-b3f4433b40e2",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "f4c1094c-f5ab-4118-b7a5-99d169ac1f78"
        },
        "item": {
          "id": "d30ec523-c840-4bf5-86d8-8937084df234",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "e3adba68-d0be-473c-8f68-e96a6b05f579",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 199,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bd195d0-d8a9-4e04-b6de-6152bce1bd2e",
        "cursor": {
          "ref": "7b557a19-447d-42e6-8461-2d9a87dac6aa",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "66406a4b-4b75-42d7-bb63-aa0fea74e9c5"
        },
        "item": {
          "id": "5bd195d0-d8a9-4e04-b6de-6152bce1bd2e",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "7654ee35-7901-4217-9db8-b69a0c1d1c74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "627e25b7-8cb3-487a-99a4-d2811327c5b0",
        "cursor": {
          "ref": "2ea837b4-afed-4fe9-8671-f0dfc59c90ef",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "fd16093e-4ba6-4ae7-bab9-7f532e09ea9c"
        },
        "item": {
          "id": "627e25b7-8cb3-487a-99a4-d2811327c5b0",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "ce5f715a-2feb-49d8-adef-aeeae674518e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a0dbc94-2a30-4e48-bdf6-bd8b60d65c0a",
        "cursor": {
          "ref": "438b7ca3-af0b-42bc-9e56-bf246ef407e7",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "4d2ffbd2-3892-4609-b757-31be143f1d90"
        },
        "item": {
          "id": "8a0dbc94-2a30-4e48-bdf6-bd8b60d65c0a",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "f426d677-4b7a-4ba6-9438-f970fff233cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1475,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ead1b08-fc9a-4dc3-a298-2ab43c9d63f5",
        "cursor": {
          "ref": "bf0b40c4-adb5-4058-8bed-f9fdd2691dcc",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "c1226229-c2a8-464d-9f0d-20194c4f795f"
        },
        "item": {
          "id": "3ead1b08-fc9a-4dc3-a298-2ab43c9d63f5",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "44bbfde3-4695-4466-b691-c6aa40af07a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 392,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ff8d04d-2ef4-45c3-a43e-d94be7502708",
        "cursor": {
          "ref": "231a7f71-66e5-4ccc-ac1c-c4044c936fec",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "aa9dad2b-6da1-42fa-825f-1849822b4a5f"
        },
        "item": {
          "id": "5ff8d04d-2ef4-45c3-a43e-d94be7502708",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "5e94591e-b1a6-4f24-a0a3-1d2c29033916",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d357fdc-719e-4ec0-9d4a-9b67cc865a07",
        "cursor": {
          "ref": "9c033084-278b-4c05-906b-e1c8908f3899",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "33045729-3510-4ffb-b622-a4e576deee12"
        },
        "item": {
          "id": "2d357fdc-719e-4ec0-9d4a-9b67cc865a07",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "22ca8605-f3b4-4227-9b58-6b4c21a4a0ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 435,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f6df5dd-cc22-4436-baa9-3eddc9e64b83",
        "cursor": {
          "ref": "6829c639-4ddf-4387-a7ab-df7975f7a1bf",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "f86289b5-7177-4297-a981-bcf076c8fe4c"
        },
        "item": {
          "id": "8f6df5dd-cc22-4436-baa9-3eddc9e64b83",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "ab46b445-3d86-4292-9e11-205e152026ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb699661-92ce-472e-b71d-7ac25c9b595f",
        "cursor": {
          "ref": "16180696-6ed8-4080-a548-1bdffc08ae6e",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "608ada63-b7ce-419f-810e-d0ef96c2fcce"
        },
        "item": {
          "id": "eb699661-92ce-472e-b71d-7ac25c9b595f",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "f99bab59-ed4c-415d-b7bb-821651148205",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1297,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bcb83e4-e89e-497b-a3ca-7da070a09b76",
        "cursor": {
          "ref": "eab77733-513e-42f1-8b9a-097219225cfb",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "ead6245b-3979-47bc-9244-745b4d0b14bd"
        },
        "item": {
          "id": "7bcb83e4-e89e-497b-a3ca-7da070a09b76",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "2f47b0b2-8a99-4419-a540-f1fe4104f4c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 166,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6609d4c-a531-4a2b-8817-22636d53e28b",
        "cursor": {
          "ref": "f336e1f2-5b3f-40dd-8cbf-26b449c7b531",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "12e27a39-f6e1-43cb-90f6-3bfc74773d77"
        },
        "item": {
          "id": "d6609d4c-a531-4a2b-8817-22636d53e28b",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "a8fe84a3-4d16-478d-9298-6ed10d89d991",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "671eabe5-4972-4506-89ee-9ba18a3fbd93",
        "cursor": {
          "ref": "68ba9acc-0fea-48fa-b668-3fa017b3e0ea",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "0da00849-172c-48db-8dcd-95d89b4f4faf"
        },
        "item": {
          "id": "671eabe5-4972-4506-89ee-9ba18a3fbd93",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "e9588047-d6b0-4e16-b173-57fb296b62b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "100f58aa-987a-4479-88b5-2275e47e5b85",
        "cursor": {
          "ref": "7b7fa796-dfa9-4d21-a095-9be2b16833fa",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "3857ef56-a155-45fc-bad6-b7e9734e618b"
        },
        "item": {
          "id": "100f58aa-987a-4479-88b5-2275e47e5b85",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "a4ccf995-e719-4243-8f05-0e77808c224b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "590bd51c-216d-47fb-9f4f-de7b4b219d63",
        "cursor": {
          "ref": "8949215e-f19c-4f2d-aff7-ad2ba68d37ca",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "dd33a4bb-c189-4495-8507-2be770b42d54"
        },
        "item": {
          "id": "590bd51c-216d-47fb-9f4f-de7b4b219d63",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "62ac928c-8148-4419-b044-65fd5af78258",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "986c249f-e500-4314-9588-d550a41d505f",
        "cursor": {
          "ref": "dd656a25-3b69-492f-bed3-29de5d4e8d9e",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "d3f70b87-4822-45c3-98a9-c7ba38ac278a"
        },
        "item": {
          "id": "986c249f-e500-4314-9588-d550a41d505f",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "5a219dba-ee4c-4338-b673-a2c045e48a51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bdded36-0702-438d-90cf-7f7c8c162ec2",
        "cursor": {
          "ref": "45eb6aeb-de7f-400b-8374-9ad52b0ff6ec",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "ba54bfb8-a72b-4236-a4e1-f2c6075452c2"
        },
        "item": {
          "id": "3bdded36-0702-438d-90cf-7f7c8c162ec2",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "1571f39b-0241-4ece-b564-18a0e20593c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d51d86f4-afee-4e44-aca2-c1435e09981e",
        "cursor": {
          "ref": "5c8471b8-b887-49c4-bb8e-b9b4a72b8667",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "7f73ca57-c124-48d5-aadb-860bf1e438e6"
        },
        "item": {
          "id": "d51d86f4-afee-4e44-aca2-c1435e09981e",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "7b9d2cc7-32b1-4ebe-bedd-d53b2fb0b864",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f28f0dc6-4e76-4507-a48e-8ef9ca71db99",
        "cursor": {
          "ref": "8ff24d37-cc59-4ab1-ad97-636f0fc33a72",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "baf9b10e-7014-4bb5-a621-6c6fdbf57c8b"
        },
        "item": {
          "id": "f28f0dc6-4e76-4507-a48e-8ef9ca71db99",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "dc82dd95-506a-4cc0-a176-3efd6cd3b203",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2f3f2ea-dfc4-4c42-a7eb-281dc0dc1bdb",
        "cursor": {
          "ref": "b1ae3803-4aae-4615-bcd3-84c864c45b1c",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "b947aaa5-4f6c-49b6-b5c0-141ce05057da"
        },
        "item": {
          "id": "e2f3f2ea-dfc4-4c42-a7eb-281dc0dc1bdb",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "302dc763-ba8e-4c7c-816a-f05db4482040",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59193ebf-93f9-4f90-b9d0-c67cc000c132",
        "cursor": {
          "ref": "a831375c-564b-4fd6-b1cb-f0376b4346b8",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "d097fa4d-3366-4da1-87a5-aef6990a5e06"
        },
        "item": {
          "id": "59193ebf-93f9-4f90-b9d0-c67cc000c132",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "7d1b2728-35eb-4d1b-b951-83e8ab360fe5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fec5e97-3337-4dbc-a52c-c2f004e3a685",
        "cursor": {
          "ref": "8a9a16e4-6bd9-4ac5-8f93-0d3a54027066",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "2c130e5a-2406-467b-92fe-61b6ded97d7b"
        },
        "item": {
          "id": "3fec5e97-3337-4dbc-a52c-c2f004e3a685",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "a0932fd7-746e-442c-ac6f-1fd5d66169eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3980a94d-6a48-4b8b-ae42-72c1e18641bb",
        "cursor": {
          "ref": "065ee3ff-2dbe-4ad8-ba9c-5dec0ce5aac7",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "26382f6e-fb1f-4e30-b49c-721566dca6f2"
        },
        "item": {
          "id": "3980a94d-6a48-4b8b-ae42-72c1e18641bb",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "383af159-1989-47f8-aafc-bad14d1bbf63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6e64d22-a459-4869-920c-22b4443d9e36",
        "cursor": {
          "ref": "2b74bf5f-7f33-458e-a0a5-62235ef15b6d",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "ec914ae9-c67c-4ad7-bab8-ea3780e66250"
        },
        "item": {
          "id": "d6e64d22-a459-4869-920c-22b4443d9e36",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "f3dd8bcf-b5cb-4dcd-affd-4a0cd0fbb9b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a641ea4a-41ef-4c43-9264-d4db43c97407",
        "cursor": {
          "ref": "ced3f985-6047-4860-8602-6dc8655fbc0a",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "e6fd0b0e-3172-4dd0-8141-4ae4f7a38af1"
        },
        "item": {
          "id": "a641ea4a-41ef-4c43-9264-d4db43c97407",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "56707aef-ee1b-4d9d-b6a4-81961914df76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3d2e06d-b47c-451d-bb14-3a41481e8816",
        "cursor": {
          "ref": "c36b998d-a571-4bf6-b7a2-686cd5ec547c",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "bac4d8a4-492c-43c3-99a3-98a29fda701b"
        },
        "item": {
          "id": "e3d2e06d-b47c-451d-bb14-3a41481e8816",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "3f82b365-09a2-4163-9cb8-637ce01bbbae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d7400f9-5c78-4740-a970-b941e6e68fbf",
        "cursor": {
          "ref": "21a63e2f-5b5a-47b5-a185-d5ff1c894ac7",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "aeb774d6-6211-43be-bb87-ef206a7faa20"
        },
        "item": {
          "id": "2d7400f9-5c78-4740-a970-b941e6e68fbf",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "7679ea5c-636e-4f5a-9a6b-5cea37439a27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca0e433f-af58-49bc-9984-7ad6c2a171b7",
        "cursor": {
          "ref": "1389b7af-ab2b-475a-8de2-a6094021eba8",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "13f234f2-2733-4c04-8338-38b0a8e9f269"
        },
        "item": {
          "id": "ca0e433f-af58-49bc-9984-7ad6c2a171b7",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "e3f994d9-5973-4e64-8496-50011fdc2bbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82bbba31-b930-479a-b1ba-6d5d95f68c25",
        "cursor": {
          "ref": "cca29814-06df-4561-a105-c2fbeeaa913d",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "ac9cf786-34a2-4118-a30b-10817538eaf6"
        },
        "item": {
          "id": "82bbba31-b930-479a-b1ba-6d5d95f68c25",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "33bca6d1-5b4c-485c-8f9a-4551d0121478",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd3c8dcf-0f92-4804-bb25-8210e879e65d",
        "cursor": {
          "ref": "df0cbf0e-f9a9-4b33-a7dd-6c5cd28fe655",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "1cd85295-1edb-4031-a172-2000f4d67354"
        },
        "item": {
          "id": "bd3c8dcf-0f92-4804-bb25-8210e879e65d",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "9870a3b3-e0e1-4386-9f0e-0529a88388a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a24e473a-66ec-4f51-8a36-22775be25b9b",
        "cursor": {
          "ref": "42824552-330a-4447-82f0-09c82d5a52fa",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "38d9b3b1-d9d6-4da6-8048-5d83c165c6e4"
        },
        "item": {
          "id": "a24e473a-66ec-4f51-8a36-22775be25b9b",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "150bcdc1-bc5d-47e8-9e48-54c106ec1698",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "087661e7-1bb0-4fee-afea-ff654e565dbd",
        "cursor": {
          "ref": "1c01837c-53d8-4e70-bae5-06b63d0ca48e",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "a3a6b385-3665-4605-918a-732bbfa9ff98"
        },
        "item": {
          "id": "087661e7-1bb0-4fee-afea-ff654e565dbd",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "b5f7369f-c08a-402a-8639-2b758476bb50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e8bad78-02db-4fdf-b5d6-d7acb405b050",
        "cursor": {
          "ref": "9366397f-b927-430b-b928-58c53c8968ab",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "ccc3dbfd-668e-4176-8bb9-6e8cbc113603"
        },
        "item": {
          "id": "4e8bad78-02db-4fdf-b5d6-d7acb405b050",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "2469f1f8-c486-487d-ac8f-8b506ed10fd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91957b91-a5cc-4146-9ae8-83c26f41eca6",
        "cursor": {
          "ref": "c140a236-d44e-4d37-a3d4-a44d5bf7c261",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "13ca4ead-3293-4cc2-b884-09ad13e75e52"
        },
        "item": {
          "id": "91957b91-a5cc-4146-9ae8-83c26f41eca6",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "fc4d7cab-2c75-4271-a6d6-75e4a0a0cbff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e571e15-cff9-4888-a706-eb42a774423f",
        "cursor": {
          "ref": "63bd91ec-64b1-4f47-8676-316dcfcce522",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "39e302ba-c9c7-423d-898a-76d26e1dd72e"
        },
        "item": {
          "id": "4e571e15-cff9-4888-a706-eb42a774423f",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "cfdfb609-398c-4658-b06e-4078bd077335",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "124f97a8-ec3c-43a3-857b-5d907f85cdfd",
        "cursor": {
          "ref": "d07b6cc4-427a-4d99-b697-ddf5229b833e",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "177c9402-e9f2-4dfc-824d-5ef62cf7b957"
        },
        "item": {
          "id": "124f97a8-ec3c-43a3-857b-5d907f85cdfd",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "ae9dde4e-f5b3-4a1d-a6b5-c3047029582c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c330b04f-a835-490a-a83a-f00b4d466f5f",
        "cursor": {
          "ref": "c6d31ede-f139-425c-9f83-2b240ea7aa22",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "0a181790-0659-4f7d-a661-894b7513b0b0"
        },
        "item": {
          "id": "c330b04f-a835-490a-a83a-f00b4d466f5f",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "b1c843a3-2c26-4af7-9a71-47158f9b8fa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72cc3596-c894-42bb-b6e5-6bdb951cde3b",
        "cursor": {
          "ref": "e8348d6b-d062-474f-9a7e-f3c0a4798d31",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "eaf2ddd5-2b57-4988-803a-966c43a5e30a"
        },
        "item": {
          "id": "72cc3596-c894-42bb-b6e5-6bdb951cde3b",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "588315a6-c9a8-42f8-9ddf-9a7e6ac93a02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fff8e9bb-a341-47a6-91d5-d94272ff3ebe",
        "cursor": {
          "ref": "687c2767-0513-45a7-8d49-df941284215c",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "31bfd4eb-adbb-4acd-89c0-6e9151a86bf7"
        },
        "item": {
          "id": "fff8e9bb-a341-47a6-91d5-d94272ff3ebe",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "3c1944ac-6f79-4b84-a86b-be2568c47cd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4062b005-3ebf-4016-b00e-646d43b66956",
        "cursor": {
          "ref": "25fe18d4-ea39-4a61-ae4a-0937e16ff8e0",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "c67ee1cd-95e2-4fda-b9da-240bfc06173f"
        },
        "item": {
          "id": "4062b005-3ebf-4016-b00e-646d43b66956",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "b5614274-7040-4248-befc-e20d52e99e3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5211799f-0efc-4eae-becc-3fca6ec09daf",
        "cursor": {
          "ref": "d994489d-67ba-434c-8076-07b75dc6670f",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "92f74d83-0f3a-42d3-b2dd-6b7f7c57a161"
        },
        "item": {
          "id": "5211799f-0efc-4eae-becc-3fca6ec09daf",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "6fd60d45-119c-4b8e-b7a2-cf00d6e00688",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81a239ce-0a01-41fa-9d8f-75fca156412e",
        "cursor": {
          "ref": "c530ce44-c525-4552-a941-afa9c7fae399",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "8b7f7281-0d1f-4271-83d0-2bd58b71e6c1"
        },
        "item": {
          "id": "81a239ce-0a01-41fa-9d8f-75fca156412e",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "d6878ced-1de2-47ea-9b9a-a45582a1b366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2be43a72-59c6-41c4-a71b-649bc4eab18b",
        "cursor": {
          "ref": "b70149d7-0457-45b4-90ef-c58756440949",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "216dcc1f-72ab-4446-a5de-4a67372f633d"
        },
        "item": {
          "id": "2be43a72-59c6-41c4-a71b-649bc4eab18b",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "9587acac-a023-41a6-8c1d-480cc05f1099",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea8a79f4-cde8-405d-8ac4-a7a315a5d2c7",
        "cursor": {
          "ref": "e932237d-0416-4c63-b18b-c8b3b0f02e16",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "189bbe24-9c35-4db9-9c12-609eed4e737a"
        },
        "item": {
          "id": "ea8a79f4-cde8-405d-8ac4-a7a315a5d2c7",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "0ea7dd7d-824c-470c-b20e-c51d458118b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e97ffbe0-a97d-4b70-a5bd-0287a5717584",
        "cursor": {
          "ref": "58a04097-e103-472d-8338-ee297d91d861",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "26bedf1e-89fd-4af1-9144-7f184a064f61"
        },
        "item": {
          "id": "e97ffbe0-a97d-4b70-a5bd-0287a5717584",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "5badea04-3f94-45d1-9435-7b0186d50086",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33a40e68-73f3-49cb-b318-f8db88fcc5d2",
        "cursor": {
          "ref": "fcfaec00-4f46-44f8-b890-18beeef4cfd8",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "adef6bf1-7d95-4d07-b76e-a7ee657083c2"
        },
        "item": {
          "id": "33a40e68-73f3-49cb-b318-f8db88fcc5d2",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "18777af1-dd32-4256-9701-ef53d2be2b1a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 40,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de30b485-4e76-4dad-be6e-ab3ebab337e6",
        "cursor": {
          "ref": "bc2ac4f4-1317-49f2-9b7b-9f78949c05b0",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "2878175f-dfa3-4be9-9589-fc2e8d7a4835"
        },
        "item": {
          "id": "de30b485-4e76-4dad-be6e-ab3ebab337e6",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "d53cf825-6c51-48c9-bb0f-d419bcaceebe",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 40,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29d21250-2353-4d56-8cb3-7a32c643dc8d",
        "cursor": {
          "ref": "d50d95fd-4beb-4542-bce8-ac85d62ebb41",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "579c779e-9be2-4c85-baf9-b67d4cbf021d"
        },
        "item": {
          "id": "29d21250-2353-4d56-8cb3-7a32c643dc8d",
          "name": "credentials_verify"
        },
        "response": {
          "id": "c492ec67-5ec0-4bdd-9f69-141fe445c8a8",
          "status": "OK",
          "code": 200,
          "responseTime": 992,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abc5764a-14ff-42f2-8c82-b16e1f22ecdd",
        "cursor": {
          "ref": "eb0332f8-6705-4b89-9b04-3ac1c2b27bac",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "184301ad-eeb9-479a-8d71-18cff2e6078a"
        },
        "item": {
          "id": "abc5764a-14ff-42f2-8c82-b16e1f22ecdd",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "d919e6a0-0bbe-45db-86e7-69a79cf6c9ba",
          "status": "OK",
          "code": 200,
          "responseTime": 588,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70d33b30-841a-4b73-9aab-5290fd52a1be",
        "cursor": {
          "ref": "2b9989ef-2f01-46b0-b259-5f223b68a41e",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "77ed7b01-8ac9-456d-85ff-378f08fcffb1"
        },
        "item": {
          "id": "70d33b30-841a-4b73-9aab-5290fd52a1be",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "dde7d014-714f-4fff-bbd9-2ac873aa36f9",
          "status": "OK",
          "code": 200,
          "responseTime": 988,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a2da45d-bac7-4982-bbed-1a037ed79d26",
        "cursor": {
          "ref": "f30b0602-6398-4b65-a674-3b8e19347bc3",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "f4dc871b-a97e-48cb-9419-e69e20af6f97"
        },
        "item": {
          "id": "0a2da45d-bac7-4982-bbed-1a037ed79d26",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "eb3f7a35-e445-4646-8347-9aa6cdfda364",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a2da45d-bac7-4982-bbed-1a037ed79d26",
        "cursor": {
          "ref": "f30b0602-6398-4b65-a674-3b8e19347bc3",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "f4dc871b-a97e-48cb-9419-e69e20af6f97"
        },
        "item": {
          "id": "0a2da45d-bac7-4982-bbed-1a037ed79d26",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "eb3f7a35-e445-4646-8347-9aa6cdfda364",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a2da45d-bac7-4982-bbed-1a037ed79d26",
        "cursor": {
          "ref": "f30b0602-6398-4b65-a674-3b8e19347bc3",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "f4dc871b-a97e-48cb-9419-e69e20af6f97"
        },
        "item": {
          "id": "0a2da45d-bac7-4982-bbed-1a037ed79d26",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "eb3f7a35-e445-4646-8347-9aa6cdfda364",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f3eba79-89ac-48c8-a619-3b9e797d9f86",
        "cursor": {
          "ref": "ebdff26d-21c2-41e5-8c74-d1fdbfcf9ce9",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "df1dc017-d85b-4722-b4a2-c867a6db57c2"
        },
        "item": {
          "id": "7f3eba79-89ac-48c8-a619-3b9e797d9f86",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "25f99a84-9b32-4092-84ae-01d16a234517",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 147,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e564ef64-8e58-48b3-a7eb-452532a9773f",
        "cursor": {
          "ref": "ab704844-17fe-4daf-9866-322995c3db96",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "dd63d056-1d12-4a1c-9384-390f774e2222"
        },
        "item": {
          "id": "e564ef64-8e58-48b3-a7eb-452532a9773f",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ef7cb704-f095-45ad-b8e1-7cb4ab528531",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "e564ef64-8e58-48b3-a7eb-452532a9773f",
        "cursor": {
          "ref": "ab704844-17fe-4daf-9866-322995c3db96",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "dd63d056-1d12-4a1c-9384-390f774e2222"
        },
        "item": {
          "id": "e564ef64-8e58-48b3-a7eb-452532a9773f",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ef7cb704-f095-45ad-b8e1-7cb4ab528531",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "49a42ed4-5667-4399-aee6-3a03fc002fe9",
        "cursor": {
          "ref": "dd840f1b-31a1-47ff-91f7-ff31a058c205",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "2243cb88-9790-42f5-b832-1c8967ffdab3"
        },
        "item": {
          "id": "49a42ed4-5667-4399-aee6-3a03fc002fe9",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "84818919-8f63-432b-bc19-ca9586cd30c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "18d3c1f8-dfa2-4694-9b1f-b7d52efabb49",
        "cursor": {
          "ref": "f9b71770-9391-4691-88fd-a3a7237f1832",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "1331dcd4-0dbd-4db9-b418-1361d43efe2c"
        },
        "item": {
          "id": "18d3c1f8-dfa2-4694-9b1f-b7d52efabb49",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "73e0826f-ebd1-455c-90f7-771e1d433011",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 191,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18d3c1f8-dfa2-4694-9b1f-b7d52efabb49",
        "cursor": {
          "ref": "f9b71770-9391-4691-88fd-a3a7237f1832",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "1331dcd4-0dbd-4db9-b418-1361d43efe2c"
        },
        "item": {
          "id": "18d3c1f8-dfa2-4694-9b1f-b7d52efabb49",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "73e0826f-ebd1-455c-90f7-771e1d433011",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 191,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46cb15cc-e7a2-459d-89b0-f6ad62e260cc",
        "cursor": {
          "ref": "2f8756d2-5dd4-4f9f-b365-08729eeef849",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "3b73394c-1518-4220-8e28-67d8b3f5aea9"
        },
        "item": {
          "id": "46cb15cc-e7a2-459d-89b0-f6ad62e260cc",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "c990fca4-34d2-4aee-b263-5a66d2e84986",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}