{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "0a84f5f2-ef30-49f7-a552-627549f35471",
        "name": "Clear Cache",
        "item": [
          {
            "id": "c9ce95ba-2459-4520-915a-412b0940efe8",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "dd5d001f-8fcc-44e0-a766-7c405e257d94",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "fd385f4b-d46d-4cd1-a79c-3fc75a47f6a0"
                }
              }
            ]
          },
          {
            "id": "ff3907a8-b374-4cfe-935b-bb7823380fda",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "015b6763-c1ca-4ad6-ac6f-126755bd3436",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e7a112af-a606-4412-8a15-421dc69a2885"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b495e90b-bc16-4f42-8e83-b1c0afe8f467",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "ab216cf1-63a7-426c-8e3c-e6d6a5866cab",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ecfdb47d-8906-4e98-8ea4-adb703c237cd",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "01a891b5-5fed-4c76-9743-b31c052659f7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2db5430d-f44a-4104-ba98-328fbe10cb08"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b8145c38-2704-47de-8b4c-5f7eb020adb2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4f9704bb-12ec-4cf1-a23c-5d797132b2b1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b3b62454-4ad6-453d-b7b5-c11f8aec0503",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "87da4b1c-3e4a-47c3-bead-9a6e8df6920f"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "347305b8-8122-4e51-907d-25cf06cf8672",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "62610629-6f9b-4784-9a83-0e2562e66cd1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aa3a2f60-9566-4f5f-95f6-588268a740f4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d45637e0-679e-46bb-9762-c3d5498dd487"
            }
          }
        ]
      },
      {
        "id": "92ba27dd-e0f3-4161-af11-0e1f8068ba75",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "dbbc7da2-36e8-475f-b431-75e4dfde9763",
            "name": "Negative Testing",
            "item": [
              {
                "id": "60e5599f-5e0a-435a-8aa6-43eaa876ad7a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7d4c2185-3fe5-445e-9a59-dc6bf1b9b951",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d63ce76-62e5-45e1-ab75-5a1690f07a13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a70a7544-dc6f-4d37-aa5a-130e443e4ad5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86249419-1f3b-4b0a-aef0-1fe3e1f67924",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2d74cf3-6d10-43fe-9bf9-94320e648c20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ff064954-603a-4e0a-a319-98a556d90e07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c33b971-dcc1-4fd3-afd1-5d9a6880cead",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca310038-76c0-4e31-9d5d-3c9b7a9a8f9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "060d84c8-4ef6-4a0e-be3f-1d56322399c6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3d23516a-8638-47d6-a33a-504c67623163",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "08c50b6d-9f9a-4c41-881f-0fba4743fb42",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2a266af-ccff-4d0f-be35-f56f3862c4cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1a714958-605b-4184-908a-9b80bc83d50e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65685470-facf-44d0-8c95-5a9fa56435f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4033b733-f798-48b7-8b9e-152f55760dcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a93dbe22-54fa-4aa4-a9d9-b1b7e7374865",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04b63faa-4842-4e8e-a8c5-569fef7de76d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1eb33067-0852-4806-affd-a1fe7254a222"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57b6b8b7-6806-4eb4-b4c8-70a6a0360b72",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "ae69fa36-857a-4412-9e7d-12baed986336"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "2336a354-f019-4e66-b0cc-1129064a0850",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d99874a3-4bff-4121-a637-3303d3a71c09",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a0d0652c-d8d2-4b80-87fb-5d663a2db13f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "80d0348e-5d0c-47e0-a39d-1b5a8f64aeed"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "28b26dd0-d826-44a8-b766-7628e4c21897",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "0519bc24-4b6e-464d-ac5e-2aece1fbdb00"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5ab221b9-ef75-4a8a-9887-74017f14844a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1937d061-ff79-448a-86c7-57b2df9e59d6"
            }
          }
        ]
      },
      {
        "id": "932607c0-c604-40c8-b0d5-ec686627cace",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "dee64a5c-c171-4e84-8470-cb28e4e7bc0c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b8fad2d4-61cc-4256-b3cf-e5adbe061d2e",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "d08fc08d-e6df-407e-804a-ab9901835765",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6bfed32-c436-473b-ad79-a0b40e45a69e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "515d877e-b688-42a2-bd42-37db0eb5e7b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e02b17f-f7a4-4d14-95eb-69504d5112c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ed7990d4-e180-4bb3-b5b1-f784da05a58c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cc403bc-885c-494b-9680-fdc96d4cef0d",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8e3b6d9-8584-4b23-953d-976aff5a62d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3833c64c-9cc1-44d5-901a-b6305603bbfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f45cad3-bc07-44ba-8ac8-0f4264f31712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3d751bf8-4408-40c9-8788-ccec0f2d846e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cc05720-ff64-495a-9dbe-6cb498711f56",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e5c435c-a9ef-4645-b5ef-781ca34cbc43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7517b988-7f63-428c-b8f7-9118a64cb5b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "831e59b6-1c90-40ce-a71a-ce130adc2650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2bea9dc9-2393-49eb-9e24-b4070d8503e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d794193e-dc3d-413c-97b2-9c9da1a1f010",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5885b774-23ea-455c-bbfc-270222d677b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50997bfb-7248-43b8-ab90-ec5960a26a9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2862b13-b93d-4806-8e3a-233e6b3bc8f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d769d3aa-0159-4d76-9bc5-0bebadbef49e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90df4ccd-5bae-4259-91dc-07bf17a44649",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c742756-a4bd-4d9f-ae48-09b877af1386",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "837f60f4-bf74-4e85-ace2-5340b3dd138d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eeb238f-e6dd-4261-bcf5-72e25458a2b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "604c1b26-ee09-4e87-a7e0-901814be9b1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f900c10-9a7a-4ded-b1e2-5bc034699e46",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ad2eb40-0358-4cdf-b876-e391d62173c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78e4bbc7-2160-4ee0-bbde-b5840f8b44a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55d7407c-a619-4d02-ae31-830e2980593e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4b901158-6f7b-469f-a2fe-7de4c009fdd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a845cb3d-d1ea-40bc-b803-400a4b45d6ad",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80bde90d-5484-4486-87ab-28830ca05540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa205ca2-6f29-48a4-a6ab-13ede09485bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3be1ef9a-ffd2-4dca-8090-53488a0bcdc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dc3f62a1-d4b9-4fef-be3e-b62a9a420589"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c474d82d-8587-465d-8dea-f8a595b220e2",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3de2c640-6d70-44bc-b1d1-a8d0be72cd03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98c635d3-4b97-42a7-ac0b-e956233bd575"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "241c1b8a-ad9c-460a-8c08-f7f2b12b22f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cba144ef-939e-402f-a209-a7cb69c372c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2860faa-7016-46b6-a23e-ff27f759da0e",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1652417-1981-41d0-8e26-a96c7fc77cfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a09e987-7313-4174-891c-c81e24f3d5bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27b7b11f-b0ed-4ba4-93e2-eda780b515c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "97cd51ec-cb97-4831-bc63-b9621938bed2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1926f42e-2b72-45a3-907e-d9e6d238bf9c",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4df690b-934d-4c4a-9256-b14a4ad5c68e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3501e41-1ec3-42ba-a2d1-5c777e3b2ae4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71cba0bc-b873-484d-acdd-2ae3e5114f0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8a0e4675-a43f-4021-b704-6cda28b65bbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90f9d3af-54ec-4e1b-b9e5-a20f2f063225",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce31d32d-afe3-45a1-8301-bdcf0e5bb2aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "753e2b8b-dec2-4a9d-9bbb-bfe665c7ac8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87051a17-5e63-4ab0-803d-d7288f695bd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6bbc6c0b-c759-4e21-bb93-3b87399f6cd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e37a291-8765-4808-b0b4-b613b89c4266",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c02efc7-7711-41dd-8447-070857bb7f7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25058fae-bbfd-4bc1-91d0-b6d7789c547c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfdecc55-f25a-43d4-aa85-08d7b1a0968c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a148e433-00f2-4f84-928e-fed1b1f75406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aba44942-970c-4bbe-bf3c-95ed5041cea9",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e0dbf00-8572-475c-9f70-2c74546491ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dac15de-7740-419c-b147-5ce2c2149b2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cde74491-53d9-46a5-829c-c3890e1af323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a5d7295f-7f59-43ba-a5b2-5b4c8a19c2be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65a9f3fb-2135-471f-ab2b-b4408a4f6f63",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "577407ad-1c52-4948-ad9d-389c1f574565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "893465ea-9872-407e-94aa-64360f7ea778"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "840cb1cf-3ebb-4b5a-b6b5-cd876fbc9f6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9ba1f637-62d0-419b-8eba-030712a518a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b5b7643-a580-454e-be92-fe8598796c25",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de3b1b57-5100-4c1a-93bb-b0beb7339128",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "839fb801-4ce0-483e-be10-89d14d846ee5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa0ab72d-be1f-43c6-bc28-53667e32f314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "134095df-1c56-4c1d-9ff1-5e72bbcb60af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26ab7a59-d003-4bfc-be9b-c50428570e2d",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7f28547-0055-4e2c-bafc-93b5f2691170",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f10dd300-9ab7-42c4-8ce7-f3fd774cbb89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7f4c0be-5056-496e-8670-43d818617626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d4f8a0ff-0ccd-41f5-ab55-61e50e5eba0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58459bdd-2a48-48c2-bc2f-5833709196e7",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b78e3b97-a909-4b87-b149-6d12cd308686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21c9e33b-058c-42be-9e70-8e6065168502"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c52cec1-984d-4a77-997a-7df8b4de221d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "18998865-92a9-4409-91ca-c7c267a288ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bc43675-7410-4032-a3fe-40df44aafc9a",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0edd3687-ce13-4d83-b13e-6c7a149f9f4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00b7a793-3273-419d-b15d-a0cd78862aa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b5dfbd7-e633-4706-96a1-ce41a03e63c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9368973-d522-446c-aca1-48c15c6d7b00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b951663-7c0e-4e04-8d8b-ada3a3c3f942",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb3f7cbe-e794-4d38-be64-48a8b2991471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99c57c42-657c-4fcd-a1bb-1dfc4759f6db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c41246e-2be5-462b-b0a1-b2bdabc4efa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c794bc7-12ed-4923-aa44-c048be339925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd612c42-6e9f-440f-8ec7-0f160a7e9159",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6a88d96-5832-4fef-a738-7bd731e32c77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4eb0d368-8aad-4063-b8f2-215f4e4fbcfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09453f53-03a4-43a5-83e7-c94160e732b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff425d25-38bb-40e6-ae84-ea757ed8d1c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b284922e-855a-4788-865c-7a736bee9c5c",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6119518d-ddae-443a-b478-ff7a5f52fe53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "279c7ed0-72c2-4694-b840-3e125e768180"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4d9a545-717e-4471-834f-18cdeb692341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6874537-c7ce-4756-a6cb-a24681ce6303"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c16b8b55-281f-4bc5-86ec-ce364e50baaa",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80933c3f-8007-4196-9822-cd0dd61eca98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b389515e-8cdf-4750-9bb6-164a95870723"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41da11e9-30ec-4728-8749-4039684be9d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "99a5915c-ad0e-4eb5-be91-b38ec6706761"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09d62046-4eac-4ded-9bd9-add415cc781a",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9854700-ae78-4ec6-b6d2-3da8f96f08e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d09e1cd1-ff78-4476-a203-87ee81813659"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f615a0bb-2ad5-4441-8918-b85b6fd16fba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3519d41d-1d00-48b9-a482-4f76bef89ad6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "782216e7-8dc5-4378-a635-cc84805b3837",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c17b27c4-b5c3-4198-9574-e199ab0df9c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b652b6c-dc96-4166-aeaa-4b84934d4e59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b11275c-6db3-4fde-82dc-04fac44ac008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "98cd550c-bdde-43ae-848a-34a7fc4b493c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d6767b7-0b68-4cff-8e05-ff85ee214365",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03b90281-e585-4e5c-b466-cb5833204ac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc347067-19cb-4b2a-80df-c5859695ade0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b114150-a8d4-4587-a173-d16168632e3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f43edc10-3b29-4424-b171-8ba443765504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e1f6160-be9f-41b9-ac48-8277c2b52431",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dde4da15-9eff-4dc8-b522-b909d7e1d4ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "299a9994-204e-400a-bc70-4b8454ecbad2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f1ce114-91e8-47cf-a693-584546d08e3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2668a203-69cb-4670-90eb-60594d84e935"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4751e9f8-d52e-4579-b256-2269ca4c50e5",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b53b0d5e-eecb-43cc-8481-de987701325c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36e5fa3f-0dc3-4800-919e-b0489c22237f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57131207-7962-4404-a927-caca76f7cdb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f46022c-41ce-469f-8e41-de36b12f2b20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0380efd2-64ae-4b9c-a315-ce691e525ba4",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9990ac93-0455-4975-9fd5-c3096e2d1f20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29d966a0-2aaf-4edd-a2d5-bf0475677d6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ecf9a44-a3cf-4c47-9ba6-a26b90697ee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f78e4e21-2fa6-494f-8284-b0370daacc9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d399d0e5-68eb-449a-8ba5-2804839d6613",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "263cdeff-b206-4c41-86f9-d930431d6243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67c17e6b-32f4-461e-bb34-98cf9c5f8c87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f27ed49d-d965-43ac-b87c-2d0b26c305a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "522384e0-3607-444a-832b-2be889867268"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b74493f5-4ee4-47e9-94f6-86ad7eb2bbf3",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "644168db-10bb-4024-b382-40abfedfbed5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab620d2e-460e-4290-938e-7bab0cad927c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c7ad3b5-8d23-4834-aed9-75ddf0018a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "17f539fb-4967-44cb-9e1b-f953b31a61a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "384238ef-8669-453c-b796-c049ee2877a1",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da1969ea-a945-45a0-8d5f-2643aef11e3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcf1eb72-7112-4954-a3a8-98884cc7e425"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd1f1be6-c10e-4d5f-bcbc-a8201e5a1dc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a60e5e25-873d-460d-89f4-707a2a1b16f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aa76f2c-1d06-466e-a480-87074a52ffbf",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51780036-b8fc-4e44-9371-060b9fd6e49e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9373e6dd-a7ce-4909-9aa0-e936062ff191"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4acc1a91-0981-451d-86ae-7f2249274ee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "aaf96a6d-99d4-44dc-9586-fb57563300cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e96d7c7-92a9-4194-ba1a-17fc93941670",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a36d057-93a5-4a00-8ce5-9495c348ea69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "776c459a-faae-4923-a7da-c49871d4a680"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fe089b7-1bc4-416a-a192-ecfaa7283daf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4849a4c-05c5-43ec-9205-9496a3633774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fc74bda-1171-4b48-be80-861bffab5613",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66a59952-dc9e-42f5-8906-3665ac5189d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c95f3417-3bf2-4dc6-a861-af4eff32d9ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a19eca75-71fd-4296-8310-14c6d55b4b59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab1dfe72-892f-48ff-a500-2d0b4f0a4059"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09191043-890b-4d1f-b15f-58e7a333b13b",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "530e6056-1b85-4179-a9e8-52949d56074f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb71346f-3bcd-40a4-a0b6-015527f24ec0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66327369-03ef-4a79-a152-f0fee5a3d235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "ac4b02fe-db6f-4333-b027-86adfa659e03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01f9b5f1-3648-4216-92e9-211083d7be46",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0ae5517-b0a2-401d-8a73-369495e2c127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "289864ff-b614-4d19-8592-071d1740047e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e975383-dbbe-4448-aaf1-57a8d19db496",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fcdd2af7-d146-459e-9009-ae4c7f2df155"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c14c1f5-67c8-497e-801d-3aa7f67c0657",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d00b06b9-975a-4a0b-ae80-395bdf31a335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2adb168c-c5b6-4bf9-aed2-e89456f0819e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a15acc4-e998-42d4-a320-40105063b9e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "18079e0e-e231-486a-bcff-85dbee11e708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8432d1f8-cc27-4021-9ec5-d4a08b75247d",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c5b7b22-d2c2-46cd-8180-3cd597b61080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be83a781-038d-4ece-bdde-c48f39d8fb8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40bbe470-3fc3-42a5-a2d6-d952933d0977",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0cb04d07-d8ff-458b-95ab-72380a65347d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9b79169-d1b9-4e0b-bd29-0d09a86c5ceb",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ed03061-9989-4793-861b-d89c8a4b2bf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e84e8f51-a075-4c3d-b376-87216bab952f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ef2d69a-c4d0-4665-a82c-e6601005326b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5979e9d6-b390-45a4-a19b-7db382af4dec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1ce826f-3539-43a9-a1be-7c1374bd520a",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85da6094-16b8-4391-8c2d-d76b332fab53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "099792f0-292b-40bd-b37a-7630e264c57d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "095ccbbc-85fb-4a56-8c0e-66ccf633705b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2d0a1ffd-8613-4444-9688-80e8eda255c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb086e76-2167-4d10-8931-45adbc358cee",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a647906-5443-4163-a0da-9803dd11689f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f190de38-340e-45f6-8d30-21fbd312352b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2c279c2-92a8-4a80-9614-9f86a091ed6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5ea2c7d7-9567-4bab-b031-ed29587123d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc74d9af-4a48-49bb-a936-03de276877e0",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abafcc1e-8b8f-4197-afda-f7ad0ec71a57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b860d22d-f108-40b4-8e3c-b497195c72f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3938ae7e-d4f6-46db-acf4-870650ff4e0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "6cf5c8b9-0fde-4376-a161-3da3b035ccd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf02174c-ccb1-408f-a727-7c3d78b2dde0",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21b74cb2-b47a-413c-a7e9-a76f919914fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bffe05e5-cd0d-4865-b5a0-d256bd799b04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d92fe08a-8770-4df6-87ab-54001490a44c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1708aa83-cedf-4551-ad39-e6ce7083ff39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d766bf2b-e756-482d-9c73-c22a38f25a29",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35d3191c-bb51-44e8-820c-5ab0a056679e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15282cea-9e61-47dc-bcf4-825795ca42f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "459ee400-bea1-46d0-93d8-93a05dd91f6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a787b2d-6384-45b0-b21a-5eaef5e562bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fad36b19-e90d-4804-b320-5e9495bc201b",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4114bc6-20db-415b-b859-cf574f8cac94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daa429e0-b005-4546-888c-a4e3171998c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "915f6a24-0b5a-4343-b22a-979fe3dca94f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "671cc525-5426-4aa0-a19b-600aff15ac2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "575a1af8-69dd-4791-9546-505c79d3a808",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3869353a-28e7-4800-a71e-2251a7cee209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcd72de3-15dd-4e5f-a183-5fd7e7e06b96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ed36112-15b4-4c2c-b6b4-f5cc32dee883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b95e811-3c72-418b-99f3-dd0679992ab9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15b0df54-76fb-4863-8723-bd97f974f63a",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "041aeaf0-646d-4e80-b0eb-c2640d514666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa10f543-605c-4f2e-903c-0fb76c263181"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28a25336-c38c-4fc6-8485-e8c3bac33d07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ffd16e1b-3872-4ab5-8afd-f0ad5cb3a501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe9ff607-91dd-44ca-9312-bb7762310f98",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49063eda-6b81-4ba5-90ff-72dbbdcda30d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aff0ce84-5994-4a7b-9bd9-f7b02b4df5f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f12f955-d7ef-498b-8b64-b4d8f8bf7767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4445f27f-89d4-4095-a162-8f93e8c29e37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77b12bd9-532d-4e3a-a015-e8d874668a74",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9b304bd-f476-49ce-beed-105fd5c542be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "586f03a3-f1b1-4e51-af7c-7321067f3344"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "547bd6c4-f5b1-4282-844f-1e706d35c153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e4945537-4d4f-4d76-bcfc-7f5f4ac6f2ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed36787b-ae2c-4e28-ab57-261391709437",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1870028e-1a7a-46ba-9cc1-810ff95c04a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a3e0c30-d4e0-4b0f-a513-fb9378f12140"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9450821-8ccc-42a4-b013-ffcc42a7e4ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7f87ba6b-1e1d-411b-8443-7c6c24a1ad12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc0ab0ce-8873-4c18-97da-8b7c362d2d98",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee19720d-8d44-4876-be26-29ed7a772387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aafbfe81-0fd5-4a7d-9f05-cb4e02bf027a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cd6114b-be1a-4d62-808e-01272f584ddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "deec3a12-f1a7-473b-a3e2-3dff1c04cdc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c79ffae-84f3-4d67-92d6-da62a4a98c1f",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1d5b89c-d840-43c8-9893-e90699446c52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19f91f34-4408-406a-942c-dc9c112f1e57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e423c22-2937-421d-a38e-93ce62c4133f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "93201796-501d-492d-b06d-d5d4b815067a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fd2e1d5-940b-4b2d-a7bf-acce56c7a907",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2d1620a-7070-4710-93a9-3b3dc7281bf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f4ae4c4-2622-40ca-9a0f-8d85c2702f98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "179827a1-0cc0-48ff-8757-d999fd0786be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9b7b9a2-0719-45e2-b47d-4c465b725661"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d16472d-9f59-4e42-b000-9c4a0020fb72",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b2900ec-9112-4718-b7cd-6ad150cc8efa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0283d00-29b4-4142-8a12-dfe7b971a755"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3845eaa0-f5ee-480d-a167-2091022472a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "93cb9706-378c-442b-b992-6947eda7215b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d13d4f5-6192-4b9b-ade1-b38ae5f12067",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ae68c5c-156f-46a3-91c5-cba3bdd7442e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a77ab2a-32ed-431f-b9f3-50e4b0e2b1d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53da5c30-d667-418e-a1ca-eb8f85b85034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f55e246-9ea4-4ba4-90f5-4d718c65e88a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "202a5273-70a7-4fe0-b3f4-b52249656ee1",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f607e69-dc56-4e4f-9c7a-366802ebb3e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "550b2a47-33a6-4ee0-81b3-c9837f50d644"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "083eea76-0f64-40ad-ab67-8c8305afae91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "fe3a88e0-1020-4ddc-87c9-649da2a71ac0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b145487-0259-4058-83ec-b9f0c550d93e",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cacf3b4c-383e-4577-abbf-66b14c5be2df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "333d0ce1-5bef-4e3f-96dc-b611c15eb9c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9b809b3-0db7-45ab-946c-10dede8033ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b20726a7-6e4a-464d-8fc0-f9817813cecf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b94fb03-b009-40be-b253-e55b1b5241b1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "576c3e82-defc-4f03-9497-8020db72981e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0325435e-eb12-4504-9078-ca06ae95fe28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05eb3ad8-c903-4b86-bfdf-089c88748e44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "002f56ad-3ff8-4a2f-8c5b-fb17931f7d0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28d2dd1b-b959-4914-96af-9887c5f1e8a4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5b7a6d1-a005-489c-a9b9-5413028239e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bb6855a-ec4a-451e-adca-c4c3a9669dcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a99a3b9-694f-4c77-bfc6-4cb77f908c79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b7d8230a-dec5-4213-ac42-abc529f32df3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c3fc1b0-44cf-41ad-a292-bfe806fc46d7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4df9d190-ef96-4e29-9be7-2ac8be028de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "006189fc-1324-40d6-8d1f-ce0ac26903d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8d6df1c-61a3-49de-ac10-af481238b33e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a5a3e86c-09c2-4540-8e8d-626eaddd94ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b075445b-88f6-4adf-9bd4-96f7cb0c6c88",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89f7f9d3-c4ce-46b1-8945-5f6a90d6e37d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18dadf49-f974-412e-a4ce-fed7fa16e893"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a304338d-6299-4d74-b81a-ecc07a134a5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "bb34bc49-4dcf-4093-8726-4dc484d78b13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c7e92c1-f629-4650-88d5-b51b47c2bb1e",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63e86169-9e30-47d8-8dee-73cae583f2f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c4f40c8-7de5-412c-8460-7e71c9b4be1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48a1be07-bc2f-47bc-aa04-e7d69e6abf08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "c004adca-d1e7-46f5-9d83-af17ff6ceba7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b20b6c5f-5528-4a97-9ed1-62adfa5b23fc",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cdb4fd5-976f-4757-b6be-fc13e25437d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ebcdb8d-8103-4f17-88fc-e8d7132290d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb830a1d-ef0b-4b62-838b-7077c8c9516b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "70c855c9-f76d-4a61-8790-599e0721f199"
                        }
                      }
                    ]
                  },
                  {
                    "id": "846dd52f-3f35-43dd-85d4-96f63561c7a2",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98244af6-c0a9-4e5c-b154-a3ab0b814ce6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21ed9673-7eb0-45a6-b7f3-bc05fc966e82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76ffaf69-3fe8-4311-8ae6-2a31d2ede0ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "92eca67b-d4cf-4bf5-93a1-a8badf837264"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb80a363-8772-45fc-8812-f09b820ead20",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33c9a8b4-e88a-4d1b-b3e0-1f9d7f987c8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b27c4ccc-49aa-4f3e-95ac-470f36df6222"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c2b9082-26fe-43f4-9570-cff9678b4914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "212c3951-40a0-4cff-8252-0ed90506194e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e052f31-d2f3-4b80-ab37-800091528697",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dffd1d1-60cc-485e-b98f-47c015e148ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8177623f-b858-4fc1-aa5e-77b5746e2415"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47be8dbe-4af6-40e7-9482-ca5544a365e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a94de25-610b-400b-a061-46327cad8fe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afaceddb-a630-45c5-873a-d88d256bdc4b",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1949524a-56c1-4a8f-bb84-32af2bf499bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b419aa7-0ee2-4ff8-ad5f-79f4958ac3e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30930e98-49ce-4ed4-bf16-675c6439d35c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b7cacfbb-9b11-4387-a67f-a2eed2d691e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42f93e44-e235-4a9f-b978-b1551c2a077d",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c51e1c63-b322-4036-b6d6-4538cc537755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26841e07-60ef-4a8d-8a4f-aceefda5541c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ce8c613-72bf-4530-bf28-98c48ed7bcb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c37d2763-f296-4875-811b-c07ebc46de5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e55c10a8-a032-451b-a042-32a23fc39703",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ae50feb-87b2-4e7f-ade2-2f41c63c5e83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b487c421-0d0b-43d0-90eb-6226ee83c016"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7665a9e-557a-49ff-a694-f91f21a290e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c84fffaa-1617-4bf9-bc5d-cd10fe3c6511"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b479b43-195b-49ff-bbec-ecdaf10f4915",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fc44f55-b623-4bcf-a151-69acaefe39fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ad8ea93-0a38-4edc-81e8-73394120960b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca8e22b0-03ac-4501-87c2-eae39b9b5c69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c563a8e6-68f4-4012-a39a-c8429b6ca2de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d63a4c3a-cc71-47c4-a850-3ec2a8368fc3",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db9b4b18-8424-48b7-833d-99db28176b8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a618276-041d-4dbe-9560-acbc7110a97e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4ebb617-39f4-48c4-a409-a28259625d6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3074c12-becd-4cd8-8cd2-4ff65f262911"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9f8baf8-6765-40ff-bbb1-d2dcfa0671d7",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d49924bb-bbce-4f7b-bea5-2595ad60e3b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd1882f5-c52e-4d85-964c-71925530e2f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f766a61c-617a-4443-a35c-fc54f600e488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "35849f74-5549-4d7d-8f43-029c29e7ca4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6efd4161-7e38-4eff-956d-0280f8a5f352",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b38aa847-321a-4171-9aa6-6c814ece3f34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79aff072-00eb-46de-89ad-2b8b05a06a15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "708f746f-2502-4f6a-8d92-7e09f0e8b626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9245689b-8e77-430e-9da6-160717e43edd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ec23282-7897-40d7-8ac0-ec5a3e71f0a8",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "751f75dd-2d6f-4e36-a16d-79385c00dd26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b9ca7d2-b244-48ab-b265-f763287a49b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e0da2a1-fe2f-4969-b9ce-bdcb78f6cc64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5465049a-b99f-4832-9db0-437b65489158"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eb70a98-0920-4408-a86b-28a764b74513",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a421f9e3-4f68-4b44-a5d6-10e096c5ede6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c804d1b-fa66-40e2-8e62-67ed2e0c8916"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8c4cb47-31c0-45f6-8190-eb2b5ac23d3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "99054094-73ae-4533-a0df-53c64c0a28aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c711fcd5-a706-4b58-9089-0fe2aab7748b",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75aaf0c6-fdac-4c33-bdbe-b0ca533061f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab26b4f4-a3b0-4005-b1e6-03bafa550a5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d272ff7c-faad-4080-9188-c635eba83697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef1176ee-691f-45e3-885a-ef0996e3d7ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ba0316d-742b-4f1b-b5bd-a4196385563e",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eeb7aeb-d607-4dae-ae8d-95d7c15824bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe407b32-93a5-4ca0-abb8-f6312a8cfab4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8600350e-1bfb-4d11-9f18-718e414b0c9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc087bb1-35a8-4ab6-b747-d4a22e91fa76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ce73491-498e-43b7-ada6-ba26d976afba",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6cb9945-fe79-48eb-9ef9-6aa8174fac63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "619d3f0a-9125-4d7a-87ff-8df95ee2072b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "121e3f3c-1705-435a-a3bd-a5a173ae6c5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "166ba8ae-5dd8-4c10-a2ef-867fd63c1386"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d0122c3-9339-4a8d-b273-2d1399824299",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bf6377f-d479-41b7-9d58-23af5a7fc8e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ae439e6-bdca-49ea-9839-727f90a79260"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7e60249-056e-4131-889c-53cd3c6fb7b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4db74ef8-5cc5-4a75-8432-ea2742b0a35f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cc17f63-f134-473a-b1fe-6d8e82fdb489",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa04a05c-56ee-4ae4-aa0a-ed9e65475a87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b11ac51-09c1-4064-9872-6140244c2d49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "126935f3-7a3f-4f13-b42a-87b707070341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4039bbb1-ca5b-4dd2-98f9-a098024de1ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "788cd415-0438-4842-b623-484d1d9dcfba",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8edb7853-0bd2-4024-8a2e-700b6e998c99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24ae116c-0b3c-4ffd-90cb-a18f06894f56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb11dccd-8a1c-4348-ab2e-af748de64be4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c170c981-3688-4c50-a990-e365a61b1de1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fb7935d-7b98-4054-a8bf-32a1d7e8e389",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e75dc2e-d591-4978-b605-974e1d7a1541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ec11f62-2f4b-4419-b1f1-116f149c741d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02201283-1f08-4841-a482-f30c32fac0e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "acda8d32-1cff-45ab-9ebb-90d5250fba36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07836261-5d97-4d98-b1d7-10db361660f5",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "277f984b-a3bf-4d16-98ad-58d4ba5d7d02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5933eae6-bddb-45fa-a0bd-2445ae745cbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2377e0f3-0d27-4dbb-a0c8-cece086fcf88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7cce3dc-ee7b-4955-be51-b36716e677a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aff7425b-255f-45d2-b89e-43b7e92b8c02",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73b520f7-41da-4dfd-8678-040291a1ab93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3641426b-1ede-480b-ba7d-dff81aef840a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a378e949-ce41-4e31-b8a4-6127b6ab2b7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "71a72c5c-5b4c-48ff-9180-1c8561ffb052"
                        }
                      }
                    ]
                  },
                  {
                    "id": "119cf220-30a1-43fd-af2a-4cee05c1435e",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f339d42-2ad7-4404-8c5c-09c0c6a4840c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3905a9ff-df2d-4e6d-ad6c-a53e2ee66522"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "983f615c-00f4-4e7d-8bca-3b76f57a3c02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "13d20453-e0ce-4df4-baf6-60e8d3ba08d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a730ba4-867e-404b-99f5-2ea2ee3054f8",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03ceb8ec-a254-463a-b888-af15f55febfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "637a8cd5-94e2-46aa-9bfd-c33260133caf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a48bd2c-0104-4261-9cda-a176d2db7558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4702d471-7138-4403-ab98-c4e0849dd1f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c223921-3362-4728-9d0d-ff2022efde6b",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58b28d3c-6e7d-439a-8aa3-d2a849750dd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "871469ae-1266-4e8d-ba57-9adaba0145c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b8eda33-5d19-4a0a-90be-f6a3239055d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "395ad7a8-4760-4768-84ef-62dd0ef3d146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49b122c9-7e6c-45dd-b8be-71fcb1a57071",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf417199-e9ea-4060-9d8a-7467ec197bf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01c16db2-d6c9-4e1f-ab24-bbfe1973f05f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f57aa5d-8fdf-498b-bb0f-6896ff86bafa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "768d26b6-178a-4775-b96c-f3238908076d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59445bb9-ca85-4510-8feb-56e7359c8aab",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3bc920f-ba10-4f50-b273-c7cc72688392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18aae654-c0ed-4300-89b7-166c105c5d93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad0962f0-560a-479e-8957-7c3844aa4f51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "79fc986a-3835-4d1f-8748-21b2083c626a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be7423e0-da60-4772-94a1-c6ab378b8421",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec257c2a-88db-461f-8219-846c876a3b2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43fc2860-91ea-4a29-874f-ad2cd7faa831"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0521c12c-b9db-49e3-8109-071dbe109422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef42fedf-8620-437c-adb7-44710d635401"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a708e353-d6b2-42ef-bfcf-2e37924b0083",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64d7d4a0-f8b4-4260-9db9-d24817767e89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00e079c3-0fbc-47ca-91af-7cfe4288bd96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af0881fd-8622-453f-a209-080fcad5fbe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "1de3f424-ef8e-44cf-857e-bf608747534d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "041e5efa-7a56-4920-8786-af75f1571d2c",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75467142-0fbf-43ba-b4d7-88cef8ce423a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "24687dce-e3b4-4f6b-87bd-57b5857f93d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4251979-ed45-41f6-b110-a686f850f1f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "654fcfdb-5ca8-4aa2-b7e8-facdc3778a87"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7e390b6e-2889-434e-a72e-583d91871fb8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c207c684-91ad-4b68-a55b-288c066ee803",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47315d33-2ffc-4918-aba2-32265dbdf46f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3483192b-d688-410a-842b-1186f2860061"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dfd5c1b-0e71-4837-94b0-320f2f48c136",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "5be48de4-5666-4951-8f7d-8763ba4afac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47633aa7-d11a-45a0-ad86-b575ef09e623",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59a1c8bc-a850-40c0-ab4f-dc4def3a5db3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9ebacb2a-6c0e-4f11-88af-f2df21086c27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "107c4ca7-e876-423e-88f7-6f7f6fbe3d58",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "61fd1cbd-0c87-4992-a27f-2f4a48651062"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8fcdc6ff-e6b0-4cb5-aab1-3312f6a624bf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a31204b7-ba5f-46a6-9597-ada1c567f7bd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "29da8b9a-5b7b-449a-8f21-dce3e0e0eda0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e18c6952-2e9c-4155-8496-7b6e0d3c25e1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d14772ac-0edd-47da-9683-f4677954a92f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e057b0ca-8437-4a71-9d67-b2bf4230ac21"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "62486bd1-4655-4f16-96d0-2a0ff22f14a2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f9ed6e6a-f57b-4c8c-94b9-d45341be316d"
                }
              }
            ]
          },
          {
            "id": "386f3fe0-06d2-4041-b839-cabebbcf3cde",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b6eab143-3a8b-47de-93b4-5a2636ebf1d2",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "54035ded-6a50-4688-b1fa-16e9689858d7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a66149b3-bff4-430e-bb04-85c68b9f3294"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "09c45701-cf1f-4f80-b330-6c454dfcab47",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e84b616f-b6b6-4197-95ab-a00efe3e32db"
                    }
                  }
                ]
              },
              {
                "id": "07faf21a-47a2-4fb2-8c97-73bbdae8a391",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "03cd62e9-bf51-470c-8381-79f155958622",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9609ac23-bb67-4a1b-89be-5dbfc4c9e54a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f96beaa0-9489-46e7-bb0f-b55df5ea7087",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a9485ee8-6658-434c-82a6-a06fca16569f"
                    }
                  }
                ]
              },
              {
                "id": "4b6a089a-4bc5-4506-b201-737964d89b78",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0f659e4d-fd38-4ee0-ba80-ae070bf68aad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c8f2f8b3-f7d1-4da3-bf94-f563f559c79a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ee176f99-c610-4614-b509-1dbb75bf3efa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e7c7b32e-1409-4f00-abc4-41a34de3fedc"
                    }
                  }
                ]
              },
              {
                "id": "ea648866-d66c-434a-af6b-6cf25f65545d",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b46647e6-1b0e-4e94-98f7-cfb860d3e4a6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6ad3c81b-0f6e-4ca6-8f26-ae8c18352215"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0ea24331-6c87-4cfa-a446-98a64e057aeb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "b9ae1483-afee-4ee3-9132-cd4bbe77c92b"
                    }
                  }
                ]
              },
              {
                "id": "34b3c066-378c-40be-a7d9-2fab07af651c",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4bf34bee-b8ba-4a07-808f-ae8aabfd6661",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c57d4479-e5da-49d9-b7e1-c2dca5387a0a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "39423a99-8967-4201-8a36-81051492412a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "530bc93c-6e82-491a-b3fd-4b0047f2ca95"
                    }
                  }
                ]
              },
              {
                "id": "6d2ad537-ab2d-4827-b09b-5ead0a2b2eeb",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f84761d8-ef1c-4d7c-a33a-86d90feecd2a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "33a7b04a-4c96-4af7-b25f-d2da72af7b36"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "886cf10d-a43e-406d-868f-38f12da11065",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8b6b4a4f-3651-45a7-aa1e-3d566a014005"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "23c7e4e7-b8f2-4a96-a73e-554b8b32517b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9ab3c70f-c70a-4161-acca-b5e5150c16ed"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "90388cea-1677-4ddf-9d88-a99c2414a202",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6ad3187f-d61b-4335-a395-963039833815"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1b427cee-c062-4ff1-a496-6374c9d6f2c9",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "473cc0e9-b24c-4d85-87e9-a8c361971460"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8434c2cc-436a-4a74-aad2-2b11a8ae67ab",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "12392ed4-b7bc-43c5-a11c-b0e0dcd4681a"
            }
          }
        ]
      },
      {
        "id": "24d0c2ff-9ef2-4dd9-8036-51c5fa8847f4",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "20ac1ed1-70ee-4299-a2e6-88a655cd42a7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cd005783-a83a-4b26-8a6c-e3120ae30a8b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "14a7efaf-0a33-4fb8-8c8d-0180e2306023",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03b66633-f650-4e99-a2d4-730d243e7168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9eaf6a8-6fc3-49ad-8ff6-f1db86425506"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39fc4618-7cf1-494f-b7eb-cc327a34603b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1475425-9f1b-4480-b4fe-80acae12c11c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2597bf6a-109c-42d2-8e57-426c7aa3b574",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cfc9c0a-df58-4bea-92b4-e6b29043906d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8362cee5-8fe2-4646-8d08-528d087fb0f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7d1782b-ed8f-485d-89f7-3ac11a2b3ef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4661ed1-1c04-42ad-9ed6-cd46336c4dbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50d08311-fcfc-470b-bbab-38631a85c65b",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3904873-7b88-4562-9645-1c4f54115342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4463439-1b93-40a5-a5a8-4786bc52326a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86cb1fa4-2e8b-4a29-a492-83c4489efcf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "61ffd084-9bcf-477c-a622-4368861fe6ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6ef94da-a00f-4f34-b9c7-8b276c6e9fa3",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cddad6fe-300b-440c-8538-69c43a17b0d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2ab783c-b1e6-4427-89bf-150289de96d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeb693e3-0c86-451d-9161-5468aad18328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "65399496-c571-46b2-bcff-cdca84ed7d4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4886154b-b375-47d4-b0d6-6ebac61496c8",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e23f90b-84e8-4b88-adbc-54a44c38c95e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44779ed8-136d-454e-b120-425f3e9b5d4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34212da9-c3ad-4c11-b067-def42b883ed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dfef187f-80ea-4b1c-93fd-b789766294b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17c90df2-7334-470b-a126-de55d6d2808d",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77d0fb60-909f-4e69-988e-d2c2a41efe3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b053b15-4ca6-468b-af30-70c8aa1a01d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "245f2bf2-0353-495f-950c-00f94f075190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ffc5c1a7-8c00-4083-8b08-8db4f8f58bc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c438464c-6847-48a4-b594-3133d58cedd4",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce3a66e8-f364-475f-995c-a76d056857b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2b5adb8-63a8-42ba-ae3f-6c43935adddf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c0c2365-d65e-422a-80ad-8bd2c2af49b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "90b44a17-4bfd-4771-989d-07a315059fbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "493c07d0-6989-446d-9b4a-6e261e48118f",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2830aa4b-de83-4850-be25-cf8a05183fab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d781a5ce-02e0-474a-8247-029c8f0a7597"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe14c7c5-484f-4185-9dc1-8fb967a3bd7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "705b2828-af9d-4839-bb48-8e4a09c62389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4eea152-b5f0-42e1-9959-650d2cbaba99",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42500262-cecd-47a0-b829-0449fd4736f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1daedc56-dd70-41fe-960d-8cee98ceb227"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7fc5f89-8f39-47d3-854a-7ad77b70d020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec722743-b550-48c4-a732-38a87b1d6525"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ba26feb-dcc9-4064-90d5-589ec200eb3d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60d22901-94db-4b0d-8230-50c6bd127941",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c9b0e1e-c3a8-443a-9b83-14a61b29d70a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc34395d-c103-460a-a863-6e66ec23c25c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "efcb93a5-a4c4-45b3-a209-ab1cc2a18db4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09c9b824-ada8-4830-87ac-5485303307cc",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "406b7249-dff4-42ed-b61f-a9a549eb5e5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da824acd-b3e3-4156-96cb-9368c911bc23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "572198fe-04c7-46ba-8233-7798628deb04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "90eaa46d-debf-42ab-8b25-b166b7249bf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b7d7f54-f612-4550-b364-ed72543a7ca7",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf6d5df2-f000-4af4-8b8b-50edc2986003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d917e3f-468b-4c2f-9ae6-c7c8f5ea756a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "080b00bc-5f7c-4b06-acf4-9aaa23d4ce26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "af11b44e-b1a8-47e3-b8c5-69b6f2169138"
                        }
                      }
                    ]
                  },
                  {
                    "id": "947919da-2cbe-4114-afbc-188d13cc7ea2",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5a817e9-cfe0-42a3-8f40-414580fb95be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3af36a59-6a68-412f-83c9-1027016d3046"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83dc8bf8-bd9e-4028-8a86-921e4cffc43c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "031a836f-9e90-4a5a-a2d4-a44227dacbdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf058f05-7f9d-4b25-a48c-4d3ea14bc14d",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ef23705-d67c-4c27-93ed-6abe58a0f82f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f88f2bc4-5b5d-4e84-995a-1a529983dc8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d772a9bc-79dc-4b3a-97fe-a3fc2cc04425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "85fcd32b-5099-41bf-b86f-36ab3782a5fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "740ddd45-54f9-405f-8433-09994ad8fb29",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a1aea41-727c-4b89-a0c6-af9989b0f5ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac691f69-d240-4286-9759-8daaa9274b96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ea12476-53b7-49cd-9a92-bdec1c8561c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1e35c8e-256d-4953-bd8b-c318fbb3e69a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "193ff372-e52f-41ee-8e43-01b35f56322b",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad360ac6-2e64-4200-bdf3-2fdc416548d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77ab3169-9f02-4418-a835-3238f3c4e51f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca2a16f5-f922-4acd-9b0e-7d7cc2a4bc34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d65dc9a-fd35-42c5-b4e2-2fe7d9a1cf63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "356055d9-fefe-49d4-9b32-c0e729cb51ba",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e5232df-238b-4189-93c3-03605740b04f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8a0fec9-acb0-49eb-9e3d-4b6ed4f2db72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3e131b9-bfe2-418f-887f-bd9b1e0a7c5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "167ccfd8-b126-4270-9445-c1e7e3a9f5f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff9dee5b-c5de-4751-85ce-4ecbbe7d3220",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "519ea3f2-b838-4699-9684-75ae260eb226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bd42481-273a-4dcb-b11e-8fe3f9474b36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bd3feca-aa5f-462f-8520-c8e1801bc271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b072a35b-be72-43be-9d5c-eade6a3967f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce7ea3c7-3fdb-4158-80f4-4bb3dc179bcc",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b19ca289-5789-4f06-a2ed-9bc459393747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "821128cc-5fc0-4333-8e09-1c952baad192"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e53a57a-490d-4189-94a6-6b8773fc3692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d04967b1-5d50-47eb-ba95-d3270495a879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c2dae29-ff9c-4f86-84b3-c620eede9870",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77dd2517-19cd-47ed-97c0-0526c586f9eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5fcefa7-628b-4191-9e47-845c30c3c011"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa344138-7e78-4737-92ea-f1d29927c222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f652bf99-d890-4b88-9e1d-a24c1eba5d96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aad601fa-ae3a-4131-83a2-e38d9de7be6c",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7827da5-e270-4803-a61c-3dbba8db07bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0868bc0-8f8c-4b75-8d2c-66fd97978a3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abab5b67-6c04-4fd0-8ddc-c622706f584a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "54cfc884-e9e1-4b4c-a2d4-3c63e12dd2ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "260ecca7-77cb-426f-ac09-a37c63437b8e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae737a0c-dc45-4cb2-9d98-4e7e0996f84c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7032e5ca-d9c0-4b75-8b0a-8c08b7b3d190"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fedc6fc-4b7a-4763-a23d-381e1de19d88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6399a47f-ebe7-4e4e-8c7f-f97d4f3e9232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e592af7-cbcf-4d99-bd5b-aa173129b9d7",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "329dcea3-9608-4bb0-814f-17290ca4172c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "641f1553-13e9-4db7-8790-c27877a8247b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb753706-6ada-46fa-b7ba-b78a97850238",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5fa73c59-31e6-411f-9f20-b1fd63b9b378"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09cf49a1-d70a-411a-8d25-5a129f1bd10c",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27639629-732a-451a-aea2-49e4e69ff501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ea9f14a-5ad5-455a-acc3-5b6d76a39682"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0456a48-b221-405c-9857-a6e828b62026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4de47528-7192-442f-a0c4-ed522480d216"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd04957c-2770-4a3d-9bad-8929e70e4651",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c33d212e-dd03-48a6-82d8-8dbcb3e8f55e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d94a1c46-1786-4de5-bf3d-bd3ad67da539"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df6187b0-aabd-4a4d-9f99-1dd7e869bd02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f3c7a7d-afc1-42d5-8221-4c940dd4ee01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00c808ef-e5e9-4dc3-a061-2add217d8516",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bd4892d-6996-44d6-b32b-0aef51480764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3928a487-6559-41bb-a72e-b5ca68305363"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bf13697-2553-4e38-9b9e-ec662e86047a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ac9bc9b-70fe-40ab-8594-afeb9ebb5003"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bfa3b38-ad7d-4aac-9210-41f8abc1132f",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87a9e0f1-538e-42aa-b169-4354a639f48b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5d8b58a-b8ba-40cd-8bd9-60a7fb5156b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09a96cc5-7db0-42ad-9b08-0fa57277611d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0d5936a-c815-4d47-bc4d-630b643428d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4715aaf4-4a57-4ffe-95e6-c128350ced76",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "613079c3-acf9-4911-b901-a3d9b0f0620a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e649862-69ee-4e1c-9303-127d8e4020ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff979a1d-732f-4fc0-a313-8cef2f2004fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "48c0c93a-dc4f-45a2-b009-78642c75cbc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0e688a3-68a5-4760-afb0-40e0e1996886",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa975529-0c9a-4f4d-a090-86441a53c263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24b4d67b-a195-48a8-8cf2-3085bb59a260"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45ffb268-7f29-48bd-a1a0-db0c997e0e81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0033bedf-5d10-4f16-bc18-c21c2eec93dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a976f080-16a3-436e-91fb-ad0a39701624",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0468dbb6-248f-4df5-9929-7000349ab7c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a563ce15-f768-4567-b17e-4688cf537bac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "529e6af3-da51-497d-a74b-682830c63d7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3ad6596-9888-4772-96ae-6c10db5c7573"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20fb4225-13fd-42a0-ae88-ed44ae28c25b",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b711e56-5a0f-49f4-b901-5513ba8cd06b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7aab88d-579c-4a7c-8120-365f9014c15f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3de36cf3-1b8c-45c2-8420-6fda3d771e48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "00604254-36ec-47e5-a2a9-be59fc21d919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9e9c352-eb1e-484a-96f4-47bb1c213c84",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a31b3397-5f79-458e-bd6a-1a7f7d9a67bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e682daa5-2882-41a2-bc63-ebf4c63b6e04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bb724cf-a9a4-4eb3-b90e-f1c6bf0f820c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab1bba70-ca93-4e4f-bd7e-5b7c25951bbe"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7fe44387-8a68-4ff8-be5d-a77acde9b247",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c7c10379-03bd-4885-a7ca-3bf87e541550",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f26dec20-c197-48db-877a-1422f3ae657b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9afc4bf-bae1-4888-92d9-18216f6bcc7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f874122b-e4d7-4723-8de8-be0d8b3ac6f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2a6e5edc-1a42-4850-9fd0-0882f4af961a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96e9ef95-ce67-481c-84ea-81162a56843d",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65c4a324-f67b-4e75-ba24-112c5c1a4fbe",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "e1592ee2-1003-4ca9-8928-355263182e21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2efca009-6ba5-41d2-81bd-c5f32021e4a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "51b3b02f-aab2-43e5-b1f6-73037ae5d153"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eb5becc3-1391-42df-8dbc-31ae39de00d1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b86ba248-f162-4a17-803f-423e7784cedc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "02cf28be-d5f0-436a-8c69-66bcdf2c71b2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f3e17b1d-0b84-45f7-a07e-43b27025fdec"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a309b12d-4eb9-4bf8-83c4-75697fd40fa4",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f9f16de8-5ded-4a2d-a96c-5db2cd1e3ad9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "33911d98-da42-4b99-87bf-2db54395b883",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f4dedfa7-0d8e-4752-a299-58be0a4ea95a"
            }
          }
        ]
      },
      {
        "id": "31ab9559-4d70-4f5c-ade1-dffd4d35ee67",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "e91acd95-bc9a-4527-afe8-06f24a1ad574",
            "name": "Negative Testing",
            "item": [
              {
                "id": "22cdad8b-69b6-4522-a304-f5a8d3940a0a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "474a1610-55c3-4b26-9609-5d4c9defda55",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b25c4257-dcaa-4453-b0a8-d6a17681a826",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "140b59f5-b8a2-4312-b299-9363a03dcd2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e59f441-4ab1-40ff-b8b3-ebf37c4cb598",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a21bd5c2-c484-4235-9b49-4c7973cd8d46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce3af9d2-1c96-4efd-bbfd-8cb06fee5b51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ca27d82-bef0-429b-8e52-ccc1e32da011",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d87de827-52b9-460f-a86f-38818db99f20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9be46f5-6325-46e8-bf59-a0d65c969f86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dd6af30-df59-45c8-9e57-e1c828311364",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f03fbb33-a02a-448e-b288-7a31e14c36e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f55bf251-c45f-4ff3-bb28-49f12e9c10c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6850c45f-1a40-4e15-b273-5f4211a8259f",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4585d1ea-11f6-4ad9-9ebe-c06d69762862",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07a7e69c-3c6a-4f63-b43d-004de79786b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60f81326-4869-4e02-8921-3c8490301f1c",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd5e2801-c1ea-4983-a098-44289aed0a4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99578816-c667-47eb-8d14-56d66f5693ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76a0a537-b2b5-42d6-88b1-b7b70c2318f9",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a077064e-41b4-4f1b-b2a0-02ee04826137",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6281d436-c305-416c-8987-d68eafa1e236"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6439ebf3-7a4c-4b78-9706-72afb9854d08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f7b8b99-debf-491e-8a10-270df2ae8202"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0d0e331-c83b-42b6-aa68-fc8b7e444d42",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3da1495-8bfa-43fa-b40f-d749a417cbb4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb6f3a24-7f4e-401a-b25e-9fc97be3b544"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f43a3ca-762c-46f8-a985-0f4bf7a603bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23eb43eb-0a68-44a5-8669-2ca84618db45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "254461ac-f890-46e4-b548-95b0ea65516c",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af7cb442-02c5-4a79-83ed-151094628899",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20fa365f-525d-468a-8485-f8f785dce21e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d205056-8378-44a4-b1bf-e85c1678b01c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ac713c6-e04e-4cc8-81e4-640cd5bf766b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3be00642-8115-4dd6-8ad2-b3260fb3e58e",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9b5f9fe-bf43-4111-b149-c0bd48ac8abd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c2a08d4-ae6e-4aa3-a9b8-7e309f499c47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70807873-0f85-4a39-b0f7-fa255b6726aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdcfeb84-3a06-4ba0-a524-2c0bfe8b8402"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fca84e29-124d-440b-9f33-464a6d46c338",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e41a1602-4585-4e80-871b-e8a922852c04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19c5a70b-d557-4320-98b3-fb78dd106993"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98c96456-61cb-4c91-9790-4cfd160a6908",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c06b59f3-d5c9-4601-9a0b-2796cf069735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78119096-d5a8-4aa6-a561-5448e152245b",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7baf8e5-6f41-4825-b452-9e9397e73072",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f01827e5-933a-4ca6-8151-05403ebc71b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9d9883b-22be-4b0b-91e7-54737ba7a89c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2822fae2-0ca1-47ff-8e76-7f394b3e5ac5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1769b7d-ba5f-4171-9ea2-776c96823a64",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88bda4fc-0fae-4e1f-b186-8cc98481cee2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94a634ab-b42f-4536-976c-323ebebfb8f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d2c947a-72d4-4444-94a3-5409aa48ee93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cba48965-2632-4936-a867-03878bc14fe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dec1ce5e-8e81-45fe-a4fe-3de34d7dbb85",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f5e74db-1be7-43a3-a9cf-9505038d6709",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cdc51204-ad11-4133-9642-660d347d55b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff3098fa-2c00-4797-85fc-a517b82231e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a95aafd-66bb-40bf-951e-f8036d6234ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97b55646-6d65-4638-bb03-244f6a56f8e7",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "284b43fd-02d6-4b0f-8605-77d3a06fa860",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c15c689-9895-4138-879e-8ba4e8bdf731"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "986c50a1-6bab-453c-896b-6c105356894b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04359691-cded-44d9-8e13-f959a4ff0370"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47887281-64d5-46ab-b5db-75da8dd1a100",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88ba0d5c-2ab8-4960-9fab-1376fb53a62c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "879b4e88-3e01-4fce-84b1-c3497f5e2b31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a67af09-8768-402e-94f9-c94e1c0e0d59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe9c43bc-c0f8-4ef5-99dc-a7e66c383c82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e91b1d8-b584-450c-8d9e-a59c7f59069b",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6492041e-60f6-4348-a98f-666da94e9aba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a8d6be6-b740-4cf8-aad1-586e8d4c99c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "707999c5-e782-473b-815f-3de95361618b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "567d25e3-aaaa-433f-b7d9-fe7321d8f7e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8680c581-6a56-487e-bb9e-eaec993f71da",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f65ba52-5372-4bcb-80bb-ef9064577baa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "856398ea-ecea-47c4-87ba-40b29ef2abef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "283dc8f7-fc11-4ae2-9092-c3d843dc28b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cc7c861-c528-41d4-bdf9-0bdb8f2a77b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70304089-cae1-4916-bba2-19b4008873ac",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71b3e349-f98b-4724-bb89-471659d22d56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2937f78-2209-4731-b1c3-97c6a84586db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6ec9782-7c16-42d6-ba2c-ec0b685c8cd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4afd4f5-f25a-4dd1-b7fc-fd21bf92f3b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5726207e-beab-4201-900c-d206b2e3987b",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8db5ab8c-8c2d-4c43-a567-fe9261da2c99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd6165e3-eabe-46cb-ba15-5a2102fe245a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ad41eec-3729-4fa9-b792-71518125addc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "722cfad3-c719-4476-b496-42dead388749"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e93a2338-4481-4a0f-ada2-432c9257f762",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7473c01f-3329-4cff-bc2f-f625bd9b356b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fa072f4-9e0c-4603-81ec-007533ff0d56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e72a365-2a2c-4a4b-a781-db5b35e939a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b806b854-3b09-4bf1-930c-1f074335b35e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cd8d183-5e46-4fc2-bd5e-a208f666b719",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "075ebe06-ed31-4ceb-ac3e-482c31af1653",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51266ad3-d359-452a-873f-3247e3ca23bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01ef88d2-688a-4d9e-a481-ec250c539b23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56804360-8ee6-4d4c-b377-99723e278938"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e811f49-3ec9-4013-b056-dcd8aeb53cf0",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5320b66-7f46-4f3f-af42-ce67972d60c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26b28d14-f5db-48d2-b994-4de9d6a22ef7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "118a48d8-3a0a-4f2b-a3ed-d33263b7e49f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42539b8f-8ec4-427e-a24d-6e9879543dc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b45dc1d-5533-4786-a4cb-79f1fcacc976",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35f37d93-0f9e-4b76-80f5-b407f3d25b71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e89827bd-a64c-4fe1-ba7b-57cc7ec67027"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe278858-8d25-47cb-a782-f457f9e4408a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "187c127b-7780-44f8-98d3-3e823b91cb5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "704b4ea2-02e4-4abc-bc96-e25a24f4fb25",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46fe242c-b628-4d9b-b843-8e7ea9966d77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d4122b3-6731-4728-a101-02a74cc288cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7801d25d-2dac-4757-b1bd-2be7c107f2e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32995a75-a4dc-4fa8-ac58-c6050a973e48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35f271da-2704-4135-8c3a-31f7427aab93",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efa64535-c19e-432c-a3e4-cfbfa7e84f9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c92e2e5-aad6-47a5-9168-ce7dcf8f114a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8501b025-bc19-4036-8f79-fb5bc066b613",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4bf361b-ecb1-4dae-8acc-6d569a34b22a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eb9f6ed-dbf5-40b7-921b-730ac0fe4050",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2dae8a4-53f5-472e-82e4-771f785eabf4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d6c7f7b-ce14-4662-a352-afad77cb333b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d19e4561-4f10-4148-a3ea-454a369d81b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bc2e358-37cd-4fe5-a26e-ea2baec541ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "892a7c83-0542-41ec-95a6-dfe42128a148",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4c3bd8e-f2f3-44c3-ba6c-1757f82fdb2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b77d8eb9-62ce-4097-8e79-f7fb6cdd6685"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ff5e245-b80c-47d0-8415-94cb423b695d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e23e9ab7-eede-4678-b568-7cf03690481e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "847c0330-2084-4f97-87f9-1e9a2d91f8bc",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a841bd14-2517-4d8f-a097-461c4b46ca85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3fd2d16-6ddd-4eef-9656-a53394f92b2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f01025e1-f19d-44e1-b1b2-c60185c556ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51e0db5a-448a-4620-b552-71c7755939b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26d84ff4-63a7-4fd4-a356-e269ad1612f6",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d01159ae-6114-4500-86be-7245d38a27d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c6fc723-e466-4538-9bca-95c4eae4f7c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e0b00e0-7806-462a-afdf-90193557fb16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3594706d-650e-4e94-bcf1-7c125487520f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "159532d9-0b82-4484-a3e3-2231bcd58911",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e86310d-1ffd-44ac-8a53-cbf830e2a2a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51990531-08c8-45c4-ba3f-b56397e3db71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7da33501-d5b5-439f-8f9d-25da85fd11aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9396ab7-b784-4f85-9995-d55fa3df3326"
                        }
                      }
                    ]
                  },
                  {
                    "id": "310dc340-4aff-44dd-808f-6f5efbf9815e",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d308f35-1393-4a4a-82d5-c0f6594aeb2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5caa000-21f5-4b92-bfce-ea0fa06f20f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c83f0dba-1a71-4de6-8520-8ed0dd90d018",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e87c7f8d-d1e3-44c9-9963-41949739ee12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b15ae591-73cb-4210-96ff-0048dff2c868",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a1d82d8-d9f1-4e76-9459-29fa5e2901db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "398f6760-3766-4cfa-bacf-93045d9aeb10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbb8f890-fa0d-468f-97cd-241810631c7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "058915be-01c3-4e26-8fc7-5be180fcb85b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95f7ca30-bf18-4b98-a926-2182b3abb197",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6144adcf-8536-4fdd-8f38-e1a05f018ce2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31b4dbd7-1fb5-472a-96e6-10c1f875eae3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18099a4b-a711-4c39-a784-001b250e7461",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae4e4d02-3c36-4fc0-bec8-eccc198a0a75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd77afb5-6107-49b0-b42e-b0428a84227f",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14a0522e-f04f-4337-8f8b-b56cc1da35e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "259ac5ab-a530-43f4-a202-33ecfe083f7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e0866e6-eda5-48a6-9bf7-8d3393dee7db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d722dd61-a4bc-4b7a-a63e-ed3c81f9d6fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8955d1b3-a5a9-448a-b949-a061045bfa94",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ea18744-91e8-4314-9417-44736662d6dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b08318f-d1d7-4164-b1ea-79c9710ac2bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "922067c9-3219-49a4-b02c-82d52e42d777",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d06f1af-98e5-434a-baf5-916cca14c734"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bced5d35-efee-4926-a78e-3f95a984766a",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "616e413e-5bab-470e-9447-2706e84533ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3144062c-1248-444f-8c3c-b09b3822f7f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a30fb2ee-7ae1-41ab-9977-369f333e4c13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efbe05b4-12c7-4a84-bc78-aa9e7f72cbbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e5d4b0e-17bd-4b77-8bd9-f64651bcf75e",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "408955d6-d36b-49a8-9caa-531083209527",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e70c5ae2-1602-43b3-90ac-88638e4e0564"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af435f2c-4b78-42cc-b030-be44d11b3e3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c469b2a3-06b1-479a-b2bf-5d194e8c3edb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8950d92-034e-4041-9a56-25e85be11531",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f20ea641-e31b-4d0b-a492-64959efc1bb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46d3670f-f185-4797-b946-0f5951b66c12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab25f64f-a1b5-4376-bb25-71ff4f479bb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ab25162-68e2-4ddc-82f5-98c39f1a2250"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fead31d3-a140-4011-aa5c-43b9311dbca2",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d60aa53-8b2e-4d6c-b623-64f4865112b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4149f42a-d73a-4aa1-b51f-fd50beea8834"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d0e5252-313f-4ed5-875e-9b316136aa0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1f2e516-80a6-4913-a4f3-15ece2743f2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "542a696a-69c3-43e6-bd58-6d12487f33da",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c5e6bfd-880e-4bef-8513-7b0af0db7e6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b538b1b-987a-4901-a809-630d3f09caf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1feb418-e6af-48f5-b755-1ee471815948",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53b2e382-fa6a-4502-a5af-8d476195db55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "695b19e8-2720-4c32-af1b-eae1e8d53c52",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bd09202-86a9-4887-9e67-1f7cb9a8be2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78abb79a-1603-4135-9aef-bd3fe70d724e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1d1bb82-39a3-491f-a4f4-533c08121ab1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0007d0a7-b2c3-4271-9e83-15d8bffdf2dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb0fcc0d-f365-4e4a-97bb-007aa5b4bea3",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c56aef5-2a6a-46ab-9bd7-112798d4e676",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a3ad1e6-a0d0-4e9b-872b-7600797ce043"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b817c10-7834-4f96-aa0a-5c66cc07ab59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ba6068b-bbd3-4153-b619-610602eaacee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51746354-5fed-48b1-9aab-b280b5f8e3f2",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5d28f3d-3b61-4295-b1ad-5461e3bbe16f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d332c49-f7bf-4d87-8698-4014f00bf446"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "521a0a10-1f08-4e2e-ad4e-b556bc419a25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11fa39a5-2751-4f41-82f8-d1b7e5846e59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a9159ff-325b-4bed-a7a9-d313361f31b8",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1809682-fca1-46d7-935e-ad98b137dfd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82f61e8e-0dcd-469a-aa15-66e8b3d91e5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81495362-844b-4a28-9c2a-4367d7d3caa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31ec0440-d1f0-47b6-8a58-1bd43b2149c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd819ef2-435b-4522-ab8f-a52870e1e7ce",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c17f40b-a51a-4492-a4bd-f8435539ba2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2cc4e6a-e2a9-4825-a7f1-a191e51ca1b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7feea890-e3c6-44e7-85f6-e0136cb3b858",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2df67b70-44b2-46f8-a262-152efa2e546e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24c9d892-f827-4dd1-98d6-e1a02d1cef61",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76011326-8819-4151-aa4a-a5504f38c81a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a954bd5e-b045-4fc8-8db9-91c25b949f81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ac50fb7-6aa5-4e39-8bbf-f1a0289c0bcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "910ec199-8759-4a50-a2f4-6926d1d2a8fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a58393d1-0e95-4430-b9b3-6c486352ca41",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8792d37-8997-465d-8965-b48d01ee786d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfd2040f-da17-4eb8-a50e-763d6504f22b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e26e7cf-1bcc-4e1e-a67b-6f328cc2aebb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81dfd1ac-8e5a-4da8-8682-1a66f31f3e70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "087f5f12-799f-41c4-b4ec-ba8e34359e7a",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90f4d088-c5b5-41e9-a145-233bfbe43ac9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a25f868a-f729-48bf-aea5-dcc62c35d7f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46c3312d-772b-4260-9fb4-a093c545f729",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5e8838e-e698-40b8-b19a-f740661120fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75c04a74-ca0a-40b6-94e0-86187749cc05",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9551fc8e-08b4-4440-834a-ed41083b618d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e8f0ac0-81c6-4c87-a44c-6fb4b362665a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e07d5c62-d7d4-4d5b-a816-84c6c2fafb76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "607f8842-a327-4d93-98d3-466bc452df9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3346ff97-f9dc-4914-902d-1de30cd19a1f",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52126826-7143-48fb-b85a-31ffb62e8a62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "579ecc4f-db35-4486-8262-2b0c8ee0ed04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66d6fbce-a529-4a39-874b-59aa4b122492",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "205a4226-36e9-4163-a032-176edd3f7c59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c7f86fa-a7e8-4c4e-a7cd-4d0a77bf3175",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bae67f7d-225a-4f3d-ad90-641449225cbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bc0cf71-a16f-49c7-8635-702ac7a2762c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc2e9395-0709-497d-b8db-95f4978b5b74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21031bb5-322c-4f7a-b4f2-7a6ad8e1d8eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed35c380-af5d-4620-9165-1b16880ade7a",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0103aa61-92ce-4614-96bd-3b202621798e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fb38ae6-d617-4fbd-8049-8d9c6aed4564"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e46ca9c-ba02-4249-8eaf-c4a6e202e739",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5aef55a1-ad2c-40e8-9df5-fda26ab76911"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10592dda-ebac-47f4-93c8-15f02c4f89d3",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a31148c9-64e4-410a-bfc6-e9389d2b1964",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "825d2f7d-c145-4b6a-984a-55c47bf18f54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b351e42-d382-41a9-9035-8017466c5eaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6480bbd-4233-4ac9-9f16-bb8cb3a106f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44c756f3-a592-4c3c-80e5-21f321a69a70",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e68b1f25-bd60-4a27-9abc-eb0bc9e47b97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adaa96f1-f3b3-4eee-93f2-b4ab67780d3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a89453c-1e5f-40d8-8097-4db2403fc863",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "678606fe-fa3e-44c9-960a-3cf8884ee483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "998ca51b-3dbe-4a15-9633-072dcab390ea",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dc94866-96df-4da2-8784-873ade6f459e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71119b18-78e2-4ff9-a65e-fee583b95483"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e3e1d94-25c9-41c8-9709-9bf02fdcacf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ac3e5db-ab46-4c6e-88c5-8aab72f2e5da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef27ba92-97f8-4cb4-a8ea-9b9f9568fa68",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0f3d0f8-51b1-456e-8006-5b7b487c76fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f127715-62e1-41ba-a230-23b7613f27b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c383bfd7-c6ae-4f41-9780-afd24acde759",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78aad181-2425-4501-8d01-9e5c0d3243d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e9556a5-776b-4cdc-bd3c-84636457c13b",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bb86db0-a768-46ba-9f32-4c1494e5f589",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3c2a67d-2d6c-42ed-a629-a202f310ff52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c73eb710-21e8-4e40-b8fa-e8843eb8e262",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8714fdab-2385-4f27-baa6-7487adc1fe9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9983d984-b1d9-4fb4-9cb1-72577a0c8ad6",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e548ad25-5ba2-4460-8bfe-af3a3204d93d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58ada50b-beab-4596-b6c7-2736622f3b9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "016cd565-c3e0-4c68-aa9e-c5bf23c522c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3600fca6-f33e-4e3e-ac1b-5767352d1da4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69ccb1d2-51cd-477a-ae5b-4f29bebadb41",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1ee99ad-9880-4733-bd30-80166c124de9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5d466f2-5f9a-44a7-9b14-75f16e6f6b16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99eeb414-49dd-4542-a059-30bdae2d8a0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f59b6300-34ad-45d2-930d-58d3b521700b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83bbb967-3645-4175-9f92-13af977a6381",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a62fc301-22f0-46f1-824e-dcbd64ab8c03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96b0a544-c419-4935-b29f-abf13f31e98a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d7f904d-088b-4a59-ab06-3c37c1004d04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf1ebc34-f090-438c-9e12-38c12a8ede35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfce8cb8-5bd5-416d-b1b3-3312b4e6880e",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "966012b9-3bbd-41d9-982e-4bbdbb5cd80e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ec55c34-7f64-4072-9caa-4029339386ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af7bb5d1-fbf3-4b72-9ac3-9406c8dfbc7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4caa969-3757-4da0-a1d5-6db2f94a9522"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58a49c29-0738-4a9c-98e3-ae2f0dae8722",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baf29718-4e6b-4a45-a001-36442352328c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6630c68-e0d7-4893-9a01-116bad452484"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fd5a370-bf50-4df3-9d96-464ed995c6eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b334721-971a-419b-a3b0-dd9321a6baf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7d82d79-eb2c-40f5-a814-5c4712d81de9",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3742dce8-e6ff-40a8-a40d-f8db396cc598",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2de6e33-b995-4d60-8848-806f64b7051f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72ce78d1-df3a-4d34-a3e3-098f87222fd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af294ce2-9b9c-4abb-9f6f-75bd566d5471"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fc0866c-642f-4828-82ca-b74cf10730d1",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c42bb8b8-aea6-4e8b-823d-e215d0178281",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9628d360-dea7-4cf7-8af6-c858285cba40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "481a3c58-294e-4992-b55a-73b3a98ecf17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b916fcb7-384d-4db4-ba47-a9b798c7d5a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4aa30df-faff-4627-92f5-7c665078bb89",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eadb397-202f-432a-b7b5-6601adfed1e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "614d4a42-9e94-433d-a39f-a6b5f9cc9cf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36b4c8fd-5a22-4f6c-bd22-abeeebaa5570",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7d3742d-dbb4-4137-82ed-482934ac6552"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c11c925-24b9-4a30-b86f-8f9509f3cf0c",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de4a009e-4b22-4116-ade7-46c356afad34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b80c309d-fba2-4872-a6cb-a45b5f874786"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aedbe563-5de3-4a9b-8d6a-61028a9cad69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1522f08d-7c40-41a4-98f0-7c719d015338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7598848-08b1-480c-be92-2d469093de1a",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebea4036-c0af-4505-a93e-59a6082d0c06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42e1e106-88f0-491a-a83a-c9f72181cb17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9f7721e-0e84-4150-8f03-c0e518183106",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30cb0979-6d09-4321-9dc2-466648e640a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bcee38b-a1c5-4584-8a36-10afe406cbc8",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39d810c7-1f34-41ef-95cc-95ccde2878b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32ebeda4-56fc-4203-aff2-768748696a09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "291c966e-6775-413b-8790-566b3ddd3940",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efebb0d5-3bf4-4609-973c-203167889270"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22cd0b7f-fcf3-4711-a8de-048e9f2039e4",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45cc32fb-da74-4c79-94d6-57f0e5bd6110",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27117297-bff9-4699-8395-ec95031f610e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2886c3a-7e47-442d-9766-a60ad8167f46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "745dccf1-56c6-4850-9630-6b4aa2fb4e13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0a604a1-2e3d-4f1f-953d-01d13e9476b8",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eda11f61-a969-4b03-b907-cafc6e953e13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f064c56-f831-4d3b-9a8a-c0fc5181db5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29dfcfa3-a904-46f0-abdf-76734367db58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7d78791-7130-469e-b054-7b485149a2a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59a2320d-f91a-46d8-8d5d-368ce915cb6f",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef82aa3a-83bc-47fd-ab07-434dd09e10c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96a00615-1492-4311-86d4-fae05f9381b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "559582be-e9ac-4fef-add0-b4569d47ac44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43a0de34-7249-4a51-8c1c-8ef74f510efe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94add9f4-88aa-4c7f-959e-d8f1e6c01788",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73b16378-fcf0-4af3-a6c0-62d2600adb2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "adef39eb-cc88-422c-a5b3-79b867af1da1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4100be7-a88b-426e-9a35-13be2810680e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4fe16d5-98e7-43b2-86a2-793358d17267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8407211c-2579-49b1-97d3-4323aa855944",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a574981-ba93-4270-ab9b-826aa177b715",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be0ab09a-fd3f-42b2-b632-b7ab8e60c410"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6033c3d0-44aa-4e3f-812e-199655ac39a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c577f25-015c-4658-836b-d3fe2c5700de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abc69c5d-98e7-4b33-a790-49484af55464",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49df7dff-8840-43b9-8f4d-ceef31d09a58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "859cc60d-e0ea-4952-8fbe-ce0c6b0cd28c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99fb4d8d-c53f-4cd6-87ff-f4524ad3b2ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f019814-95ea-4a6f-b07b-e55e9885206d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eb70f9a-0b79-4edf-9ada-52eccd1e6d12",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "086175c3-b6ed-4b20-b0c4-c515a923a6ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d752a974-3969-4706-be83-1b2ee2d10d1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "310a2df0-2adb-496d-8a22-ad69ffa6298e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14d1d2c7-2d89-46cb-972b-49e38106a2ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45899971-d584-4edc-a776-1a30ea0b107b",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bd1b1ed-3b7c-4449-82ec-c127bdd28fdc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90d1c90c-2a7b-4ad6-a77b-21dd8e7d0c87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4b72078-aab1-4f65-a429-c63801fae6c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd12d521-7254-47b3-adb5-edd355d1258b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a898646c-2dc2-4ae9-a823-5bb47eea65b1",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d0b48de-78ed-49dd-be7e-d7a9e06296c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b374250-9106-420e-aadf-d09957e6899b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c110ce82-1435-4315-a4f6-e3a8dab675c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a60fa883-2180-4ec1-9ace-96f14edd8478"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d29f354-3561-40b9-938d-8f8449e0e2f3",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9e19b91-2da3-4f11-b076-39ddf73ce37c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f72e528e-9218-4c89-b43d-5b70f7098370"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5260659-c9a6-42e1-8c67-2c96f3150674",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f4f0cc6-a876-4f73-8642-c63635a7ef8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9d12b30-b3bb-4ba0-9e0c-f3eae761c71a",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6949a675-370f-443a-9ef6-37e6dc86328b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2473d91c-c6d5-4714-b08e-3cc46a2e49e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4736f619-46ed-4918-befd-95a7783ba34d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00e5debb-6665-4ab2-84c2-e671bb0d8dd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bceb846-6cf0-4f83-adac-0ecb8deec74c",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e192cc2-72bb-4448-a9d0-403dc6a962aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a311401-a133-43e9-b51d-7a11b71ec15a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cf692bb-9df1-49c4-9d72-e3fc23b7dbeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2455cc86-54fe-47dc-b40c-0dcc17d45881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1cbbf44-f991-419a-acf7-7db1f3b25ad2",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5adcffaa-0bd3-422f-8df7-004180392a85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "694b7bbd-b25e-4a74-985b-3004e1d21006"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c7712a4-9114-4a14-8cee-4ee4b43ff0e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57eadc8a-da4d-4fdb-a944-5803a625f502"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e20a93f-88f7-4926-ad3a-8153178d884c",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18d82928-e302-4a93-b3cf-8c57815ab8f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "563146e6-0e4d-4d72-9fb8-7297d6704965"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "289e109a-2dff-4e34-9445-75c263c2b349",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "633f3b4a-2f63-46a3-8a71-dc7d1be487f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3594d42-10d2-44bc-9b11-05f7ce96c543",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0886d4c6-93a4-4b2f-86a6-2d8151fb9b30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d08b757-c1d6-421e-80d8-7813ee92d499"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29778b25-e692-41a0-b50f-c4d5aaba68c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cbec0a7-25c1-4ed1-a180-760ebb88d90b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ac1a3e5-2f46-48b2-8298-9b11787d9649",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eae16aa4-f3ca-4e85-9348-8f8d5a4d1141",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a428bc6c-3875-4127-9c30-5d85a7d0a966"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d65e8eeb-2292-44c7-86a9-94f16d239441",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6f39529-e319-47d2-98db-e832314a050f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7f250b3-b200-4c56-8915-a9d84a8c60c7",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ec56ab4-a6e9-4884-9e99-d97de9d71cd8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb339933-18ef-4821-a803-f9294e4e2a5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03ebc411-84cf-453e-af5f-4cf09e894b49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49fad3aa-d6f3-4241-aa36-4e02ae7ca506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91b7276c-d46a-47d8-93b8-f74f4d9ac98d",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c24f54c8-b7d1-413f-b8dc-20aefa87f6f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ce03a26-fa80-483d-8d45-2c47f5858eb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc9f429e-b76c-4b62-b602-1312139b4dfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f81c6a3-f420-47e7-9948-8f185ef0b149"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b2869ec-206a-44dd-b618-2423b75feb1e",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fdfa4e5-e064-4c39-aae2-d4df69fe1cb3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "538729f7-378c-412e-92c5-301731105085"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c2bbbb7-f076-4a40-8928-41f34351baef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3c830f0-703c-4f33-99e8-58f891c9446a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81615368-fc6f-48c7-bd86-8c57abfde6d3",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00f4c966-aba9-4c58-a6a1-0e5c7678317d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cdde2f1c-932f-4d29-a939-b1c8b56431dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f615ed6c-52ba-44ea-8eff-454d1915a175",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73300293-6fa5-483c-87a6-9379caf82526"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feba5737-0592-4bd0-806d-9731dd9cb978",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9068bbd8-1742-49b1-8d95-08a7f083042c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb4085a4-8032-4a22-adcf-771ce35da48b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc24bef0-7e97-4a06-854c-cbbc57045557",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4f2cea4-90ad-4f63-8216-2a0a36b4fb45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "146c52e0-2223-453c-9d03-934b209a8878",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbfc2b17-0388-49ca-81d3-29a508cbb3aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5044cd81-8ce2-469b-b193-867bfc2e3d76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d7a3a90-0f7b-4248-9a14-e2a350e7b7c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a06a5089-b4e1-4efd-b91e-773feddb13bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3beeb419-fb66-42a4-a18f-acccc7f8e236",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84e581ab-4086-4670-8b54-fb215d866fb2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf14cb4e-8cc9-4375-ab88-9ac785aae562"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27577a8b-505e-4d5e-9ca0-71eed70f109e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8192770e-e515-4bb8-a5ad-b7ada7c80e02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a39f2f0-6499-488a-b1fd-af90a35ec780",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fad30cd-2ed2-435c-b8bc-4080c2ffd6b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c213a6fb-36b9-4e04-8c06-0a0f7a8fd952"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49b91812-fc0f-44c5-8674-df69144f5faf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a08ff56a-428b-45d7-847a-647dfda50bbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15c5b960-1b88-4d50-a961-53b7cc4a2d7c",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c8afc37-cb70-4f5b-a703-6db42267444e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57a3d74a-214b-48cc-ae35-89fdc30eac40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9360a629-f665-49f1-bf81-1aabebb61cb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8880dc32-d971-47f2-befa-1e958155e549"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee67c01b-f42c-4389-87c1-243efb0c3279",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93d1cffa-9e54-4a66-a64c-47df68b89e02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35fcc220-c926-4ce5-81f2-cfcf37c6e23d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cfd74cb-7d8e-49eb-8eec-fe89afc64e64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e825f2a4-191c-42a9-8865-b62b557486e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a50a4c7-1512-4e5e-8f97-bf227dcc87ad",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47675f69-9972-466e-92ac-7493732d8529",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "342e033d-924b-4687-9026-a353b48aea7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55ac6837-9e83-4a6b-9020-261493e00374",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4623b55c-90b9-4fcc-b48d-3ba9738b2c50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cd6b6a9-b110-4cbf-a219-2575127d6edb",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2414826a-2d26-4e37-bf64-1a45b332c5b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "071b47f4-d157-4d18-ae1e-58535bb9d070"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14cb31ce-f562-40a9-a3e3-99f738c2b0f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7452ad6b-c901-4cb0-8a2b-aace5b7bf0b3"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f390272b-0059-432a-b6a4-677ffbde4232",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "98d0e7df-6ac5-4b42-a031-cf5d719bd700"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "20d1a469-17e4-449e-9684-4b2262800ec5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "006f7090-d0a6-4849-983e-ec1681744c8e"
                    }
                  }
                ]
              },
              {
                "id": "5ac0e5bb-0e4f-43e7-9c9f-e83a24a92c7f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8d9500c2-47ca-4d57-9406-c78827b76b1f",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c615cb5-c296-442b-b5e1-ec2acc44cf3a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "2b6f57f4-78a4-49d2-895c-afe62ff90730"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09450a13-c4da-450b-904a-e7a76a852e7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ee9242ea-f96c-41c9-b1ef-d3dab6323c4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1348b251-b55b-48a2-a1c2-403031cfdf06",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "078201e3-f6b0-41bb-880a-64db4b0fdec0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "6ea8146e-9a51-4bee-8afe-6c971013037e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15dc0007-c41c-46a5-9bd7-d54a5d228638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8e26d859-b6d7-4747-b2e9-d8b6ca403a9e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9b597f80-3d48-4154-8621-51c91b53ad0d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ab916472-259e-4707-99b6-402aa421771e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7228681b-500b-4f81-90f7-4b78a410e5cf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8b3e0905-d292-4928-8fd8-7231c448ca59"
                    }
                  }
                ]
              },
              {
                "id": "4b34a624-286b-4f4e-aae4-9d0420e533b2",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "be96345b-b8e0-431e-8555-96c133faa781",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a04b219b-e02b-4926-bfa0-25affbfb984b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "04c38005-b8ac-4d7c-91c6-13401687643e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f97606c-d484-41ee-92b3-2b8ccf2a2d27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b823306f-f098-47d6-bfc7-2cb65c601036"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ae4935a0-8436-4fbf-9694-e4eca3aab357",
            "name": "Positive Testing",
            "item": [
              {
                "id": "dbd02c7a-92b2-4c7e-85b9-b59dbe7b2ef9",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bae7aeab-4adb-47f3-bc37-c0ef92405261",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "37105238-70fb-476a-900a-63a8b623d1cd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b4bb9ad1-b3e0-4823-96ff-ce0ff0d6eda1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "14385e80-db36-497f-91e4-824235c1a73a"
                    }
                  }
                ]
              },
              {
                "id": "828088ee-3ee3-491b-8d76-c58c76c1db37",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a50de758-9c02-4df9-9136-4518d36131c0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "83b78eea-63e2-4b80-9580-7f98d85d6fbf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8b418d6f-7b72-4b6a-9acb-abcf8f01593f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "125e2f9b-7e98-4885-b5cd-ecc94b390a97"
                    }
                  }
                ]
              },
              {
                "id": "0979f0ef-6999-48ad-bdaa-b886692d6840",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cfd8a291-7d26-41af-a844-3b453fc0a597",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "81daa295-3899-4724-ac46-bf4d73c5ffa6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b0c5d67e-1ceb-4ab2-8ec7-3caffb9fe193",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cfaa3741-c8eb-4a5b-876a-ff9bd56d8424"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bcdde170-f07e-425c-bef4-1c110083d280",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "f3f5ba10-1c86-40ba-a128-522b1df974e1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "058f390b-3239-4e0c-ae13-d8a6cb6f1b26",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0037d74d-642a-43d7-9757-61fe4500dff7"
            }
          }
        ]
      },
      {
        "id": "c2e5d2f4-e18d-4263-8482-820d0e83494b",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "56c7bc06-2860-479b-95d9-d7e9e18038e3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d69fe81a-0917-4af4-98bd-3d7b679f109a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8ed0cf9e-ee8a-46f3-8890-9e17e7ea8cda",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06c4086f-9cc0-4a37-8bda-27f91ec374c3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a18dc8be-d4ab-422b-ac87-6d7746953de4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb0ca02b-b48b-4e99-b64b-973162e2c7cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a5236075-3bf6-4611-98d6-b0f9d8fe1961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9ed90a9-db05-4c47-81c5-7d1c32baae90",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "899ec451-b787-4bc0-8104-3373391b9550",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "edf69408-3f6b-4a3e-a1f1-061c6b10595a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35e097b9-e6a5-4520-9620-a634eb47e909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5cb30077-c4d9-4551-bafc-41be6d10fdf4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0e84d8f9-1154-4354-bf16-23c259cc2668",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8b08cc9a-3204-4148-965e-63b17fc40100"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "65381f18-c507-4d0e-8d5a-9d49b4f612dc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6acbee6b-6fea-41c0-a0d7-d5bd6c72fdeb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a98ffdf2-9855-4acf-b96c-6c49e1c45356",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "49ae54a8-f2be-4105-850a-a901a23786c9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3a72c397-239f-41b4-8d53-dc5819a76db1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6ca14649-3bad-48b3-b9f0-5eda64bfe965"
            }
          }
        ]
      },
      {
        "id": "8ad8c044-78db-4169-a5ed-6870c8795e40",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "8f3e32f1-6178-41c2-b89b-d718ce0bd342",
            "name": "Negative Testing",
            "item": [
              {
                "id": "291e6f0d-a990-4aac-b943-4a0d9107b9b8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ac05a80a-aa6c-4591-a4ef-7b8594f966b8",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0544f103-bd5f-4195-9b8f-efc7db55253c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c2b22b6d-e262-43e0-baff-6bf10ff9e7a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "baa952ab-f119-4bb4-9a77-6047012943ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e5c4f15e-e8d5-460b-bacf-724df81a5d8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d986878-4c96-4d3f-877a-3e441b63f28c",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b8ad42c-4884-4d67-8b2c-4220d9aebac3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "101c4df1-59cb-4698-8ca3-8a8aefe927c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c88f5c74-0cde-4055-a38c-ca146294d5b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c77858e7-43ab-4ed0-8c58-4751a0ce81ea"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "77fdda7f-5b59-45a3-bcc6-c0acbbcd383d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "647cfe07-8bee-4cda-958b-ded306538d3c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d8d6ebfc-c71b-4a1d-8cf2-a10ea051e1d4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1324cf51-554e-4470-ab53-8c28d8e4354f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d66acc31-10b8-4f76-bdd9-a7dab7692bdb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "94f7b834-b45b-450c-bae8-cab86f671013"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0f4aa919-5661-45ea-8da1-2839f472ae5f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "39603c38-4441-4079-9f97-b2a3414cd960"
            }
          }
        ]
      },
      {
        "id": "7167fa4f-87ea-49f9-84e7-e180d5f17438",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "b51ba091-5e50-4d20-926b-0d588aa45d64",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e12190c4-0938-4280-8cc2-7d7f3b37c896",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "874440c1-3e60-4944-b8cc-41102f010d66",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "814c7c2b-6071-48bf-9890-4f1041d69575",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6520f398-7a22-49bc-83cd-7c4d1ca2229d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51fd3ac9-8378-4b14-9555-1d7afb44ee53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2ef848f0-12dd-42e5-88f2-f6575c65e6c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccfa4b3b-3d10-4494-a435-3f1c6034b867",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e522826-1b65-440c-8dc0-f91148a7acb8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "13c5424b-c37e-4598-92b2-92cb08367833"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82f77d2e-adb6-450c-9dd0-d2021e4ea1d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "49b03c5b-3cc3-4a10-905e-c57aa533d250"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0b0cd1f7-6fc5-47a7-a58e-e7effa383cdc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ad12abeb-0799-48f2-be65-21f62f474fd1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e1d0f32a-6519-45d5-99c4-6273dd62e8f7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0f261f9f-6ac8-4deb-bbe5-c5bb2b2c8314"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "21c4f289-9253-4917-86de-0d4b81569ec0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "93f7dee0-79ef-441b-bbe2-619aa327dca3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "43bb0240-a425-49c3-bfcf-ed94aae98eeb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7347add2-df82-49cc-84f9-c72e880821e7"
            }
          }
        ]
      },
      {
        "id": "23f39b7a-15fd-4387-a460-9698fe9e1039",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dd018879-e6ed-41df-a363-04053cde277e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f44cc5d6-dbad-4a19-9276-92e4d46ebda4",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "6b2c3b33-1a85-425b-8b87-25979df111c7",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6c184cb5-1881-42fc-941d-d29dc9050143",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7efc44c6-ba85-4151-bc98-8ce96216264b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1915,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 261,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 92
      },
      "testScripts": {
        "total": 962,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 953,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 126.49808429118774,
      "responseMin": 8,
      "responseMax": 687,
      "responseSd": 109.73997914684506,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1669768926366,
      "completed": 1669768975533
    },
    "executions": [
      {
        "id": "c9ce95ba-2459-4520-915a-412b0940efe8",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 252,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "1ed7f4a7-70d9-4b31-99f6-5d37278bd988",
          "httpRequestId": "e7f6e383-ec32-4c08-ae66-34f7225249f2"
        },
        "item": {
          "id": "c9ce95ba-2459-4520-915a-412b0940efe8",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "1dd8a38c-e4e3-46c4-89f1-597ab9032d6d",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 0
        }
      },
      {
        "id": "ff3907a8-b374-4cfe-935b-bb7823380fda",
        "cursor": {
          "ref": "b5333c60-c78c-42c5-8c98-bf51430590d2",
          "length": 252,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "4157f41b-9e91-41c0-a284-6003b78d9964"
        },
        "item": {
          "id": "ff3907a8-b374-4cfe-935b-bb7823380fda",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "13d3d3e2-dc86-46b0-b358-e7e761f083be",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "ecfdb47d-8906-4e98-8ea4-adb703c237cd",
        "cursor": {
          "ref": "044bb6d7-da49-4646-9daa-3f2a728ccef4",
          "length": 252,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "961a1ab4-08d4-4f53-869a-11f4b829de63"
        },
        "item": {
          "id": "ecfdb47d-8906-4e98-8ea4-adb703c237cd",
          "name": "did_json"
        },
        "response": {
          "id": "1ade32fe-daa8-4a28-8098-a2531058878f",
          "status": "OK",
          "code": 200,
          "responseTime": 293,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d4c2185-3fe5-445e-9a59-dc6bf1b9b951",
        "cursor": {
          "ref": "fa9084ad-7ea5-460d-82d3-e548408cab95",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "4cdabdaa-0c54-4207-8a54-b8a803e603c6"
        },
        "item": {
          "id": "7d4c2185-3fe5-445e-9a59-dc6bf1b9b951",
          "name": "did:invalid"
        },
        "response": {
          "id": "a6851db0-bffc-4c84-aa42-01d7951b7540",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d4c2185-3fe5-445e-9a59-dc6bf1b9b951",
        "cursor": {
          "ref": "fa9084ad-7ea5-460d-82d3-e548408cab95",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "4cdabdaa-0c54-4207-8a54-b8a803e603c6"
        },
        "item": {
          "id": "7d4c2185-3fe5-445e-9a59-dc6bf1b9b951",
          "name": "did:invalid"
        },
        "response": {
          "id": "a6851db0-bffc-4c84-aa42-01d7951b7540",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86249419-1f3b-4b0a-aef0-1fe3e1f67924",
        "cursor": {
          "ref": "5962f52a-8d9d-44c6-ba0e-9eb0256fa168",
          "length": 252,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "1d49258a-da9e-43a6-b726-7abeafe01ff0"
        },
        "item": {
          "id": "86249419-1f3b-4b0a-aef0-1fe3e1f67924",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "b34ef168-de33-47f4-8c87-defc194681f2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 205,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c33b971-dcc1-4fd3-afd1-5d9a6880cead",
        "cursor": {
          "ref": "61d09ce1-8b4c-4e9f-816b-3829bba153b9",
          "length": 252,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "30f4df5f-e3e4-4385-a853-d04399b4010f"
        },
        "item": {
          "id": "1c33b971-dcc1-4fd3-afd1-5d9a6880cead",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "6bb922e7-d78c-40a3-80fb-5cceca8fb5ac",
          "status": "Not Found",
          "code": 404,
          "responseTime": 68,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08c50b6d-9f9a-4c41-881f-0fba4743fb42",
        "cursor": {
          "ref": "0f1ffac7-7563-4884-90ae-8eac365ce62a",
          "length": 252,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "83f8fd82-d556-489c-8516-e75034c21bb2"
        },
        "item": {
          "id": "08c50b6d-9f9a-4c41-881f-0fba4743fb42",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "efa46c1f-779a-466e-a8a5-6692024a5606",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a93dbe22-54fa-4aa4-a9d9-b1b7e7374865",
        "cursor": {
          "ref": "7ce17fd3-7d6e-48a0-917f-5f7749dcd6b5",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "640d45ce-cca7-48c2-b823-172ea44f1f56"
        },
        "item": {
          "id": "a93dbe22-54fa-4aa4-a9d9-b1b7e7374865",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "f2cac467-0012-4899-95e1-77174ad186b3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 75,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a93dbe22-54fa-4aa4-a9d9-b1b7e7374865",
        "cursor": {
          "ref": "7ce17fd3-7d6e-48a0-917f-5f7749dcd6b5",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "640d45ce-cca7-48c2-b823-172ea44f1f56"
        },
        "item": {
          "id": "a93dbe22-54fa-4aa4-a9d9-b1b7e7374865",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "f2cac467-0012-4899-95e1-77174ad186b3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 75,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d99874a3-4bff-4121-a637-3303d3a71c09",
        "cursor": {
          "ref": "52286255-1c3b-4497-bfca-45c60c0b0608",
          "length": 252,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "a47516ca-98ee-46cf-999f-abe089bea65e"
        },
        "item": {
          "id": "d99874a3-4bff-4121-a637-3303d3a71c09",
          "name": "identifiers"
        },
        "response": {
          "id": "3ebedfa5-e693-486e-bec5-dc19c329c9df",
          "status": "OK",
          "code": 200,
          "responseTime": 176,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d08fc08d-e6df-407e-804a-ab9901835765",
        "cursor": {
          "ref": "f0bec947-4101-4171-b1ee-198c1bbcf2ac",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8f1d3fdf-9b94-45a6-96b2-32de3460d07b"
        },
        "item": {
          "id": "d08fc08d-e6df-407e-804a-ab9901835765",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b8f0e02e-1f0a-4fff-8406-592e1ab7ce8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d08fc08d-e6df-407e-804a-ab9901835765",
        "cursor": {
          "ref": "f0bec947-4101-4171-b1ee-198c1bbcf2ac",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8f1d3fdf-9b94-45a6-96b2-32de3460d07b"
        },
        "item": {
          "id": "d08fc08d-e6df-407e-804a-ab9901835765",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b8f0e02e-1f0a-4fff-8406-592e1ab7ce8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cc403bc-885c-494b-9680-fdc96d4cef0d",
        "cursor": {
          "ref": "5f3b1790-8c55-4d71-a410-54b1479a8fcb",
          "length": 252,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "c59d68c3-8840-4cb2-a457-d881fd450e09"
        },
        "item": {
          "id": "2cc403bc-885c-494b-9680-fdc96d4cef0d",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "152236a2-9dfd-4637-bbb9-f30f98156858",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cc05720-ff64-495a-9dbe-6cb498711f56",
        "cursor": {
          "ref": "d1f2667c-f4c7-44ca-9d65-af0062835557",
          "length": 252,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "4f9a3684-f37d-4e50-90d6-130fd88fa63a"
        },
        "item": {
          "id": "3cc05720-ff64-495a-9dbe-6cb498711f56",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "8400f20e-29f9-4e47-a87f-71cdd6b9cfe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d794193e-dc3d-413c-97b2-9c9da1a1f010",
        "cursor": {
          "ref": "4462160b-546d-4ef8-86d1-69387b77767d",
          "length": 252,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "44f51e7e-0c92-4b7d-938e-44c26d33d68d"
        },
        "item": {
          "id": "d794193e-dc3d-413c-97b2-9c9da1a1f010",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "17668b26-970b-471b-9302-71e85270eb3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90df4ccd-5bae-4259-91dc-07bf17a44649",
        "cursor": {
          "ref": "d5995903-a4fb-48a4-a5dd-e6d8f0af0b61",
          "length": 252,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "575f0c9e-2310-4cf9-9fba-af6ca6ae6cd5"
        },
        "item": {
          "id": "90df4ccd-5bae-4259-91dc-07bf17a44649",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "141fcc42-4b0e-4ff4-ab25-4ad03f5ede12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f900c10-9a7a-4ded-b1e2-5bc034699e46",
        "cursor": {
          "ref": "bf15d0b3-0672-496a-b711-dca3419706b3",
          "length": 252,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "6cb2f858-1e80-40f3-b5c3-666cf0c7745d"
        },
        "item": {
          "id": "4f900c10-9a7a-4ded-b1e2-5bc034699e46",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "7accd574-1f91-4955-b108-43ce8d88f4af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a845cb3d-d1ea-40bc-b803-400a4b45d6ad",
        "cursor": {
          "ref": "dc201676-757e-48a4-9657-e4b747dabbed",
          "length": 252,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "622a8489-493f-47a3-b2c9-a817960a0a1b"
        },
        "item": {
          "id": "a845cb3d-d1ea-40bc-b803-400a4b45d6ad",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "180ac72c-1bf3-4e44-b39c-1aeb66d25716",
          "status": "Created",
          "code": 201,
          "responseTime": 512,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "c474d82d-8587-465d-8dea-f8a595b220e2",
        "cursor": {
          "ref": "e99d3da3-a3fc-40bd-8e30-687beaee59cb",
          "length": 252,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "e27e1df0-75f0-4568-a890-53f7e94eb66a"
        },
        "item": {
          "id": "c474d82d-8587-465d-8dea-f8a595b220e2",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "6889401f-ac04-4fdb-aca6-90169d1ec3f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2860faa-7016-46b6-a23e-ff27f759da0e",
        "cursor": {
          "ref": "52d18fc9-d45f-4472-8e13-f606035adfa8",
          "length": 252,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6322741b-5709-46a6-bb5d-1707e0efa0d3"
        },
        "item": {
          "id": "c2860faa-7016-46b6-a23e-ff27f759da0e",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "8cecce4a-85de-4e8d-879e-d6d7a31af3a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1926f42e-2b72-45a3-907e-d9e6d238bf9c",
        "cursor": {
          "ref": "8664069a-ccc3-48e6-8c74-87452a8667f6",
          "length": 252,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "0953c67a-56dc-4e46-b6a3-5024c6479671"
        },
        "item": {
          "id": "1926f42e-2b72-45a3-907e-d9e6d238bf9c",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "98d72fd0-c127-45f7-9326-1b8bac10a0bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90f9d3af-54ec-4e1b-b9e5-a20f2f063225",
        "cursor": {
          "ref": "161d37c0-b028-4c7c-bccd-d60cf07a18b9",
          "length": 252,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "91c4701a-ab20-40a5-8211-af659f93d1d0"
        },
        "item": {
          "id": "90f9d3af-54ec-4e1b-b9e5-a20f2f063225",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "b98cb83b-4213-46e7-afd7-29d8db4c60ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e37a291-8765-4808-b0b4-b613b89c4266",
        "cursor": {
          "ref": "af3c26c9-596f-4efb-ae6d-6f1ee9c5d501",
          "length": 252,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "f070a3d0-2b39-4ac7-acb4-5c011fef7c6a"
        },
        "item": {
          "id": "7e37a291-8765-4808-b0b4-b613b89c4266",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "dca23abb-444e-494e-93fb-50ac91a04a69",
          "status": "Created",
          "code": 201,
          "responseTime": 381,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "aba44942-970c-4bbe-bf3c-95ed5041cea9",
        "cursor": {
          "ref": "111335b2-8f1e-470b-a1d4-e6dd928eb362",
          "length": 252,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "d7ee1013-f14e-4ec5-a6bc-1d0ccae24171"
        },
        "item": {
          "id": "aba44942-970c-4bbe-bf3c-95ed5041cea9",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "565a0025-73fe-47e8-82d2-34b260e5b886",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65a9f3fb-2135-471f-ab2b-b4408a4f6f63",
        "cursor": {
          "ref": "a1e6ed8f-a8f4-4b9e-8c81-c2a145f4ae19",
          "length": 252,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "c930cf8c-5342-4879-8dab-8639bf61b745"
        },
        "item": {
          "id": "65a9f3fb-2135-471f-ab2b-b4408a4f6f63",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "41719c74-5cf1-41f3-9aa0-574613574edb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b5b7643-a580-454e-be92-fe8598796c25",
        "cursor": {
          "ref": "c3af4178-f78b-4351-bfb3-a0ff885189ee",
          "length": 252,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "71d22f92-0c32-4adc-8550-ec1ba8ac31d3"
        },
        "item": {
          "id": "1b5b7643-a580-454e-be92-fe8598796c25",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "6d65eaf0-32d3-484f-b397-dfb09c13e82d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26ab7a59-d003-4bfc-be9b-c50428570e2d",
        "cursor": {
          "ref": "a2ff2bec-cdb4-4ca7-9664-e709cb717d2c",
          "length": 252,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "9d32faec-96c8-4dec-aed2-8f56e9ca9411"
        },
        "item": {
          "id": "26ab7a59-d003-4bfc-be9b-c50428570e2d",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "1ca3d262-551b-4f7a-876f-a26cfb8e5c79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58459bdd-2a48-48c2-bc2f-5833709196e7",
        "cursor": {
          "ref": "9bf3f697-71d8-4869-ae7a-d18f58d9fcbb",
          "length": 252,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "d8d13625-4bd6-4425-b8b6-ca9b38a4a8f2"
        },
        "item": {
          "id": "58459bdd-2a48-48c2-bc2f-5833709196e7",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "204fc9c1-6ace-41ac-a77b-1bf30c644e1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bc43675-7410-4032-a3fe-40df44aafc9a",
        "cursor": {
          "ref": "c4012c56-9957-440f-b0b5-6825deb47fbc",
          "length": 252,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "bfefa03d-0e06-48be-a01f-4ca5ac221eb5"
        },
        "item": {
          "id": "7bc43675-7410-4032-a3fe-40df44aafc9a",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "ce107b04-e6d2-48ee-90e6-86bcb1e87b55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b951663-7c0e-4e04-8d8b-ada3a3c3f942",
        "cursor": {
          "ref": "76a858fe-357b-45f9-8147-d92621bb083a",
          "length": 252,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "3e5c5e2b-590a-4a2d-8999-a53f82dc6894"
        },
        "item": {
          "id": "2b951663-7c0e-4e04-8d8b-ada3a3c3f942",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "043150aa-bd6d-43f4-afed-0b05a8c8ff65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd612c42-6e9f-440f-8ec7-0f160a7e9159",
        "cursor": {
          "ref": "acda1fba-6381-4f6e-8427-0d62194434ff",
          "length": 252,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "7b9dd88c-d305-4493-8655-5ca4994d2a93"
        },
        "item": {
          "id": "fd612c42-6e9f-440f-8ec7-0f160a7e9159",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "5c4c2b6c-1878-430c-9286-03c01ae1ad9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b284922e-855a-4788-865c-7a736bee9c5c",
        "cursor": {
          "ref": "df91d308-91dc-4e00-bc9b-01bc520c804b",
          "length": 252,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "9369ba78-6209-4d8f-971d-cc55b03c05d3"
        },
        "item": {
          "id": "b284922e-855a-4788-865c-7a736bee9c5c",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "21ce08ef-e44d-485c-bd5d-fb9d97d8f525",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c16b8b55-281f-4bc5-86ec-ce364e50baaa",
        "cursor": {
          "ref": "5d57a7bf-b3d8-4129-bee4-8654eff1a51c",
          "length": 252,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "e204efc4-1963-43ff-8bef-8dcc5f632833"
        },
        "item": {
          "id": "c16b8b55-281f-4bc5-86ec-ce364e50baaa",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "a2439a78-9b08-4d6b-8931-093d2a2042c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09d62046-4eac-4ded-9bd9-add415cc781a",
        "cursor": {
          "ref": "69e5b7c7-e892-4f21-ad9e-4585d83273d3",
          "length": 252,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "3e4438d5-5f79-49ce-851f-bf2e3d335d8e"
        },
        "item": {
          "id": "09d62046-4eac-4ded-9bd9-add415cc781a",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "ad16f86f-6c32-4fcc-bcf2-db98652deac6",
          "status": "Created",
          "code": 201,
          "responseTime": 504,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "782216e7-8dc5-4378-a635-cc84805b3837",
        "cursor": {
          "ref": "d672e816-d697-400c-980d-992127d0eb2c",
          "length": 252,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "8677c56f-cd40-452b-9274-3058d80348c1"
        },
        "item": {
          "id": "782216e7-8dc5-4378-a635-cc84805b3837",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "e6546317-8f59-46c6-bc3b-584eb9b49b48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d6767b7-0b68-4cff-8e05-ff85ee214365",
        "cursor": {
          "ref": "8f87167c-4531-4755-9bcd-c2d6a905bc3f",
          "length": 252,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "1ece21e5-134c-4738-8f41-0f4d7f82d0c8"
        },
        "item": {
          "id": "5d6767b7-0b68-4cff-8e05-ff85ee214365",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "a4376df1-664f-477f-a6fb-d133fc2addf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e1f6160-be9f-41b9-ac48-8277c2b52431",
        "cursor": {
          "ref": "ad4a2a68-8d68-426a-bd02-9cfac14d8099",
          "length": 252,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "c33786d1-def3-411e-a8bb-7fc1fae4c747"
        },
        "item": {
          "id": "2e1f6160-be9f-41b9-ac48-8277c2b52431",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "1b64a17e-5d5e-4962-925f-dc304c7bc8b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4751e9f8-d52e-4579-b256-2269ca4c50e5",
        "cursor": {
          "ref": "9e184ad8-7bc6-42cc-8d95-9a6f63b3fc27",
          "length": 252,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "e85808c3-e4dc-4e0a-9dde-28e98aeb1372"
        },
        "item": {
          "id": "4751e9f8-d52e-4579-b256-2269ca4c50e5",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "63bf8b4d-0683-4b20-962c-4f4e28568c0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0380efd2-64ae-4b9c-a315-ce691e525ba4",
        "cursor": {
          "ref": "dc1233b1-574d-4298-a863-f98ba1ed7ccb",
          "length": 252,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "1c8bbafa-2ee6-4bc0-a4e6-508aed51d77e"
        },
        "item": {
          "id": "0380efd2-64ae-4b9c-a315-ce691e525ba4",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "0a768230-0cc5-47b5-abbf-cc9d6c2fe5a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d399d0e5-68eb-449a-8ba5-2804839d6613",
        "cursor": {
          "ref": "337f89fb-8e6d-48fe-805e-fedda5239ae1",
          "length": 252,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "c70303d3-7197-4207-84e4-7a1a6fa30d34"
        },
        "item": {
          "id": "d399d0e5-68eb-449a-8ba5-2804839d6613",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "c36a4be6-c26c-4867-83ef-3cdcef7cee2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b74493f5-4ee4-47e9-94f6-86ad7eb2bbf3",
        "cursor": {
          "ref": "dfbd5feb-6349-434f-82f7-4bd28869554e",
          "length": 252,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "cb2b85fd-8443-4374-a60d-48c3697cb5af"
        },
        "item": {
          "id": "b74493f5-4ee4-47e9-94f6-86ad7eb2bbf3",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "ef172339-83bb-4f59-8de4-887985ca45d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "384238ef-8669-453c-b796-c049ee2877a1",
        "cursor": {
          "ref": "56a95664-7570-4e15-ae3c-ee37c0f825c8",
          "length": 252,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "ba176101-e66e-4926-b01d-9d9ef6ffce30"
        },
        "item": {
          "id": "384238ef-8669-453c-b796-c049ee2877a1",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "50a60074-4e99-477c-bc1d-fe83daf0baa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aa76f2c-1d06-466e-a480-87074a52ffbf",
        "cursor": {
          "ref": "be0d7d5f-8000-4cf8-860c-c52f6da605cb",
          "length": 252,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "483f269b-f732-4c5d-9d3c-d07aefa38468"
        },
        "item": {
          "id": "7aa76f2c-1d06-466e-a480-87074a52ffbf",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "989b3af6-6a9a-44dd-838f-98e38ba454be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e96d7c7-92a9-4194-ba1a-17fc93941670",
        "cursor": {
          "ref": "a7d9ca36-017d-4336-8509-b875b1d27a7a",
          "length": 252,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "4569b83a-5e44-48bd-a987-027fe54b4ba5"
        },
        "item": {
          "id": "8e96d7c7-92a9-4194-ba1a-17fc93941670",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "0d9b1aca-6559-46ed-afb4-9d4f632b289b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fc74bda-1171-4b48-be80-861bffab5613",
        "cursor": {
          "ref": "1a13800a-8580-40e4-b139-88e7bb81dd6f",
          "length": 252,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "94a939b5-52b7-4bb9-bf8b-60155ab04e43"
        },
        "item": {
          "id": "8fc74bda-1171-4b48-be80-861bffab5613",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "fbe5cfb0-4af1-42d0-ac18-4a0d0ad31e62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09191043-890b-4d1f-b15f-58e7a333b13b",
        "cursor": {
          "ref": "c031656b-6f01-4119-a0e3-17fc455e7af8",
          "length": 252,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "33d8d99a-9309-4f6d-be87-055cbaf11746"
        },
        "item": {
          "id": "09191043-890b-4d1f-b15f-58e7a333b13b",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "b92e423d-ef54-4ad1-8e10-36e1b1b95947",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01f9b5f1-3648-4216-92e9-211083d7be46",
        "cursor": {
          "ref": "991fdfe2-7172-43a7-bd0d-c838ef67c1c1",
          "length": 252,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "9142a620-3fa4-471b-91c1-f17ebac5f4e8"
        },
        "item": {
          "id": "01f9b5f1-3648-4216-92e9-211083d7be46",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "15cb6006-7c40-4543-8ff2-ad707bc385a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 349,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "4c14c1f5-67c8-497e-801d-3aa7f67c0657",
        "cursor": {
          "ref": "bbe60fa7-7032-4689-a0a3-eeb584d5d697",
          "length": 252,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "df1fee85-dd9d-4c8f-ace8-b2fdb41e1991"
        },
        "item": {
          "id": "4c14c1f5-67c8-497e-801d-3aa7f67c0657",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "aee2e22c-bc0f-42ba-ad85-427728adbf95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8432d1f8-cc27-4021-9ec5-d4a08b75247d",
        "cursor": {
          "ref": "cb8669fc-6ac3-48e9-8595-d89cca8934a5",
          "length": 252,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "dafc788f-64f0-477e-9335-cd526c79e726"
        },
        "item": {
          "id": "8432d1f8-cc27-4021-9ec5-d4a08b75247d",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "a8f623c5-0e24-43e1-9261-26ab7e371305",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9b79169-d1b9-4e0b-bd29-0d09a86c5ceb",
        "cursor": {
          "ref": "a0ba7961-21b6-42f0-b619-d06bc9c77b11",
          "length": 252,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "07d73a4b-c7fb-4b11-bb5a-004a28444363"
        },
        "item": {
          "id": "a9b79169-d1b9-4e0b-bd29-0d09a86c5ceb",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "3ba3c24d-39a7-4e1f-8c98-35f8940121f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1ce826f-3539-43a9-a1be-7c1374bd520a",
        "cursor": {
          "ref": "7341da4c-038c-443e-b74b-57b227b6e794",
          "length": 252,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "ed8fdce1-db59-442a-9ace-07856ace4244"
        },
        "item": {
          "id": "d1ce826f-3539-43a9-a1be-7c1374bd520a",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "16fa0104-5466-43d1-8cc3-152b0d94b8ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb086e76-2167-4d10-8931-45adbc358cee",
        "cursor": {
          "ref": "4f5b9236-5236-47e5-9cc2-2527b992eeb6",
          "length": 252,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "a2bbb49c-678b-4691-80fa-744ea669ad6a"
        },
        "item": {
          "id": "fb086e76-2167-4d10-8931-45adbc358cee",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "05f86bdf-5267-4bce-99f2-d6f4d2ac0b52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc74d9af-4a48-49bb-a936-03de276877e0",
        "cursor": {
          "ref": "61c7f68d-5499-4dbf-9e51-ca9f651abc08",
          "length": 252,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "f88adafd-8762-4513-a67c-1e8a1c37b609"
        },
        "item": {
          "id": "cc74d9af-4a48-49bb-a936-03de276877e0",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "0da7afc4-8389-4c3d-a570-0fda27dcc85d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf02174c-ccb1-408f-a727-7c3d78b2dde0",
        "cursor": {
          "ref": "018320fb-6678-48b5-873b-c7b777e1b36d",
          "length": 252,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "6a0d7d4d-ea2f-4da1-b351-6010426f842f"
        },
        "item": {
          "id": "cf02174c-ccb1-408f-a727-7c3d78b2dde0",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "11ab0564-0e41-42e9-815d-763e58713c74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 310,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "d766bf2b-e756-482d-9c73-c22a38f25a29",
        "cursor": {
          "ref": "7376ac5b-86c8-44e3-a8d4-c77ad1e6dd29",
          "length": 252,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "88408d32-02fa-4f67-949c-25e182318fea"
        },
        "item": {
          "id": "d766bf2b-e756-482d-9c73-c22a38f25a29",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "18681788-f1ca-43eb-86c9-fd41e90c4d53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fad36b19-e90d-4804-b320-5e9495bc201b",
        "cursor": {
          "ref": "ae436e34-000e-4776-b51e-ce943dd442e3",
          "length": 252,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "36fe69e4-3641-47ca-ad8f-cc82da9066f8"
        },
        "item": {
          "id": "fad36b19-e90d-4804-b320-5e9495bc201b",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "858c4702-c90a-45fe-aaca-edbb20bf8b88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "575a1af8-69dd-4791-9546-505c79d3a808",
        "cursor": {
          "ref": "80ef286f-2012-4d4d-9406-dc033f6ca20c",
          "length": 252,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "aaf632ae-4d7d-4d89-90a0-afcebcc999c9"
        },
        "item": {
          "id": "575a1af8-69dd-4791-9546-505c79d3a808",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "7f12b16f-3286-4cb2-9246-c4d98f9f0ffd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15b0df54-76fb-4863-8723-bd97f974f63a",
        "cursor": {
          "ref": "6fd53da6-b8a5-4c42-b911-d3a54dfe8264",
          "length": 252,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "561a828c-b96a-414c-9fa0-3c7c5d285929"
        },
        "item": {
          "id": "15b0df54-76fb-4863-8723-bd97f974f63a",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "12ce2993-0b18-4f1a-8d1f-b3b90ad1bf5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe9ff607-91dd-44ca-9312-bb7762310f98",
        "cursor": {
          "ref": "faa15a10-7227-43a1-8225-a5a60c2221b1",
          "length": 252,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "b6b0f1d0-f31e-4058-9e8c-6992587112bd"
        },
        "item": {
          "id": "fe9ff607-91dd-44ca-9312-bb7762310f98",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "88df0017-74e5-4265-ba20-9db07da78fe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77b12bd9-532d-4e3a-a015-e8d874668a74",
        "cursor": {
          "ref": "b3cc9877-84a3-4de4-bc68-bfb7cae7d67b",
          "length": 252,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "85fadd0c-629d-4e61-89ce-07add3f64d90"
        },
        "item": {
          "id": "77b12bd9-532d-4e3a-a015-e8d874668a74",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "7417dd95-ead3-4a37-ab00-e14ea2b33ad7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed36787b-ae2c-4e28-ab57-261391709437",
        "cursor": {
          "ref": "0d3d709e-9dae-4441-86d5-24feda9dff64",
          "length": 252,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "08681568-eab2-4940-b217-2c048f431e41"
        },
        "item": {
          "id": "ed36787b-ae2c-4e28-ab57-261391709437",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "5b66d553-fcd6-40e3-8572-ee3281fa9ce7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc0ab0ce-8873-4c18-97da-8b7c362d2d98",
        "cursor": {
          "ref": "bbd6bda0-0454-4b0e-881a-13fea67e3879",
          "length": 252,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "000aeeaf-aa8f-4091-af47-4af030dfd5dd"
        },
        "item": {
          "id": "cc0ab0ce-8873-4c18-97da-8b7c362d2d98",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "c7f6c929-645a-42ec-9882-b3ef386b0e3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c79ffae-84f3-4d67-92d6-da62a4a98c1f",
        "cursor": {
          "ref": "5c81b0a2-3009-4e3d-81a3-bf375ce8c1b1",
          "length": 252,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "329c06df-16d4-432b-b184-92f654c02360"
        },
        "item": {
          "id": "9c79ffae-84f3-4d67-92d6-da62a4a98c1f",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "d7ac6bd1-4c89-4cc7-9b3b-0a1d05342e0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fd2e1d5-940b-4b2d-a7bf-acce56c7a907",
        "cursor": {
          "ref": "ff93f937-1857-4822-a397-3e80b36c00e8",
          "length": 252,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "6422fd85-f556-4b16-bd68-b5ce1dc481b8"
        },
        "item": {
          "id": "8fd2e1d5-940b-4b2d-a7bf-acce56c7a907",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "bb81154d-186d-499b-973f-7b061f5d3fe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d16472d-9f59-4e42-b000-9c4a0020fb72",
        "cursor": {
          "ref": "c5184cff-dfcb-4372-988e-5ef82eb5ea58",
          "length": 252,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "8d4d756c-1407-41bd-a74c-a088e8663037"
        },
        "item": {
          "id": "5d16472d-9f59-4e42-b000-9c4a0020fb72",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "6a8b63ca-9e50-4b09-9f71-3c67740e6cfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d13d4f5-6192-4b9b-ade1-b38ae5f12067",
        "cursor": {
          "ref": "c8e662a7-a25a-4c43-bd3c-074fe90c9c97",
          "length": 252,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "5033b752-1944-4f5c-b283-d500c67f0c02"
        },
        "item": {
          "id": "9d13d4f5-6192-4b9b-ade1-b38ae5f12067",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "256edef3-edbb-4288-bf0a-9273ce127c10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "202a5273-70a7-4fe0-b3f4-b52249656ee1",
        "cursor": {
          "ref": "125671e6-ba97-47a1-b161-651c7586a5c0",
          "length": 252,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "55d51fce-e976-4e91-adcb-544b7c52a128"
        },
        "item": {
          "id": "202a5273-70a7-4fe0-b3f4-b52249656ee1",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "a9b9691f-1d74-4d12-9e0a-43b398b60f98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b145487-0259-4058-83ec-b9f0c550d93e",
        "cursor": {
          "ref": "d24df211-c1d9-4eb3-9dff-6392aea273ef",
          "length": 252,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "512b9b39-e7b2-4208-83b8-1f8ed4954288"
        },
        "item": {
          "id": "6b145487-0259-4058-83ec-b9f0c550d93e",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "1935adb5-7cb1-4c6c-9799-aa22e9b98a9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b94fb03-b009-40be-b253-e55b1b5241b1",
        "cursor": {
          "ref": "a6cad01c-7125-4258-b043-14563358f210",
          "length": 252,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "fee8676c-9919-40a7-ac05-38c4d2563147"
        },
        "item": {
          "id": "6b94fb03-b009-40be-b253-e55b1b5241b1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "7f6fc9a3-33c5-4912-acc2-091db3fd111e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28d2dd1b-b959-4914-96af-9887c5f1e8a4",
        "cursor": {
          "ref": "e71cb228-5124-4cdc-9d8a-6cc0a479a036",
          "length": 252,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "7bae8f56-3219-41dd-aa57-d84ce9ca057c"
        },
        "item": {
          "id": "28d2dd1b-b959-4914-96af-9887c5f1e8a4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "f4af4e84-bfdd-459b-9209-9153e7216f8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c3fc1b0-44cf-41ad-a292-bfe806fc46d7",
        "cursor": {
          "ref": "12b1628f-d884-4834-a008-a7309ccdae7d",
          "length": 252,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "c30146df-b244-4a0a-819e-1dd713299576"
        },
        "item": {
          "id": "9c3fc1b0-44cf-41ad-a292-bfe806fc46d7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "ea239f0f-dc3b-4bbb-b51d-7c2a88e5de23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 231,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b075445b-88f6-4adf-9bd4-96f7cb0c6c88",
        "cursor": {
          "ref": "7dd00795-6ce1-425f-903d-a4336ed317d0",
          "length": 252,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "b7651d86-a8ed-4b94-bc5f-33472983655b"
        },
        "item": {
          "id": "b075445b-88f6-4adf-9bd4-96f7cb0c6c88",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "fa2d3f74-e94f-4c30-a3a3-f6d30b6412cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c7e92c1-f629-4650-88d5-b51b47c2bb1e",
        "cursor": {
          "ref": "51e7bd3b-b5b2-4511-8b12-bfbdecdebd77",
          "length": 252,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "4bdfa444-251c-4c6a-b6c3-0af1eb93e843"
        },
        "item": {
          "id": "5c7e92c1-f629-4650-88d5-b51b47c2bb1e",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "cc98be78-60d4-42f9-bc8c-112c60a20cdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b20b6c5f-5528-4a97-9ed1-62adfa5b23fc",
        "cursor": {
          "ref": "b98d0180-34ec-4cd4-b0f6-7e160eaa6fc4",
          "length": 252,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "0e647ff8-84a7-4f4a-9ffc-2083e696ed73"
        },
        "item": {
          "id": "b20b6c5f-5528-4a97-9ed1-62adfa5b23fc",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "c7fec4a3-deb2-4382-9001-327db527850d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "846dd52f-3f35-43dd-85d4-96f63561c7a2",
        "cursor": {
          "ref": "96c834f1-4f88-413e-ad08-84c9cc4e2c6e",
          "length": 252,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "7f9889f5-dca2-47e2-ae4e-b868209508c0"
        },
        "item": {
          "id": "846dd52f-3f35-43dd-85d4-96f63561c7a2",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "05896297-857e-4fff-b4fa-8c7dfd06d3eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb80a363-8772-45fc-8812-f09b820ead20",
        "cursor": {
          "ref": "40ef9584-62b1-412a-95eb-f4ce377c1c17",
          "length": 252,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "7ff06d38-fe5c-49d4-94c3-7f0eb15087db"
        },
        "item": {
          "id": "fb80a363-8772-45fc-8812-f09b820ead20",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "1fe8954a-69a1-426b-978d-4cd402d4856a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e052f31-d2f3-4b80-ab37-800091528697",
        "cursor": {
          "ref": "f18df9a8-eefb-4a28-8c03-a8c231f7c275",
          "length": 252,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "8c0e4902-7a94-4bc7-bc08-af434c0baba2"
        },
        "item": {
          "id": "7e052f31-d2f3-4b80-ab37-800091528697",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "408929b2-03c0-4b0e-bae5-f9f1ee19a263",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afaceddb-a630-45c5-873a-d88d256bdc4b",
        "cursor": {
          "ref": "43c28b6d-72f0-4467-a0ee-7b9963a8fd3d",
          "length": 252,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "2beb1d9e-582c-49b2-a3e0-5adf22fc892c"
        },
        "item": {
          "id": "afaceddb-a630-45c5-873a-d88d256bdc4b",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "799cc6fd-a2db-4f67-831c-35450794f2dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42f93e44-e235-4a9f-b978-b1551c2a077d",
        "cursor": {
          "ref": "37e066fd-a503-4b69-afc2-5125648c43a8",
          "length": 252,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "433ebdf3-c42b-42f3-8843-3be252e6ba69"
        },
        "item": {
          "id": "42f93e44-e235-4a9f-b978-b1551c2a077d",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "6c477195-664a-4da6-854c-2808cbabc6cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e55c10a8-a032-451b-a042-32a23fc39703",
        "cursor": {
          "ref": "f6dccc14-b500-43a5-87f8-2a58f6a413f5",
          "length": 252,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "9f7bb51a-d7a0-4dd9-b609-0157d623320d"
        },
        "item": {
          "id": "e55c10a8-a032-451b-a042-32a23fc39703",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "a87f1fa4-1541-40f6-be5e-24bffeb5ecec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b479b43-195b-49ff-bbec-ecdaf10f4915",
        "cursor": {
          "ref": "36ef3e1f-9a18-4cd8-be63-e274d5e2eb77",
          "length": 252,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "4c153be2-a4df-47ce-b4df-100aa5141b3c"
        },
        "item": {
          "id": "0b479b43-195b-49ff-bbec-ecdaf10f4915",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "98787fd7-7c37-4bf4-b71f-b4779541934d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d63a4c3a-cc71-47c4-a850-3ec2a8368fc3",
        "cursor": {
          "ref": "b9d4ee49-6db4-46a4-9a8a-369d08f0a22b",
          "length": 252,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "4bf97020-e931-4d0a-88a3-985e14cfb079"
        },
        "item": {
          "id": "d63a4c3a-cc71-47c4-a850-3ec2a8368fc3",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "f065c9b8-b362-408c-8f14-067e125ca2c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9f8baf8-6765-40ff-bbb1-d2dcfa0671d7",
        "cursor": {
          "ref": "5a99a3ce-ce86-4f3a-8f9a-08a0766c7afb",
          "length": 252,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "47bb41eb-a9ce-489c-b5f7-14097fba4a7b"
        },
        "item": {
          "id": "e9f8baf8-6765-40ff-bbb1-d2dcfa0671d7",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "21231f3a-58df-4cd5-acd8-853c3d4ede68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6efd4161-7e38-4eff-956d-0280f8a5f352",
        "cursor": {
          "ref": "56f3d39c-d9fa-4057-91ea-89b4b893f857",
          "length": 252,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "296e39b6-e6e8-4e40-a3e1-6612ce503ced"
        },
        "item": {
          "id": "6efd4161-7e38-4eff-956d-0280f8a5f352",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "2dec50b5-a5e6-491e-b9a5-492657629c4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ec23282-7897-40d7-8ac0-ec5a3e71f0a8",
        "cursor": {
          "ref": "ed55323a-27c8-405b-92bd-e4aafbc6b6f3",
          "length": 252,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "bf667a89-74e0-4440-b202-4c31e7669aee"
        },
        "item": {
          "id": "2ec23282-7897-40d7-8ac0-ec5a3e71f0a8",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "86ee55ab-0798-449d-9ed2-80d56b3a3036",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 315,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eb70a98-0920-4408-a86b-28a764b74513",
        "cursor": {
          "ref": "7527b356-011b-4adb-ba24-8e7563f56551",
          "length": 252,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "76f2fa0f-02f0-49b8-91df-80044a64a186"
        },
        "item": {
          "id": "6eb70a98-0920-4408-a86b-28a764b74513",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "ed47c9da-9018-4a10-b53a-67c0056c02b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c711fcd5-a706-4b58-9089-0fe2aab7748b",
        "cursor": {
          "ref": "d2b83a61-52e0-4327-a7b4-ed23654b020f",
          "length": 252,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "aec2c116-9aa7-482f-ad85-6936957dfaf3"
        },
        "item": {
          "id": "c711fcd5-a706-4b58-9089-0fe2aab7748b",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "eb81ea48-9990-4700-a0a5-dd75810de5c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ba0316d-742b-4f1b-b5bd-a4196385563e",
        "cursor": {
          "ref": "906fe09c-9794-41e7-a6f0-c638942519ef",
          "length": 252,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "ab54d9b9-46cd-4d0b-b0ed-827c0b633cec"
        },
        "item": {
          "id": "3ba0316d-742b-4f1b-b5bd-a4196385563e",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "87b1c80b-9243-45d2-8b77-bea2deb95ce5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ce73491-498e-43b7-ada6-ba26d976afba",
        "cursor": {
          "ref": "130a7bef-d94c-4391-bec9-0bb25b0e0cfc",
          "length": 252,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "a03a2a01-3de4-45de-89bc-f6d0fa445294"
        },
        "item": {
          "id": "4ce73491-498e-43b7-ada6-ba26d976afba",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "ae8b2869-1bb9-484e-a2b4-dfe263a69072",
          "status": "Created",
          "code": 201,
          "responseTime": 348,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "6d0122c3-9339-4a8d-b273-2d1399824299",
        "cursor": {
          "ref": "ecc6ef02-86a6-4376-a675-0c3b0a15d897",
          "length": 252,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "c7a88c8d-b0c3-4537-b323-659389385c32"
        },
        "item": {
          "id": "6d0122c3-9339-4a8d-b273-2d1399824299",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "3ec94d6f-f7f1-427b-b07a-22bd88194206",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cc17f63-f134-473a-b1fe-6d8e82fdb489",
        "cursor": {
          "ref": "83f0be09-f439-4b2a-a135-c9e6c4b7cc7b",
          "length": 252,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "f1f6ea6f-8b2b-46f8-9af4-259918250dce"
        },
        "item": {
          "id": "4cc17f63-f134-473a-b1fe-6d8e82fdb489",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "689f5cd2-9218-4727-9699-2007012c490d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "788cd415-0438-4842-b623-484d1d9dcfba",
        "cursor": {
          "ref": "de9fcd70-af6f-4572-8477-9495543023f1",
          "length": 252,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "b777256e-7cff-46a9-bbcf-87bae809279a"
        },
        "item": {
          "id": "788cd415-0438-4842-b623-484d1d9dcfba",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "edfc57b9-b693-4508-81e4-a26be6ae7034",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fb7935d-7b98-4054-a8bf-32a1d7e8e389",
        "cursor": {
          "ref": "0c625206-c866-44d6-ac03-33222f9d5dc5",
          "length": 252,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "74e68be7-82b8-4f61-b5b5-29f61bb0bb2f"
        },
        "item": {
          "id": "2fb7935d-7b98-4054-a8bf-32a1d7e8e389",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "f7c17463-20f3-4865-a762-f2a3cf8d7196",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07836261-5d97-4d98-b1d7-10db361660f5",
        "cursor": {
          "ref": "deb6729c-603e-4e0f-8b5c-23513383db85",
          "length": 252,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "3bf6a8bb-32be-40b7-bd34-a97511f5f4f3"
        },
        "item": {
          "id": "07836261-5d97-4d98-b1d7-10db361660f5",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "b0bdca14-51f6-450c-8c8a-0cc63329461c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aff7425b-255f-45d2-b89e-43b7e92b8c02",
        "cursor": {
          "ref": "dae27703-86a7-4f52-ae82-014521125621",
          "length": 252,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "11146b97-839f-4c3a-a2c5-f9a1ae176c21"
        },
        "item": {
          "id": "aff7425b-255f-45d2-b89e-43b7e92b8c02",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "200aa90c-63c6-4889-b977-90487bd1d9a7",
          "status": "Created",
          "code": 201,
          "responseTime": 518,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "119cf220-30a1-43fd-af2a-4cee05c1435e",
        "cursor": {
          "ref": "d4ed109e-52fa-47d7-91eb-38e303f24866",
          "length": 252,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "0008cbdb-233d-4d14-9777-efca4019a770"
        },
        "item": {
          "id": "119cf220-30a1-43fd-af2a-4cee05c1435e",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "5e50c3c4-babe-4919-8ddf-c0289f11a701",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a730ba4-867e-404b-99f5-2ea2ee3054f8",
        "cursor": {
          "ref": "ff3589e6-d630-4572-9fb9-a68ee4439691",
          "length": 252,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "9fe31dcc-95ff-44a4-9d06-20d99db1a5c0"
        },
        "item": {
          "id": "9a730ba4-867e-404b-99f5-2ea2ee3054f8",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "0582fc21-688a-4f74-8919-671b46d5df83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c223921-3362-4728-9d0d-ff2022efde6b",
        "cursor": {
          "ref": "2a03f9cb-5494-40ec-937c-47fafc0441f6",
          "length": 252,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "a3327366-4895-4b1d-8076-abbafd0cea9e"
        },
        "item": {
          "id": "1c223921-3362-4728-9d0d-ff2022efde6b",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "a6e5642c-acc7-441b-841d-5cf6a981d07e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49b122c9-7e6c-45dd-b8be-71fcb1a57071",
        "cursor": {
          "ref": "b0e50dc1-ac62-4c60-91ab-832689f8ef4b",
          "length": 252,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "a05dbac1-19de-4bba-8da5-89046c86a73f"
        },
        "item": {
          "id": "49b122c9-7e6c-45dd-b8be-71fcb1a57071",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "7bd7c968-8c76-4240-b2c3-1b88118a8aa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59445bb9-ca85-4510-8feb-56e7359c8aab",
        "cursor": {
          "ref": "60f96fde-1d89-44b2-bff6-a34525897a2c",
          "length": 252,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "20bb0579-c52d-46a6-8ed8-1b0f02208d89"
        },
        "item": {
          "id": "59445bb9-ca85-4510-8feb-56e7359c8aab",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "1b2fd609-207a-41f4-8d45-322fd8de540f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be7423e0-da60-4772-94a1-c6ab378b8421",
        "cursor": {
          "ref": "fb06e96b-ba12-4a1a-a84f-6ade163a93f1",
          "length": 252,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "2ccdf23b-2d97-4995-8e49-04a007e572a5"
        },
        "item": {
          "id": "be7423e0-da60-4772-94a1-c6ab378b8421",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "ade81f8d-7f4e-422b-9d0f-c12cc99dfc43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a708e353-d6b2-42ef-bfcf-2e37924b0083",
        "cursor": {
          "ref": "68793eb0-84ca-400c-89b9-af202bd6a163",
          "length": 252,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "d8eb7824-a06d-4b13-944a-609b40f91906"
        },
        "item": {
          "id": "a708e353-d6b2-42ef-bfcf-2e37924b0083",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "4936c648-fd79-4fab-936c-dc4fcf4ba39f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "041e5efa-7a56-4920-8786-af75f1571d2c",
        "cursor": {
          "ref": "2dbb8ff7-25a3-45bf-a230-5e0219393c2c",
          "length": 252,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "8bd60f2a-e752-4019-9869-7f2eeb876b72"
        },
        "item": {
          "id": "041e5efa-7a56-4920-8786-af75f1571d2c",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "174f0145-4bc7-4d31-a0c6-07d4484b105c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c207c684-91ad-4b68-a55b-288c066ee803",
        "cursor": {
          "ref": "ffc29235-9b62-419b-a0c8-7d650078103a",
          "length": 252,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "7e59f8e8-b936-474a-bb5b-954fa0fc79ce"
        },
        "item": {
          "id": "c207c684-91ad-4b68-a55b-288c066ee803",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "e3006d2a-b4bb-487c-bffa-b6c750282a43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "47633aa7-d11a-45a0-ad86-b575ef09e623",
        "cursor": {
          "ref": "83ee20a3-7c24-43b6-a481-9f22508daaa5",
          "length": 252,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "4d4ae798-81c9-4462-b7fa-c95bd91cf33e"
        },
        "item": {
          "id": "47633aa7-d11a-45a0-ad86-b575ef09e623",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "9944475b-c381-42a2-b685-dd464d8e45fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 216,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "b6eab143-3a8b-47de-93b4-5a2636ebf1d2",
        "cursor": {
          "ref": "cf1e40e8-d42d-486d-b768-7c0696b5d801",
          "length": 252,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "1e191a3c-afe3-4777-a390-a2dcd98c25ab"
        },
        "item": {
          "id": "b6eab143-3a8b-47de-93b4-5a2636ebf1d2",
          "name": "credentials_issue"
        },
        "response": {
          "id": "4c57240c-9ac4-4283-a77b-618a064b6470",
          "status": "Created",
          "code": 201,
          "responseTime": 431,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "07faf21a-47a2-4fb2-8c97-73bbdae8a391",
        "cursor": {
          "ref": "76f295a2-5ffd-493b-9cd7-43e6783ea9e5",
          "length": 252,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "13f7e169-829e-4831-883d-4e326b3f62ff"
        },
        "item": {
          "id": "07faf21a-47a2-4fb2-8c97-73bbdae8a391",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "dd61acc1-1666-4a23-8953-6593a058d4cb",
          "status": "Created",
          "code": 201,
          "responseTime": 377,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b6a089a-4bc5-4506-b201-737964d89b78",
        "cursor": {
          "ref": "c637a2da-d443-4902-b7e6-8b629f528288",
          "length": 252,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "9f06f904-fa14-4c0d-943c-d1fd77e3af11"
        },
        "item": {
          "id": "4b6a089a-4bc5-4506-b201-737964d89b78",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "197f3fb4-2b98-4965-93c0-a149617d6d2f",
          "status": "Created",
          "code": 201,
          "responseTime": 364,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea648866-d66c-434a-af6b-6cf25f65545d",
        "cursor": {
          "ref": "1f920150-2610-485f-bbb6-70ced2b17246",
          "length": 252,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "e25c9f0c-3545-4212-b486-e6b544510b8f"
        },
        "item": {
          "id": "ea648866-d66c-434a-af6b-6cf25f65545d",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "4c40eca1-2afb-47a0-ba74-e6fbdd97ea79",
          "status": "Created",
          "code": 201,
          "responseTime": 340,
          "responseSize": 658
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "34b3c066-378c-40be-a7d9-2fab07af651c",
        "cursor": {
          "ref": "c89fbce6-b96d-48d4-bfd7-849c166065ba",
          "length": 252,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "18e4751c-0ddb-40aa-949a-189195661656"
        },
        "item": {
          "id": "34b3c066-378c-40be-a7d9-2fab07af651c",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "a99729a9-1488-4a2e-9039-ca23e5787a32",
          "status": "Created",
          "code": 201,
          "responseTime": 334,
          "responseSize": 627
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d2ad537-ab2d-4827-b09b-5ead0a2b2eeb",
        "cursor": {
          "ref": "3cce11bb-aa22-402a-a6c2-e0f6318d33f1",
          "length": 252,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "b42a4569-83e2-44f2-b784-3d9eb2e40058"
        },
        "item": {
          "id": "6d2ad537-ab2d-4827-b09b-5ead0a2b2eeb",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "ae49b0f7-bff8-4e8f-b6b7-5da6507be60a",
          "status": "Created",
          "code": 201,
          "responseTime": 332,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14a7efaf-0a33-4fb8-8c8d-0180e2306023",
        "cursor": {
          "ref": "4fb992cb-1fff-4469-ac64-49ef4389479e",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "9d1f24a0-aa2e-4645-ad4f-5a965cd87c5a"
        },
        "item": {
          "id": "14a7efaf-0a33-4fb8-8c8d-0180e2306023",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c0c47b65-b027-4aeb-aab9-aa93bf0920bd",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "14a7efaf-0a33-4fb8-8c8d-0180e2306023",
        "cursor": {
          "ref": "4fb992cb-1fff-4469-ac64-49ef4389479e",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "9d1f24a0-aa2e-4645-ad4f-5a965cd87c5a"
        },
        "item": {
          "id": "14a7efaf-0a33-4fb8-8c8d-0180e2306023",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c0c47b65-b027-4aeb-aab9-aa93bf0920bd",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "2597bf6a-109c-42d2-8e57-426c7aa3b574",
        "cursor": {
          "ref": "4f297052-8503-4187-a4fb-4f98c48517d6",
          "length": 252,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "1ae64887-bef7-49e6-9d00-4e4e40a0af73"
        },
        "item": {
          "id": "2597bf6a-109c-42d2-8e57-426c7aa3b574",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "53bab2e1-138b-450b-bbc6-aea0526d97b5",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "50d08311-fcfc-470b-bbab-38631a85c65b",
        "cursor": {
          "ref": "7d1d5418-4fc5-4013-8678-c63cb5365184",
          "length": 252,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "2a63b803-8322-4378-9050-e7664e614f0a"
        },
        "item": {
          "id": "50d08311-fcfc-470b-bbab-38631a85c65b",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "26647d6a-9561-4855-9f1b-4f6d7d996bb9",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "f6ef94da-a00f-4f34-b9c7-8b276c6e9fa3",
        "cursor": {
          "ref": "a6be527e-0a3e-437f-a099-9f5fe224318a",
          "length": 252,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "83c0cddd-7dd7-4c24-86c8-541a13968e71"
        },
        "item": {
          "id": "f6ef94da-a00f-4f34-b9c7-8b276c6e9fa3",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "16daec13-56bf-4d29-a970-c68eb8150e15",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "4886154b-b375-47d4-b0d6-6ebac61496c8",
        "cursor": {
          "ref": "9a478c51-21f7-49fc-9844-f61a097e2909",
          "length": 252,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "6b25210a-32a0-431d-9ec6-5380ba40e28d"
        },
        "item": {
          "id": "4886154b-b375-47d4-b0d6-6ebac61496c8",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "cf447078-5728-4542-8035-3158c1dede2a",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "17c90df2-7334-470b-a126-de55d6d2808d",
        "cursor": {
          "ref": "c32e1f67-5438-4955-b141-07075a211e87",
          "length": 252,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "ce64feab-dd4d-4cbd-8b28-ec7b9b7d91ef"
        },
        "item": {
          "id": "17c90df2-7334-470b-a126-de55d6d2808d",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e93ea5b3-4368-4689-bea3-f25e1f2c6b17",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "c438464c-6847-48a4-b594-3133d58cedd4",
        "cursor": {
          "ref": "7ed35c7d-142f-48e6-9645-1ce784df7612",
          "length": 252,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "43711555-9140-4d25-881e-040cc3b80df8"
        },
        "item": {
          "id": "c438464c-6847-48a4-b594-3133d58cedd4",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "284f0c34-da41-4bdf-a66b-a5bced65bef5",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "493c07d0-6989-446d-9b4a-6e261e48118f",
        "cursor": {
          "ref": "e53dd3bf-c627-4b13-ba62-193d2e48899f",
          "length": 252,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "1ba30ed9-1b45-4444-93b5-d1f3717e1bec"
        },
        "item": {
          "id": "493c07d0-6989-446d-9b4a-6e261e48118f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "5a0fad42-5059-47e5-8688-9a2fd63d16ca",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "d4eea152-b5f0-42e1-9959-650d2cbaba99",
        "cursor": {
          "ref": "5329af55-92a2-4db8-8440-2d9990ec9d70",
          "length": 252,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "d7a1d96a-ff74-4f2a-a206-d847bef7ef47"
        },
        "item": {
          "id": "d4eea152-b5f0-42e1-9959-650d2cbaba99",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "fe2ef65b-e6d8-4891-be6b-abbf43da0760",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "7ba26feb-dcc9-4064-90d5-589ec200eb3d",
        "cursor": {
          "ref": "4fd68f25-bb88-40ed-8a36-09de64e31df0",
          "length": 252,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "fbdb95d7-0cb1-4c11-8b48-cb85d62bb9cc"
        },
        "item": {
          "id": "7ba26feb-dcc9-4064-90d5-589ec200eb3d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "6aa4caa2-d57f-43bf-be04-287553643040",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "09c9b824-ada8-4830-87ac-5485303307cc",
        "cursor": {
          "ref": "5c878902-72a4-429b-b71c-991bf7ee907c",
          "length": 252,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "11180076-011e-4568-851d-01a8b5c25941"
        },
        "item": {
          "id": "09c9b824-ada8-4830-87ac-5485303307cc",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "323f6d2f-6e2f-4f5c-ba08-2c6cc6c68e85",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "5b7d7f54-f612-4550-b364-ed72543a7ca7",
        "cursor": {
          "ref": "925a7ad4-88c6-4dcb-af0b-d046a16cbc42",
          "length": 252,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "4b70c8d0-c09c-4d6e-9dc7-d4fbf12a887d"
        },
        "item": {
          "id": "5b7d7f54-f612-4550-b364-ed72543a7ca7",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "bc674979-c78c-4c71-bfd9-2aa49c281834",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "947919da-2cbe-4114-afbc-188d13cc7ea2",
        "cursor": {
          "ref": "cddb0b3f-0e99-42a7-8d93-7fd22a030c1e",
          "length": 252,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "40f9dddd-6c4a-4041-a9cc-acd5c43ca01f"
        },
        "item": {
          "id": "947919da-2cbe-4114-afbc-188d13cc7ea2",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "0dcd75c3-a636-43ef-80eb-d78ccc80b668",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "bf058f05-7f9d-4b25-a48c-4d3ea14bc14d",
        "cursor": {
          "ref": "6d6f7018-4429-4d0f-9a62-2085e84b1a3f",
          "length": 252,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "e0823090-cf7d-413c-9370-50d4750d6a96"
        },
        "item": {
          "id": "bf058f05-7f9d-4b25-a48c-4d3ea14bc14d",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "a0a5f1e3-9764-4c8e-b073-65d6ca0f8ffc",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "740ddd45-54f9-405f-8433-09994ad8fb29",
        "cursor": {
          "ref": "ee8a15a3-44e2-4500-b42f-5550472a0aa8",
          "length": 252,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "0f9dda0e-5b41-426c-ac9a-d74716ef7d1b"
        },
        "item": {
          "id": "740ddd45-54f9-405f-8433-09994ad8fb29",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "269d2d8f-bd6c-4a3b-8028-303bd4dded59",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "193ff372-e52f-41ee-8e43-01b35f56322b",
        "cursor": {
          "ref": "6612e848-3baf-4496-8e01-41ec1394f5c3",
          "length": 252,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "4f485e40-3cea-4239-a041-9f10c85a2ed8"
        },
        "item": {
          "id": "193ff372-e52f-41ee-8e43-01b35f56322b",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "93785fd5-586a-4ecb-8af9-9573f42004e0",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "356055d9-fefe-49d4-9b32-c0e729cb51ba",
        "cursor": {
          "ref": "8cfba4d4-a19d-44ad-a5f7-ae85640ee544",
          "length": 252,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "87237fa2-b1b0-470d-b706-42e9f419453e"
        },
        "item": {
          "id": "356055d9-fefe-49d4-9b32-c0e729cb51ba",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "9b55b2cd-d6d5-4b40-b6e1-3349b9940ff4",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "ff9dee5b-c5de-4751-85ce-4ecbbe7d3220",
        "cursor": {
          "ref": "ce3b9e5a-9452-42b2-9f04-266fb2881eb4",
          "length": 252,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "048a66b9-36b4-4a4c-8a44-498410b03b9c"
        },
        "item": {
          "id": "ff9dee5b-c5de-4751-85ce-4ecbbe7d3220",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "953ec412-2711-421c-a37b-2ac6e564b45a",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "ce7ea3c7-3fdb-4158-80f4-4bb3dc179bcc",
        "cursor": {
          "ref": "b8b07115-e70e-442a-bf3f-0f4b58208a36",
          "length": 252,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "fb8a7e70-dacd-472b-90e8-0305044d0da0"
        },
        "item": {
          "id": "ce7ea3c7-3fdb-4158-80f4-4bb3dc179bcc",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "f798abfe-da14-4a76-afd6-c9a12d108b13",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "0c2dae29-ff9c-4f86-84b3-c620eede9870",
        "cursor": {
          "ref": "f083b3a3-84b6-47b5-be07-def04fabee7a",
          "length": 252,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "94f365a8-00d1-4ac8-a0ef-1d45e36c970e"
        },
        "item": {
          "id": "0c2dae29-ff9c-4f86-84b3-c620eede9870",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "e06387c1-cc4a-4dfd-aa44-3c4522291f7f",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "aad601fa-ae3a-4131-83a2-e38d9de7be6c",
        "cursor": {
          "ref": "1ce99ed4-c700-44f0-a78c-0f06b5391f49",
          "length": 252,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "a691440e-56b7-42f5-85fd-eda4a7aaaaba"
        },
        "item": {
          "id": "aad601fa-ae3a-4131-83a2-e38d9de7be6c",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ea7b78a3-615c-46f0-808d-45a5e2f2b469",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "260ecca7-77cb-426f-ac09-a37c63437b8e",
        "cursor": {
          "ref": "6515fcab-e2ee-47f5-876d-1a52a7051c53",
          "length": 252,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "0623764b-7e3a-4f06-ba05-f5d7f7540971"
        },
        "item": {
          "id": "260ecca7-77cb-426f-ac09-a37c63437b8e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c98c98c6-8dda-4b80-9402-20ffad219729",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "9e592af7-cbcf-4d99-bd5b-aa173129b9d7",
        "cursor": {
          "ref": "8942a753-98d0-4650-b3db-f7f5421a77d2",
          "length": 252,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "745eea2a-b31a-4106-8ddd-dd5915d107aa"
        },
        "item": {
          "id": "9e592af7-cbcf-4d99-bd5b-aa173129b9d7",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "8d6eee38-1854-4536-aa50-1b251cb7ef76",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "09cf49a1-d70a-411a-8d25-5a129f1bd10c",
        "cursor": {
          "ref": "2eeb82e6-fc8b-464d-9b5d-11a6108bd044",
          "length": 252,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "3e71d360-5765-4ddd-a694-fe0bc9e7694e"
        },
        "item": {
          "id": "09cf49a1-d70a-411a-8d25-5a129f1bd10c",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "9f2f6ba5-c9cd-4378-b51e-1cfbd19f10a0",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "cd04957c-2770-4a3d-9bad-8929e70e4651",
        "cursor": {
          "ref": "e0402dee-0a1a-4d6c-a273-e47f7f9cc089",
          "length": 252,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "c3b4d6e7-a2d1-4171-9c9b-4f8a59b03029"
        },
        "item": {
          "id": "cd04957c-2770-4a3d-9bad-8929e70e4651",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c07b3348-2183-42e6-9cbd-424d9f4c7f70",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "00c808ef-e5e9-4dc3-a061-2add217d8516",
        "cursor": {
          "ref": "01f331db-6e3b-4f02-87a9-b5f277107bfe",
          "length": 252,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "af48338d-4b0f-473f-99b4-1945c0ed588c"
        },
        "item": {
          "id": "00c808ef-e5e9-4dc3-a061-2add217d8516",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "5ca21144-dffd-452b-9a07-62f7463d50f7",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "8bfa3b38-ad7d-4aac-9210-41f8abc1132f",
        "cursor": {
          "ref": "42788d8f-c18c-4fe4-ad86-56ef54969240",
          "length": 252,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "d57aab0b-2f0e-4f6c-a71c-34955a139db8"
        },
        "item": {
          "id": "8bfa3b38-ad7d-4aac-9210-41f8abc1132f",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "92b06833-a0dc-4d20-923b-11b070bd1d34",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "4715aaf4-4a57-4ffe-95e6-c128350ced76",
        "cursor": {
          "ref": "1b1badca-aa7c-44c5-bb33-aee878b5f67f",
          "length": 252,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "c1010d63-c20a-4be5-b08f-f28c0492d6ac"
        },
        "item": {
          "id": "4715aaf4-4a57-4ffe-95e6-c128350ced76",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "875e8d15-1421-49f8-82a5-d95da36350aa",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "e0e688a3-68a5-4760-afb0-40e0e1996886",
        "cursor": {
          "ref": "64aeeb88-b1e3-4a6a-93e3-0b7f86788503",
          "length": 252,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "9fde38a0-b9e7-4406-a53e-0d15f1e45c23"
        },
        "item": {
          "id": "e0e688a3-68a5-4760-afb0-40e0e1996886",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "e88c3fc0-e947-48af-a8aa-45b296da577c",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "a976f080-16a3-436e-91fb-ad0a39701624",
        "cursor": {
          "ref": "d3dce6ce-b20e-4f6a-9a6a-8ebb11a2d7d0",
          "length": 252,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "d7c233bf-cc91-4ae3-b741-a8ef56f7bd34"
        },
        "item": {
          "id": "a976f080-16a3-436e-91fb-ad0a39701624",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "afd7756e-eebe-4a39-add8-ae219c914848",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "20fb4225-13fd-42a0-ae88-ed44ae28c25b",
        "cursor": {
          "ref": "0ee83508-0059-4dda-be81-b659c7c06c01",
          "length": 252,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "2659542c-2db2-4b1e-bf45-3d8016a9f3a1"
        },
        "item": {
          "id": "20fb4225-13fd-42a0-ae88-ed44ae28c25b",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "3c12d9f0-1bf4-44b8-b71b-8fc6761155c7",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "c9e9c352-eb1e-484a-96f4-47bb1c213c84",
        "cursor": {
          "ref": "8a41045d-d213-4f7a-9b36-820cc786711c",
          "length": 252,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "62017107-e2b1-4b8a-ab8c-9e50cfe2f94e"
        },
        "item": {
          "id": "c9e9c352-eb1e-484a-96f4-47bb1c213c84",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "c22a0026-fafb-4371-a9ce-aa4e1bb2604d",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "c7c10379-03bd-4885-a7ca-3bf87e541550",
        "cursor": {
          "ref": "e6e13b34-ff76-48f1-a6a1-9585c3eaa584",
          "length": 252,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "a41ac908-49d6-4799-abea-eeb41f32aad7"
        },
        "item": {
          "id": "c7c10379-03bd-4885-a7ca-3bf87e541550",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e7ccf1a7-620d-497c-8e10-498b18fe894f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96e9ef95-ce67-481c-84ea-81162a56843d",
        "cursor": {
          "ref": "8c3a691e-1e47-4e50-b256-7638ad629176",
          "length": 252,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "44c63a10-5695-4f88-b8d1-127c517d4e8b"
        },
        "item": {
          "id": "96e9ef95-ce67-481c-84ea-81162a56843d",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "6c620d6e-5caf-4689-b381-f1df00bb34ab",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "474a1610-55c3-4b26-9609-5d4c9defda55",
        "cursor": {
          "ref": "9d411e06-90d4-4dd2-b01c-b63ed4a86351",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "03b3eccc-2c96-4272-97a3-dbbd78c304c6"
        },
        "item": {
          "id": "474a1610-55c3-4b26-9609-5d4c9defda55",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "42402d2b-ccb9-4283-88dc-c8fd39b6c94f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "474a1610-55c3-4b26-9609-5d4c9defda55",
        "cursor": {
          "ref": "9d411e06-90d4-4dd2-b01c-b63ed4a86351",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "03b3eccc-2c96-4272-97a3-dbbd78c304c6"
        },
        "item": {
          "id": "474a1610-55c3-4b26-9609-5d4c9defda55",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "42402d2b-ccb9-4283-88dc-c8fd39b6c94f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e59f441-4ab1-40ff-b8b3-ebf37c4cb598",
        "cursor": {
          "ref": "87e13be2-d870-4e01-8060-bd1d98de26c0",
          "length": 252,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "80426e17-881c-44eb-a801-d9172ebac0a9"
        },
        "item": {
          "id": "6e59f441-4ab1-40ff-b8b3-ebf37c4cb598",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "3674430a-ac76-4a93-94ff-30aff8373c01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ca27d82-bef0-429b-8e52-ccc1e32da011",
        "cursor": {
          "ref": "25e503a7-8082-46a8-9fd5-3ca2c774b8e9",
          "length": 252,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "65e0aa3f-a1ad-466e-9366-644643ff87c9"
        },
        "item": {
          "id": "1ca27d82-bef0-429b-8e52-ccc1e32da011",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "1e84d07e-c88c-4faa-b7e2-882489897418",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dd6af30-df59-45c8-9e57-e1c828311364",
        "cursor": {
          "ref": "a8ec9453-d642-4bdd-a0b8-f18d13ff85f4",
          "length": 252,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "474c6af2-2d0d-4dbc-bb4f-6e106e5c3bf8"
        },
        "item": {
          "id": "6dd6af30-df59-45c8-9e57-e1c828311364",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "bebc36d0-70dd-42eb-a168-31ee27dd6de5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6850c45f-1a40-4e15-b273-5f4211a8259f",
        "cursor": {
          "ref": "fc9178c6-d89c-4593-8b3a-d8cb55cd4024",
          "length": 252,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "e87261e2-564e-4d5a-8356-ef2f9471d4d9"
        },
        "item": {
          "id": "6850c45f-1a40-4e15-b273-5f4211a8259f",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "6d2e6f4a-6f60-43a1-9386-e3c6790daedb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60f81326-4869-4e02-8921-3c8490301f1c",
        "cursor": {
          "ref": "5421c41d-3e8a-4876-89a0-960388438975",
          "length": 252,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "4b50e1e6-992b-4fcb-8ba4-6af7707206f0"
        },
        "item": {
          "id": "60f81326-4869-4e02-8921-3c8490301f1c",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "1cbabbb1-4f83-4b2c-bf01-43662e56a6ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76a0a537-b2b5-42d6-88b1-b7b70c2318f9",
        "cursor": {
          "ref": "0e8e36b1-26b8-42fd-a7c1-49c244ce64f1",
          "length": 252,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "cde15669-9fc5-470c-b46f-bfd0fb000777"
        },
        "item": {
          "id": "76a0a537-b2b5-42d6-88b1-b7b70c2318f9",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "fadfa543-a095-4ede-8f98-ac33581abf9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 600,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0d0e331-c83b-42b6-aa68-fc8b7e444d42",
        "cursor": {
          "ref": "613e0c3f-20f0-4a3d-bb53-41a0932c91df",
          "length": 252,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "a316d3ec-0dee-4a09-8336-c828c4e31a86"
        },
        "item": {
          "id": "b0d0e331-c83b-42b6-aa68-fc8b7e444d42",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "234607af-3e96-46f6-a755-56fbeff2ccf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "254461ac-f890-46e4-b548-95b0ea65516c",
        "cursor": {
          "ref": "d232883d-d6cb-4c56-928f-f801eb6e630e",
          "length": 252,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "6b54dd70-91b9-451e-8cd2-30ba17d7d1dc"
        },
        "item": {
          "id": "254461ac-f890-46e4-b548-95b0ea65516c",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "54ce4112-55a0-4d01-90b7-291326f5343a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3be00642-8115-4dd6-8ad2-b3260fb3e58e",
        "cursor": {
          "ref": "b789537d-8da5-4d1d-be1f-8420ede7fbf6",
          "length": 252,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "30e475b2-9495-4842-a2b4-e54da5eebcd2"
        },
        "item": {
          "id": "3be00642-8115-4dd6-8ad2-b3260fb3e58e",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "1fa47685-44ab-454a-bb7c-3cb530fd4705",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fca84e29-124d-440b-9f33-464a6d46c338",
        "cursor": {
          "ref": "caa1d2cd-4d54-479b-b075-8618bbbb53a1",
          "length": 252,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "ee307b95-3dd8-40a5-a795-3ee02ae258f1"
        },
        "item": {
          "id": "fca84e29-124d-440b-9f33-464a6d46c338",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "66ef735c-0926-4a5d-8e3e-1c18cc834c11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78119096-d5a8-4aa6-a561-5448e152245b",
        "cursor": {
          "ref": "dc7421b3-1582-4673-a587-2987078970d8",
          "length": 252,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "9a5b775b-db91-4cf1-9f3a-512aca1775c2"
        },
        "item": {
          "id": "78119096-d5a8-4aa6-a561-5448e152245b",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "b99aa576-20cc-474b-9ffe-0ef7c2b4cbee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1769b7d-ba5f-4171-9ea2-776c96823a64",
        "cursor": {
          "ref": "3afec5bf-6f42-4059-9df5-d04de32eb4a6",
          "length": 252,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "7f9c4098-4363-464c-9cb2-1ee46cc0701b"
        },
        "item": {
          "id": "f1769b7d-ba5f-4171-9ea2-776c96823a64",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "46223cb0-6a9c-4d64-ac5c-85826c126c55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dec1ce5e-8e81-45fe-a4fe-3de34d7dbb85",
        "cursor": {
          "ref": "dd733242-15f5-429d-af90-591463b59854",
          "length": 252,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "960229cc-487d-438b-bd16-3c888be118a8"
        },
        "item": {
          "id": "dec1ce5e-8e81-45fe-a4fe-3de34d7dbb85",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "988a76ab-4fd5-4597-b92c-1fe2da00cdce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97b55646-6d65-4638-bb03-244f6a56f8e7",
        "cursor": {
          "ref": "e7ea8c6c-6d28-46ba-b84c-4d3960abbf34",
          "length": 252,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "70fcf19b-f01b-47cf-9c68-627e79bda7b3"
        },
        "item": {
          "id": "97b55646-6d65-4638-bb03-244f6a56f8e7",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "d52f84cd-57fc-4966-b5e7-238f503be294",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47887281-64d5-46ab-b5db-75da8dd1a100",
        "cursor": {
          "ref": "2451e653-c061-4437-b41b-b517958b650b",
          "length": 252,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "bcb0cee3-a305-439d-a07d-9a6f945241d7"
        },
        "item": {
          "id": "47887281-64d5-46ab-b5db-75da8dd1a100",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "08d05321-1607-4942-bd80-fb9db1c3d5cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e91b1d8-b584-450c-8d9e-a59c7f59069b",
        "cursor": {
          "ref": "7247a410-7c1d-43f9-be47-2f1c0ac6c278",
          "length": 252,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "b2e12d75-51a3-4150-87c6-d3a8ad511236"
        },
        "item": {
          "id": "2e91b1d8-b584-450c-8d9e-a59c7f59069b",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "29fd2c5f-fe0b-4f6d-88e1-c45553e2cb9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8680c581-6a56-487e-bb9e-eaec993f71da",
        "cursor": {
          "ref": "bb111576-455f-4473-aa1a-d206d6fa8d5d",
          "length": 252,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "f63a27bd-cfb0-4555-9af7-e530e95a6da3"
        },
        "item": {
          "id": "8680c581-6a56-487e-bb9e-eaec993f71da",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "c41d8e6d-8bc1-46e4-a27f-d4e5fa39bf53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 333,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70304089-cae1-4916-bba2-19b4008873ac",
        "cursor": {
          "ref": "6f7dd445-118c-453d-b177-ba8debdb4278",
          "length": 252,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "9d18a553-1ba0-4eaf-8357-08de952b582b"
        },
        "item": {
          "id": "70304089-cae1-4916-bba2-19b4008873ac",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "ce92f99e-85f5-405d-9875-d23466726774",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 255,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5726207e-beab-4201-900c-d206b2e3987b",
        "cursor": {
          "ref": "cd99eb1f-f075-481a-9a5a-08352ba32d85",
          "length": 252,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "c3a5a859-e464-4390-ba8c-b947378d5fc6"
        },
        "item": {
          "id": "5726207e-beab-4201-900c-d206b2e3987b",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "307003e4-bf79-42f0-bf3f-a3418e633f11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 219,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e93a2338-4481-4a0f-ada2-432c9257f762",
        "cursor": {
          "ref": "43c0cc46-b359-4a42-97ea-9b64fbfcca93",
          "length": 252,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "4e4459f0-7120-4644-ad94-2f8fc6ace286"
        },
        "item": {
          "id": "e93a2338-4481-4a0f-ada2-432c9257f762",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "a912db18-8351-42aa-8833-93906c36105f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 218,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cd8d183-5e46-4fc2-bd5e-a208f666b719",
        "cursor": {
          "ref": "e099f568-18de-4f5a-8737-8cb6c2e071e5",
          "length": 252,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "a471ddaa-203e-4250-b208-70b73dc4f156"
        },
        "item": {
          "id": "7cd8d183-5e46-4fc2-bd5e-a208f666b719",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "8cb3d6ba-9ab6-4b9f-8133-9802dd40df79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 254,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e811f49-3ec9-4013-b056-dcd8aeb53cf0",
        "cursor": {
          "ref": "36394a5b-7126-425a-8ae2-17ccb3dce2c3",
          "length": 252,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "6bbbdca0-8659-4514-a105-6a8cd7ce31f0"
        },
        "item": {
          "id": "8e811f49-3ec9-4013-b056-dcd8aeb53cf0",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "108b2735-cc6f-4ce0-84b4-7f5864492bcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 245,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b45dc1d-5533-4786-a4cb-79f1fcacc976",
        "cursor": {
          "ref": "5d87dca6-649f-4986-addb-e89f77092367",
          "length": 252,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "632678b2-6ddc-4894-8f71-5f349e036138"
        },
        "item": {
          "id": "9b45dc1d-5533-4786-a4cb-79f1fcacc976",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "a8884865-1b48-4c0e-b836-f12fc7ad9db1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "704b4ea2-02e4-4abc-bc96-e25a24f4fb25",
        "cursor": {
          "ref": "4cf88a67-da48-4e89-a112-10ea5931e3e0",
          "length": 252,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "520aab20-3ecf-426f-ba51-b9022d5fc7f1"
        },
        "item": {
          "id": "704b4ea2-02e4-4abc-bc96-e25a24f4fb25",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "74b74efc-cb6f-4593-b0ee-b98e9a90c6e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35f271da-2704-4135-8c3a-31f7427aab93",
        "cursor": {
          "ref": "6f707622-3372-4aeb-b919-47d7069645b9",
          "length": 252,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "334db871-fa4b-4e31-9bbb-3db88a783f7c"
        },
        "item": {
          "id": "35f271da-2704-4135-8c3a-31f7427aab93",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "22b9ebef-fa73-4915-9c40-10a4fa314074",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 211,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9eb9f6ed-dbf5-40b7-921b-730ac0fe4050",
        "cursor": {
          "ref": "cabee309-d148-49dc-adc3-e75c7a560940",
          "length": 252,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "565c48ea-59ca-4943-a5fc-68757fb35d6c"
        },
        "item": {
          "id": "9eb9f6ed-dbf5-40b7-921b-730ac0fe4050",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "e019990c-59a4-4781-8d62-351d371639fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "892a7c83-0542-41ec-95a6-dfe42128a148",
        "cursor": {
          "ref": "6f57c6a7-c199-4fac-aa3a-8719221bf9b2",
          "length": 252,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "2f784cc4-614c-4cd8-86db-d418431a6648"
        },
        "item": {
          "id": "892a7c83-0542-41ec-95a6-dfe42128a148",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "51527f06-d383-4302-9c72-72cf27b3a749",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "847c0330-2084-4f97-87f9-1e9a2d91f8bc",
        "cursor": {
          "ref": "003a0617-e8d7-485d-b987-d350a3529b7b",
          "length": 252,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "c606843b-e35b-455c-8cae-00c30c75caed"
        },
        "item": {
          "id": "847c0330-2084-4f97-87f9-1e9a2d91f8bc",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "43e5343b-ad47-40dd-bf62-c2ddede15afa",
          "status": "OK",
          "code": 200,
          "responseTime": 218,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "26d84ff4-63a7-4fd4-a356-e269ad1612f6",
        "cursor": {
          "ref": "fbe2838e-84c2-492b-9319-74aa3bd99d40",
          "length": 252,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "d25a5323-5d1c-4f4d-b3b8-054f074bdad5"
        },
        "item": {
          "id": "26d84ff4-63a7-4fd4-a356-e269ad1612f6",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "06666361-25c4-418a-bf7b-423a10424f8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "159532d9-0b82-4484-a3e3-2231bcd58911",
        "cursor": {
          "ref": "9dcf05da-58dd-4690-b28d-4b49728c3068",
          "length": 252,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "084f0eff-2e3a-4d68-9425-56b9fd247868"
        },
        "item": {
          "id": "159532d9-0b82-4484-a3e3-2231bcd58911",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "63109676-c0ca-4b1a-999c-54eeda38908a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "310dc340-4aff-44dd-808f-6f5efbf9815e",
        "cursor": {
          "ref": "da100d20-e074-4645-9d6f-201d8ff6280e",
          "length": 252,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "f980c50e-0f7c-43a3-afab-78c96248f92c"
        },
        "item": {
          "id": "310dc340-4aff-44dd-808f-6f5efbf9815e",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "ec3be8e5-233b-420a-abda-34106e62b1e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b15ae591-73cb-4210-96ff-0048dff2c868",
        "cursor": {
          "ref": "3c5167f5-b3be-46fe-8c9f-dcf06c489650",
          "length": 252,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "256ef695-2926-4e4e-a87f-8b4be74028e6"
        },
        "item": {
          "id": "b15ae591-73cb-4210-96ff-0048dff2c868",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "2388b957-c097-46f1-b15c-c7b4068434c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 239,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95f7ca30-bf18-4b98-a926-2182b3abb197",
        "cursor": {
          "ref": "9c91e9b2-8890-4394-9c08-66cb961678b1",
          "length": 252,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "917a9b33-d925-4c2c-997a-c0cbaa880c08"
        },
        "item": {
          "id": "95f7ca30-bf18-4b98-a926-2182b3abb197",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "ca2bc792-92fc-483d-992d-dfe9d1f4a167",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd77afb5-6107-49b0-b42e-b0428a84227f",
        "cursor": {
          "ref": "bc77a80e-bfcd-449f-a8de-5a613a7a52b4",
          "length": 252,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "f3230b0c-881b-4e99-a16f-9b3fde6da625"
        },
        "item": {
          "id": "fd77afb5-6107-49b0-b42e-b0428a84227f",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "425c9c9c-6111-48b8-a8ce-24070837060b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 229,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8955d1b3-a5a9-448a-b949-a061045bfa94",
        "cursor": {
          "ref": "5fe6b1f1-8c49-4504-bdc4-4f980974e156",
          "length": 252,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "9d839305-b9e1-44c1-94ad-aea58cecba82"
        },
        "item": {
          "id": "8955d1b3-a5a9-448a-b949-a061045bfa94",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "07cee2dc-ab39-40fe-b1ce-9007fc536023",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 272,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bced5d35-efee-4926-a78e-3f95a984766a",
        "cursor": {
          "ref": "b1886572-ca2b-4548-abcf-f808c8c0a9c7",
          "length": 252,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "6149cc8c-fae9-48c8-a6c7-2ad73c703575"
        },
        "item": {
          "id": "bced5d35-efee-4926-a78e-3f95a984766a",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "93fa6aa7-3b93-42e5-80c0-57ffd919c7cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 224,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e5d4b0e-17bd-4b77-8bd9-f64651bcf75e",
        "cursor": {
          "ref": "77089b4e-3802-47cf-befb-56517aa879f9",
          "length": 252,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "c5e547dc-8412-4863-8299-f543f2e8b3a3"
        },
        "item": {
          "id": "4e5d4b0e-17bd-4b77-8bd9-f64651bcf75e",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "139b16a3-58b0-4594-814a-cc4fe52641a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 240,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8950d92-034e-4041-9a56-25e85be11531",
        "cursor": {
          "ref": "9e38d0c2-b822-4ee2-8b56-5890996b4016",
          "length": 252,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "27dd9615-5c24-498b-b725-2c64da304531"
        },
        "item": {
          "id": "f8950d92-034e-4041-9a56-25e85be11531",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "97e8821a-9506-4922-ad27-6d55a154df75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 220,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fead31d3-a140-4011-aa5c-43b9311dbca2",
        "cursor": {
          "ref": "ae9e731c-3e85-40aa-9af4-136d0eff95a6",
          "length": 252,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "a9179fc1-f8b5-4ff5-8652-e6c3e979b61b"
        },
        "item": {
          "id": "fead31d3-a140-4011-aa5c-43b9311dbca2",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "a2920963-db91-4ce5-957e-c52e22816226",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 217,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "542a696a-69c3-43e6-bd58-6d12487f33da",
        "cursor": {
          "ref": "72029dc9-5a5a-40c2-951d-8ecf65c7d278",
          "length": 252,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "9df71663-ae93-429d-954e-43179029d2d0"
        },
        "item": {
          "id": "542a696a-69c3-43e6-bd58-6d12487f33da",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "3b1b25cb-7034-4948-b472-d98382f42fe8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 222,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "695b19e8-2720-4c32-af1b-eae1e8d53c52",
        "cursor": {
          "ref": "05ac4968-be2c-481f-ac83-49e5a2e54dd8",
          "length": 252,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "e78ccbdd-7f94-4492-a18a-78d7977eb483"
        },
        "item": {
          "id": "695b19e8-2720-4c32-af1b-eae1e8d53c52",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "8fb8ff40-7d12-4ce0-86f9-4b01ba3848e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 231,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb0fcc0d-f365-4e4a-97bb-007aa5b4bea3",
        "cursor": {
          "ref": "5d44f239-8d67-44f6-a06b-63534b674402",
          "length": 252,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "88997e22-f8f3-4d07-888a-edc93cf4919d"
        },
        "item": {
          "id": "bb0fcc0d-f365-4e4a-97bb-007aa5b4bea3",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "dba367b8-b832-4232-be57-308564d8c896",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 225,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51746354-5fed-48b1-9aab-b280b5f8e3f2",
        "cursor": {
          "ref": "dfb58634-62ca-4570-ae97-958910d15375",
          "length": 252,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "6544df41-c366-44ab-a9a9-9d454730fff2"
        },
        "item": {
          "id": "51746354-5fed-48b1-9aab-b280b5f8e3f2",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "dad0f17b-5ddb-4981-8dad-20ecff5a4aca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 224,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a9159ff-325b-4bed-a7a9-d313361f31b8",
        "cursor": {
          "ref": "76236371-5390-410c-9cc4-65b438cd5ffc",
          "length": 252,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "29a3e855-1994-4226-b42a-18d5d7826d78"
        },
        "item": {
          "id": "2a9159ff-325b-4bed-a7a9-d313361f31b8",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "91efa5b8-4836-4548-b18d-84755c2a4158",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 259,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd819ef2-435b-4522-ab8f-a52870e1e7ce",
        "cursor": {
          "ref": "527dca2c-83ae-4126-a22c-e700e9b22791",
          "length": 252,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "0a4403cf-4bb4-4f2d-b43c-d756e57d916c"
        },
        "item": {
          "id": "bd819ef2-435b-4522-ab8f-a52870e1e7ce",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "76e85f36-187c-4494-beea-b5be8d8c56be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 219,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24c9d892-f827-4dd1-98d6-e1a02d1cef61",
        "cursor": {
          "ref": "e3066e60-e223-4c03-8f29-9a42782e200d",
          "length": 252,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "0a71f919-5051-497a-855f-69dbbd0fded7"
        },
        "item": {
          "id": "24c9d892-f827-4dd1-98d6-e1a02d1cef61",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "f83ebaf6-02a5-464d-ab38-e4b2bb21e6cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 257,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a58393d1-0e95-4430-b9b3-6c486352ca41",
        "cursor": {
          "ref": "ccccde3a-04ff-4e93-b937-fa6b92371241",
          "length": 252,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "18a3a7df-ce3a-4885-b913-d4fe38f8c4ac"
        },
        "item": {
          "id": "a58393d1-0e95-4430-b9b3-6c486352ca41",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "308027d1-795a-45f3-882e-23dec6c35378",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 212,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "087f5f12-799f-41c4-b4ec-ba8e34359e7a",
        "cursor": {
          "ref": "973673a9-6c37-4c56-9d85-248e6f161b48",
          "length": 252,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "6ff9f8fb-7b31-4be1-ab40-65d3f47382de"
        },
        "item": {
          "id": "087f5f12-799f-41c4-b4ec-ba8e34359e7a",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "71996f7e-ff2f-43cd-8885-7c8ffb4ab3df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 217,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75c04a74-ca0a-40b6-94e0-86187749cc05",
        "cursor": {
          "ref": "c17b0d23-53bb-4b49-a2e5-2de70d494d37",
          "length": 252,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "1348e9ab-0c98-44e2-a35e-a451d64d6582"
        },
        "item": {
          "id": "75c04a74-ca0a-40b6-94e0-86187749cc05",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "65fb9624-4431-44d7-9a17-3e5c61ef10be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 224,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3346ff97-f9dc-4914-902d-1de30cd19a1f",
        "cursor": {
          "ref": "47e8eaaf-1b6d-4cf2-a5a4-8c7ea4d56585",
          "length": 252,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "0a7e3a6f-b886-4d2a-846c-fc560f4ba881"
        },
        "item": {
          "id": "3346ff97-f9dc-4914-902d-1de30cd19a1f",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "ea5c86c3-bd1e-43e5-98a1-163c0c1a9b16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 233,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c7f86fa-a7e8-4c4e-a7cd-4d0a77bf3175",
        "cursor": {
          "ref": "afe70d95-7b5f-453d-aec9-2c437630ddb0",
          "length": 252,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "b4955d9b-807a-410b-b471-e0b9c4275968"
        },
        "item": {
          "id": "5c7f86fa-a7e8-4c4e-a7cd-4d0a77bf3175",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "f9b244d3-56d9-4513-93db-e975ef866b44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 255,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed35c380-af5d-4620-9165-1b16880ade7a",
        "cursor": {
          "ref": "5a6b9f06-c2f3-44d3-8866-9dd45e410c30",
          "length": 252,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "30041749-6042-47d4-8414-54423ed53211"
        },
        "item": {
          "id": "ed35c380-af5d-4620-9165-1b16880ade7a",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "34ae2cf3-50c2-4230-8b26-12a14a668379",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 233,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10592dda-ebac-47f4-93c8-15f02c4f89d3",
        "cursor": {
          "ref": "32271b5e-2808-40c1-9de1-acba8d1f5d22",
          "length": 252,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "8b4db202-a22c-46ff-839b-dedb380b87d8"
        },
        "item": {
          "id": "10592dda-ebac-47f4-93c8-15f02c4f89d3",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "271fed73-fff1-483d-ac96-a0eb7739b638",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44c756f3-a592-4c3c-80e5-21f321a69a70",
        "cursor": {
          "ref": "22698ef0-b600-4a24-92c7-17cabdd10235",
          "length": 252,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "69892ecf-155d-4565-b333-e0c5e57b346b"
        },
        "item": {
          "id": "44c756f3-a592-4c3c-80e5-21f321a69a70",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "64924066-3f06-4cb4-816a-b1e1d019bb0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "998ca51b-3dbe-4a15-9633-072dcab390ea",
        "cursor": {
          "ref": "1b30f78a-ec1e-4993-aaab-03f9e10bc641",
          "length": 252,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "62350fe6-4fd6-4c7b-8827-89031be4ebca"
        },
        "item": {
          "id": "998ca51b-3dbe-4a15-9633-072dcab390ea",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "cac55fee-556d-4960-ba99-5f657c2c300c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef27ba92-97f8-4cb4-a8ea-9b9f9568fa68",
        "cursor": {
          "ref": "6be8385c-e8ef-47bf-b9f4-f5332870b400",
          "length": 252,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "9751ce2f-4dee-4af5-a138-a3ccf3822858"
        },
        "item": {
          "id": "ef27ba92-97f8-4cb4-a8ea-9b9f9568fa68",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "ee74699a-f0d1-48d5-aba3-64e04a932568",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 228,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e9556a5-776b-4cdc-bd3c-84636457c13b",
        "cursor": {
          "ref": "62e0c19c-b9e6-4400-91eb-caa890c1156e",
          "length": 252,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "f5653052-7769-4f7e-b418-99a156b4eadc"
        },
        "item": {
          "id": "9e9556a5-776b-4cdc-bd3c-84636457c13b",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "4a28efcd-00b3-43e6-a263-daec6cf7563f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9983d984-b1d9-4fb4-9cb1-72577a0c8ad6",
        "cursor": {
          "ref": "74c6ebd3-9351-4b44-b994-c9390c8bbde9",
          "length": 252,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "06c6df9b-aa2a-4f37-a929-d73033ae2abc"
        },
        "item": {
          "id": "9983d984-b1d9-4fb4-9cb1-72577a0c8ad6",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "79d4f53d-3f04-45ce-b531-4ea6001e8e17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69ccb1d2-51cd-477a-ae5b-4f29bebadb41",
        "cursor": {
          "ref": "41eab1a1-ceee-44f4-8fde-24c98e005aba",
          "length": 252,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "b8e576e2-f9b0-4392-ad37-92b207d17bc7"
        },
        "item": {
          "id": "69ccb1d2-51cd-477a-ae5b-4f29bebadb41",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "1bb41ced-bbd5-4ce2-aa87-b5f8ddc47d25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 237,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83bbb967-3645-4175-9f92-13af977a6381",
        "cursor": {
          "ref": "643ab432-1cb9-4e18-9a22-b7fdd7165161",
          "length": 252,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "c98a5b8f-6950-4469-b919-2d05d449fd1d"
        },
        "item": {
          "id": "83bbb967-3645-4175-9f92-13af977a6381",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "b5e52e0d-a64e-4172-8d63-173d30ee05f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfce8cb8-5bd5-416d-b1b3-3312b4e6880e",
        "cursor": {
          "ref": "a7691c6b-b534-49d4-a9c8-f502d9575f89",
          "length": 252,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "5098172a-4ee8-4dd9-9395-5adc18053264"
        },
        "item": {
          "id": "bfce8cb8-5bd5-416d-b1b3-3312b4e6880e",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "06a63068-8395-4aac-91b5-4b5b75b6d7dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 331,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58a49c29-0738-4a9c-98e3-ae2f0dae8722",
        "cursor": {
          "ref": "0f42bd48-3e58-432d-b169-1cb8735207ff",
          "length": 252,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "5ad46f0b-098e-4fc1-a359-66dc1aeb7a87"
        },
        "item": {
          "id": "58a49c29-0738-4a9c-98e3-ae2f0dae8722",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "26ef2edb-886f-4e16-a820-ecadb5ce5d92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7d82d79-eb2c-40f5-a814-5c4712d81de9",
        "cursor": {
          "ref": "47d2e5b7-6f9b-4383-a5fd-7a33e2991247",
          "length": 252,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "5bbdeb42-da15-449b-94a0-24626f6823af"
        },
        "item": {
          "id": "a7d82d79-eb2c-40f5-a814-5c4712d81de9",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "373d654e-74c2-4b56-b74e-dc59b58d6489",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fc0866c-642f-4828-82ca-b74cf10730d1",
        "cursor": {
          "ref": "f2049e1d-3883-42a4-8f0c-48c045c5b2c5",
          "length": 252,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "b233ede9-c73b-454a-a832-9686073c952a"
        },
        "item": {
          "id": "5fc0866c-642f-4828-82ca-b74cf10730d1",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "2d806aab-e9f5-44b2-bc23-7a9f78b33cb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4aa30df-faff-4627-92f5-7c665078bb89",
        "cursor": {
          "ref": "bc3307e9-55f4-44b0-8b66-dd0215cd7232",
          "length": 252,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "8510e11f-84d0-4402-992a-14c2ff00a77e"
        },
        "item": {
          "id": "b4aa30df-faff-4627-92f5-7c665078bb89",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "bdf040e3-1977-4294-85a2-a3ba5961f534",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c11c925-24b9-4a30-b86f-8f9509f3cf0c",
        "cursor": {
          "ref": "ac02930e-9feb-483b-b5d6-8907a11bcd3d",
          "length": 252,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "d0555ad0-43d9-411f-9886-39ce93832ca4"
        },
        "item": {
          "id": "8c11c925-24b9-4a30-b86f-8f9509f3cf0c",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "fe5be3f4-2487-48c6-8a4c-df934ef55064",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7598848-08b1-480c-be92-2d469093de1a",
        "cursor": {
          "ref": "0ba6b741-4e11-4b55-a495-3784bcf31dbd",
          "length": 252,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "f90bd50c-9925-4d2f-bd07-67a567d6a760"
        },
        "item": {
          "id": "a7598848-08b1-480c-be92-2d469093de1a",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "43f83cd4-1e42-4231-8516-cfc5948c60e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bcee38b-a1c5-4584-8a36-10afe406cbc8",
        "cursor": {
          "ref": "85565967-4082-4595-b57c-08f7df2ebd79",
          "length": 252,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "9192320d-9fca-4e1f-9aba-fa129981ecea"
        },
        "item": {
          "id": "5bcee38b-a1c5-4584-8a36-10afe406cbc8",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "b83c2e9d-5ef9-4390-8dbe-1c39be196fdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22cd0b7f-fcf3-4711-a8de-048e9f2039e4",
        "cursor": {
          "ref": "0a0bae8c-e8c7-484b-81f5-1038d7ffb2f3",
          "length": 252,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "769ddd8b-0a28-4619-b15a-47eb8e84e659"
        },
        "item": {
          "id": "22cd0b7f-fcf3-4711-a8de-048e9f2039e4",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "22de911d-00dd-408d-b3b2-e4700f042a75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0a604a1-2e3d-4f1f-953d-01d13e9476b8",
        "cursor": {
          "ref": "ad057195-6437-4b60-b839-a43b8cf6e33f",
          "length": 252,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "101c7946-e1e4-4563-8146-d50ec5976774"
        },
        "item": {
          "id": "e0a604a1-2e3d-4f1f-953d-01d13e9476b8",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "ff9f17dc-f6c1-44fe-a63a-cb1036568f70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59a2320d-f91a-46d8-8d5d-368ce915cb6f",
        "cursor": {
          "ref": "3c2dad32-9144-4056-aa67-c8457f0bf5b0",
          "length": 252,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "34806dbd-0e28-475f-9da1-d524d6a33dd3"
        },
        "item": {
          "id": "59a2320d-f91a-46d8-8d5d-368ce915cb6f",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "c06b757b-8778-447a-92e8-bc72a793aec5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94add9f4-88aa-4c7f-959e-d8f1e6c01788",
        "cursor": {
          "ref": "75bef59b-33ea-49e4-a7c8-3e57885a5b16",
          "length": 252,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "bfbf2252-5e36-4bd8-b952-07f1a8dd1db7"
        },
        "item": {
          "id": "94add9f4-88aa-4c7f-959e-d8f1e6c01788",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "e95ce9fa-f497-4a1c-b920-766325ffc787",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8407211c-2579-49b1-97d3-4323aa855944",
        "cursor": {
          "ref": "d3b20b8c-01ca-4b86-a00b-188a86c56dc9",
          "length": 252,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "3f1df185-3709-4538-9225-5bfc75e8600d"
        },
        "item": {
          "id": "8407211c-2579-49b1-97d3-4323aa855944",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "ddd36d83-90dc-408e-9a8b-7f51f9a98595",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abc69c5d-98e7-4b33-a790-49484af55464",
        "cursor": {
          "ref": "a9a9f02a-a15f-405e-b3d0-223126b83c7f",
          "length": 252,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "a36ac6b9-5c70-4ba2-9ca3-6f3b3ebe037e"
        },
        "item": {
          "id": "abc69c5d-98e7-4b33-a790-49484af55464",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "76bc0005-bdc7-47cd-9ff4-253faf6153d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eb70f9a-0b79-4edf-9ada-52eccd1e6d12",
        "cursor": {
          "ref": "32046ca2-a357-4b24-a915-2743eae4fb4d",
          "length": 252,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "1d389913-21fe-4353-841a-5793511697d5"
        },
        "item": {
          "id": "5eb70f9a-0b79-4edf-9ada-52eccd1e6d12",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "b982a884-3c0f-473c-afe6-d337fc6bd334",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45899971-d584-4edc-a776-1a30ea0b107b",
        "cursor": {
          "ref": "5cf8687a-42a1-45fe-b5f2-5eb4a33aef6d",
          "length": 252,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "cfc73f42-15c7-4030-a592-647943a74a9a"
        },
        "item": {
          "id": "45899971-d584-4edc-a776-1a30ea0b107b",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "efcd6c38-2486-4663-b4e0-72ef47f8a05d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a898646c-2dc2-4ae9-a823-5bb47eea65b1",
        "cursor": {
          "ref": "15f2f567-d904-4a42-9884-3c2de9092500",
          "length": 252,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "da9e2a45-8c8b-4f76-bf0d-b4b59703fa7f"
        },
        "item": {
          "id": "a898646c-2dc2-4ae9-a823-5bb47eea65b1",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "ad32fd97-ef30-4e26-a787-495001bc6551",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d29f354-3561-40b9-938d-8f8449e0e2f3",
        "cursor": {
          "ref": "4e7655bd-80aa-44d0-b983-2658d7fb657f",
          "length": 252,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "73456567-138c-4570-9f80-5c05d6a5a439"
        },
        "item": {
          "id": "6d29f354-3561-40b9-938d-8f8449e0e2f3",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "d4ffd2f2-933a-4613-a596-d855df1d5a9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9d12b30-b3bb-4ba0-9e0c-f3eae761c71a",
        "cursor": {
          "ref": "ce93d062-ec0b-4b5b-b129-370396efbf23",
          "length": 252,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "ddc84021-d59c-4ddb-bf3f-542f7c68d4a2"
        },
        "item": {
          "id": "c9d12b30-b3bb-4ba0-9e0c-f3eae761c71a",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "938ec866-d686-4576-8720-1cc622548619",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bceb846-6cf0-4f83-adac-0ecb8deec74c",
        "cursor": {
          "ref": "39226b34-db5e-4e69-a01d-ac9519ddfa49",
          "length": 252,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "38d4e8ed-e548-47d2-95f7-18e8caa5cc27"
        },
        "item": {
          "id": "6bceb846-6cf0-4f83-adac-0ecb8deec74c",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "56556d1a-cbd1-47bf-b285-92db4cf5cbb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1cbbf44-f991-419a-acf7-7db1f3b25ad2",
        "cursor": {
          "ref": "6c0b0ae2-b7df-4a8e-a237-b21ebd442379",
          "length": 252,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "2ed05bb4-2061-4f9f-98a2-878240e1878c"
        },
        "item": {
          "id": "e1cbbf44-f991-419a-acf7-7db1f3b25ad2",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "a1ed9525-5c2e-4c5e-964c-cf1810eda6d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e20a93f-88f7-4926-ad3a-8153178d884c",
        "cursor": {
          "ref": "136b1bc8-21fd-4047-8517-2e5bb3fd9d90",
          "length": 252,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "fb6a434b-c923-4a9e-8243-23b807c000c7"
        },
        "item": {
          "id": "1e20a93f-88f7-4926-ad3a-8153178d884c",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "223aaa89-65e4-46e7-8dbc-6541c565c2d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3594d42-10d2-44bc-9b11-05f7ce96c543",
        "cursor": {
          "ref": "38a5ddb2-3afe-4682-b191-132c68111f80",
          "length": 252,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "3d0113e0-603a-4b62-8ec3-73f5a557da2e"
        },
        "item": {
          "id": "c3594d42-10d2-44bc-9b11-05f7ce96c543",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "d9dd94cc-ce47-4ffb-9ea3-73f9567d852c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ac1a3e5-2f46-48b2-8298-9b11787d9649",
        "cursor": {
          "ref": "de9fbc6c-072e-46a8-b6bf-089709522bf0",
          "length": 252,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "54c3814e-c11c-4387-ab34-a00814f6cca1"
        },
        "item": {
          "id": "0ac1a3e5-2f46-48b2-8298-9b11787d9649",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "529856ab-2486-4635-a1f8-2e19547385f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7f250b3-b200-4c56-8915-a9d84a8c60c7",
        "cursor": {
          "ref": "4ee5681a-902e-417a-a4ed-e1131d9d637a",
          "length": 252,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "6a97d237-c107-413f-af11-9e7f831c9a81"
        },
        "item": {
          "id": "f7f250b3-b200-4c56-8915-a9d84a8c60c7",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "e0976eea-d741-49e7-b3f3-273fc3d99176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91b7276c-d46a-47d8-93b8-f74f4d9ac98d",
        "cursor": {
          "ref": "72fdb935-8fba-47cb-958f-4aa04744f5d9",
          "length": 252,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "71afb0b2-9fdf-4a87-be1d-2da0aea96272"
        },
        "item": {
          "id": "91b7276c-d46a-47d8-93b8-f74f4d9ac98d",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "bf1b5e08-c2a4-4101-bba9-b55544580fe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b2869ec-206a-44dd-b618-2423b75feb1e",
        "cursor": {
          "ref": "1ca956fb-46e6-4a31-8ec3-922f91e7f7b0",
          "length": 252,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "51ca2b24-e2be-4c39-b553-a43bfcce92fb"
        },
        "item": {
          "id": "1b2869ec-206a-44dd-b618-2423b75feb1e",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "c8419ec6-d0c3-40bb-9836-9d290ebd53dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81615368-fc6f-48c7-bd86-8c57abfde6d3",
        "cursor": {
          "ref": "6e492e85-fa20-4788-abe1-06932d2ddede",
          "length": 252,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "8e4c6305-12b4-489b-a2a4-e208852b6e85"
        },
        "item": {
          "id": "81615368-fc6f-48c7-bd86-8c57abfde6d3",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "08bc80f1-dc9d-4e14-b7a8-702f3ac57bae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feba5737-0592-4bd0-806d-9731dd9cb978",
        "cursor": {
          "ref": "7d914966-3ed4-47d7-87ea-b99bb3408cf3",
          "length": 252,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "4bcbafd4-10a9-4e7a-adbb-0e0ee17fd96d"
        },
        "item": {
          "id": "feba5737-0592-4bd0-806d-9731dd9cb978",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "4cf075bd-401b-470e-b449-1922a6fb6334",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "146c52e0-2223-453c-9d03-934b209a8878",
        "cursor": {
          "ref": "b2ed0250-63b3-44ac-b9df-d253e7030a80",
          "length": 252,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "e19c0630-b1c9-4c2a-85ed-7cf45c79f7b3"
        },
        "item": {
          "id": "146c52e0-2223-453c-9d03-934b209a8878",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "de7c89a4-ecce-4ddc-9bb2-52f1bfc43aac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3beeb419-fb66-42a4-a18f-acccc7f8e236",
        "cursor": {
          "ref": "322049fc-a98b-48fd-bd17-613dfdf29c61",
          "length": 252,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "bdf6312f-e5df-41c5-a3f4-d5d525f7fe9f"
        },
        "item": {
          "id": "3beeb419-fb66-42a4-a18f-acccc7f8e236",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "a4b4f379-6b7e-4807-85c1-192c981aa504",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a39f2f0-6499-488a-b1fd-af90a35ec780",
        "cursor": {
          "ref": "37fdcc4a-fc87-4145-a5e5-abb61a9953c3",
          "length": 252,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "23cad29e-5675-414c-8f49-25f9a0c5894d"
        },
        "item": {
          "id": "0a39f2f0-6499-488a-b1fd-af90a35ec780",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "c3a6257a-81bf-4f41-bfb9-76a2ceb070c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15c5b960-1b88-4d50-a961-53b7cc4a2d7c",
        "cursor": {
          "ref": "e0459c4a-bcce-4773-81a5-1dffe9a7db9b",
          "length": 252,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "d71c8e9b-e0ee-4eb2-8a5c-1b3120c8855b"
        },
        "item": {
          "id": "15c5b960-1b88-4d50-a961-53b7cc4a2d7c",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "d6f56bad-d4ff-4048-acde-60302d7afe71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee67c01b-f42c-4389-87c1-243efb0c3279",
        "cursor": {
          "ref": "6465d855-cbf6-4e55-91d4-45540375f895",
          "length": 252,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "9f16af2c-ec83-4c72-9dec-6cc4987a342f"
        },
        "item": {
          "id": "ee67c01b-f42c-4389-87c1-243efb0c3279",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "6cc742e1-73f7-4b26-bf51-44bb7a6aaf1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a50a4c7-1512-4e5e-8f97-bf227dcc87ad",
        "cursor": {
          "ref": "0bb1c80a-8b90-4031-bcf9-526bf3fa71bd",
          "length": 252,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "22898f94-dc66-478a-80bc-3f933a82bebc"
        },
        "item": {
          "id": "9a50a4c7-1512-4e5e-8f97-bf227dcc87ad",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "b0c3e8ad-54f6-4fc7-a58a-576e2e6a5e31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cd6b6a9-b110-4cbf-a219-2575127d6edb",
        "cursor": {
          "ref": "0a81bb21-adef-44eb-8a8f-483449fe2509",
          "length": 252,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "914ee405-bdc2-4525-a723-8263292217af"
        },
        "item": {
          "id": "9cd6b6a9-b110-4cbf-a219-2575127d6edb",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "ed74d5d0-61e4-4324-8bac-556e262a3a60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d9500c2-47ca-4d57-9406-c78827b76b1f",
        "cursor": {
          "ref": "d522ec0f-3c27-42c2-958d-783a66f3dbc7",
          "length": 252,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "e266f330-3ebd-41e8-8707-c26ac9c03948"
        },
        "item": {
          "id": "8d9500c2-47ca-4d57-9406-c78827b76b1f",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "9a78657c-f34d-448e-87c4-2634c2494f99",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1348b251-b55b-48a2-a1c2-403031cfdf06",
        "cursor": {
          "ref": "d2bdc77f-129f-4a2a-af7e-607562fd42ad",
          "length": 252,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "c92f5b7d-dc15-4ab6-8499-a86202785006"
        },
        "item": {
          "id": "1348b251-b55b-48a2-a1c2-403031cfdf06",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "9e936ee7-2af6-4b29-a6e1-c45c77462c68",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 79,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be96345b-b8e0-431e-8555-96c133faa781",
        "cursor": {
          "ref": "3f77a90a-aab0-4775-856a-5bb9f07bb246",
          "length": 252,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "6fdee63a-c7dd-4b9f-a562-67d7cbc7ca2c"
        },
        "item": {
          "id": "be96345b-b8e0-431e-8555-96c133faa781",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "bdcd0f3a-314c-4dc5-ba61-4e5a0df603bb",
          "status": "OK",
          "code": 200,
          "responseTime": 687,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbd02c7a-92b2-4c7e-85b9-b59dbe7b2ef9",
        "cursor": {
          "ref": "1f3181e1-6899-4e31-973c-8da581c03ffb",
          "length": 252,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "dfa27512-9543-4141-a0f6-841ba9716215"
        },
        "item": {
          "id": "dbd02c7a-92b2-4c7e-85b9-b59dbe7b2ef9",
          "name": "credentials_verify"
        },
        "response": {
          "id": "ff5c42c2-48ec-43ed-a21a-33c4199514f8",
          "status": "OK",
          "code": 200,
          "responseTime": 590,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "828088ee-3ee3-491b-8d76-c58c76c1db37",
        "cursor": {
          "ref": "4e4541f4-c20b-4079-b39f-9ab9bb2cf8b6",
          "length": 252,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "3f51c442-b6b9-4ca8-941c-929e9ced0593"
        },
        "item": {
          "id": "828088ee-3ee3-491b-8d76-c58c76c1db37",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "f158a24d-e366-4a1c-b256-9e13f40d28c7",
          "status": "OK",
          "code": 200,
          "responseTime": 395,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "0979f0ef-6999-48ad-bdaa-b886692d6840",
        "cursor": {
          "ref": "99668a99-b8c8-4bde-a9de-3201cfc23849",
          "length": 252,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "650f0185-4aaf-477c-92ab-8347ed4a6dcd"
        },
        "item": {
          "id": "0979f0ef-6999-48ad-bdaa-b886692d6840",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "d2f9188c-1db4-4f31-b214-dd4b20a07e79",
          "status": "OK",
          "code": 200,
          "responseTime": 406,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ed0cf9e-ee8a-46f3-8890-9e17e7ea8cda",
        "cursor": {
          "ref": "70c944e5-a702-40d4-af88-2b480d68cde0",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "dba87228-3fe6-48f6-8d1f-9328a250d391"
        },
        "item": {
          "id": "8ed0cf9e-ee8a-46f3-8890-9e17e7ea8cda",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b388aab0-9bae-4c75-8440-537104b3b9a3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ed0cf9e-ee8a-46f3-8890-9e17e7ea8cda",
        "cursor": {
          "ref": "70c944e5-a702-40d4-af88-2b480d68cde0",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "dba87228-3fe6-48f6-8d1f-9328a250d391"
        },
        "item": {
          "id": "8ed0cf9e-ee8a-46f3-8890-9e17e7ea8cda",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b388aab0-9bae-4c75-8440-537104b3b9a3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ed0cf9e-ee8a-46f3-8890-9e17e7ea8cda",
        "cursor": {
          "ref": "70c944e5-a702-40d4-af88-2b480d68cde0",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "dba87228-3fe6-48f6-8d1f-9328a250d391"
        },
        "item": {
          "id": "8ed0cf9e-ee8a-46f3-8890-9e17e7ea8cda",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b388aab0-9bae-4c75-8440-537104b3b9a3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9ed90a9-db05-4c47-81c5-7d1c32baae90",
        "cursor": {
          "ref": "0d637b23-d904-4a96-ac24-d661e12dc084",
          "length": 252,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "c9da0854-2737-4f32-8d82-8e7751fdec0b"
        },
        "item": {
          "id": "e9ed90a9-db05-4c47-81c5-7d1c32baae90",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "25a3cb17-0b95-4921-9e35-173614abba4c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 80,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac05a80a-aa6c-4591-a4ef-7b8594f966b8",
        "cursor": {
          "ref": "9dd90e04-6c6f-4ac1-836a-b4696e43b811",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "e34bd592-1132-4743-9ed6-548d542ef50a"
        },
        "item": {
          "id": "ac05a80a-aa6c-4591-a4ef-7b8594f966b8",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "53ac9699-467f-405f-9806-9e41b24a5cdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "ac05a80a-aa6c-4591-a4ef-7b8594f966b8",
        "cursor": {
          "ref": "9dd90e04-6c6f-4ac1-836a-b4696e43b811",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "e34bd592-1132-4743-9ed6-548d542ef50a"
        },
        "item": {
          "id": "ac05a80a-aa6c-4591-a4ef-7b8594f966b8",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "53ac9699-467f-405f-9806-9e41b24a5cdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "8d986878-4c96-4d3f-877a-3e441b63f28c",
        "cursor": {
          "ref": "199e9f41-ecfa-4301-b00c-82f4bfbb3fb1",
          "length": 252,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "6f41978c-8d91-49a0-b450-cc3c6d3d606b"
        },
        "item": {
          "id": "8d986878-4c96-4d3f-877a-3e441b63f28c",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "9390a34d-1caf-45fe-aa61-2e828218864e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "874440c1-3e60-4944-b8cc-41102f010d66",
        "cursor": {
          "ref": "d67c3ef0-5e7a-4eb3-8c76-3e784cbbdf7e",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "ca0f15af-8a15-46eb-9efe-4ba65521c230"
        },
        "item": {
          "id": "874440c1-3e60-4944-b8cc-41102f010d66",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "36c522ae-7773-475a-80af-92a2aa5ef42b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "874440c1-3e60-4944-b8cc-41102f010d66",
        "cursor": {
          "ref": "d67c3ef0-5e7a-4eb3-8c76-3e784cbbdf7e",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "ca0f15af-8a15-46eb-9efe-4ba65521c230"
        },
        "item": {
          "id": "874440c1-3e60-4944-b8cc-41102f010d66",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "36c522ae-7773-475a-80af-92a2aa5ef42b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "ccfa4b3b-3d10-4494-a435-3f1c6034b867",
        "cursor": {
          "ref": "d47562fe-47b8-4e4d-b959-6b62f06cfe15",
          "length": 252,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "949bddbd-af0c-4807-ae66-0a4fa8602485"
        },
        "item": {
          "id": "ccfa4b3b-3d10-4494-a435-3f1c6034b867",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "16b95049-942c-4f45-bec5-7b621313b6eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      }
    ]
  }
}